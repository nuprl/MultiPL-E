language: jl
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 then return true\n    else if n==1 then return true\n    else if n==2 then\
    \ return true\n    else if n==3 then return true\n    else if n==4 then return\
    \ true\n    else if n==5 then return true\n    else if n==6 then return true\n\
    \    else if n==7 then return true\n    else if n==8 then return true\n    else\
    \ if n==9 then return true\n    else if n==10 then return true\n    else if n==11\
    \ then return true\n    else if n==12 then return true\n    else if n==13 then\
    \ return true\n    else if n==14 then return true\n    else if n==15 then return\
    \ true\n    else if n==16 then return true\n    else if n==17 then return true\n\
    \    else if n==18 then return true\n    else if n==19 then return true\n    else\
    \ if n==20 then return true\n    else if n==21 then return true\n    else if n==22\
    \ then return true\n    else if n==23 then return true\n    else if n==24 then\
    \ return true\n    else if n==25 then return true\n    else if n==26 then return\
    \ true\n    else if n==27 then return true\n    else if n==28 then return true\n\
    \    else if n==29 then return true\n    else if n==30 then return true\n    else\
    \ if n==31 then return true\n    else if n==32 then return true\n    else if n==33\
    \ then return true\n    else if n==34 then return true\n    else if n==35 then\
    \ return true\n    else if n==36 then return true\n    else if n==37 then return\
    \ true\n    else if n==38 then return true\n    else if n==39 then return true\n\
    \    else if n==40 then return true\n    else if n==41 then return true\n    else\
    \ if n==42 then return true\n    else if n==43 then return true\n    else if n==44\
    \ then return true\n    else if n==45 then return true\n    else if n==46 then\
    \ return true\n    else if n==47 then return true\n    else if n==48 then return\
    \ true\n    else if n==49 then return true\n    else if n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0qkrfw22.jl:11\nin expression starting at /tmp/tmp0qkrfw22.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lgxcesz.jl:16\nin expression starting at\
    \ /tmp/tmp7lgxcesz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true \n    else return false\
    \ \n    end\nend\n\"\"\"Evaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzpgzrt2c.jl:12\nin expression starting at /tmp/tmpzpgzrt2c.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 then return true\n    if n==1 then return true\n    if n==2 then return\
    \ true\n    if n==3 then return true\n    if n==4 then return true\n    if n==5\
    \ then return true\n    if n==6 then return true\n    if n==7 then return true\n\
    \    if n==8 then return true\n    if n==9 then return true\n    if n==10 then\
    \ return true\n    if n==11 then return true\n    if n==12 then return true\n\
    \    if n==13 then return true\n    if n==14 then return true\n    if n==15 then\
    \ return true\n    if n==16 then return true\n    if n==17 then return true\n\
    \    if n==18 then return true\n    if n==19 then return true\n    if n==20 then\
    \ return true\n    if n==21 then return true\n    if n==22 then return true\n\
    \    if n==23 then return true\n    if n==24 then return true\n    if n==25 then\
    \ return true\n    if n==26 then return true\n    if n==27 then return true\n\
    \    if n==28 then return true\n    if n==29 then return true\n    if n==30 then\
    \ return true\n    if n==31 then return true\n    if n==32 then return true\n\
    \    if n==33 then return true\n    if n==34 then return true\n    if n==35 then\
    \ return true\n    if n==36 then return true\n    if n==37 then return true\n\
    \    if n==38 then return true\n    if n==39 then return true\n    if n==40 then\
    \ return true\n    if n==41 then return true\n    if n==42 then return true\n\
    \    if n==43 then return true\n    if n==44 then return true\n    if n==45 then\
    \ return true\n    if n==46 then return true\n    if n==47 then return true\n\
    \    if n==48 then return true\n    if n==49 then return true\n    if n==50 then\
    \ return true\n    if n==51 then return true\n    if n==52 then return true\n\
    \    if n==53 then return true\n    if n==54 then return true\n    if n==55 then\
    \ return true\n    if n==56 then return true\n    if n==57 then return true\n\
    \    if n==58 then return true\n    if n==59 then return true\n    if n==60 then\
    \ return true\n    if n==61 \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz6r480lc.jl:11\nin expression starting at /tmp/tmpz6r480lc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 then return true\n    if n==1 then return true\n    if n==2 then return\
    \ true\n    if n==3 then return true\n    if n==4 then return true\n    if n==5\
    \ then return true\n    if n==6 then return true\n    if n==7 then return true\n\
    \    if n==8 then return true\n    if n==9 then return true\n    if n==10 then\
    \ return true\n    if n==11 then return true\n    if n==12 then return true\n\
    \    if n==13 then return true\n    if n==14 then return true\n    if n==15 then\
    \ return true\n    if n==16 then return true\n    if n==17 then return true\n\
    \    if n==18 then return true\n    if n==19 then return true\n    if n==20 then\
    \ return true\n    if n==21 then return true\n    if n==22 then return true\n\
    \    if n==23 then return true\n    if n==24 then return true\n    if n==25 then\
    \ return true\n    if n==26 then return true\n    if n==27 then return true\n\
    \    if n==28 then return true\n    if n==29 then return true\n    if n==30 then\
    \ return true\n    if n==31 then return true\n    if n==32 then return true\n\
    \    if n==33 then return true\n    if n==34 then return true\n    if n==35 then\
    \ return true\n    if n==36 then return true\n    if n==37 then return true\n\
    \    if n==38 then return true\n    if n==39 then return true\n    if n==40 then\
    \ return true\n    if n==41 then return true\n    if n==42 then return true\n\
    \    if n==43 then return true\n    if n==44 then return true\n    if n==45 then\
    \ return true\n    if n==46 then return true\n    if n==47 then return true\n\
    \    if n==48 then return true\n    if n==49 then return true\n    if n==50 then\
    \ return true\n    if n==51 then return true\n    if n==52 then return true\n\
    \    if n==53 then return true\n    if n==54 then return true\n    if n==55 then\
    \ return true\n    if n==56 then return true\n    if n==57 then return true\n\
    \    if n==58 then return true\n    if n==59 then return true\n    if n==60 then\
    \ return true\n    if n==61 \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz6r480lc.jl:11\nin expression starting at /tmp/tmpz6r480lc.jl:11\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmphvr1gbkl.jl:21\n  Test threw
    exception\n  Expression: candidate(4) == false\n  UndefVarError: is_equal_to_sum_even_helper
    not defined\n  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @ Main
    /tmp/tmphvr1gbkl.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvr1gbkl.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvr1gbkl.jl:20\ntest set: Error
    During Test at /tmp/tmphvr1gbkl.jl:22\n  Test threw exception\n  Expression: candidate(6)
    == false\n  UndefVarError: is_equal_to_sum_even_helper not defined\n  Stacktrace:\n   [1]
    is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmphvr1gbkl.jl:11\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvr1gbkl.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvr1gbkl.jl:20\ntest set: Error
    During Test at /tmp/tmphvr1gbkl.jl:23\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_equal_to_sum_even_helper not defined\n  Stacktrace:\n   [1]
    is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmphvr1gbkl.jl:11\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvr1gbkl.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvr1gbkl.jl:20\ntest set: Error
    During Test at /tmp/tmphvr1gbkl.jl:24\n  Test threw exception\n  Expression: candidate(10)
    == true\n  UndefVarError: is_equal_to_sum_even_helper not defined\n  Stacktrace:\n   [1]
    is_equ'
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n <= 0 \n        then return false\n    else if n % 2 == 0\n        then return\
    \ true\n    else if n % 4 == 0\n        then return true\n    else if n % 8 ==\
    \ 0\n        then return true\n    else if n % 16 == 0\n        then return true\n\
    \    else if n % 32 == 0\n        then return true\n    else if n % 64 == 0\n\
    \        then return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11) ==\
    \ false\n@assert is_equal_to_sum_even(12) == true\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == true\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == true\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == true\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == true\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == true\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == true\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == true\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == true\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == true\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == true\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == true\n@assert is_equal_to_sum_\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1wdl25x6.jl:12\nin expression starting at /tmp/tmp1wdl25x6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n        return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(10) == false\n@assert\
    \ is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12) == true\n\
    @assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14) ==\
    \ true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(16)\
    \ == true\n@assert is_equal_to_sum_even(17) == true\n@assert is_equal_to_sum_even(18)\
    \ == true\n@assert is_equal_to_sum_even(19) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(21) == true\n@assert is_equal_to_sum_even(22)\
    \ == true\n@assert is_equal_to_sum_even(23) == true\n@assert is_equal_to_sum_even(24)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(26)\
    \ == true\n@assert is_equal_to_sum_even(27) == true\n@assert is_equal_to_sum_even(28)\
    \ == true\n@assert is_equal_to_sum_even(29) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(31) == true\n@assert is_equal_to_sum_even(32)\
    \ == true\n@assert is_equal_to_sum_even(33) == true\n@assert is_equal_to_sum_even(34)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(36)\
    \ == true\n@assert is_equal_to_sum_even(37) == true\n@assert is_equal_to_sum_even(38)\
    \ == true\n@assert is_equal_to_sum_even(39) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(41) == true\n@assert is_equal_to_sum_even(42)\
    \ == true\n@assert is_equal_to_sum_even(43) == true\n@assert is_equal_to_sum_even(44)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(46)\
    \ == true\n@assert is_equal_to_sum_even(47) == true\n@assert is_equal_to_sum_even(48)\
    \ == true\n@assert is_equal_to_sum_even(49) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_equal_to_sum_even(51) == true\n@assert is_equal_to_sum_even(52)\
    \ == true\n@assert is_equal_to_sum_even(53) == true\n@assert \nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj53ho6a.jl:15\nin expression starting at\
    \ /tmp/tmpqj53ho6a.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ui0h31d.jl:14\nin expression starting at\
    \ /tmp/tmp_ui0h31d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(2) == false\n@assert is_equal_to_sum_even(6) == false\n\
    @assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that checks whether a given number n is equal to the sum of exactly\
    \ 4 positive odd numbers.\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprk83zfte.jl:14\nin expression starting at\
    \ /tmp/tmprk83zfte.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(10)\
    \ == false\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\n@assert is_equal_to_sum_even(52)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7y2pt509.jl:15\nin expression starting at\
    \ /tmp/tmp7y2pt509.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\n\"\
    \"\"Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjyhyvfe1.jl:16\nin expression starting at /tmp/tmpjyhyvfe1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(8)\n</cell>\n\
    <text>\nExercise 2\nWrite a function is_equal_to_sum_odd(n) that returns true\
    \ if the given number n can be written as the sum of exactly 4 positive odd numbers\n\
    Example\n>>> is_equal_to_sum_odd(4)\nfalse\n>>> is_equal_to_sum_odd(6)\nfalse\n\
    >>> is_equal_to_sum_odd(8)\ntrue\n</text>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6ezwtju.jl:17\nin expression starting at\
    \ /tmp/tmpq6ezwtju.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(12) ==\
    \ true\n@assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14)\
    \ == true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(16)\
    \ == true\n@assert is_equal_to_sum_even(17) == true\n@assert is_equal_to_sum_even(18)\
    \ == true\n@assert is_equal_to_sum_even(19) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(21) == true\n@assert is_equal_to_sum_even(22)\
    \ == true\n@assert is_equal_to_sum_even(23) == true\n@assert is_equal_to_sum_even(24)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(26)\
    \ == true\n@assert is_equal_to_sum_even(27) == true\n@assert is_equal_to_sum_even(28)\
    \ == true\n@assert is_equal_to_sum_even(29) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(31) == true\n@assert is_equal_to_sum_even(32)\
    \ == true\n@assert is_equal_to_sum_even(33) == true\n@assert is_equal_to_sum_even(34)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(36)\
    \ == true\n@assert is_equal_to_sum_even(37) == true\n@assert is_equal_to_sum_even(38)\
    \ == true\n@assert is_equal_to_sum_even(39) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(41) == true\n@assert is_equal_to_sum_even(42)\
    \ == true\n@assert is_equal_to_sum_even(43) == true\n@assert is_equal_to_sum_even(44)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(46)\
    \ == true\n@assert is_equal_to_sum_even(47) == true\n@assert is_equal_to_sum_even(48)\
    \ == true\n@assert is_equal_to_sum_even(49) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_equal_to_sum_even(51) == true\n@assert is_equal_to_sum_even(52)\
    \ == true\n@assert is_equal_to_sum_even(53) == true\n@assert is_equal_to_sum_even(54)\
    \ == true\n@assert is_equal_to_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5vllfm6.jl:14\nin expression starting at\
    \ /tmp/tmpo5vllfm6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else if n % 2 == 0\n    \
    \    error(\"n must be even\")\n    else if n < 4\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_85w1or6.jl:13\nin expression starting at\
    \ /tmp/tmp_85w1or6.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(11)\
    \ == false\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == false\n@assert is_equal_to_sum_even(14) == true\n@assert is_equal_to_sum_even(15)\
    \ == false\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == false\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == false\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == false\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == false\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == false\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == false\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == false\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == false\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == false\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == false\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == false\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == false\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == false\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == false\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == false\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == false\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == false\n@assert is_equal_to_sum_even(50) == false\n@assert is_equal_to_sum_even(51)\
    \ == false\n@assert is_equal_to_sum_even(52) == false\n@assert is_equal_to_sum_even(53)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwg6_4ay.jl:15\nin expression starting at\
    \ /tmp/tmppwg6_4ay.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0\n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1) || is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ctzjiuy.jl:16\nin expression starting at\
    \ /tmp/tmp6ctzjiuy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1)\n    else \n        true\nend\n</cell>\n<code language=julia-1.4>\n\
    is_equal_to_sum_even(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number n is equal to the sum of exactly 4 positive odd numbers\n\
    Example\n>>> is_equal_to_sum_odd(4)\ntrue\n>>> is_equal_to_sum_odd(6)\nfalse\n\
    >>> is_equal_to_sum_odd(8)\ntrue\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7h9_cb4e.jl:15\nin expression starting at\
    \ /tmp/tmp7h9_cb4e.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else if n % 2 == 0 \n        return false\n\
    \    else if n % 3 == 0 \n        return false\n    else if n % 5 == 0 \n    \
    \    return false\n    else \n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11) ==\
    \ false\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == true\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == true\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == true\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == true\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == true\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == true\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == true\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == true\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == true\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == true\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == true\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == true\n@assert is_equal_to_sum_even(49)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9h4mphs.jl:13\nin expression starting at\
    \ /tmp/tmpf9h4mphs.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true \n    else return false\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwevk1fgt.jl:12\nin expression starting at /tmp/tmpwevk1fgt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\n\"\"\"\n    Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy5yyvl3q.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy5yyvl3q.jl:1\n\
    in expression starting at /tmp/tmpy5yyvl3q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 then return true\n    else if n==1 then return false\n    else if n==2\
    \ then return true\n    else if n==3 then return true\n    else if n==4 then return\
    \ true\n    else if n==5 then return true\n    else if n==6 then return true\n\
    \    else if n==7 then return true\n    else if n==8 then return true\n    else\
    \ if n==9 then return true\n    else if n==10 then return true\n    else if n==11\
    \ then return true\n    else if n==12 then return true\n    else if n==13 then\
    \ return true\n    else if n==14 then return true\n    else if n==15 then return\
    \ true\n    else if n==16 then return true\n    else if n==17 then return true\n\
    \    else if n==18 then return true\n    else if n==19 then return true\n    else\
    \ if n==20 then return true\n    else if n==21 then return true\n    else if n==22\
    \ then return true\n    else if n==23 then return true\n    else if n==24 then\
    \ return true\n    else if n==25 then return true\n    else if n==26 then return\
    \ true\n    else if n==27 then return true\n    else if n==28 then return true\n\
    \    else if n==29 then return true\n    else if n==30 then return true\n    else\
    \ if n==31 then return true\n    else if n==32 then return true\n    else if n==33\
    \ then return true\n    else if n==34 then return true\n    else if n==35 then\
    \ return true\n    else if n==36 then return true\n    else if n==37 then return\
    \ true\n    else if n==38 then return true\n    else if n==39 then return true\n\
    \    else if n==40 then return true\n    else if n==41 then return true\n    else\
    \ if n==42 then return true\n    else if n==43 then return true\n    else if n==44\
    \ then return true\n    else if n==45 then return true\n    else if n==46 then\
    \ return true\n    else if n==47 then return true\n    else if n==48 then return\
    \ true\n    else if n==49 then return true\n    else if n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxvirqy24.jl:11\nin expression starting at /tmp/tmpxvirqy24.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_equal_to_sum_even(5)\
    \ == false\n@assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_sum_even(55)\
    \ == true\n@assert is_equal_to_sum_even(60) == true\n@assert is_equal_to_sum_even(65)\
    \ == true\n@assert is_equal_to_sum_even(70) == true\n@assert is_equal_to_sum_even(75)\
    \ == true\n@assert is_equal_to_sum_even(80) == true\n@assert is_equal_to_sum_even(85)\
    \ == true\n@assert is_equal_to_sum_even(90) == true\n@assert is_equal_to_sum_even(95)\
    \ == true\n@assert is_equal_to_sum_even(100) == true\n@assert is_equal_to_sum_even(101)\
    \ == true\n@assert is_equal_to_sum_even(102) == true\n@assert is_equal_to_sum_even(103)\
    \ == true\n@assert is_equal_to_sum_even(104) == true\n@assert is_equal_to_sum_even(105)\
    \ == true\n@assert is_equal_to_sum_even(106) == true\n@assert is_equal_to_sum_even(107)\
    \ == true\n@assert is_equal_to_sum_even(108) == true\n@assert is_equal_to_sum_even(109)\
    \ == true\n@assert is_equal_to_sum_even(110) == true\n@assert is_equal_to_sum_even(111)\
    \ == true\n@assert is_equal_to_sum_even(112) == true\n@assert is_equal_to_sum_even(113)\
    \ == true\n@assert is_equal_to_sum_even(114) == true\n@assert is_equal_to_sum_even(115)\
    \ == true\n@assert is_equal_to_sum_even(116) == true\n@assert is_equal_to_sum_even(117)\
    \ == true\n@assert is_equal_to_sum_even(118) == true\n@assert is_equal_to_sum_even(119)\
    \ == true\n@assert is_equal_to_sum_even(120) == true\n@assert is_equal_to_sum_even(121)\
    \ == true\n@assert is_equal_to_sum_even(122) == true\n@assert is_equal_to_sum_even(123)\
    \ == true\n@assert is_equal_to_sum_even(124\nusing Test\n\n@testset begin\n\n\
    candidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8ngi7sq.jl:17\nin expression starting at\
    \ /tmp/tmpg8ngi7sq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lgxcesz.jl:16\nin expression starting at\
    \ /tmp/tmp7lgxcesz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n        true\n    else\n        if n%2==0\n            if n%3==0\n   \
    \             if n%4==0\n                    true\n                else\n    \
    \                false\n            else\n                false\n        else\n\
    \            if n%3==0\n                if n%4==0\n                    true\n\
    \                else\n                    false\n            else\n         \
    \       false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(2) == false\n@assert is_equal_to_sum_even(3) == false\n\
    @assert is_equal_to_sum_even(5) == true\n@assert is_equal_to_sum_even(7) == true\n\
    @assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(15) ==\
    \ true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_sum_even(55)\
    \ == true\n@assert is_equal_to_sum_even(60) == true\n@assert is_equal_to_sum_even(65)\
    \ == true\n@assert is_equal_to_sum_even(70) == true\n@assert is_equal_to_sum_even(75)\
    \ == true\n@assert is_equal_to_sum_even(80) == true\n@assert is_equal_to_sum_even(85)\
    \ == true\n@assert is_equal_to_sum_even(90) == true\n@assert is_equal_to_sum_even(95)\
    \ == true\n@assert is_equal_to_sum_even(100) == true\n@assert is_equal_to_sum_even(101)\
    \ == true\n@assert is_equal_to_sum_even(102) == true\n@assert is_equal_to_sum_even(103)\
    \ == true\n@assert is_equal_to_sum_even(104) == true\n@assert is_equal_to_sum_even(105)\
    \ == true\n@assert is_equal_to_sum_even(106) == true\n@assert is_equal_to_sum_even(107)\
    \ == true\n@assert is_equal_to_sum_even(108) == true\n@assert is_equal_to_sum_even(109)\
    \ == true\n@assert is_equal_to_sum_even(110) == true\n@assert is_equal_to_sum_even(111)\
    \ == true\n@assert is_equal_to_sum_even(112) == true\n@assert is_equal_to_sum_even(113)\
    \ == true\n@assert is_equal_to_sum_even(114) == true\n@assert is_equal_to_sum_even(115)\
    \ == true\n@assert \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp18t0tb82.jl:16 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18t0tb82.jl:20\n\
    in expression starting at /tmp/tmp18t0tb82.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.3>\n@time is_equal_to_sum_even(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number n is divisible\
    \ by 4 and false otherwise. \nExample\n>>> is_divisible_by_4(4)\ntrue\n>>> is_divisible_by_4(5)\n\
    false\n>>> is_divisible_by_4(6)\nfalse\n>>> is_divisible_by_4(7)\nfalse\n>>> is_divisible_by_4(8)\n\
    false\n>>> is_divisible_by_4(9)\nfalse\n>>> is_divisible_by_4(10)\nfalse\n>>>\
    \ is_divisible_by_4(11)\nfalse\n>>> is_divisible_by_4(12)\nfalse\n>>> is_divisible_by_4(13)\n\
    false\n>>> is_divisible_by_4(14)\nfalse\n>>> is_divisible_by_4(15)\nfalse\n>>>\
    \ is_divisible_by_4(16)\nfalse\n>>> is_divisible_by_4(17)\nfalse\n>>> is_divisible_by_4(18)\n\
    false\n>>> is_divisible_by_4(19)\nfalse\n>>> is_divisible_by_4(20)\nfalse\n>>>\
    \ is_divisible_by_4(21)\nfalse\n>>> is_divisible_by_4(22)\nfalse\n>>> is_divisible_by_4(23)\n\
    false\n>>> is_divisible_by_4(24)\nfalse\n>>> is_divisible_by_4(25)\nfalse\n>>>\
    \ is_divisible_by_4(26)\nfalse\n>>> is_divisible_by_4(27)\nfalse\n>>> is_divisible_by_4(28)\n\
    false\n>>> is_divisible_by_4(29)\nfalse\n>>> is_divisible_by_4(30)\nfalse\n>>>\
    \ is_divisible_by_4(31)\nfalse\n>>> is_divisible_by_4(32)\nfalse\n>>> is_divisible_by_4(33)\n\
    false\n>>> is_divisible_by_4(34)\nfalse\n>>> is_divisible_by_4(35)\nfalse\n>>>\
    \ is_divisible_by_4(36)\nfalse\n>>> is_divisible_by_4(37)\nfalse\n>>> is_divisible_by_4(38)\n\
    false\n>>> is_divisible_by_4(39)\nfalse\n>>> is_divisible_by_4(40)\nfalse\n>>>\
    \ is_divisible_by_4(41)\nfalse\n>>> is_divisible_by_4(42)\nfalse\n>>> is_divisible_by_4(43)\n\
    false\n>>> is_divisible_by_4(44)\nfalse\n>>> is_divisible_by_4(45)\nfalse\n>>>\
    \ is_divisible_by_4(46\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d_0zaz5.jl:15\nin expression starting at\
    \ /tmp/tmp1d_0zaz5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpc13fkw.jl:15\nin expression starting at\
    \ /tmp/tmpqpc13fkw.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwp5xai88.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwp5xai88.jl:1\n\
    in expression starting at /tmp/tmpwp5xai88.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that checks\
    \ whether a given number n is equal to the sum of exactly 4 positive odd numbers\n\
    Example\n>>> is_equal_to_sum_odd(4)\nfalse\n>>> is_equal_to_sum_odd(6)\ntrue\n\
    >>> is_equal_to_sum_odd(8)\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedck0b2a.jl:17\nin expression starting at\
    \ /tmp/tmpedck0b2a.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4\n        return true\n    else if n%2==0\n        return false\n    else\
    \ if n%3==0\n        return false\n    else if n%4==0\n        return false\n\
    \    else if n%5==0\n        return false\n    else if n%6==0\n        return\
    \ false\n    else if n%7==0\n        return false\n    else if n%8==0\n      \
    \  return false\n    else if n%9==0\n        return false\n    else if n%10==0\n\
    \        return false\n    else if n%11==0\n        return false\n    else if\
    \ n%12==0\n        return false\n    else if n%13==0\n        return false\n \
    \   else if n%14==0\n        return false\n    else if n%15==0\n        return\
    \ false\n    else if n%16==0\n        return false\n    else if n%17==0\n    \
    \    return false\n    else if n%18==0\n        return false\n    else if n%19==0\n\
    \        return false\n    else if n%20==0\n        return false\n    else if\
    \ n%21==0\n        return false\n    else if n%22==0\n        return false\n \
    \   else if n%23==0\n        return false\n    else if n%24==0\n        return\
    \ false\n    else if n%25==0\n        return false\n    else if n%26==0\n    \
    \    return false\n    else if n%27==0\n        return false\n    else if n%28==0\n\
    \        return false\n    else if n%29==0\n        return false\n    else if\
    \ n%30==0\n        return false\n    else if n%31==0\n        return false\n \
    \   else if n%32==0\n        return false\n    else if n%33==0\n        return\
    \ false\n    else if n%34==0\n        return false\n    else if n%35==0\n    \
    \    return false\n    else if n%36==0\n        return false\n    else if n%37==0\n\
    \        return false\n    else if n%38==0\n        return false\n    else if\
    \ n%39==0\n        return false\n    else if n%40==0\n        return false\n \
    \   else if n%41==0\n        return false\n    else if n%42==0\n        return\
    \ false\n    else if n%43==0\n        return false\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpllr8_659.jl:13\nin expression starting at\
    \ /tmp/tmpllr8_659.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4\n        return false\n    else if n%2==0\n        return true\n    else\
    \ if n%3==0\n        return true\n    else if n%5==0\n        return true\n  \
    \  else if n%7==0\n        return true\n    else\n        return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Evaluate whether the given number n\
    \ can be written as the sum of exactly 4 positive odd numbers\n    Example\n \
    \   >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n  \
    \  false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa4_kgsn.jl:13\nin expression starting at\
    \ /tmp/tmpwa4_kgsn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgy284yqs.jl:14\nin expression starting at\
    \ /tmp/tmpgy284yqs.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w38pee8.jl:15\nin expression starting at\
    \ /tmp/tmp2w38pee8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true \n    else return false\
    \ \nend \nend \n</cell>\n<text>\nExercise 4\nWrite a function that returns true\
    \ if the given number n is a power of two. Hint: use the bitwise operator &.\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq64ry1md.jl:12\nin expression starting at /tmp/tmpq64ry1md.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else if n % 2 == 0 \n        return true\n\
    \    else \n        return is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(10) ==\
    \ true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_equal_to_sum_even(55) == true\n@assert is_equal_to_sum_even(60)\
    \ == true\n@assert is_equal_to_sum_even(65) == true\n@assert is_equal_to_sum_even(70)\
    \ == true\n@assert is_equal_to_sum_even(75) == true\n@assert is_equal_to_sum_even(80)\
    \ == true\n@assert is_equal_to_sum_even(85) == true\n@assert is_equal_to_sum_even(90)\
    \ == true\n@assert is_equal_to_sum_even(95) == true\n@assert is_equal_to_sum_even(100)\
    \ == true\n@assert is_equal_to_sum_even(101) == true\n@assert is_equal_to_sum_even(102)\
    \ == true\n@assert is_equal_to_sum_even(103) == true\n@assert is_equal_to_sum_even(104)\
    \ == true\n@assert is_equal_to_sum_even(105) == true\n@assert is_equal_to_sum_even(106)\
    \ == true\n@assert is_equal_to_sum_even(107) == true\n@assert is_equal_to_sum_even(108)\
    \ == true\n@assert is_equal_to_sum_even(109) == true\n@assert is_equal_to_sum_even(110)\
    \ == true\n@assert is_equal_to_sum_even(111) == true\n@assert is_equal_to_sum_even(112)\
    \ == true\n@assert is_equal_to_sum_even(113) == true\n@assert is_equal_to_sum_even(114)\
    \ == true\n@assert is_equal_to_sum_even(115) == true\n@assert is_equal_to_sum_even(116)\
    \ == true\n@assert is_equal_to_sum_even(117) == true\n@assert is_equal_to_sum_even(118)\
    \ == true\n@assert is_equal_to_sum_even(119) == true\n@assert is_equal_to_sum_even(120)\
    \ == true\n@assert is_equal_to_sum_even(121) == true\n@assert is_equal_to_sum_even(122)\
    \ == true\n@assert is_equal_to_sum_even(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7eobcvkl.jl:13\nin expression starting at\
    \ /tmp/tmp7eobcvkl.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 \n    then return true\n    else if n==1 \n    then return true\n    else\
    \ if n==2 \n    then return true\n    else if n==3 \n    then return true\n  \
    \  else if n==4 \n    then return true\n    else if n==5 \n    then return true\n\
    \    else if n==6 \n    then return true\n    else if n==7 \n    then return true\n\
    \    else if n==8 \n    then return true\n    else if n==9 \n    then return true\n\
    \    else return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Evaluate whether the given number n can be written as the sum of exactly 4 positive\
    \ odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>>\
    \ is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n    true\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy3695l00.jl:12\nin expression starting at /tmp/tmpy3695l00.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true\n    else \n        return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks whether a given number n is equal\
    \ to the sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\nfalse\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ca8tdia.jl:15\nin expression starting at\
    \ /tmp/tmp1ca8tdia.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 || n == 1 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1) || is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11) ==\
    \ true\n</cell>\n<text>\nExercise 2\nWrite a function that checks whether a given\
    \ number n is prime. \nThe function should return true if the number is prime\
    \ and false otherwise.\nThe function should work for any positive integer $n$.\
    \ \nThe function should work for any positive integer $n$. \nThe function should\
    \ work for any positive integer $n$. \nThe function should work for any positive\
    \ integer $n$. \nThe function should work for any positive integer $n$. \nThe\
    \ function should work for any positive integer $n$. \nThe function should work\
    \ for any positive integer $n$. \nThe function should work for any positive integer\
    \ $n$. \nThe function should work for any positive integer $n$. \nThe function\
    \ should work for any positive integer $n$. \nThe function should work for any\
    \ positive integer $n$. \nThe function should work for any positive integer $n$.\
    \ \nThe function should work for any positive integer $n$. \nThe function should\
    \ work for any positive integer $n$. \nThe function should work for any positive\
    \ integer $n$. \nThe function should work for any positive integer $n$. \nThe\
    \ function should work for any positive integer $n$. \nThe function should work\
    \ for any positive integer $n$. \nThe function should work for any positive integer\
    \ $n$. \nThe function should work for any positive integer $n$. \nThe function\
    \ should work for any positive integer $n$. \nThe function should work for any\
    \ positive integer $n$. \nThe function should work for any positive integer $n$.\
    \ \nThe function should work for any positive integer $n$. \nThe function should\
    \ work for any positive integer $n$. \nThe function should work for any positive\
    \ integer $n$. \nThe function should work for any positive integer $n$. \nThe\
    \ function should work for any positive integer $n$. \nThe function should work\
    \ for any positive integer $n$. \nThe function should work for any positive integer\
    \ $n$. \nThe function should work for any positive integer $n$. \nThe function\
    \ should work for any positive integer $n$. \nThe function should work for any\
    \ positive integer $n$. \nThe function should work for any positive integer $n$.\
    \ \nThe function should work for any \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ypc_h1j.jl:16\nin expression starting at\
    \ /tmp/tmp6ypc_h1j.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4\n    then return false\n    else if n % 2 == 0\n    then return true\n\
    \    else if n % 3 == 0\n    then return true\n    else if n % 5 == 0\n    then\
    \ return true\n    else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7) == false\n\
    @assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(15) ==\
    \ true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_sum_even(55)\
    \ == true\n@assert is_equal_to_sum_even(60) == true\n@assert is_equal_to_sum_even(65)\
    \ == true\n@assert is_equal_to_sum_even(70) == true\n@assert is_equal_to_sum_even(75)\
    \ == true\n@assert is_equal_to_sum_even(80) == true\n@assert is_equal_to_sum_even(85)\
    \ == true\n@assert is_equal_to_sum_even(90) == true\n@assert is_equal_to_sum_even(95)\
    \ == true\n@assert is_equal_to_sum_even(100) == true\n@assert is_equal_to_sum_even(101)\
    \ == true\n@assert is_equal_to_sum_even(102) == true\n@assert is_equal_to_sum_even(103)\
    \ == true\n@assert is_equal_to_sum_even(104) == true\n@assert is_equal_to_sum_even(105)\
    \ == true\n@assert is_equal_to_sum_even(106) == true\n@assert is_equal_to_sum_even(107)\
    \ == true\n@assert is_equal_to_sum_even(108) == true\n@assert is_equal_to_sum_even(109)\
    \ == true\n@assert is_equal_to_sum_even(110) == true\n@assert is_equal_to_sum_even(111)\
    \ == true\n@assert is_equal_to_sum_even(112) == true\n@assert is_equal_to_sum_even(113)\
    \ == true\n@assert is_equal_to_sum_even(114) == true\n@assert is_equal_to_sum_even(115)\
    \ == true\n@assert is_equal_to_sum_even(116) == true\n@assert is_equal_to_sum_even(117)\
    \ == true\n@assert is_equal_to_sum_even(118) == true\n@assert is_equal_to_sum_even(119)\
    \ == true\n@assert is_equal_to_sum_even(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxpp8mq9r.jl:12\nin expression starting at /tmp/tmpxpp8mq9r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(6) == false\n\
    @assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns true if the given number n is equal to the sum of the absolute\
    \ value of all its digits.\nExample\n>>> is_equal_to_sum_of_digits(1)\ntrue\n\
    >>> is_equal_to_sum_of_digits(2)\nfalse\n>>> is_equal_to_sum_of_digits(3)\ntrue\n\
    >>> is_equal_to_sum_of_digits(4)\ntrue\n>>> is_equal_to_sum_of_digits(5)\ntrue\n\
    >>> is_equal_to_sum_of_digits(6)\nfalse\n>>> is_equal_to_sum_of_digits(7)\ntrue\n\
    >>> is_equal_to_sum_of_digits(8)\ntrue\n>>> is_equal_to_sum_of_digits(9)\ntrue\n\
    >>> is_equal_to_sum_of_digits(10)\ntrue\n>>> is_equal_to_sum_of_digits(11)\ntrue\n\
    >>> is_equal_to_sum_of_digits(12)\ntrue\n>>> is_equal_to_sum_of_digits(13)\ntrue\n\
    >>> is_equal_to_sum_of_digits(14)\ntrue\n>>> is_equal_to_sum_of_digits(15)\ntrue\n\
    >>> is_equal_to_sum_of_digits(16)\ntrue\n>>> is_equal_to_sum_of_digits(17)\ntrue\n\
    >>> is_equal_to_sum_of_digits(18)\ntrue\n>>> is_equal_to_sum_of_digits(19)\ntrue\n\
    >>> is_equal_to_sum_of_digits(20)\ntrue\n>>> is_equal_to_sum_of_digits(21)\ntrue\n\
    >>> is_equal_to_sum_of_digits(22)\ntrue\n>>> is_equal_to_sum_of_digits(23)\ntrue\n\
    >>> is_equal_to_sum_of_digits(24)\ntrue\n>>> is_equal_to_sum_of_digits(25)\ntrue\n\
    >>> is_equal_to_sum_of_digits(26)\ntrue\n>>> is_equal_to_sum_of_digits(27)\ntrue\n\
    >>> is_equal_to_sum_of_digits(28)\ntrue\n>>> is_equal_to_sum_of_digits(29)\ntrue\n\
    >>> is_equal_to_sum_of_digits(30)\ntrue\n>>> is_equal_to_sum_of_digits(31)\ntrue\n\
    >>> is_equal_to_sum_of_digits(32)\ntrue\n>>> is_equal_to_sum_of_digits(33)\ntrue\n\
    >>> is_equal_to_sum_of_digits(34)\ntrue\n>>> is_equal_to_sum_\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3vtx3oi.jl:14\nin expression starting at\
    \ /tmp/tmpm3vtx3oi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(10) == false\n@assert\
    \ is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12) == false\n\
    @assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14) ==\
    \ false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\n@assert is_equal_to_sum_even(52)\
    \ == false\n@assert is_equal_to_sum_even(53) == false\n@assert is_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp960yfglu.jl:16\nin expression starting at\
    \ /tmp/tmp960yfglu.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11)\
    \ == true\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == true\n@assert is_equal_to_sum_even(50) == false\n@assert is_equal_to_sum_even(51)\
    \ == true\n@assert is_equal_to_sum_even(52) == false\n@assert is_equal_to_sum_even(53)\
    \ == true\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53xf6rio.jl:15\nin expression starting at\
    \ /tmp/tmp53xf6rio.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w38pee8.jl:15\nin expression starting at\
    \ /tmp/tmp2w38pee8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n        true\n    else\n        sum=0\n        for i=1:n\n           \
    \ sum=sum+i\n            if sum==4\n                true\n            else\n \
    \               false\n            end\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_equal_to_sum_even(100)\n</cell>\n<text>\nExercise\
    \ 7: Write a function that checks whether a given number n is prime or not\nHint:\
    \ Use a for loop and a prime number checker function\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoc5vgl_w.jl:25\nin expression starting at\
    \ /tmp/tmpoc5vgl_w.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else if n % 2 == 0 \n        is_equal_to_sum_even(n\
    \ - 1)\n    else if n % 2 == 1 \n        is_equal_to_sum_even(n - 2)\n    else\
    \ if n % 2 == 3 \n        is_equal_to_sum_even(n - 3)\n    else if n % 2 == 5\
    \ \n        is_equal_to_sum_even(n - 4)\n    else \n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert is_equal_to_sum_even(0) === true\n\
    @assert is_equal_to_sum_even(2) === true\n@assert is_equal_to_sum_even(3) ===\
    \ true\n@assert is_equal_to_sum_even(5) === true\n@assert is_equal_to_sum_even(7)\
    \ === true\n@assert is_equal_to_sum_even(8) === true\n@assert is_equal_to_sum_even(9)\
    \ === true\n@assert is_equal_to_sum_even(10) === true\n@assert is_equal_to_sum_even(11)\
    \ === true\n@assert is_equal_to_sum_even(12) === true\n@assert is_equal_to_sum_even(13)\
    \ === true\n@assert is_equal_to_sum_even(14) === true\n@assert is_equal_to_sum_even(15)\
    \ === true\n@assert is_equal_to_sum_even(16) === true\n@assert is_equal_to_sum_even(17)\
    \ === true\n@assert is_equal_to_sum_even(18) === true\n@assert is_equal_to_sum_even(19)\
    \ === true\n@assert is_equal_to_sum_even(20) === true\n@assert is_equal_to_sum_even(21)\
    \ === true\n@assert is_equal_to_sum_even(22) === true\n@assert is_equal_to_sum_even(23)\
    \ === true\n@assert is_equal_to_sum_even(24) === true\n@assert is_equal_to_sum_even(25)\
    \ === true\n@assert is_equal_to_sum_even(26) === true\n@assert is_equal_to_sum_even(27)\
    \ === true\n@assert is_equal_to_sum_even(28) === true\n@assert is_equal_to_sum_even(29)\
    \ === true\n@assert is_equal_to_sum_even(30) === true\n@assert is_equal_to_sum_even(31)\
    \ === true\n@assert is_equal_to_sum_even(32) === true\n@assert is_equal_to_sum_even(33)\
    \ === true\n@assert is_equal_to_sum_even(34) === true\n@assert is_equal_to_sum_even(35)\
    \ === true\n@assert is_equal_to_sum_even(36) === true\n@assert is_equal_to_sum_even(37)\
    \ === true\n@assert is_equal_to_sum_even(38) === true\n@assert is_equal_to_sum_even(39)\
    \ === true\n@assert is_equal_to_sum_even(40) === true\n@assert is_equal_to_sum_\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40pjair7.jl:13\nin expression starting at\
    \ /tmp/tmp40pjair7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == 4\n    else \n        false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr72rtvul.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr72rtvul.jl:1\n\
    in expression starting at /tmp/tmpr72rtvul.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7)\
    \ == true\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(10)\
    \ == false\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == true\n@assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14)\
    \ == true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(16)\
    \ == true\n@assert is_equal_to_sum_even(17) == true\n@assert is_equal_to_sum_even(18)\
    \ == true\n@assert is_equal_to_sum_even(19) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(21) == true\n@assert is_equal_to_sum_even(22)\
    \ == true\n@assert is_equal_to_sum_even(23) == true\n@assert is_equal_to_sum_even(24)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(26)\
    \ == true\n@assert is_equal_to_sum_even(27) == true\n@assert is_equal_to_sum_even(28)\
    \ == true\n@assert is_equal_to_sum_even(29) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(31) == true\n@assert is_equal_to_sum_even(32)\
    \ == true\n@assert is_equal_to_sum_even(33) == true\n@assert is_equal_to_sum_even(34)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(36)\
    \ == true\n@assert is_equal_to_sum_even(37) == true\n@assert is_equal_to_sum_even(38)\
    \ == true\n@assert is_equal_to_sum_even(39) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(41) == true\n@assert is_equal_to_sum_even(42)\
    \ == true\n@assert is_equal_to_sum_even(43) == true\n@assert is_equal_to_sum_even(44)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(46)\
    \ == true\n@assert is_equal_to_sum_even(47) == true\n@assert is_equal_to_sum_even(48)\
    \ == true\n@assert is_equal_to_sum_even(49) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpano3eyau.jl:16\nin expression starting at\
    \ /tmp/tmpano3eyau.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true && n % 2 == 0 && n >= 4 && n <= 20 \n    then\
    \ true\n    else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_equal_to_sum_even(2) == true\n@assert is_equal_to_sum_even(6) == false\n\
    @assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns true if the given number n is divisible by 3 or 5, false\
    \ otherwise. \nExample\n>>> is_divisible_by_3_or_5(10)\ntrue\n>>> is_divisible_by_3_or_5(15)\n\
    true\n>>> is_divisible_by_3_or_5(20)\nfalse\n>>> is_divisible_by_3_or_5(25)\n\
    false\n>>> is_divisible_by_3_or_5(30)\nfalse\n>>> is_divisible_by_3_or_5(35)\n\
    true\n>>> is_divisible_by_3_or_5(50)\nfalse\n>>> is_divisible_by_3_or_5(60)\n\
    true\n>>> is_divisible_by_3_or_5(70)\nfalse\n>>> is_divisible_by_3_or_5(80)\n\
    true\n>>> is_divisible_by_3_or_5(90)\nfalse\n>>> is_divisible_by_3_or_5(100)\n\
    true\n>>> is_divisible_by_3_or_5(200)\nfalse\n>>> is_divisible_by_3_or_5(300)\n\
    true\n>>> is_divisible_by_3_or_5(400)\nfalse\n>>> is_divisible_by_3_or_5(500)\n\
    true\n>>> is_divisible_by_3_or_5(600)\nfalse\n>>> is_divisible_by_3_or_5(700)\n\
    true\n>>> is_divisible_by_3_or_5(800)\nfalse\n>>> is_divisible_by_3_or_5(900)\n\
    true\n>>> is_divisible_by_3_or_5(1000)\nfalse\n>>> is_divisible_by_3_or_5(2000)\n\
    true\n>>> is_divisible_by_3_or_5(3000)\nfalse\n>>> is_divisible_by_3_or_5(4000)\n\
    true\n>>> is_divisible_by_3_or_5(5000)\nfalse\n>>> is_divisible_by_3_or_5(6000)\n\
    true\n>>> is_divisible_by_3_or_5(7000)\nfalse\n>>> is_divisible_by_3_or_5(8000)\n\
    true\n>>> is_divisible_by_3_or_5(9000)\nfalse\n>>> is_divisible_by_3_or_5(10000)\n\
    true\n>>> is_divisible_by_3_or_5(20000)\nfalse\n>>> is_divisible_by_3_or_5(30000)\n\
    true\n>>> is_di\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaqcenc68.jl:12\nin expression starting at /tmp/tmpaqcenc68.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(12)\
    \ == true\n@assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\n@assert is_equal_to_sum_even(52)\
    \ == false\n@assert is_equal_to_sum_even(53) == false\n@assert is_equal_to_sum_even(54)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpny9h1q6s.jl:15\nin expression starting at\
    \ /tmp/tmpny9h1q6s.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that returns true if the given\
    \ number n is divisible by 3\nExample\n>>> is_divisible_by_3(4)\nfalse\n>>> is_divisible_by_3(6)\n\
    true\n>>> is_divisible_by_3(8)\ntrue\n>>> is_divisible_by_3(10)\nfalse\n>>> is_divisible_by_3(12)\n\
    false\n>>> is_divisible_by_3(14)\nfalse\n>>> is_divisible_by_3(16)\nfalse\n>>>\
    \ is_divisible_by_3(18)\nfalse\n>>> is_divisible_by_3(20)\nfalse\n>>> is_divisible_by_3(22)\n\
    false\n>>> is_divisible_by_3(24)\nfalse\n>>> is_divisible_by_3(26)\nfalse\n>>>\
    \ is_divisible_by_3(28)\nfalse\n>>> is_divisible_by_3(30)\nfalse\n>>> is_divisible_by_3(32)\n\
    false\n>>> is_divisible_by_3(34)\nfalse\n>>> is_divisible_by_3(36)\nfalse\n>>>\
    \ is_divisible_by_3(38)\nfalse\n>>> is_divisible_by_3(40)\nfalse\n>>> is_divisible_by_3(42)\n\
    false\n>>> is_divisible_by_3(44)\nfalse\n>>> is_divisible_by_3(46)\nfalse\n>>>\
    \ is_divisible_by_3(48)\nfalse\n>>> is_divisible_by_3(50)\nfalse\n>>> is_divisible_by_3(52)\n\
    false\n>>> is_divisible_by_3(54)\nfalse\n>>> is_divisible_by_3(56)\nfalse\n>>>\
    \ is_divisible_by_3(58)\nfalse\n>>> is_divisible_by_3(60)\nfalse\n>>> is_divisible_by_3(62)\n\
    false\n>>> is_divisible_by_3(64)\nfalse\n>>> is_divisible_by_3(66)\nfalse\n>>>\
    \ is_divisible_by_3(68)\nfalse\n>>> is_divisible_by_3(70)\nfalse\n>>> is_divisible_by_3(72)\n\
    false\n>>> is_divisible_by_3(74)\nfalse\n>>> is_divisible_by_3(76)\nfalse\n>>>\
    \ is_divisible_by_3(78)\nfalse\n>>> is_divisible_by_3(80)\nfalse\n>>> is_divisible_by_3(82)\n\
    false\n>>> is_divisible_by_3(84)\nfalse\n>>> is_divisible_by_3(86)\nfalse\n>>>\
    \ is_divisible_by_3(88)\nfalse\n>>> is_divisible_by_3(90)\nfalse\n>>> is_di\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx79t1y2q.jl:16\nin expression starting at\
    \ /tmp/tmpx79t1y2q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true \n    else return false\
    \ \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwevk1fgt.jl:12\nin expression starting at /tmp/tmpwevk1fgt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ui0h31d.jl:14\nin expression starting at\
    \ /tmp/tmp_ui0h31d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n\"\"\"Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjqus3d8a.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqus3d8a.jl:1\n\
    in expression starting at /tmp/tmpjqus3d8a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(10)\
    \ == false\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\n@assert is_equal_to_sum_even(52)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ncxwaxg.jl:15\nin expression starting at\
    \ /tmp/tmp5ncxwaxg.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(7) == true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks whether a given number n is equal to the sum\
    \ of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n\
    >>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2wc8oks.jl:15\nin expression starting at\
    \ /tmp/tmpx2wc8oks.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 then return true\n    else if n==1 then return false\n    else if n==2\
    \ then return true\n    else if n==3 then return true\n    else if n==4 then return\
    \ true\n    else if n==5 then return true\n    else if n==6 then return true\n\
    \    else if n==7 then return true\n    else if n==8 then return true\n    else\
    \ if n==9 then return true\n    else if n==10 then return true\n    else if n==11\
    \ then return true\n    else if n==12 then return true\n    else if n==13 then\
    \ return true\n    else if n==14 then return true\n    else if n==15 then return\
    \ true\n    else if n==16 then return true\n    else if n==17 then return true\n\
    \    else if n==18 then return true\n    else if n==19 then return true\n    else\
    \ if n==20 then return true\n    else if n==21 then return true\n    else if n==22\
    \ then return true\n    else if n==23 then return true\n    else if n==24 then\
    \ return true\n    else if n==25 then return true\n    else if n==26 then return\
    \ true\n    else if n==27 then return true\n    else if n==28 then return true\n\
    \    else if n==29 then return true\n    else if n==30 then return true\n    else\
    \ if n==31 then return true\n    else if n==32 then return true\n    else if n==33\
    \ then return true\n    else if n==34 then return true\n    else if n==35 then\
    \ return true\n    else if n==36 then return true\n    else if n==37 then return\
    \ true\n    else if n==38 then return true\n    else if n==39 then return true\n\
    \    else if n==40 then return true\n    else if n==41 then return true\n    else\
    \ if n==42 then return true\n    else if n==43 then return true\n    else if n==44\
    \ then return true\n    else if n==45 then return true\n    else if n==46 then\
    \ return true\n    else if n==47 then return true\n    else if n==48 then return\
    \ true\n    else if n==49 then return true\n    else if n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxvirqy24.jl:11\nin expression starting at /tmp/tmpxvirqy24.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true \n    else return false\
    \ \nend \n\"\"\"Evaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd1uiujoh.jl:12\nin expression starting at /tmp/tmpd1uiujoh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==4 || n==6 || n==8 || n==10 || n==12 || n==14 || n==16 || n==18 || n==20 ||\
    \ n==22 || n==24 || n==26 || n==28 || n==30 || n==32 || n==34 || n==36 || n==38\
    \ || n==40 || n==42 || n==44 || n==46 || n==48 || n==50 || n==52 || n==54 || n==56\
    \ || n==58 || n==60 || n==62 || n==64 || n==66 || n==68 || n==70 || n==72 || n==74\
    \ || n==76 || n==78 || n==80 || n==82 || n==84 || n==86 || n==88 || n==90 || n==92\
    \ || n==94 || n==96 || n==98 || n==100 || n==102 || n==104 || n==106 || n==108\
    \ || n==110 || n==112 || n==114 || n==116 || n==118 || n==120 || n==122 || n==124\
    \ || n==126 || n==128 || n==130 || n==132 || n==134 || n==136 || n==138 || n==140\
    \ || n==142 || n==144 || n==146 || n==148 || n==150 || n==152 || n==154 || n==156\
    \ || n==158 || n==160 || n==162 || n==164 || n==166 || n==168 || n==170 || n==172\
    \ || n==174 || n==176 || n==178 || n==180 || n==182 || n==184 || n==186 || n==188\
    \ || n==190 || n==192 || n==194 || n==196 || n==198 || n==200 || n==202 || n==204\
    \ || n==206 || n==208 || n==210 || n==212 || n==214 || n==216 || n==218 || n==220\
    \ || n==222 || n==224 || n==226 || n==228 || n==230 || n==\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7xo74e4.jl:1\nin expression starting at /tmp/tmpu7xo74e4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4 \n        return false\n    else if n%2==0 \n        return false\n    else\
    \ if n%3==0 \n        return false\n    else if n%5==0 \n        return false\n\
    \    else if n%7==0 \n        return false\n    else \n        return true\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Evaluate whether the given number n\
    \ can be written as the sum of exactly 4 positive odd numbers\n    Example\n \
    \   >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n  \
    \  false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6das_tt.jl:13\nin expression starting at\
    \ /tmp/tmps6das_tt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_four_even(n) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(10)\
    \ == true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_equal_to_sum_even(55) == true\n@assert is_equal_to_sum_even(60)\
    \ == true\n@assert is_equal_to_sum_even(65) == true\n@assert is_equal_to_sum_even(70)\
    \ == true\n@assert is_equal_to_sum_even(75) == true\n@assert is_equal_to_sum_even(80)\
    \ == true\n@assert is_equal_to_sum_even(85) == true\n@assert is_equal_to_sum_even(90)\
    \ == true\n@assert is_equal_to_sum_even(95) == true\n@assert is_equal_to_sum_even(100)\
    \ == true\n@assert is_equal_to_sum_even(101) == true\n@assert is_equal_to_sum_even(102)\
    \ == true\n@assert is_equal_to_sum_even(103) == true\n@assert is_equal_to_sum_even(104)\
    \ == true\n@assert is_equal_to_sum_even(105) == true\n@assert is_equal_to_sum_even(106)\
    \ == true\n@assert is_equal_to_sum_even(107) == true\n@assert is_equal_to_sum_even(108)\
    \ == true\n@assert is_equal_to_sum_even(109) == true\n@assert is_equal_to_sum_even(110)\
    \ == true\n@assert is_equal_to_sum_even(111) == true\n@assert is_equal_to_sum_even(112)\
    \ == true\n@assert is_equal_to_sum_even(113) == true\n@assert is_equal_to_sum_even(114)\
    \ == true\n@assert is_equal_to_sum_even(115) == true\n@assert is_equal_to_sum_even(116)\
    \ == true\n@assert is_equal_to_sum_even(117) == true\n@assert is_equal_to_sum_even(118)\
    \ == true\n@assert is_equal_to_sum_even(119) == true\n@assert is_equal_to_sum_even(120)\
    \ == true\n@assert is_equal_to_sum_even(121) == true\n@assert is_equal_to_sum_even(122)\
    \ == true\n@assert is_equal_to_sum_even(123) == true\n@assert is_equal_to_sum_even(124)\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppzukhtfh.jl:15\nin expression starting at\
    \ /tmp/tmppzukhtfh.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1)\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n    Example\n\
    \    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n \
    \   false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9032xj5.jl:17\nin expression starting at\
    \ /tmp/tmpv9032xj5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true \n    else return false\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfd9_fx77.jl:12\nin expression starting at /tmp/tmpfd9_fx77.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n    then return true\n    else if n == 1 \n    then return true\n \
    \   else if n == 2 \n    then return true\n    else if n % 2 == 0 \n    then return\
    \ false\n    else if n % 3 == 0 \n    then return false\n    else if n % 5 ==\
    \ 0 \n    then return false\n    else return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7i6c__gg.jl:12\nin expression starting at /tmp/tmp7i6c__gg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(10)\
    \ == false\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpig4yu9wv.jl:15\nin expression starting at\
    \ /tmp/tmpig4yu9wv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else \n        return false\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2v97lazg.jl:15\nin expression starting at\
    \ /tmp/tmp2v97lazg.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1) || is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(6) == false\n\
    @assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that checks whether a given number n is prime or not. \nA prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself.\nExample\n>>> is_prime(6)\ntrue\n>>> is_prime(7)\nfalse\n>>> is_prime(8)\n\
    true\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\ntrue\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\ntrue\n\
    >>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>>\
    \ is_prime(25)\ntrue\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\ntrue\n>>> is_prime(28)\n\
    false\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n\
    >>> is_prime(32)\nfalse\n>>> is_prime(33)\ntrue\n>>> is_prime(34)\nfalse\n>>>\
    \ is_prime(35)\ntrue\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\n\
    false\n>>> is_prime(39)\ntrue\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n\
    >>> is_prime(42)\nfalse\n>>> is_prime(43)\ntrue\n>>> is_prime(44)\nfalse\n>>>\
    \ is_prime(45)\ntrue\n>>> is_prime(46)\nfalse\n>>> is_prime(47)\ntrue\n>>> is_prime(48)\n\
    false\n>>> is_prime(49)\ntrue\n>>> is_prime(50)\nfalse\n>>> is_prime(51)\ntrue\n\
    >>> is_prime(52)\nfalse\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt94elrq.jl:16\nin expression starting at\
    \ /tmp/tmppt94elrq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else\n        if n % 2 == 0 \n            true\n\
    \        else\n            if n % 4 == 0 \n                true\n            else\n\
    \                if n % 8 == 0 \n                    true\n                else\n\
    \                    if n % 16 == 0 \n                        true\n         \
    \           else\n                        if n % 32 == 0 \n                  \
    \          true\n                        else\n                            if\
    \ n % 64 == 0 \n                                true\n                       \
    \     else\n                                if n % 128 == 0 \n               \
    \                     true\n                                else\n           \
    \                         if n % 256 == 0 \n                                 \
    \       true\n                                    else\n                     \
    \                   if n % 512 == 0 \n                                       \
    \     true\n                                        else\n                   \
    \                         if n % 1024 == 0 \n                                \
    \                true\n                                            else\n    \
    \                                            if n % 2048 == 0 \n             \
    \                                       true\n                               \
    \                 else\n                                                    if\
    \ n % 4096 == 0 \n                                                        true\n\
    \                                                    else\n                  \
    \                                      if n % 8192 == 0 \n                   \
    \                                         true\n                             \
    \                           else\n                                           \
    \                 false\n    end\nend\n</cell>\n<text>\nExercise 1\nWrite a function\
    \ that checks whether a given number n is divisible by any number between 1 and\
    \ 100. \nExample\n>>> is_divisible_by_any_number(10)\ntrue\n>>> is_divisible_by_any_number(20)\n\
    false\n>>> is_divisible_by_any_number(30)\ntrue\n>>> is_divisible_by_any_number(40)\n\
    false\n>>> is_divisible_by_any_number(50)\ntrue\n>>> is_divisible_by_any_number(60)\n\
    false\n>>> is_divisible_by_any_number(70)\ntrue\n>>> is_divisible_by_any_number(80)\n\
    false\n>>> is_divisible_by_any_number(90)\ntrue\n>>> is_divisible_by_any_number(100)\n\
    true\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhsokuwo.jl:56\nin expression starting at\
    \ /tmp/tmphhsokuwo.jl:56\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(10)\
    \ == false\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\n@assert is_equal_to_sum_even(52)\
    \ == false\n\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzduslcg.jl:14\nin expression starting at\
    \ /tmp/tmpzzduslcg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that checks whether a given\
    \ number n is a prime number.\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplqtptft.jl:16\nin expression starting at\
    \ /tmp/tmpplqtptft.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n    then return true\n    else if n==1\n    then return true\n    else\
    \ if n==2\n    then return true\n    else if n==3\n    then return true\n    else\
    \ if n==4\n    then return true\n    else if n==5\n    then return true\n    else\
    \ if n==6\n    then return true\n    else if n==7\n    then return true\n    else\
    \ if n==8\n    then return true\n    else if n==9\n    then return true\n    else\
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn4r39yyo.jl:12\nin expression starting at /tmp/tmpn4r39yyo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp774h8oma.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp774h8oma.jl:1\n\
    in expression starting at /tmp/tmp774h8oma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mru7kvg.jl:16\nin expression starting at\
    \ /tmp/tmp0mru7kvg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrc9hvfj.jl:15\nin expression starting at\
    \ /tmp/tmpvrc9hvfj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqt015s1y.jl:17\nin expression starting at\
    \ /tmp/tmpqt015s1y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4 return false\n    else if n%2==0 return false\n    else if n%3==0 return\
    \ false\n    else if n%4==0 return true\n    else return false\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpth3qsrw_.jl:12\nin expression starting at\
    \ /tmp/tmpth3qsrw_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1)\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n    Example\n\
    \    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n \
    \   false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0bndgar.jl:17\nin expression starting at\
    \ /tmp/tmpc0bndgar.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w38pee8.jl:15\nin expression starting at\
    \ /tmp/tmp2w38pee8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwp5xai88.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwp5xai88.jl:1\n\
    in expression starting at /tmp/tmpwp5xai88.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11)\
    \ == true\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == true\n@assert is_equal_to_sum_even(50) == false\n@assert is_equal_to_sum_even(51)\
    \ == true\n@assert is_equal_to_sum_even(52) == false\n@assert is_equal_to_sum_even(53)\
    \ == true\n@assert \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6v6ori5u.jl:15\nin expression starting at\
    \ /tmp/tmp6v6ori5u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n        true\n    else\n        ((n%2==0)&&(n%4==0))\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesmd7ibt.jl:16\nin expression starting at\
    \ /tmp/tmpesmd7ibt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(2) == true\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that checks whether a given number n is a multiple of another\
    \ number m.\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflzbe_34.jl:15\nin expression starting at\
    \ /tmp/tmpflzbe_34.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(8)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks whether a given number n is divisible\
    \ by any number between 1 and 10 (both included)\nExample\n>>> is_divisible_by_any_number(3)\n\
    false\n>>> is_divisible_by_any_number(5)\ntrue\n>>> is_divisible_by_any_number(10)\n\
    true\n>>> is_divisible_by_any_number(15)\nfalse\n>>> is_divisible_by_any_number(20)\n\
    true\n>>> is_divisible_by_any_number(25)\nfalse\n>>> is_divisible_by_any_number(30)\n\
    true\n>>> is_divisible_by_any_number(35)\nfalse\n>>> is_divisible_by_any_number(40)\n\
    true\n>>> is_divisible_by_any_number(45)\nfalse\n>>> is_divisible_by_any_number(50)\n\
    true\n>>> is_divisible_by_any_number(55)\nfalse\n>>> is_divisible_by_any_number(60)\n\
    true\n>>> is_divisible_by_any_number(65)\nfalse\n>>> is_divisible_by_any_number(70)\n\
    true\n>>> is_divisible_by_any_number(75)\nfalse\n>>> is_divisible_by_any_number(80)\n\
    true\n>>> is_divisible_by_any_number(85)\nfalse\n>>> is_divisible_by_any_number(90)\n\
    true\n>>> is_divisible_by_any_number(95)\nfalse\n>>> is_divisible_by_any_number(100)\n\
    true\n>>> is_divisible_by_any_number(105)\nfalse\n>>> is_divisible_by_any_number(110)\n\
    true\n>>> is_divisible_by_any_number(115)\nfalse\n>>> is_divisible_by_any_number(120)\n\
    true\n>>> is_divisible_by_any_number(125)\nfalse\n>>> is_divisible_by_any_number(130)\n\
    true\n>>> is_divisible_by_any_number(135)\nfalse\n>>> is_divisible_by_any_number(140)\n\
    true\n>>> is_divisible_by_any_number(145)\nfalse\n>>> is_divisible_by_any_number(150)\n\
    true\n>>> is_divisible_by_any_number(155)\nfalse\n>>> is_divisible_by_any_number(160)\n\
    true\n>>> is_divisible_by_any_number(165)\nfalse\n>>> is_divisible_by_any_number(170)\n\
    true\n>>> is_divisible_by_any_number(175)\nfalse\n>>> is_divisible_by_any_number(180)\n\
    true\n>>> is_divisible_by_any_number(18\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qgztfaf.jl:15\nin expression starting at\
    \ /tmp/tmp2qgztfaf.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwp5xai88.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwp5xai88.jl:1\n\
    in expression starting at /tmp/tmpwp5xai88.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_equal_to_sum_even(10)\
    \ == true\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == true\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == true\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == true\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == true\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == true\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == true\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == true\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == true\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == true\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == true\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == true\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == true\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == true\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == true\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == true\n@assert is_equal_to_sum_even(52)\
    \ == false\n@assert is_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ozby3cl.jl:17\nin expression starting at\
    \ /tmp/tmp6ozby3cl.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurigjb36.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurigjb36.jl:1\n\
    in expression starting at /tmp/tmpurigjb36.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yof25i_.jl:17\nin expression starting at\
    \ /tmp/tmp2yof25i_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r4deedi.jl:16\nin expression starting at\
    \ /tmp/tmp4r4deedi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3pxmv2ep.jl:15\nin expression starting at\
    \ /tmp/tmp3pxmv2ep.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n        return true\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n    Example\n\
    \    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n \
    \   false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj16q8fn.jl:16\nin expression starting at\
    \ /tmp/tmpuj16q8fn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47_6kdsj.jl:15\nin expression starting at\
    \ /tmp/tmp47_6kdsj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else if n % 2 == 0 \n        false\n    else if n\
    \ % 4 == 0 \n        true\n    else \n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert is_equal_to_sum_even(2) == false\n@assert is_equal_to_sum_even(6)\
    \ == true\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number n is divisible by\
    \ 3, and false otherwise. \nExample\n>>> is_divisible_3_or_less(3)\ntrue\n>>>\
    \ is_divisible_3_or_less(4)\nfalse\n>>> is_divisible_3_or_less(5)\nfalse\n>>>\
    \ is_divisible_3_or_less(6)\ntrue\n>>> is_divisible_3_or_less(7)\nfalse\n>>> is_divisible_3_or_less(8)\n\
    false\n>>> is_divisible_3_or_less(9)\nfalse\n>>> is_divisible_3_or_less(10)\n\
    false\n>>> is_divisible_3_or_less(11)\nfalse\n>>> is_divisible_3_or_less(12)\n\
    false\n>>> is_divisible_3_or_less(13)\nfalse\n>>> is_divisible_3_or_less(14)\n\
    false\n>>> is_divisible_3_or_less(15)\nfalse\n>>> is_divisible_3_or_less(16)\n\
    false\n>>> is_divisible_3_or_less(17)\nfalse\n>>> is_divisible_3_or_less(18)\n\
    false\n>>> is_divisible_3_or_less(19)\nfalse\n>>> is_divisible_3_or_less(20)\n\
    false\n>>> is_divisible_3_or_less(21)\nfalse\n>>> is_divisible_3_or_less(22)\n\
    false\n>>> is_divisible_3_or_less(23)\nfalse\n>>> is_divisible_3_or_less(24)\n\
    false\n>>> is_divisible_3_or_less(25)\nfalse\n>>> is_divisible_3_or_less(26)\n\
    false\n>>> is_divisible_3_or_less(27)\nfalse\n>>> is_divisible_3_or_less(28)\n\
    false\n>>> is_divisible_3_or_less(29)\nfalse\n>>> is_divisible_3_or_less(30)\n\
    false\n>>> is_divisible_3_or_less(31)\nfalse\n>>> is_divisible_3_or_less(32)\n\
    false\n>>> is_divisible_3_or_less(33)\nfalse\n>>> is_divisible_3_or_less(34)\n\
    false\n>>> is_divisible_3_or_less(35)\nfalse\n>>> is_divisible_3_or_less(36)\n\
    false\n>>> is_divisible_3_or_less(37)\nfalse\n>>> is_di\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplem254u9.jl:13\nin expression starting at\
    \ /tmp/tmplem254u9.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else \n        false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplx_xux7p.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplx_xux7p.jl:1\n\
    in expression starting at /tmp/tmplx_xux7p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0\n    then return true\n    else if n % 2 == 0\n    then return false\n\
    \    else if n % 4 == 0\n    then return true\n    else return is_equal_to_sum_even(n\
    \ - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj4yb_8wp.jl:12\nin expression starting at /tmp/tmpj4yb_8wp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks whether a given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7racgrb.jl:15\nin expression starting at\
    \ /tmp/tmpe7racgrb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        then false\n    else if n % 2 == 0 \n        then true\n   \
    \ else if n % 3 == 0 \n        then true\n    else if n % 5 == 0 \n        then\
    \ true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Evaluate\
    \ whether the given number n can be written as the sum of exactly 4 positive odd\
    \ numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"false\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpni05w4w2.jl:12\nin expression starting at /tmp/tmpni05w4w2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else false\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7) == true\n\
    @assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(15) ==\
    \ true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_sum_even(55)\
    \ == true\n@assert is_equal_to_sum_even(60) == true\n@assert is_equal_to_sum_even(65)\
    \ == true\n@assert is_equal_to_sum_even(70) == true\n@assert is_equal_to_sum_even(75)\
    \ == true\n@assert is_equal_to_sum_even(80) == true\n@assert is_equal_to_sum_even(85)\
    \ == true\n@assert is_equal_to_sum_even(90) == true\n@assert is_equal_to_sum_even(95)\
    \ == true\n@assert is_equal_to_sum_even(100) == true\n@assert is_equal_to_sum_even(101)\
    \ == true\n@assert is_equal_to_sum_even(102) == true\n@assert is_equal_to_sum_even(103)\
    \ == true\n@assert is_equal_to_sum_even(104) == true\n@assert is_equal_to_sum_even(105)\
    \ == true\n@assert is_equal_to_sum_even(106) == true\n@assert is_equal_to_sum_even(107)\
    \ == true\n@assert is_equal_to_sum_even(108) == true\n@assert is_equal_to_sum_even(109)\
    \ == true\n@assert is_equal_to_sum_even(110) == true\n@assert is_equal_to_sum_even(111)\
    \ == true\n@assert is_equal_to_sum_even(112) == true\n@assert is_equal_to_sum_even(113)\
    \ == true\n@assert is_equal_to_sum_even(114) == true\n@assert is_equal_to_sum_even(115)\
    \ == true\n@assert is_equal_to_sum_even(116) == true\n@assert is_equal_to_sum_even(117)\
    \ == true\n@assert is_equal_to_sum_even(118) == true\n@assert is_equal_to_sum_even(119)\
    \ == true\n@assert is_equal_to_sum_even(120) == true\n@assert is_equal_to_sum_even(121)\
    \ == true\n@assert is_equal_to_sum_even(122) == true\n@assert is_equal_to_sum_even(123)\
    \ == true\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nockhcv.jl:14\nin expression starting at\
    \ /tmp/tmp3nockhcv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11) ==\
    \ true\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == true\n@assert is_equal_to_sum_even(50) == false\n@assert is_equal_to_sum_even(51)\
    \ == true\n@assert is_equal_to_sum_even(52) == false\n@assert is_equal_to_sum_even(53)\
    \ == true\n@\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0mykneh.jl:14\nin expression starting at\
    \ /tmp/tmpl0mykneh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51aizefo.jl:16\nin expression starting at\
    \ /tmp/tmp51aizefo.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4 then return false \n    else if n==4 then return true \n    else if n%2==0\
    \ then return false \n    else if n%2==1 then return is_equal_to_sum_even(n/2)\
    \ \n    else return is_equal_to_sum_even(n/2) \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number n is equal to the\
    \ sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\nfalse\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphdy46c99.jl:11\nin expression starting at /tmp/tmphdy46c99.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\n\"\
    \"\"Evaluate whether the given number n can be written as the sum of exactly 4\
    \ positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjyhyvfe1.jl:16\nin expression starting at /tmp/tmpjyhyvfe1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidmuoh12.jl:15\nin expression starting at\
    \ /tmp/tmpidmuoh12.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4\n        return false\n    else if n%2==0\n        return false\n    else\
    \ if n%3==0\n        return false\n    else if n%4==0\n        return true\n \
    \   else\n        return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that checks whether a given number n is divisible by any number between 1 and\
    \ 20. Hint: use is_divisible_by_any_number(n).\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsim_76q.jl:13\nin expression starting at\
    \ /tmp/tmpzsim_76q.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1) || is_equal_to_sum_even(n - 2)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the given number n is equal to the sum of exactly\
    \ 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n>>> is_equal_to_sum_odd(6)\n\
    true\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsrgww2l.jl:16\nin expression starting at\
    \ /tmp/tmpwsrgww2l.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that determines whether a given number n is equal to the sum of exactly\
    \ 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\ntrue\n>>> is_equal_to_sum_odd(6)\n\
    false\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w3kprbc.jl:14\nin expression starting at\
    \ /tmp/tmp1w3kprbc.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzyg51blu.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzyg51blu.jl:1\n\
    in expression starting at /tmp/tmpzyg51blu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert is_equal_to_sum_even(2) == false\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number n is equal to the\
    \ sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\nfalse\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o53iu0r.jl:15\nin expression starting at\
    \ /tmp/tmp_o53iu0r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 return true\n    if n==1 return true\n    if n==2 return true\n    if n==3\
    \ return true\n    if n==4 return true\n    if n==5 return true\n    if n==6 return\
    \ true\n    if n==7 return true\n    if n==8 return true\n    if n==9 return true\n\
    \    if n==10 return true\n    if n==11 return true\n    if n==12 return true\n\
    \    if n==13 return true\n    if n==14 return true\n    if n==15 return true\n\
    \    if n==16 return true\n    if n==17 return true\n    if n==18 return true\n\
    \    if n==19 return true\n    if n==20 return true\n    if n==21 return true\n\
    \    if n==22 return true\n    if n==23 return true\n    if n==24 return true\n\
    \    if n==25 return true\n    if n==26 return true\n    if n==27 return true\n\
    \    if n==28 return true\n    if n==29 return true\n    if n==30 return true\n\
    \    if n==31 return true\n    if n==32 return true\n    if n==33 return true\n\
    \    if n==34 return true\n    if n==35 return true\n    if n==36 return true\n\
    \    if n==37 return true\n    if n==38 return true\n    if n==39 return true\n\
    \    if n==40 return true\n    if n==41 return true\n    if n==42 return true\n\
    \    if n==43 return true\n    if n==44 return true\n    if n==45 return true\n\
    \    if n==46 return true\n    if n==47 return true\n    if n==48 return true\n\
    \    if n==49 return true\n    if n==50 return true\n    if n==51 return true\n\
    \    if n==52 return true\n    if n==53 return true\n    if n==54 return true\n\
    \    if n==55 return true\n    if n==56 return true\n    if n==57 return true\n\
    \    if n==58 return true\n    if n==59 return true\n    if n==60 return true\n\
    \    if n==61 return true\n    if n==62 return true\n    if n==63 return true\n\
    \    if n==64 return true\n    if n==65 return true\n    if n==66 return true\n\
    \    if n==67 return true\n    if n==68 return true\n    if n==69 return true\n\
    \    if n==70 return true\n    if n==71 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyviig6x5.jl:1\nin expression starting at /tmp/tmpyviig6x5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks whether a given number n is equal to the sum of exactly\
    \ 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n>>> is_equal_to_sum_odd(6)\n\
    true\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0znfork5.jl:14\nin expression starting at\
    \ /tmp/tmp0znfork5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n <= 0\n    then return false\n    else if n == 1\n    then return true\n  \
    \  else if n % 2 == 0\n    then return false\n    else if n % 4 == 0\n    then\
    \ return true\n    else return is_equal_to_sum_even(n - 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks whether a given number n is equal to the sum\
    \ of two positive odd numbers. \nExample\n>>> is_equal_to_sum_odd(5)\nfalse\n\
    >>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\ntrue\n>>> is_equal_to_sum_odd(10)\n\
    false\n>>> is_equal_to_sum_odd(11)\nfalse\n>>> is_equal_to_sum_odd(12)\nfalse\n\
    >>> is_equal_to_sum_odd(13)\nfalse\n>>> is_equal_to_sum_odd(14)\nfalse\n>>> is_equal_to_sum_odd(15)\n\
    false\n>>> is_equal_to_sum_odd(16)\nfalse\n>>> is_equal_to_sum_odd(17)\nfalse\n\
    >>> is_equal_to_sum_odd(18)\nfalse\n>>> is_equal_to_sum_odd(19)\nfalse\n>>> is_equal_to_sum_odd(20)\n\
    false\n>>> is_equal_to_sum_odd(21)\nfalse\n>>> is_equal_to_sum_odd(22)\nfalse\n\
    >>> is_equal_to_sum_odd(23)\nfalse\n>>> is_equal_to_sum_odd(24)\nfalse\n>>> is_equal_to_sum_odd(25)\n\
    false\n>>> is_equal_to_sum_odd(26)\nfalse\n>>> is_equal_to_sum_odd(27)\nfalse\n\
    >>> is_equal_to_sum_odd(28)\nfalse\n>>> is_equal_to_sum_odd(29)\nfalse\n>>> is_equal_to_sum_odd(30)\n\
    false\n>>> is_equal_to_sum_odd(31)\nfalse\n>>> is_equal_to_sum_odd(32)\nfalse\n\
    >>> is_equal_to_sum_odd(33)\nfalse\n>>> is_equal_to_sum_odd(34)\nfalse\n>>> is_equal_to_sum_odd(35)\n\
    false\n>>> is_equal_to_sum_odd(36)\nfalse\n>>> is_equal_to_sum_odd(37)\nfalse\n\
    >>> is_equal_to_sum_odd(38)\nfalse\n>>> is_equal_to_sum_odd(39)\nfalse\n>>> is_equal_to_sum_\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqvlng_5b.jl:12\nin expression starting at /tmp/tmpqvlng_5b.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1) || is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11) ==\
    \ true\n@assert is_equal_to_sum_even(12) == true\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == true\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == true\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == true\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == true\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == true\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == true\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == true\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == true\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == true\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == true\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == true\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == true\n@assert is_equal_to_sum_even(49)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_sum_even(51)\
    \ == true\n@assert is_equal_to_sum_even(52) == \nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfkkwged.jl:16\nin expression starting at\
    \ /tmp/tmpdfkkwged.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7)\
    \ == true\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks whether a given number n is divisible by any\
    \ positive even number. \nExample\n>>> is_divisible_by_even(3)\ntrue\n>>> is_divisible_by_even(4)\n\
    false\n>>> is_divisible_by_even(6)\ntrue\n>>> is_divisible_by_even(8)\ntrue\n\
    >>> is_divisible_by_even(10)\nfalse\n>>> is_divisible_by_even(11)\nfalse\n>>>\
    \ is_divisible_by_even(15)\ntrue\n>>> is_divisible_by_even(16)\nfalse\n>>> is_divisible_by_even(17)\n\
    false\n>>> is_divisible_by_even(18)\nfalse\n>>> is_divisible_by_even(19)\nfalse\n\
    >>> is_divisible_by_even(20)\nfalse\n>>> is_divisible_by_even(21)\nfalse\n>>>\
    \ is_divisible_by_even(22)\nfalse\n>>> is_divisible_by_even(23)\nfalse\n>>> is_divisible_by_even(24)\n\
    false\n>>> is_divisible_by_even(25)\nfalse\n>>> is_divisible_by_even(26)\nfalse\n\
    >>> is_divisible_by_even(27)\nfalse\n>>> is_divisible_by_even(28)\nfalse\n>>>\
    \ is_divisible_by_even(29)\nfalse\n>>> is_divisible_by_even(30)\nfalse\n>>> is_divisible_by_even(31)\n\
    false\n>>> is_divisible_by_even(32)\nfalse\n>>> is_divisible_by_even(33)\nfalse\n\
    >>> is_divisible_by_even(34)\nfalse\n>>> is_divisible_by_even(35)\nfalse\n>>>\
    \ is_divisible_by_even(36)\nfalse\n>>> is_divisible_by_even(37)\nfalse\n>>> is_divisible_by_even(38)\n\
    false\n>>> is_divisible_by_even(39)\nfalse\n>>> is_divisible_by_even(40)\nfalse\n\
    >>> is_divisible_by_even(41)\nfalse\n>>> is_divisible_by_even(42)\nfalse\n>>>\
    \ is_divisible_by_even(44)\nfalse\n>>> is_divisible_by_even(45)\nfalse\n>>> is_divisible_by_even(46)\n\
    false\n>>> is_divisible_by_even(47)\nfalse\n>>> is_divisible_by_even(48)\nfalse\n\
    >>> is_divisible_by_even(49)\nfalse\n>>> is_di\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi3o2qpx.jl:16\nin expression starting at\
    \ /tmp/tmpwi3o2qpx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4\n    then return false\n    else if n == 4 || n == 6 || n == 8 || n ==\
    \ 10\n    then return true\n    else return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\n@assert is_equal_to_sum_even(52)\
    \ == false\n@assert \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpddqtbsco.jl:12\nin expression starting at /tmp/tmpddqtbsco.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4,0)\n    else return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn71xw_49.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn71xw_49.jl:1\n\
    in expression starting at /tmp/tmpn71xw_49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31e6_bio.jl:15\nin expression starting at\
    \ /tmp/tmp31e6_bio.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(2)\
    \ == false\n@assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11)\
    \ == false\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == false\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == false\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == false\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == false\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == false\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == false\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == false\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == false\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == false\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == false\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == false\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == false\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == false\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == false\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == false\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == false\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == false\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == false\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96l2x9d8.jl:15\nin expression starting at\
    \ /tmp/tmp96l2x9d8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns true if the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1m9inh_k.jl:16\nin expression starting at\
    \ /tmp/tmp1m9inh_k.jl:16\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpbd3nskis.jl:22\n  Test threw
    exception\n  Expression: candidate(4) == false\n  UndefVarError: is_sum_even not
    defined\n  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmpbd3nskis.jl:11\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbd3nskis.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbd3nskis.jl:21\ntest set: Error
    During Test at /tmp/tmpbd3nskis.jl:23\n  Test threw exception\n  Expression: candidate(6)
    == false\n  UndefVarError: is_sum_even not defined\n  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @
    Main /tmp/tmpbd3nskis.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbd3nskis.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbd3nskis.jl:21\ntest set: Error
    During Test at /tmp/tmpbd3nskis.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_sum_even not defined\n  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @
    Main /tmp/tmpbd3nskis.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbd3nskis.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbd3nskis.jl:21\ntest set: Error
    During Test at /tmp/tmpbd3nskis.jl:25\n  Test threw exception\n  Expression: candidate(10)
    == true\n  UndefVarError: is_sum_even not defined\n  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @
    Main /tmp/tmpbd3nskis.jl:11\n  '
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrc9hvfj.jl:15\nin expression starting at\
    \ /tmp/tmpvrc9hvfj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 \n        true\n    else\n        n mod 2 ==0 && (n-1) mod 2 ==0 && (n-2)\
    \ mod 2 ==0 && (n-3) mod 2 ==0 && (n-4) mod 2 ==0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpxh_o4v7w.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh_o4v7w.jl:14\n\
    in expression starting at /tmp/tmpxh_o4v7w.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n    then return false\n    else if n==1\n    then return true\n    else\
    \ if n==2\n    then return true\n    else if n==3\n    then return true\n    else\
    \ if n==4\n    then return true\n    else if n==5\n    then return true\n    else\
    \ if n==6\n    then return true\n    else if n==7\n    then return true\n    else\
    \ if n==8\n    then return true\n    else if n==9\n    then return true\n    else\
    \ if n==10\n    then return true\n    else if n==11\n    then return true\n  \
    \  else if n==12\n    then return true\n    else if n==13\n    then return true\n\
    \    else if n==14\n    then return true\n    else if n==15\n    then return true\n\
    \    else if n==16\n    then return true\n    else if n==17\n    then return true\n\
    \    else if n==18\n    then return true\n    else if n==19\n    then return true\n\
    \    else if n==20\n    then return true\n    else if n==21\n    then return true\n\
    \    else if n==22\n    then return true\n    else if n==23\n    then return true\n\
    \    else if n==24\n    then return true\n    else if n==25\n    then return true\n\
    \    else if n==26\n    then return true\n    else if n==27\n    then return true\n\
    \    else if n==28\n    then return true\n    else if n==29\n    then return true\n\
    \    else if n==30\n    then return true\n    else if n==31\n    then return true\n\
    \    else if n==32\n    then return true\n    else if n==33\n    then return true\n\
    \    else if n==34\n    then return true\n    else if n==35\n    then return true\n\
    \    else if n==36\n    then return true\n    else if n==37\n    then return true\n\
    \    else if n==38\n    then return true\n    else if n==39\n    then return true\n\
    \    else if n==40\n    then return true\n    else if n==41\n    then return true\n\
    \    else if n==42\n    then return \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjq2ettw4.jl:12\nin expression starting at /tmp/tmpjq2ettw4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else \n        return false\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2v97lazg.jl:15\nin expression starting at\
    \ /tmp/tmp2v97lazg.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp774h8oma.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp774h8oma.jl:1\n\
    in expression starting at /tmp/tmp774h8oma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qv571og.jl:14\nin expression starting at\
    \ /tmp/tmp8qv571og.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukgmdme3.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukgmdme3.jl:1\n\
    in expression starting at /tmp/tmpukgmdme3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49qtkkl2.jl:14\nin expression starting at\
    \ /tmp/tmp49qtkkl2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidmuoh12.jl:15\nin expression starting at\
    \ /tmp/tmpidmuoh12.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_equal_to_sum_even(0)\
    \ === true\n@assert is_equal_to_sum_even(2) === false\n@assert is_equal_to_sum_even(3)\
    \ === true\n@assert is_equal_to_sum_even(5) === false\n@assert is_equal_to_sum_even(7)\
    \ === true\n@assert is_equal_to_sum_even(8) === true\n@assert is_equal_to_sum_even(10)\
    \ === true\n@assert is_equal_to_sum_even(11) === true\n@assert is_equal_to_sum_even(12)\
    \ === true\n@assert is_equal_to_sum_even(13) === true\n@assert is_equal_to_sum_even(14)\
    \ === true\n@assert is_equal_to_sum_even(15) === true\n@assert is_equal_to_sum_even(16)\
    \ === true\n@assert is_equal_to_sum_even(17) === true\n@assert is_equal_to_sum_even(18)\
    \ === true\n@assert is_equal_to_sum_even(19) === true\n@assert is_equal_to_sum_even(20)\
    \ === true\n@assert is_equal_to_sum_even(21) === true\n@assert is_equal_to_sum_even(22)\
    \ === true\n@assert is_equal_to_sum_even(23) === true\n@assert is_equal_to_sum_even(24)\
    \ === true\n@assert is_equal_to_sum_even(25) === true\n@assert is_equal_to_sum_even(26)\
    \ === true\n@assert is_equal_to_sum_even(27) === true\n@assert is_equal_to_sum_even(28)\
    \ === true\n@assert is_equal_to_sum_even(29) === true\n@assert is_equal_to_sum_even(30)\
    \ === true\n@assert is_equal_to_sum_even(31) === true\n@assert is_equal_to_sum_even(32)\
    \ === true\n@assert is_equal_to_sum_even(33) === true\n@assert is_equal_to_sum_even(34)\
    \ === true\n@assert is_equal_to_sum_even(35) === true\n@assert is_equal_to_sum_even(36)\
    \ === true\n@assert is_equal_to_sum_even(37) === true\n@assert is_equal_to_sum_even(38)\
    \ === true\n@assert is_equal_to_sum_even(39) === true\n@assert is_equal_to_sum_even(40)\
    \ === true\n@assert is_equal_to_sum_even(42) === true\n@assert is_equal_to_sum_even(43)\
    \ === true\n@assert is_equal_to_sum_even(44) === true\n@assert is_equal_to_sum_even(45)\
    \ === true\n@assert is_equal_to_sum_even(46) === true\n@assert is_equal_to_sum_even(47)\
    \ === true\n@assert is_equal_to_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp639bjqnx.jl:16\nin expression starting at\
    \ /tmp/tmp639bjqnx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_sum_even(6)\n</cell>\n<code language=julia-1.4>\nis_sum_even(8)\n\
    </cell>\n<code language=julia-1.4>\nis_sum_even(10)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(12)\n</cell>\n<code language=julia-1.4>\nis_sum_even(14)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(16)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(18)\n</cell>\n<code language=julia-1.4>\nis_sum_even(20)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(22)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(24)\n</cell>\n<code language=julia-1.4>\nis_sum_even(26)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(28)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(30)\n</cell>\n<code language=julia-1.4>\nis_sum_even(32)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(34)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(36)\n</cell>\n<code language=julia-1.4>\nis_sum_even(38)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(40)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(42)\n</cell>\n<code language=julia-1.4>\nis_sum_even(44)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(46)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(48)\n</cell>\n<code language=julia-1.4>\nis_sum_even(50)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(52)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(54)\n</cell>\n<code language=julia-1.4>\nis_sum_even(56)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(58)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(60)\n</cell>\n<code language=julia-1.4>\nis_sum_even(62)\n</cell>\n\
    <code language=julia-1.4>\nis_sum_even(64)\n</cell>\n<code language=julia-1.4>\n\
    is_sum_even(66)\n</cell>\n<code language=julia-1.4>\nis_sum_even(68)\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5tt0_mh.jl:16\nin expression starting at\
    \ /tmp/tmpy5tt0_mh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n    then return true\n    else if n==1\n    then return true\n    else\
    \ if n==2\n    then return true\n    else if n==3\n    then return true\n    else\
    \ if n==4\n    then return true\n    else if n==5\n    then return true\n    else\
    \ if n==6\n    then return true\n    else if n==7\n    then return true\n    else\
    \ if n==8\n    then return true\n    else if n==9\n    then return true\n    else\
    \ if n==10\n    then return true\n    else if n==11\n    then return true\n  \
    \  else if n==12\n    then return true\n    else if n==13\n    then return true\n\
    \    else if n==14\n    then return true\n    else if n==15\n    then return true\n\
    \    else if n==16\n    then return true\n    else if n==17\n    then return true\n\
    \    else if n==18\n    then return true\n    else if n==19\n    then return true\n\
    \    else if n==20\n    then return true\n    else if n==21\n    then return true\n\
    \    else if n==22\n    then return true\n    else if n==23\n    then return true\n\
    \    else if n==24\n    then return true\n    else if n==25\n    then return true\n\
    \    else if n==26\n    then return true\n    else if n==27\n    then return true\n\
    \    else if n==28\n    then return true\n    else if n==29\n    then return true\n\
    \    else if n==30\n    then return true\n    else if n==31\n    then return true\n\
    \    else if n==32\n    then return true\n    else if n==33\n    then return true\n\
    \    else if n==34\n    then return true\n    else if n==35\n    then return true\n\
    \    else if n==36\n    then return true\n    else if n==37\n    then return true\n\
    \    else if n==38\n    then return true\n    else if n==39\n    then return true\n\
    \    else if n==40\n    then return true\n    else if n==41\n    then return true\n\
    \    else if n==42\n    then return \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp48e22cxo.jl:12\nin expression starting at /tmp/tmp48e22cxo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w38pee8.jl:15\nin expression starting at\
    \ /tmp/tmp2w38pee8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmh92p_d.jl:17\nin expression starting at\
    \ /tmp/tmpmmh92p_d.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp774h8oma.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp774h8oma.jl:1\n\
    in expression starting at /tmp/tmp774h8oma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n <= 0 \n        then return false\n    else if n == 1 \n        then return\
    \ true\n    else if n == 2 \n        then return true\n    else if n % 2 == 0\
    \ \n        then return false\n    else if n % 4 == 0 \n        then return true\n\
    \    else \n        return is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(11) ==\
    \ false\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == false\n@assert \nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp77e2up3_.jl:12\nin expression starting at /tmp/tmp77e2up3_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n    then return true\n    else if n==1\n    then return true\n    else\
    \ if n==2\n    then return true\n    else if n==3\n    then return true\n    else\
    \ if n==4\n    then return true\n    else if n==5\n    then return true\n    else\
    \ if n==6\n    then return true\n    else if n==7\n    then return true\n    else\
    \ if n==8\n    then return true\n    else if n==9\n    then return true\n    else\
    \ if n==10\n    then return true\n    else if n==11\n    then return true\n  \
    \  else if n==12\n    then return true\n    else if n==13\n    then return true\n\
    \    else if n==14\n    then return true\n    else if n==15\n    then return true\n\
    \    else if n==16\n    then return true\n    else if n==17\n    then return true\n\
    \    else if n==18\n    then return true\n    else if n==19\n    then return true\n\
    \    else if n==20\n    then return true\n    else if n==21\n    then return true\n\
    \    else if n==22\n    then return true\n    else if n==23\n    then return true\n\
    \    else if n==24\n    then return true\n    else if n==25\n    then return true\n\
    \    else if n==26\n    then return true\n    else if n==27\n    then return true\n\
    \    else if n==28\n    then return true\n    else if n==29\n    then return true\n\
    \    else if n==30\n    then return true\n    else if n==31\n    then return true\n\
    \    else if n==32\n    then return true\n    else if n==33\n    then return true\n\
    \    else if n==34\n    then return true\n    else if n==35\n    then return true\n\
    \    else if n==36\n    then return true\n    else if n==37\n    then return true\n\
    \    else if n==38\n    then return true\n    else if n==39\n    then return true\n\
    \    else if n==40\n    then return true\n    else if n==41\n    then return true\n\
    \    else if n==42\n    then return \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp48e22cxo.jl:12\nin expression starting at /tmp/tmp48e22cxo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n <= 0\n    then return false\n    else if n % 2 == 0\n    then return true\n\
    \    else if n % 4 == 0\n    then return true\n    else if n % 8 == 0\n    then\
    \ return true\n    else return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpicsnvdxo.jl:12\nin expression starting at /tmp/tmpicsnvdxo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1)\n        return true\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n    Example\n\
    \    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n \
    \   false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpas90xnsl.jl:16\nin expression starting at\
    \ /tmp/tmpas90xnsl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        return false\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns true if the given number n is equal to\
    \ the sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    true\n>>> is_equal_to_sum_odd(6)\nfalse\n>>> is_equal_to_sum_odd(8)\ntrue\n>>>\
    \ is_equal_to_sum_odd(10)\nfalse\n>>> is_equal_to_sum_odd(15)\nfalse\n>>> is_equal_to_sum_odd(20)\n\
    true\n>>> is_equal_to_sum_odd(25)\nfalse\n>>> is_equal_to_sum_odd(30)\ntrue\n\
    >>> is_equal_to_sum_odd(35)\nfalse\n>>> is_equal_to_sum_odd(40)\ntrue\n>>> is_equal_to_sum_odd(45)\n\
    false\n>>> is_equal_to_sum_odd(50)\ntrue\n>>> is_equal_to_sum_odd(55)\nfalse\n\
    >>> is_equal_to_sum_odd(60)\ntrue\n>>> is_equal_to_sum_odd(65)\nfalse\n>>> is_equal_to_sum_odd(70)\n\
    true\n>>> is_equal_to_sum_odd(75)\nfalse\n>>> is_equal_to_sum_odd(80)\ntrue\n\
    >>> is_equal_to_sum_odd(85)\nfalse\n>>> is_equal_to_sum_odd(90)\ntrue\n>>> is_equal_to_sum_odd(95)\n\
    false\n>>> is_equal_to_sum_odd(100)\ntrue\n>>> is_equal_to_sum_odd(105)\nfalse\n\
    >>> is_equal_to_sum_odd(110)\ntrue\n>>> is_equal_to_sum_odd(115)\nfalse\n>>> is_equal_to_sum_odd(120)\n\
    true\n>>> is_equal_to_sum_odd(125)\nfalse\n>>> is_equal_to_sum_odd(130)\ntrue\n\
    >>> is_equal_to_sum_odd(135)\nfalse\n>>> is_equal_to_sum_odd(140)\ntrue\n>>> is_equal_to_sum_odd(145)\n\
    false\n>>> is_equal_to_sum_odd(150)\ntrue\n>>> is_equal_to_sum_odd(155)\nfalse\n\
    >>> is_equal_to_sum_odd(160)\ntrue\n>>> is_equal_to_sum_odd(165)\nfalse\n>>> is_equal_to_sum_odd(170)\n\
    true\n>>> is_equal_to_sum_odd(175)\nfalse\n>>> is_equal_to_sum_odd(180)\ntrue\n\
    >>> is_equal_to_sum_odd(185)\nfalse\n>>> is_equal_to_sum_odd(190)\ntrue\n>>> is_equal_\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnwfum1z.jl:15\nin expression starting at\
    \ /tmp/tmpcnwfum1z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpir5vcg52.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpir5vcg52.jl:1\n\
    in expression starting at /tmp/tmpir5vcg52.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.1>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(2)\
    \ == false\n@assert is_equal_to_sum_even(3) == false\n@assert is_equal_to_sum_even(10)\
    \ == false\n@assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12)\
    \ == false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4p1xldx.jl:15\nin expression starting at\
    \ /tmp/tmpn4p1xldx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n    then return true\n    else if n==1\n    then return true\n    else\
    \ if n==2\n    then return true\n    else if n==3\n    then return true\n    else\
    \ if n==4\n    then return true\n    else if n==5\n    then return true\n    else\
    \ if n==6\n    then return true\n    else if n==7\n    then return true\n    else\
    \ if n==8\n    then return true\n    else if n==9\n    then return true\n    else\
    \ if n==10\n    then return true\n    else if n==11\n    then return true\n  \
    \  else if n==12\n    then return true\n    else if n==13\n    then return true\n\
    \    else if n==14\n    then return true\n    else if n==15\n    then return true\n\
    \    else if n==16\n    then return true\n    else if n==17\n    then return true\n\
    \    else if n==18\n    then return true\n    else if n==19\n    then return true\n\
    \    else if n==20\n    then return true\n    else if n==21\n    then return true\n\
    \    else if n==22\n    then return true\n    else if n==23\n    then return true\n\
    \    else if n==24\n    then return true\n    else if n==25\n    then return true\n\
    \    else if n==26\n    then return true\n    else if n==27\n    then return true\n\
    \    else if n==28\n    then return true\n    else if n==29\n    then return true\n\
    \    else if n==30\n    then return true\n    else if n==31\n    then return true\n\
    \    else if n==32\n    then return true\n    else if n==33\n    then return true\n\
    \    else if n==34\n    then return true\n    else if n==35\n    then return true\n\
    \    else if n==36\n    then return true\n    else if n==37\n    then return true\n\
    \    else if n==38\n    then return true\n    else if n==39\n    then return true\n\
    \    else if n==40\n    then return true\n    else if n==41\n    then return true\n\
    \    else if n==42\n    then return \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp48e22cxo.jl:12\nin expression starting at /tmp/tmp48e22cxo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_equal_to_sum_even(8)\n</cell>\n<code language=julia-1.3>\n\
    @time is_equal_to_sum_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6065lkr.jl:16\nin expression starting at\
    \ /tmp/tmpj6065lkr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(2) == false\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the sum of the first $n$ positive integers.\
    \ Your function should work for $n = 1$, $n = 2$, $n = 3$, $n = 4$, $n = 5$, $n\
    \ = 6$, $n = 7$, $n = 8$, $n = 9$, $n = 10$, $n = 11$, $n = 12$, $n = 13$, $n\
    \ = 14$, $n = 15$, $n = 16$, $n = 17$, $n = 18$, $n = 19$, $n = 20$, $n = 21$,\
    \ $n = 22$, $n = 23$, $n = 24$, $n = 25$, $n = 26$, $n = 27$, $n = 28$, $n = 29$,\
    \ $n = 30$, $n = 31$, $n = 32$, $n = 33$, $n = 34$, $n = 35$, $n = 36$, $n = 37$,\
    \ $n = 38$, $n = 39$, $n = 40$, $n = 41$, $n = 42$, $n = 43$, $n = 44$, $n = 45$,\
    \ $n = 46$, $n = 47$, $n = 48$, $n = 49$, $n = 50$, $n = 51$, $n = 52$, $n = 53$,\
    \ $n = 54$, $n = 55$, $n = 56$, $n = 57$, $n = 58$, $n = 59$, $n = 60$, $n = 61$,\
    \ $n = 62$, $n = 63$, $n = 64$, $n = 65$, $n = 66$, $n = 67$, $n = 68$, $n = 69$,\
    \ $n = 70$, $n = 71$, $n = 72$, $n = 73$, $n = 74$, $n = 75$, $n = 76$, $n = 77$,\
    \ $n = 78$, $n = 79$, $n = 80$, $n = 81$, $n = 82$, $n = 83$, $n = 84$, $n = 85$,\
    \ $n = 86$, $n = 87$, $n = 88$, $n = 89$, $n = 90$, $n = 91$, $n = 92$, $n = 93$,\
    \ $n = 94$, $n = 95$, $n = 96$, $n = 97$, $n = 98$, $n = 99$, $n = 100$, $n =\
    \ 101$, $n = 102$, $n = 103$, $n = 104$, $n = \nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8ruxl1n.jl:15\nin expression starting at\
    \ /tmp/tmps8ruxl1n.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else \n        return false\nend\n\
    </cell>\n<code language=julia-1.3>\n@time is_equal_to_sum_even(4);\n@time is_equal_to_sum_even(6);\n\
    @time is_equal_to_sum_even(8);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks whether a given number n is equal to the sum of exactly 4 positive\
    \ odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n>>> is_equal_to_sum_odd(6)\n\
    true\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tm8qez7.jl:15\nin expression starting at\
    \ /tmp/tmp3tm8qez7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp774h8oma.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp774h8oma.jl:1\n\
    in expression starting at /tmp/tmp774h8oma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert is_equal_to_sum_even(2) == false\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(8) == true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that evaluates whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\nfalse\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwp57u0r.jl:15\nin expression starting at\
    \ /tmp/tmpfwp57u0r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n        return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(10) == false\n@assert\
    \ is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12) == true\n\
    @assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14) ==\
    \ true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(16)\
    \ == true\n@assert is_equal_to_sum_even(17) == true\n@assert is_equal_to_sum_even(18)\
    \ == true\n@assert is_equal_to_sum_even(19) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(21) == true\n@assert is_equal_to_sum_even(22)\
    \ == true\n@assert is_equal_to_sum_even(23) == true\n@assert is_equal_to_sum_even(24)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(26)\
    \ == true\n@assert is_equal_to_sum_even(27) == true\n@assert is_equal_to_sum_even(28)\
    \ == true\n@assert is_equal_to_sum_even(29) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(31) == true\n@assert is_equal_to_sum_even(32)\
    \ == true\n@assert is_equal_to_sum_even(33) == true\n@assert is_equal_to_sum_even(34)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(36)\
    \ == true\n@assert is_equal_to_sum_even(37) == true\n@assert is_equal_to_sum_even(38)\
    \ == true\n@assert is_equal_to_sum_even(39) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(41) == true\n@assert is_equal_to_sum_even(42)\
    \ == true\n@assert is_equal_to_sum_even(43) == true\n@assert is_equal_to_sum_even(44)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(46)\
    \ == true\n@assert is_equal_to_sum_even(47) == true\n@assert is_equal_to_sum_even(48)\
    \ == true\n@assert is_equal_to_sum_even(49) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_equal_to_sum_even(51) == true\n@assert is_equal_to_sum_even(52)\
    \ == true\n@assert is_equal_to_sum_even(53) == true\n@\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2b4oqj5p.jl:15\nin expression starting at\
    \ /tmp/tmp2b4oqj5p.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp372w4bmz.jl:17\nin expression starting at\
    \ /tmp/tmp372w4bmz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qv571og.jl:14\nin expression starting at\
    \ /tmp/tmp8qv571og.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 then return true\n    else if n==1 then return true\n    else if n==2 then\
    \ return true\n    else if n==3 then return true\n    else if n==4 then return\
    \ true\n    else if n==5 then return true\n    else if n==6 then return true\n\
    \    else if n==7 then return true\n    else if n==8 then return true\n    else\
    \ if n==9 then return true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy9i_5kdq.jl:11\nin expression starting at /tmp/tmpy9i_5kdq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(20)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(50)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(100)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(1000)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(10000)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_equal_to_sum_even(100000)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(1000000)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(10000000)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(100000000)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(1000000000)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(10000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(100000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_equal_to_sum_even(1000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9smi9_n.jl:15\nin expression starting at\
    \ /tmp/tmpt9smi9_n.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4\n        return true\n    else if n % 2 == 0\n        return false\n \
    \   else\n        return is_equal_to_sum_even(n - 2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77sa4n4e.jl:13\nin expression starting at\
    \ /tmp/tmp77sa4n4e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else return false\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number n is equal to the\
    \ sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuq9ipe0v.jl:14\nin expression starting at\
    \ /tmp/tmpuq9ipe0v.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7) == true\n\
    @assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(15) ==\
    \ true\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(50) == true\n@assert is_equal_to_sum_even(55)\
    \ == true\n@assert is_equal_to_sum_even(60) == true\n@assert is_equal_to_sum_even(65)\
    \ == true\n@assert is_equal_to_sum_even(70) == true\n@assert is_equal_to_sum_even(75)\
    \ == true\n@assert is_equal_to_sum_even(80) == true\n@assert is_equal_to_sum_even(85)\
    \ == true\n@assert is_equal_to_sum_even(90) == true\n@assert is_equal_to_sum_even(95)\
    \ == true\n@assert is_equal_to_sum_even(100) == true\n@assert is_equal_to_sum_even(101)\
    \ == true\n@assert is_equal_to_sum_even(102) == true\n@assert is_equal_to_sum_even(103)\
    \ == true\n@assert is_equal_to_sum_even(104) == true\n@assert is_equal_to_sum_even(105)\
    \ == true\n@assert is_equal_to_sum_even(106) == true\n@assert is_equal_to_sum_even(107)\
    \ == true\n@assert is_equal_to_sum_even(108) == true\n@assert is_equal_to_sum_even(109)\
    \ == true\n@assert is_equal_to_sum_even(110) == true\n@assert is_equal_to_sum_even(111)\
    \ == true\n@assert is_equal_to_sum_even(112) == true\n@assert is_equal_to_sum_even(113)\
    \ == true\n@assert is_equal_to_sum_even(114) == true\n@assert is_equal_to_sum_even(115)\
    \ == true\n@assert is_equal_to_sum_even(116) == true\n@assert is_equal_to_sum_even(117)\
    \ == true\n@assert is_equal_to_sum_even(118) == true\n@assert is_equal_to_sum_even(119)\
    \ == true\n@assert is_equal_to_sum_even(120) == true\n@assert is_equal_to_sum_even(121)\
    \ == true\n@assert is_equal_to_sum_even(122) == true\n@assert is_equal_to_sum_even(123)\
    \ == true\n@assert is_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9im0ngy1.jl:14\nin expression starting at\
    \ /tmp/tmp9im0ngy1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtty7ryp.jl:14\nin expression starting at\
    \ /tmp/tmpvtty7ryp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2g4kvqq.jl:14\nin expression starting at\
    \ /tmp/tmph2g4kvqq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp774h8oma.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp774h8oma.jl:1\n\
    in expression starting at /tmp/tmp774h8oma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else return false\nend\n</cell>\n\
    <code language=julia-1.3>\nis_equal_to_sum_even(8)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks whether a given number n can be written as the\
    \ sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\ntrue\n>>>\
    \ is_equal_to_sum_odd(10)\nfalse\n>>> is_equal_to_sum_odd(11)\nfalse\n>>> is_equal_to_sum_odd(12)\n\
    false\n>>> is_equal_to_sum_odd(13)\nfalse\n>>> is_equal_to_sum_odd(14)\nfalse\n\
    >>> is_equal_to_sum_odd(15)\nfalse\n>>> is_equal_to_sum_odd(16)\nfalse\n>>> is_equal_to_sum_odd(17)\n\
    false\n>>> is_equal_to_sum_odd(18)\nfalse\n>>> is_equal_to_sum_odd(19)\nfalse\n\
    >>> is_equal_to_sum_odd(20)\nfalse\n>>> is_equal_to_sum_odd(21)\nfalse\n>>> is_equal_to_sum_odd(22)\n\
    false\n>>> is_equal_to_sum_odd(23)\nfalse\n>>> is_equal_to_sum_odd(24)\nfalse\n\
    >>> is_equal_to_sum_odd(25)\nfalse\n>>> is_equal_to_sum_odd(26)\nfalse\n>>> is_equal_to_sum_odd(27)\n\
    false\n>>> is_equal_to_sum_odd(28)\nfalse\n>>> is_equal_to_sum_odd(29)\nfalse\n\
    >>> is_equal_to_sum_odd(30)\nfalse\n>>> is_equal_to_sum_odd(31)\nfalse\n>>> is_equal_to_sum_odd(32)\n\
    false\n>>> is_equal_to_sum_odd(33)\nfalse\n>>> is_equal_to_sum_odd(34)\nfalse\n\
    >>> is_equal_to_sum_odd(35)\nfalse\n>>> is_equal_to_sum_odd(36)\nfalse\n>>> is_equal_to_sum_odd(37)\n\
    false\n>>> is_equal_to_sum_odd(38)\nfalse\n>>> is_equal_to_sum_odd(39)\nfalse\n\
    >>> is_equal_to_sum_odd(40)\nfalse\n>>> is_equal_to_sum_odd(41)\nfalse\n>>> is_equal_to_sum_odd(42)\n\
    false\n>>> is_equal_to_sum_odd(43)\nfalse\n>>> is_equal_to_sum_odd(44)\nfalse\n\
    >>> is_equal_to_sum_odd(45)\nfalse\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnddjdf90.jl:14\nin expression starting at\
    \ /tmp/tmpnddjdf90.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.5>\nis_sum_even(10)\n</cell>\n<code language=julia-1.5>\nis_sum_even(100)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_sum_even(10000)\n</cell>\n<code language=julia-1.5>\nis_sum_even(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_sum_even(10000000)\n</cell>\n<code language=julia-1.5>\nis_sum_even(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_sum_even(10000000000)\n</cell>\n<code language=julia-1.5>\nis_sum_even(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_sum_even(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_sum_even(100000000000000)\n</cell>\n<code language=julia-1.5>\nis_sum_even(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_sum_even(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_sum_even(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_sum_even(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_sum_even(1000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_sum_even(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_sum_even(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_sum_even(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_sum_even(10000000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqykua3y.jl:17\nin expression starting at\
    \ /tmp/tmptqykua3y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7)\
    \ == true\n@assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(11)\
    \ == false\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == false\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == false\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == false\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == false\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == false\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == false\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == false\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == false\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == false\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == false\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == false\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == false\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == false\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == false\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == false\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == false\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == false\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == false\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == false\n@assert is_equal_to_sum_even(50) == false\n@assert is_equal_to_sum_even(51)\
    \ == false\n@assert is_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2s56n7c.jl:15\nin expression starting at\
    \ /tmp/tmpe2s56n7c.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\n\"\
    \"\"\n    Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp7qsigwmh.jl:16\nin expression starting at /tmp/tmp7qsigwmh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n    else \n        return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks whether a given number n is equal\
    \ to the sum of exactly 4 positive odd numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr038lo2i.jl:15\nin expression starting at\
    \ /tmp/tmpr038lo2i.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Evaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n\
    \    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n \
    \   false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0y8m4v3d.jl:17\nin expression starting at\
    \ /tmp/tmp0y8m4v3d.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzyg51blu.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzyg51blu.jl:1\n\
    in expression starting at /tmp/tmpzyg51blu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4 return false\n    else if n%2==0 return false\n    else if n%3==0 return\
    \ false\n    else if n%5==0 return false\n    else return true\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sh_0z5x.jl:12\nin expression starting at\
    \ /tmp/tmp3sh_0z5x.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true && n % 2 == 0 && is_equal_to_sum_even(n /\
    \ 2) == true && n % 2 == 0\n    else false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4ci6tack.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ci6tack.jl:1\n\
    in expression starting at /tmp/tmp4ci6tack.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 || n == 1 \n        true\n    else\n        if n % 2 == 0 \n        \
    \    false\n        else\n            if n % 4 == 0 \n                true\n \
    \           else\n                if n % 8 == 0 \n                    true\n \
    \               else\n                    if n % 16 == 0 \n                  \
    \      true\n                    else\n                        if n % 32 == 0\
    \ \n                            true\n                        else\n         \
    \                   if n % 64 == 0 \n                                true\n  \
    \                          else\n                                if n % 128 ==\
    \ 0 \n                                    true\n                             \
    \   else\n                                    if n % 256 == 0 \n             \
    \                           true\n                                    else\n \
    \                                       if n % 512 == 0 \n                   \
    \                         true\n                                        else\n\
    \                                            if n % 1024 == 0 \n             \
    \                                   true\n                                   \
    \         else\n                                                if n % 2048 ==\
    \ 0 \n                                                    true\n             \
    \                                   else\n                                   \
    \                 false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Evaluate whether the given number n can be written as the sum of exactly 4 positive\
    \ odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>>\
    \ is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n    true\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv991xun.jl:50\nin expression starting at\
    \ /tmp/tmpxv991xun.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_equal_to_sum_even(8)\n</cell>\n<text>\nExercise 3\n\
    Write a function that checks whether a given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n\
    >>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\ntrue\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3oio470p.jl:15\nin expression starting at\
    \ /tmp/tmp3oio470p.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n == 0 \n        true\n    else\n        n % 2 == 0 && is_equal_to_sum_even(n\
    \ - 1) || is_equal_to_sum_even(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_equal_to_sum_even(10)\n</cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(20)\n\
    </cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(30)\n</cell>\n<code language=julia-1.5>\n\
    is_equal_to_sum_even(100)\n</cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(100000)\n</cell>\n<code language=julia-1.5>\n\
    is_equal_to_sum_even(1000000)\n</cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_to_sum_even(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_equal_to_sum_even(100000000000)\n</cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_equal_to_sum_even(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_to_sum_even(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_equal_to_sum_even(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_to_sum_even(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_to_sum_even(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_to_sum_even(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_to_sum_even(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_equal_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqac7xwf.jl:16\nin expression starting at\
    \ /tmp/tmphqac7xwf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwn74rybx.jl:15\nin expression starting at\
    \ /tmp/tmpwn74rybx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n        true\n    else\n        if n%2==0\n            false\n       \
    \ else\n            if n%3==0\n                false\n            else\n     \
    \           if n%4==0\n                    true\n                else\n      \
    \              false\n        end\n    end\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that evaluates whether the given number n can be written as the\
    \ sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\nfalse\n>>> is_equal_to_sum_odd(8)\ntrue\n</text>\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupqj0nlg.jl:27\nin expression starting at\
    \ /tmp/tmpupqj0nlg.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49qtkkl2.jl:14\nin expression starting at\
    \ /tmp/tmp49qtkkl2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true\n    else return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@assert is_equal_to_sum_even(5)\
    \ == false\n@assert is_equal_to_sum_even(7) == true\n@assert is_equal_to_sum_even(8)\
    \ == true\n@assert is_equal_to_sum_even(9) == true\n@assert is_equal_to_sum_even(10)\
    \ == true\n@assert is_equal_to_sum_even(11) == true\n@assert is_equal_to_sum_even(12)\
    \ == true\n@assert is_equal_to_sum_even(13) == true\n@assert is_equal_to_sum_even(14)\
    \ == true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(16)\
    \ == true\n@assert is_equal_to_sum_even(17) == true\n@assert is_equal_to_sum_even(18)\
    \ == true\n@assert is_equal_to_sum_even(19) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(21) == true\n@assert is_equal_to_sum_even(22)\
    \ == true\n@assert is_equal_to_sum_even(23) == true\n@assert is_equal_to_sum_even(24)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(26)\
    \ == true\n@assert is_equal_to_sum_even(27) == true\n@assert is_equal_to_sum_even(28)\
    \ == true\n@assert is_equal_to_sum_even(29) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(31) == true\n@assert is_equal_to_sum_even(32)\
    \ == true\n@assert is_equal_to_sum_even(33) == true\n@assert is_equal_to_sum_even(34)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(36)\
    \ == true\n@assert is_equal_to_sum_even(37) == true\n@assert is_equal_to_sum_even(38)\
    \ == true\n@assert is_equal_to_sum_even(39) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(41) == true\n@assert is_equal_to_sum_even(42)\
    \ == true\n@assert is_equal_to_sum_even(43) == true\n@assert is_equal_to_sum_even(44)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(46)\
    \ == true\n@assert is_equal_to_sum_even(47) == true\n@assert is_equal_to_sum_even(48)\
    \ == true\n@assert is_equal_to_\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpelt4kcd1.jl:12\nin expression starting at /tmp/tmpelt4kcd1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else \n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11)\
    \ == true\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == true\n@assert is_equal_to_sum_even(50) == false\n@assert is_equal_to_sum_even(51)\
    \ == true\n@assert is_equal_to_sum_even(52) == false\n@assert is_equal_to_sum_even(53)\
    \ == true\n@\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9l6_7i_.jl:16\nin expression starting at\
    \ /tmp/tmpe9l6_7i_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n<4 return false\n    else if n%2==0 return false\n    else if n%3==0 return\
    \ false\n    else if n%4==0 return true\n    else return false\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzee3fq9v.jl:12\nin expression starting at\
    \ /tmp/tmpzee3fq9v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 \n        return true\n    if n==1 \n        return true\n    if n==2 \n\
    \        return true\n    if n==3 \n        return true\n    if n==4 \n      \
    \  return true\n    if n==5 \n        return true\n    if n==6 \n        return\
    \ true\n    if n==7 \n        return true\n    if n==8 \n        return true\n\
    \    if n==9 \n        return true\n    if n==10 \n        return true\n    if\
    \ n==11 \n        return true\n    if n==12 \n        return true\n    if n==13\
    \ \n        return true\n    if n==14 \n        return true\n    if n==15 \n \
    \       return true\n    if n==16 \n        return true\n    if n==17 \n     \
    \   return true\n    if n==18 \n        return true\n    if n==19 \n        return\
    \ true\n    if n==20 \n        return true\n    if n==21 \n        return true\n\
    \    if n==22 \n        return true\n    if n==23 \n        return true\n    if\
    \ n==24 \n        return true\n    if n==25 \n        return true\n    if n==26\
    \ \n        return true\n    if n==27 \n        return true\n    if n==28 \n \
    \       return true\n    if n==29 \n        return true\n    if n==30 \n     \
    \   return true\n    if n==31 \n        return true\n    if n==32 \n        return\
    \ true\n    if n==33 \n        return true\n    if n==34 \n        return true\n\
    \    if n==35 \n        return true\n    if n==36 \n        return true\n    if\
    \ n==37 \n        return true\n    if n==38 \n        return true\n    if n==39\
    \ \n        return true\n    if n==40 \n        return true\n    if n==41 \n \
    \       return true\n    if n==42 \n        return true\n    if n==43 \n     \
    \   return true\n    if n==44 \n        return true\n    if n==45 \n        return\
    \ true\n    if n==46 \n        return true\n    if n==47 \n        return true\n\
    \    if n==48 \n        return true\n    if n==49 \n        return true\n    if\
    \ n==50 \n        return true\n    if n==51 \n        return true\n    if n==52\
    \ \n        return true\n    if n==53 \n        return true\n    if n==54 \n \
    \       return true\n    if n==55 \n        return true\n    if n==56 \n     \
    \   return true\n    if n==57 \n        return true\n    if n==58 \n        return\
    \ true\n    if n==59 \n        return true\n    if n==60 \n        return true\n\
    \    if n==61 \nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sf6vfqz.jl:1\nin expression starting at /tmp/tmp3sf6vfqz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true && n % 2 == 0 && is_equal_to_sum_even(n /\
    \ 2) == true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(10) == false\n\
    @assert is_equal_to_sum_even(11) == false\n@assert is_equal_to_sum_even(12) ==\
    \ false\n@assert is_equal_to_sum_even(13) == false\n@assert is_equal_to_sum_even(14)\
    \ == false\n@assert is_equal_to_sum_even(15) == false\n@assert is_equal_to_sum_even(16)\
    \ == false\n@assert is_equal_to_sum_even(17) == false\n@assert is_equal_to_sum_even(18)\
    \ == false\n@assert is_equal_to_sum_even(19) == false\n@assert is_equal_to_sum_even(20)\
    \ == false\n@assert is_equal_to_sum_even(21) == false\n@assert is_equal_to_sum_even(22)\
    \ == false\n@assert is_equal_to_sum_even(23) == false\n@assert is_equal_to_sum_even(24)\
    \ == false\n@assert is_equal_to_sum_even(25) == false\n@assert is_equal_to_sum_even(26)\
    \ == false\n@assert is_equal_to_sum_even(27) == false\n@assert is_equal_to_sum_even(28)\
    \ == false\n@assert is_equal_to_sum_even(29) == false\n@assert is_equal_to_sum_even(30)\
    \ == false\n@assert is_equal_to_sum_even(31) == false\n@assert is_equal_to_sum_even(32)\
    \ == false\n@assert is_equal_to_sum_even(33) == false\n@assert is_equal_to_sum_even(34)\
    \ == false\n@assert is_equal_to_sum_even(35) == false\n@assert is_equal_to_sum_even(36)\
    \ == false\n@assert is_equal_to_sum_even(37) == false\n@assert is_equal_to_sum_even(38)\
    \ == false\n@assert is_equal_to_sum_even(39) == false\n@assert is_equal_to_sum_even(40)\
    \ == false\n@assert is_equal_to_sum_even(41) == false\n@assert is_equal_to_sum_even(42)\
    \ == false\n@assert is_equal_to_sum_even(43) == false\n@assert is_equal_to_sum_even(44)\
    \ == false\n@assert is_equal_to_sum_even(45) == false\n@assert is_equal_to_sum_even(46)\
    \ == false\n@assert is_equal_to_sum_even(47) == false\n@assert is_equal_to_sum_even(48)\
    \ == false\n@assert is_equal_to_sum_even(49) == false\n@assert is_equal_to_sum_even(50)\
    \ == false\n@assert is_equal_to_sum_even(51) == false\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zzql_co.jl:14\nin expression starting at\
    \ /tmp/tmp8zzql_co.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(6)\
    \ == false\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(7)\
    \ == false\n@assert is_equal_to_sum_even(10) == false\n@assert is_equal_to_sum_even(11)\
    \ == false\n@assert is_equal_to_sum_even(12) == false\n@assert is_equal_to_sum_even(13)\
    \ == false\n@assert is_equal_to_sum_even(14) == false\n@assert is_equal_to_sum_even(15)\
    \ == false\n@assert is_equal_to_sum_even(16) == false\n@assert is_equal_to_sum_even(17)\
    \ == false\n@assert is_equal_to_sum_even(18) == false\n@assert is_equal_to_sum_even(19)\
    \ == false\n@assert is_equal_to_sum_even(20) == false\n@assert is_equal_to_sum_even(21)\
    \ == false\n@assert is_equal_to_sum_even(22) == false\n@assert is_equal_to_sum_even(23)\
    \ == false\n@assert is_equal_to_sum_even(24) == false\n@assert is_equal_to_sum_even(25)\
    \ == false\n@assert is_equal_to_sum_even(26) == false\n@assert is_equal_to_sum_even(27)\
    \ == false\n@assert is_equal_to_sum_even(28) == false\n@assert is_equal_to_sum_even(29)\
    \ == false\n@assert is_equal_to_sum_even(30) == false\n@assert is_equal_to_sum_even(31)\
    \ == false\n@assert is_equal_to_sum_even(32) == false\n@assert is_equal_to_sum_even(33)\
    \ == false\n@assert is_equal_to_sum_even(34) == false\n@assert is_equal_to_sum_even(35)\
    \ == false\n@assert is_equal_to_sum_even(36) == false\n@assert is_equal_to_sum_even(37)\
    \ == false\n@assert is_equal_to_sum_even(38) == false\n@assert is_equal_to_sum_even(39)\
    \ == false\n@assert is_equal_to_sum_even(40) == false\n@assert is_equal_to_sum_even(41)\
    \ == false\n@assert is_equal_to_sum_even(42) == false\n@assert is_equal_to_sum_even(43)\
    \ == false\n@assert is_equal_to_sum_even(44) == false\n@assert is_equal_to_sum_even(45)\
    \ == false\n@assert is_equal_to_sum_even(46) == false\n@assert is_equal_to_sum_even(47)\
    \ == false\n@assert is_equal_to_sum_even(48) == false\n@assert is_equal_to_sum_even(49)\
    \ == false\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp874i5_jn.jl:15\nin expression starting at\
    \ /tmp/tmp874i5_jn.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else \n        false\nend\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(1000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10000)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(1000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(1000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(1000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_even(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_equal_to_sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzv7pa4y.jl:15\nin expression starting at\
    \ /tmp/tmpnzv7pa4y.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_4_even(n) == true\n    else \n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(10)\
    \ == true\n@assert is_equal_to_sum_even(15) == true\n@assert is_equal_to_sum_even(20)\
    \ == true\n@assert is_equal_to_sum_even(25) == true\n@assert is_equal_to_sum_even(30)\
    \ == true\n@assert is_equal_to_sum_even(35) == true\n@assert is_equal_to_sum_even(40)\
    \ == true\n@assert is_equal_to_sum_even(45) == true\n@assert is_equal_to_sum_even(50)\
    \ == true\n@assert is_equal_to_sum_even(55) == true\n@assert is_equal_to_sum_even(60)\
    \ == true\n@assert is_equal_to_sum_even(65) == true\n@assert is_equal_to_sum_even(70)\
    \ == true\n@assert is_equal_to_sum_even(75) == true\n@assert is_equal_to_sum_even(80)\
    \ == true\n@assert is_equal_to_sum_even(85) == true\n@assert is_equal_to_sum_even(90)\
    \ == true\n@assert is_equal_to_sum_even(95) == true\n@assert is_equal_to_sum_even(100)\
    \ == true\n@assert is_equal_to_sum_even(101) == true\n@assert is_equal_to_sum_even(102)\
    \ == true\n@assert is_equal_to_sum_even(103) == true\n@assert is_equal_to_sum_even(104)\
    \ == true\n@assert is_equal_to_sum_even(105) == true\n@assert is_equal_to_sum_even(106)\
    \ == true\n@assert is_equal_to_sum_even(107) == true\n@assert is_equal_to_sum_even(108)\
    \ == true\n@assert is_equal_to_sum_even(109) == true\n@assert is_equal_to_sum_even(110)\
    \ == true\n@assert is_equal_to_sum_even(111) == true\n@assert is_equal_to_sum_even(112)\
    \ == true\n@assert is_equal_to_sum_even(113) == true\n@assert is_equal_to_sum_even(114)\
    \ == true\n@assert is_equal_to_sum_even(115) == true\n@assert is_equal_to_sum_even(116)\
    \ == true\n@assert is_equal_to_sum_even(117) == true\n@assert is_equal_to_sum_even(118)\
    \ == true\n@assert is_equal_to_sum_even(119) == true\n@assert is_equal_to_sum_even(120)\
    \ == true\n@assert is_equal_to_sum_even(121) == true\n@assert is_equal_to_sum_even(122)\
    \ == true\n@assert is_equal_to_sum_even(123) == true\n@assert is_equal_to_sum_even(124\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuognkd87.jl:16\nin expression starting at\
    \ /tmp/tmpuognkd87.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_four_positive(n, 4)\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2pr2sxq.jl:14\nin expression starting at\
    \ /tmp/tmpf2pr2sxq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqblqb85s.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqblqb85s.jl:1\n\
    in expression starting at /tmp/tmpqblqb85s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31e6_bio.jl:15\nin expression starting at\
    \ /tmp/tmp31e6_bio.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1)\n        return true\n    else \n        return false\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Evaluate whether the given number\
    \ n can be written as the sum of exactly 4 positive odd numbers\n    Example\n\
    \    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n \
    \   false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\
    \t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5276rcg_.jl:16\nin expression starting at\
    \ /tmp/tmp5276rcg_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_equal_to_sum_even(5)\
    \ == false\n@assert is_equal_to_sum_even(6) == false\n@assert is_equal_to_sum_even(7)\
    \ == true\n@assert is_equal_to_sum_even(8) == true\n@assert is_equal_to_sum_even(9)\
    \ == true\n@assert is_equal_to_sum_even(10) == true\n@assert is_equal_to_sum_even(11)\
    \ == true\n@assert is_equal_to_sum_even(12) == true\n@assert is_equal_to_sum_even(13)\
    \ == true\n@assert is_equal_to_sum_even(14) == true\n@assert is_equal_to_sum_even(15)\
    \ == true\n@assert is_equal_to_sum_even(16) == true\n@assert is_equal_to_sum_even(17)\
    \ == true\n@assert is_equal_to_sum_even(18) == true\n@assert is_equal_to_sum_even(19)\
    \ == true\n@assert is_equal_to_sum_even(20) == true\n@assert is_equal_to_sum_even(21)\
    \ == true\n@assert is_equal_to_sum_even(22) == true\n@assert is_equal_to_sum_even(23)\
    \ == true\n@assert is_equal_to_sum_even(24) == true\n@assert is_equal_to_sum_even(25)\
    \ == true\n@assert is_equal_to_sum_even(26) == true\n@assert is_equal_to_sum_even(27)\
    \ == true\n@assert is_equal_to_sum_even(28) == true\n@assert is_equal_to_sum_even(29)\
    \ == true\n@assert is_equal_to_sum_even(30) == true\n@assert is_equal_to_sum_even(31)\
    \ == true\n@assert is_equal_to_sum_even(32) == true\n@assert is_equal_to_sum_even(33)\
    \ == true\n@assert is_equal_to_sum_even(34) == true\n@assert is_equal_to_sum_even(35)\
    \ == true\n@assert is_equal_to_sum_even(36) == true\n@assert is_equal_to_sum_even(37)\
    \ == true\n@assert is_equal_to_sum_even(38) == true\n@assert is_equal_to_sum_even(39)\
    \ == true\n@assert is_equal_to_sum_even(40) == true\n@assert is_equal_to_sum_even(41)\
    \ == true\n@assert is_equal_to_sum_even(42) == true\n@assert is_equal_to_sum_even(43)\
    \ == true\n@assert is_equal_to_sum_even(44) == true\n@assert is_equal_to_sum_even(45)\
    \ == true\n@assert is_equal_to_sum_even(46) == true\n@assert is_equal_to_sum_even(47)\
    \ == true\n@assert is_equal_to_sum_even(48) == true\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr_45ig_.jl:17\nin expression starting at\
    \ /tmp/tmpsr_45ig_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n) == true\n    else return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpir5vcg52.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpir5vcg52.jl:1\n\
    in expression starting at /tmp/tmpir5vcg52.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_equal_to_sum_even(5) == false\n@assert is_equal_to_sum_even(8)\
    \ == true\n</cell>\n<text>\nExercise 2\nWrite a function that checks whether a\
    \ given number n is divisible by 3 or 5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45hzh87g.jl:15\nin expression starting at\
    \ /tmp/tmp45hzh87g.jl:15\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmphvr1gbkl.jl:21\n  Test threw
    exception\n  Expression: candidate(4) == false\n  UndefVarError: is_equal_to_sum_even_helper
    not defined\n  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @ Main
    /tmp/tmphvr1gbkl.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvr1gbkl.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvr1gbkl.jl:20\ntest set: Error
    During Test at /tmp/tmphvr1gbkl.jl:22\n  Test threw exception\n  Expression: candidate(6)
    == false\n  UndefVarError: is_equal_to_sum_even_helper not defined\n  Stacktrace:\n   [1]
    is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmphvr1gbkl.jl:11\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvr1gbkl.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvr1gbkl.jl:20\ntest set: Error
    During Test at /tmp/tmphvr1gbkl.jl:23\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_equal_to_sum_even_helper not defined\n  Stacktrace:\n   [1]
    is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmphvr1gbkl.jl:11\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphvr1gbkl.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphvr1gbkl.jl:20\ntest set: Error
    During Test at /tmp/tmphvr1gbkl.jl:24\n  Test threw exception\n  Expression: candidate(10)
    == true\n  UndefVarError: is_equal_to_sum_even_helper not defined\n  Stacktrace:\n   [1]
    is_equ'
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n        true\n    else\n        ((n%2==0)&&(n%4==0))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj4kzpfx0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj4kzpfx0.jl:1\n\
    in expression starting at /tmp/tmpj4kzpfx0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n        return true\n    else\n        return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv2641hfz.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv2641hfz.jl:1\n\
    in expression starting at /tmp/tmpv2641hfz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0 \n        true\n    else\n        sum_even(n-1)==n\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks whether a given number n is divisible\
    \ by 3 or 5 but not both.\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgaynaed.jl:16\nin expression starting at\
    \ /tmp/tmptgaynaed.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_of_even(n) == true\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfmmftz5o.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpfmmftz5o.jl:22\n  Test threw exception\n\
    \  Expression: candidate(4) == false\n  UndefVarError: is_sum_of_even not defined\n\
    \  Stacktrace:\n   [1] is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmpfmmftz5o.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmmftz5o.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmmftz5o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfmmftz5o.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(6) == false\n  UndefVarError: is_sum_of_even not defined\n  Stacktrace:\n\
    \   [1] is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmpfmmftz5o.jl:11\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmmftz5o.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmmftz5o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfmmftz5o.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: is_sum_of_even not defined\n  Stacktrace:\n\
    \   [1] is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmpfmmftz5o.jl:11\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmmftz5o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmmftz5o.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfmmftz5o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == true\n  UndefVarError: is_sum_of_even not defined\n  Stacktrace:\n\
    \   [1] is_equal_to_sum_even(n::Int64)\n     @ Main /tmp/tmpfmmftz5o.jl:11\n \
    \  [2] macro expansion\n     @ /shared/centos"
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true \n    then return true\n    else return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Evaluate whether the\
    \ given number n can be written as the sum of exactly 4 positive odd numbers\n\
    \    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n    >>> is_equal_to_sum_odd(6)\n\
    \    false\n    >>> is_equal_to_sum_odd(8)\n    true\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) ==\
    \ false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t\
    @test(candidate(13) == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt0jk7ftr.jl:12\nin expression starting at /tmp/tmpt0jk7ftr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(8)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype is_equal_to_sum_even(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number n is equal\
    \ to the sum of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\n\
    false\n>>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnd3bofm3.jl:15\nin expression starting at\
    \ /tmp/tmpnd3bofm3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n < 4 \n        return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"Evaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n\
    \    false\n    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n\
    \    true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ji_mort.jl:16\nin expression starting at\
    \ /tmp/tmp0ji_mort.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@code_native is_equal_to_sum_even(4)\n</cell>\n<code language=julia-1.4>\n\
    @code_native is_equal_to_sum_even(6)\n</cell>\n<code language=julia-1.4>\n@code_native\
    \ is_equal_to_sum_even(8)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks whether a given number n is equal to the sum of exactly 4 positive odd\
    \ numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n>>> is_equal_to_sum_odd(6)\n\
    true\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95abc1ow.jl:15\nin expression starting at\
    \ /tmp/tmp95abc1ow.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else return false\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_equal_to_sum_even(8)\n</cell>\n<text>\nExercise 3\n\
    Write a function that checks whether a given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\nExample\n>>> is_equal_to_sum_odd(4)\nfalse\n\
    >>> is_equal_to_sum_odd(6)\ntrue\n>>> is_equal_to_sum_odd(8)\nfalse\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7j284q5f.jl:14\nin expression starting at\
    \ /tmp/tmp7j284q5f.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_sum_even(n) == true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4)\n    false\n\
    \    >>> is_equal_to_sum_odd(6)\n    false\n    >>> is_equal_to_sum_odd(8)\n \
    \   true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qv571og.jl:14\nin expression starting at\
    \ /tmp/tmp8qv571og.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even_helper(n,4)\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\
    \t@test(candidate(4) == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t\
    @test(candidate(12) == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidmuoh12.jl:15\nin expression starting at\
    \ /tmp/tmpidmuoh12.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ is_equal_to_sum_even(n-1) == true\n    else \n        return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_equal_to_sum_even;\n\t@test(candidate(4)\
    \ == false)\n\t@test(candidate(6) == false)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == true)\n\t@test(candidate(11) == false)\n\t@test(candidate(12)\
    \ == true)\n\t@test(candidate(13) == false)\n\t@test(candidate(16) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp87qzm_ef.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp87qzm_ef.jl:1\n\
    in expression starting at /tmp/tmp87qzm_ef.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4)\n\
    \    false\n    >>> is_equal_to_sum_even(6)\n    false\n    >>> is_equal_to_sum_even(8)\n\
    \    true\n    \"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool \n    if\
    \ n==0\n    then return true\n    else if n==1\n    then return true\n    else\
    \ if n==2\n    then return true\n    else if n==3\n    then return true\n    else\
    \ if n==4\n    then return true\n    else if n==5\n    then return true\n    else\
    \ if n==6\n    then return true\n    else if n==7\n    then return true\n    else\
    \ if n==8\n    then return true\n    else if n==9\n    then return true\n    else\
    \ if n==10\n    then return true\n    else if n==11\n    then return true\n  \
    \  else if n==12\n    then return true\n    else if n==13\n    then return true\n\
    \    else if n==14\n    then return true\n    else if n==15\n    then return true\n\
    \    else if n==16\n    then return true\n    else if n==17\n    then return true\n\
    \    else if n==18\n    then return true\n    else if n==19\n    then return true\n\
    \    else if n==20\n    then return true\n    else if n==21\n    then return true\n\
    \    else if n==22\n    then return true\n    else if n==23\n    then return true\n\
    \    else if n==24\n    then return true\n    else if n==25\n    then return true\n\
    \    else if n==26\n    then return true\n    else if n==27\n    then return true\n\
    \    else if n==28\n    then return true\n    else if n==29\n    then return true\n\
    \    else if n==30\n    then return true\n    else if n==31\n    then return true\n\
    \    else if n==32\n    then return true\n    else if n==33\n    then return true\n\
    \    else if n==34\n    then return true\n    else if n==35\n    then return true\n\
    \    else if n==36\n    then return true\n    else if n==37\n    then return true\n\
    \    else if n==38\n    then return true\n    else if n==39\n    then return true\n\
    \    else if n==40\n    then return true\n    else if n==41\n    then return true\n\
    \    else if n==42\n    then return \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_equal_to_sum_even;\n\t@test(candidate(4) == false)\n\t@test(candidate(6)\
    \ == false)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == true)\n\t\
    @test(candidate(11) == false)\n\t@test(candidate(12) == true)\n\t@test(candidate(13)\
    \ == false)\n\t@test(candidate(16) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp48e22cxo.jl:12\nin expression starting at /tmp/tmp48e22cxo.jl:12\n"
  stdout: ''
