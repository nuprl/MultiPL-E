name: HumanEval_37_sort_even
language: jl
prompt: "\"\"\"This function takes a vector l and returns a vector l' such that\n\
  \    l' is identical to l in the odd indicies, while its values at the even indicies\
  \ are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1,\
  \ 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n   \
  \ \"\"\"\nfunction sort_even(l::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_even;\n\t@test(candidate([1,\
  \ 2, 3]) == [1, 2, 3])\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
  \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\t@test(candidate([5, 8, -12, 4,\
  \ 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\nend\n"
completions: ["    even = l[findall(l .== 0)]\n    odd = l[findall(l .!= 0)]\n   \
    \ even.sort()\n    odd.sort()\n    return even .+ odd\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector l and returns a vector l' such\
    \ that\n    l' is identical to l in the even indicies, while its values at the\
    \ odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n\
    \    >>> sort_odd([1, 2, 3])\n    [1, 3, 2]\n    >>> sort_odd([5, 6, 3, 4])\n\
    \    [4, 6, 5, 3]\n    \"\"\"", "    even = l[findall(l .% 2 == 0)]\n    odd =\
    \ l[findall(l .% 2 != 0)]\n    even.sort()\n    odd.sort()\n    l = even .+ odd\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    even = l[findall(l\
    \ .% 2 == 0)]\n    odd = l[findall(l .% 2 != 0)]\n    even.sort()\n    odd.sort()\n\
    \    even.extend(odd)\n    return even\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if there are duplicates in the input vector. For example, `sort_even([1,\
    \ 1, 2])` returns `[1, 1, 2]` instead of `[1, 2]`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the problem you mentioned\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ duplicates in the input vector. For example, `sort_even([1, 1, 2])` returns\
    \ `[1, 1, 2]` instead of `[1, 2]`.\n<|/ c |>\n<| a tags=sorting,julia,arrays |>\n\
    <code>", "    even = l[findall(l .% 2 == 0)]\n    odd = l[findall(l .% 2 != 0)]\n\
    \    even.sort()\n    odd.sort()\n    l = even\n    l .= odd\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    even = l[findall(l .% 2 == 0)]\n   \
    \ odd = l[findall(l .% 2 != 0)]\n    even.sort()\n    odd.sort()\n    return even\
    \ .+ odd\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nI like your solution,\
    \ but I believe it can be improved by using [`sortperm`](http://docs.julialang.org/en/stable/stdlib/arrays/#Base.sortperm).\n\
    <|/ c |>\n<| c |>\nI agree that `sortperm` would be a better solution. I've edited\
    \ my answer to include it.\n<|/ c |>\n<| a tags=julia,sorting |>\nHere's a solution\
    \ using sortperm:\n<code>\njulia> function sort_even(l::Vector{Int64})\n     \
    \      even = l[findall(l .% 2 == 0)]\n           odd = l[findall(l .% 2 != 0)]\n\
    \           even.sort()\n           odd.sort()\n           return even .+ odd\n\
    \       end", "    even = l[findall(l .% 2 == 0)]\n    odd = l[findall(l .% 2\
    \ .== 1)]\n    even.sort()\n    odd.sort()\n    return even .+ odd\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work for `sort_even([5, 6, 3, 4])` which\
    \ should return `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've fixed the code now.\n<|/ c |>\n<| a tags=julia,sorting |>\n<code>", " \
    \   even = l[findall(l .== 0)]\n    odd = l[findall(l .!= 0)]\n    even.sort()\n\
    \    odd.sort()\n    even.extend(odd)\n    return even\nend\n</cell>\n<code language=julia-1.5>",
  "    even = l[findall(l .% 2 == 0)]\n    odd = l[findall(l .% 2 != 0)]\n    even.sort()\n\
    \    odd.sort()\n    return even .+ odd\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work for `sort_even([5, 6, 3, 4])` which should return `[3, 6, 5, 4]`\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out\n<|/ c |>\n<| a\
    \ |>\n<code>", "    even = l[findall(l .== 0)]\n    odd = l[findall(l .!= 0)]\n\
    \    even = sort(even)\n    odd = sort(odd)\n    return even .+ odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    even = l[findall(l .% 2 == 0)]\n    odd = l[findall(l\
    \ .% 2 .== 1)]\n    even = sort_even(even)\n    odd = sort_even(odd)\n    even\
    \ = union(even, odd)\n    return even\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't seem to work. `sort_even([1,2,3])` returns `[1,2,3]` instead of `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and it works. I guess it depends\
    \ on the version of julia you are using.\n<|/ c |>\n<| c |>\nI tested it on julia\
    \ 0.6.2 and it works. I guess it depends on the version of julia you are using.\n\
    <|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and it works. I guess it depends\
    \ on the version of julia you are using.\n<|/ c |>\n<| c |>\nI tested it on julia\
    \ 0.6.2 and it works. I guess it depends on the version of julia you are using.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>", "    even = l[findall(l .== 0)]\n    odd\
    \ = l[findall(l .!= 0)]\n    even = sort(even)\n    odd = sort(odd)\n    return\
    \ even .+ odd\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do this without having to use an anonymous\
    \ function?\n<|/ c |>\n<| c |>\nI added a solution without an anonymous function\n\
    <|/ c |>\n<| c |>\nI added a solution without an anonymous function\n<|/ c |>\n\
    <| a dscore=1 |>\nHere's a solution without an anonymous function:\n<code>", " \
    \   even = l[findall(l .% 2 == 0)]\n    odd = l[findall(l .% 2 .== 1)]\n    even\
    \ = sort_even(even)\n    odd = sort_even(odd)\n    even = union(even, odd)\n \
    \   return even\nend\n</cell>\n<code language=julia-1.5>", "    even = l[findall(l\
    \ .% 2 == 0)]\n    odd = l[findall(l .% 2 .== 1)]\n    even.sort()\n    odd.sort()\n\
    \    even.extend(odd)\n    return even\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,sorting |>\n<code>", "    even = l[findall(l .% 2 == 0)]\n    odd\
    \ = l[findall(l .% 2 != 0)]\n    even = sort_even(even)\n    odd = sort_even(odd)\n\
    \    even = union(even, odd)\n    return even\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nI like your solution, but I thought I'd add my own because I\
    \ like recursion.\n<code>", "    even = l[findall(l .== 0)]\n    odd = l[findall(l\
    \ .!= 0)]\n    even.sort()\n    odd.sort()\n    even.extend(odd)\n    return even\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if there are duplicates\
    \ in the input vector. For example, `sort_even([1, 1, 2, 3])` returns `[1, 1,\
    \ 2, 3]` instead of `[1, 2, 3]`.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I fixed the code by sorting the odd indicies first and then the even indicies.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    even = l[findall(l .% 2 == 0)]\n   \
    \ odd = l[findall(l .% 2 != 0)]\n    even.sort()\n    odd.sort()\n    even.extend(odd)\n\
    \    return even\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_even([5,6,3,4])` returns `[3,6,5,4]` instead of `[3,6,4,5]`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works for me. Are you sure you copied the\
    \ code correctly? I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI copied it exactly\
    \ as you wrote it. I also tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n\
    <| a tags=julia |>\nA simple solution:\n<code>", "    even = l[findall(l .== 0)]\n\
    \    odd = l[findall(l .!= 0)]\n    even.sort()\n    odd.sort()\n    return even\
    \ .+ odd\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there\
    \ are duplicates in the input vector. For example, `sort_even([1, 1, 2, 3])` returns\
    \ `[1, 1, 2, 3]` instead of `[1, 2, 3]`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with duplicates.\n<|/ c |>\n<| a tags=julia |>\nHere's a solution\
    \ using sortperm:\n<code>\njulia> function sort_even(l::Vector{Int64})::Vector{Int64}\n\
    \           even = l[findall(l .== 0)]\n           odd = l[findall(l .!= 0)]\n\
    \           even.sort()\n           odd.sort()\n           return even .+ odd\n\
    \       end\nsort_even (generic function with 1 method)", "    even = l[findall(l\
    \ .== 0)]\n    odd = l[findall(l .!= 0)]\n    even = sort_even(even)\n    odd\
    \ = sort_even(odd)\n    even = union(even, odd)\n    return even\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector l and returns a vector\
    \ l' such that\n    l' is identical to l in the even indicies, while its values\
    \ at the odd indicies are equal\n    to the values of the odd indicies of l, but\
    \ sorted.\n    >>> sort_odd([1, 2, 3])\n    [1, 3, 2]\n    >>> sort_odd([5, 6,\
    \ 3, 4])\n    [4, 6, 5, 3]\n    \"\"\"", "    even = l[findall(l .% 2 == 0)]\n\
    \    odd = l[findall(l .% 2 != 0)]\n    even.sort()\n    odd.sort()\n    return\
    \ even .+ odd\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `sort_even([5,\
    \ 6, 3, 4])` returns `[3, 6, 5, 4]` instead of `[5, 6, 3, 4]`.\n<|/ c |>\n<| c\
    \ |>\nI see what you mean. Thanks for pointing that out. I've edited my answer\
    \ to fix it.\n<|/ c |>\n<| a dscore=1 |>\nI came up with a solution that is quite\
    \ similar to what was proposed in the comments, but I thought I'd post it here\
    \ for completeness.\n<code>", "    even = l[findall(l .% 2 == 0)]\n    odd = l[findall(l\
    \ .% 2 != 0)]\n    even.sort()\n    odd.sort()\n    return even .+ odd\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort_even([5,\
    \ 6, 3, 4])` returns `[3, 5, 6, 4]` instead of `[3, 6, 5, 4]`.\n<|/ c |>\n<| c\
    \ |>\nI tested it on Julia 0.6.1 and it works. What version are you using?\n<|/\
    \ c |>\n<| c |>\nI'm using 0.6.1. I guess it's an issue with my version of Julia.\
    \ I'll try it on another machine and see if it works.\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me on 0.6.1 on OS X. Perhaps try reinstalling Julia?\n<|/ c |>\n<|\
    \ c |>\nI reinstalled Julia and it still doesn't work. I'm on 0.6.1 on OS X. I'll\
    \ try it on another machine and see if it works.\n<|/ c |>\n<| a tags=julia |>\n\
    I wrote a package called Sorting.jl that does exactly this. It sorts even and\
    \ odd numbers in an array:\n<code>\njulia> using Sorting"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
