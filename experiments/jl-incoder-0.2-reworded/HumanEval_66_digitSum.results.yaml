language: jl
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum (map (\\c -> if c >= 'A' && c <= 'Z' then\
    \ c - 'A' else 0, s))\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the sum of the digits in that string.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpudno1jcm.jl:20\nin expression starting at /tmp/tmpudno1jcm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p8hywzo.jl:22\nin expression starting at\
    \ /tmp/tmp9p8hywzo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj2hp1u2.jl:22\nin expression starting at\
    \ /tmp/tmpsj2hp1u2.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmtdfwmv.jl:25\nin expression starting at\
    \ /tmp/tmppmtdfwmv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6cl4r2dj.jl:21\nin expression starting at /tmp/tmp6cl4r2dj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= 'A' and c <= 'Z':\n \
    \           sum += (c - 'A' + 10)\n        elif c >= 'a' and c <= 'z':\n     \
    \       sum += (c - 'a' + 10)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are upper case letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfqfy8c5.jl:22\nin expression starting at\
    \ /tmp/tmpjfqfy8c5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum = sum + c - '0'\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the sum of the digits of that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1xz1j8hi.jl:21\nin expression starting at /tmp/tmp1xz1j8hi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zjziwbj.jl:22\nin expression starting at\
    \ /tmp/tmp1zjziwbj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p8hywzo.jl:22\nin expression starting at\
    \ /tmp/tmp9p8hywzo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= 'a' && c <= 'z' then\
    \ \n            sum += c - 'a'\n        else \n            sum += c - 'A'\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the numbers in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp213q5c1l.jl:21\nin expression starting at /tmp/tmp213q5c1l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg00sn48a.jl:24\nin expression starting at\
    \ /tmp/tmpg00sn48a.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The question was about using only `if` statements, not `for` loops.\n<|/ c |>\n\
    <| c |>\nThe question was about using only `if` statements, not `for` loops.\n\
    <|/ c |>\n<| c |>\nThe question was about using only `if` statements, not `for`\
    \ loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if` statements,\
    \ not `for` loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if`\
    \ statements, not `for` loops.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map ord $ filter (\\\
    c -> ord c >= 'A' && ord c <= 'Z') s)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe\
    \ question was about using only `if` statements, not `for` loops.\n<|/ c |>\n\
    <| c |>\nThe question was about using only `if` statements, not `for` loops.\n\
    <|/ c |>\n<| c |>\nThe question was about using only `if` statements, not `for`\
    \ loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if` statements,\
    \ not `for` loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if`\
    \ statements, not `for` loops.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum ::\
    \ String -> Int\ndigitSum s = sum (map ord $ filter (\\c -> ord c >= 'A' && ord\
    \ c <= 'Z') s)\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n\
    The question was about using only `if` statements, not `for` loops.\n<|/ c |>\n\
    <| c |>\nThe question was about using only `if` statements, not `for` loops.\n\
    <|/ c |>\n<| c |>\nThe question was \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ure_3mt.jl:22\nin expression starting at\
    \ /tmp/tmp6ure_3mt.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> c.isUpper)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> c.isUpper)` - this was the most elegant solution.\
    \ Thank you!\n<|/ c |>\n<| a |>\nHere's a solution using Data.Char:\n<code>\n\
    import Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmidzbj0.jl:25\nin expression starting at\
    \ /tmp/tmpjmidzbj0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like your use of codePointAt. Very nice.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gtp5s2a.jl:22\nin expression starting at\
    \ /tmp/tmp2gtp5s2a.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nThe `isUpper`\
    \ method doesn't exist in Julia. `c.isUpper()` returns `Bool` not `Int64`.\n<|/\
    \ c |>\n<| c |>\nThanks, I fixed the answer.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ answer by is correct, but I wanted to add that you can also use regular expressions\
    \ to solve this problem:\n<code>\ndigitSum(s::String)::Int64 = sum(map(x -> x.isUpper()\
    \ ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2\
    \ |>\nA more Julian way is to use map\n<code>\ndigitSum(s::String)::Int64 = sum(map(x\
    \ -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\nA more Julian way is to use filter:\n<code>\ndigitSum(s::String)::Int64\
    \ = sum(filter(x -> x.isUpper(), s))\n</code>\n<|/ a dscore=2 tags=julia,string\
    \ |>\n<| a dscore=1 |>\nAnother Julian way is to use reduce:\n<code>\ndigitSum(s::String)::Int64\
    \ = reduce(+, map(x -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a\
    \ tags=julia,string |>\n<| a tags=julia,string |>\nAnother Julian way is to use\
    \ reduce:\n<code>\ndigitSum(s::String)::Int64 = reduce(+, map(x -> x.isUpper()\
    \ ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nAnother Julian way is to use reduce:\n<code>\ndigitSum(s::String)::Int64\
    \ = reduce(+, map(x -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=julia,string |>\nAnother Julian way is to use reduce:\n\
    <code>\ndigitSum(s::String)::Int64 = reduce(+, map(x -> x.isUpper() ? x.codePointAt(0)\
    \ : 0, s))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nAnother Julian way is\
    \ to use reduce\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rkcdnom.jl:22\nin expression starting at\
    \ /tmp/tmp3rkcdnom.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= 'A' and c <= 'Z' then\
    \ \n            sum += c - 'A' + 1 \n        else \n            sum += c \n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj_ebev6g.jl:21\nin expression starting at /tmp/tmpj_ebev6g.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' && c <= '9'\n                sum += c - '0'\n       \
    \     else\n                sum += 10\n        end\n        sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the number of upper characters only'\nASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tsfe9gm.jl:32\nin expression starting at\
    \ /tmp/tmp2tsfe9gm.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using any libraries.\n<|/ c |>\n<| c |>\nI added a solution without libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution without libraries.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.Char (toUpper)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjnijna_.jl:22\nin expression starting at\
    \ /tmp/tmpwjnijna_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        if c >= '0' and c <= '9' then\n\
    \            digitSum += c - '0'\n        else\n            digitSum = 0\n   \
    \     end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7dqnxcqn.jl:21\nin expression starting at /tmp/tmp7dqnxcqn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.code\n    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq78128kt.jl:25\nin expression starting at\
    \ /tmp/tmpq78128kt.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum += 0\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore all non-alphabetic\
    \ characters and return 0 if the string contains only alphabetic characters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9lx6mksa.jl:25\nin expression starting at /tmp/tmp9lx6mksa.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprrg9a9jt.jl:21\nin expression starting at /tmp/tmprrg9a9jt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\n`digitSum` doesn't work for `\"abc\"`.\n<|/ c |>\n<| c |>\nI didn't\
    \ notice that at first, but I fixed it now.\n<|/ c |>\n<| a dscore=2 |>\nThe simplest\
    \ solution would be to use Data.Char.digitToInt to convert each character to a\
    \ number, then add them up.\n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqb741_gn.jl:22\nin expression starting at\
    \ /tmp/tmpqb741_gn.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum\
    \ += toUpper(c) - 'A' + 1\n        end\n    end\n    return digitSum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpftxqvhqy.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpftxqvhqy.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"abAB\") == 131\n  UndefVarError: isUpper not defined\n\
    \  Stacktrace:\n   [1] digitSum(s::String)\n     @ Main /tmp/tmpftxqvhqy.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpftxqvhqy.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpftxqvhqy.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpftxqvhqy.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpftxqvhqy.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpftxqvhqy.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpftxqvhqy.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpftxqvhqy.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpftxqvhqy.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpftxqvhqy.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpftxqvhqy.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpftxqvhqy.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"woArBld\") == 131\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpftxqvhqy.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:"
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprrg9a9jt.jl:21\nin expression starting at /tmp/tmprrg9a9jt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI\
    \ like this answer because it's more idiomatic and more efficient. However it\
    \ does require the user to import `Char` which may not be a good idea. Also it\
    \ requires `import Data.Char` which may not be a good idea. Also it requires `import\
    \ Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import \nusing Test\n\n@testset begin\n\ncandidate =\
    \ digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnnao8es.jl:25\nin expression starting at\
    \ /tmp/tmpbnnao8es.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of occurrences of the character\
    \ 'e' in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13vdzo74.jl:25\nin expression starting at\
    \ /tmp/tmp13vdzo74.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_5ihx4k.jl:25\nin expression starting at\
    \ /tmp/tmpd_5ihx4k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nI like your use of pattern matching. However, I believe that `sum`\
    \ should be `Int64` instead of `Int`.\n<|/ c |>\n<| c |>\n: Thanks. I didn't know\
    \ that `sum` was an `Int64` until I looked it up. I've updated my answer.\n<|/\
    \ c |>\n<| c |>\n`sum` should be `Int64` because `Int` doesn't have enough bits\
    \ to represent all possible values of `Int64`.\n<|/ c |>\n<| c |>\n: Thanks. I\
    \ didn't know that `Int` doesn't have enough bits to represent all possible values\
    \ of `Int64`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = foldl (\\acc c -> if isUpper c then acc + c.codePointAt(0) else acc)\
    \ 0 s\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9plzrz8x.jl:22\nin expression starting at\
    \ /tmp/tmp9plzrz8x.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=haskell,string\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_b9totoo.jl:22\nin expression starting at\
    \ /tmp/tmp_b9totoo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n   \
    \         sum = sum + c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_ujww6nh.jl:21\nin expression starting at /tmp/tmp_ujww6nh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the lower characters only'\nASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89osfweb.jl:28\nin expression starting at\
    \ /tmp/tmp89osfweb.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum += c - 'A' + 10\n        end\n        sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe8sog_jp.jl:25\nin expression starting at /tmp/tmpe8sog_jp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the digits of that string. \n    For example, digitSum(\"1234\") should return\
    \ 10.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_vcu1ewi.jl:21\nin expression starting at /tmp/tmp_vcu1ewi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += (c - '0')\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnm2go5a.jl:22\nin expression starting at\
    \ /tmp/tmpsnm2go5a.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicwh4hlz.jl:22\nin expression starting at\
    \ /tmp/tmpicwh4hlz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of upper case letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaz_e0vtq.jl:22\nin expression starting at\
    \ /tmp/tmpaz_e0vtq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ox9mdy2.jl:24\nin expression starting at\
    \ /tmp/tmp_ox9mdy2.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbrtfe1h.jl:22\nin expression starting at\
    \ /tmp/tmpdbrtfe1h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += (c - '0')\n        else \n            sum += (c - 'A' +\
    \ 10)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpggm2i5xq.jl:21\nin expression starting at /tmp/tmpggm2i5xq.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isdigit():\n\
    \            sum += int(c)\n    return sum\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how to use `digitSum`\
    \ without using `isdigit`.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ My answer was based on the assumption that he wanted to use digitSum to solve\
    \ the problem without using isdigit.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = foldl (\\acc x -> acc + ord x - ord '0') 0 s\n\
    </code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know how to use `digitSum` without using `isdigit`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. My answer was based on\
    \ the assumption that he wanted to use digitSum to solve the problem without using\
    \ isdigit.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. My answer\
    \ was based on the assumption that he wanted to use digitSum to solve the problem\
    \ without using isdigit.\n<|/ c |>\n<| a tags=haskell,functional-programming |>\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> acc + ord x\
    \ - ord '0') 0 s\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to know how to use `digitSum` without using `isdigit`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. My answer was based on\
    \ the assumption that he wanted to use digitSum to solve the problem without using\
    \ isdigit.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = foldl (\\acc x -> acc + ord x - ord '0') 0 s\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyq5aolw.jl:22\nin expression starting at\
    \ /tmp/tmpxyq5aolw.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - I like that one. Thanks!\n<|/ c\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` - I like that one.\
    \ Thanks!\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` - I\
    \ like that one. Thanks!\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c ->\
    \ isUpper c)` - I like that one. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc\
    \ + ord x else acc) 0 s\n</code>\n<|/ a tags=haskell,string |>\n<| c |>\n`digitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + ord x else acc) 0 s` is more efficient\
    \ than `digitSum s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + ord x else acc) 0 s` is more efficient\
    \ than `digitSum s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + ord x else acc) 0 s` is more efficient\
    \ than `digitSum s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + ord x else acc) 0 s` is more efficient\
    \ than `digitSum s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcsirmf6.jl:22\nin expression starting at\
    \ /tmp/tmpvcsirmf6.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI like using foldl for this\n<code>\nfoldl (+) 0 [1..length \"abc\"]\n</code>\n\
    <|/ a tags=string,haskell,functional-programming |>\n<| a tags=string,haskell,functional-programming\
    \ |>\nHere's a solution using foldl:\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + x.codePointAt(0) else acc) 0 s\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using foldl\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x\
    \ then acc + x.codePointAt(0) else acc) 0 s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz65f6ei4.jl:25\nin expression starting at\
    \ /tmp/tmpz65f6ei4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oqn270h.jl:22\nin expression starting at\
    \ /tmp/tmp7oqn270h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking for a solution that does not require any additional libraries.\
    \ I guess I should have been more clear in my question. I was looking for a solution\
    \ that does not require any additional libraries. I guess I should have been more\
    \ clear in my question. I was looking for a solution that does not require any\
    \ additional libraries. I guess I should have been more clear in my question.\
    \ I was looking \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5zoalwp.jl:22\nin expression starting at\
    \ /tmp/tmpp5zoalwp.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6cl4r2dj.jl:21\nin expression starting at /tmp/tmp6cl4r2dj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the sum of the digits only'\n    ASCII codes.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvrgf0m2e.jl:22\nin expression starting at /tmp/tmpvrgf0m2e.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This answer would be better if you explained what was wrong with OP's code and\
    \ how you fixed it.\n<|/ c |>\n<| c |>\nThanks for your comment. I added some\
    \ explanation.\n<|/ c |>\n<| a dscore=1 |>\nThe issue is that the function digitSum\
    \ does not return a value.  It only prints out the result.  To fix this, simply\
    \ add a return statement to the end of the function.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp5w_yz3.jl:22\nin expression starting at\
    \ /tmp/tmpyp5w_yz3.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for the empty string. `digitSum(\"\")` returns 0.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n\
    <| a dscore=2 |>\nHere's a solution using recursion:\n<code>\nimport Data.Char\
    \ (toUpper)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2z8909y.jl:22\nin expression starting at\
    \ /tmp/tmpp2z8909y.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_u72hcm.jl:22\nin expression starting at\
    \ /tmp/tmpg_u72hcm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (c\
    \ >= 'a' && c <= 'z')\n            sum += c - 'A' + 1\n        else\n        \
    \    sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphanumeric characters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocctdx7u.jl:28\nin expression starting at\
    \ /tmp/tmpocctdx7u.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum\
    \ += toUpper(c) - 'A' + 1\n        end\n    end\n    return digitSum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1osrww8.jl:28\nin expression starting at\
    \ /tmp/tmpc1osrww8.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> c.isUpper)`\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I didn't know about `isUpper`.\n<|/ c |>\n<| c |>\n: Thanks, I didn't know about\
    \ `isUpper`.\n<|/ c |>\n<| c |>\n: Thanks, I didn't know about `isUpper`.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I didn't know about `isUpper`.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphh054kaj.jl:22\nin expression starting at\
    \ /tmp/tmphh054kaj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    import Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0234kc7.jl:22\nin expression starting at\
    \ /tmp/tmpu0234kc7.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6yb9l2z.jl:22\nin expression starting at\
    \ /tmp/tmpl6yb9l2z.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6yb9l2z.jl:22\nin expression starting at\
    \ /tmp/tmpl6yb9l2z.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n\
    <| c |>\nI fixed the typo.\n<|/ c |>\n<| c |>\nI fixed the typo.\n<|/ c |>\n<|\
    \ a dscore=3 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g_ap3yd.jl:22\nin expression starting at\
    \ /tmp/tmp8g_ap3yd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `digitSum` returns `0` for `digitSum(\"\")`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\
    \ What is your GHCi version?\n<|/ c |>\n<| c |>\n: I tested it on GHCi 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| c |>\n: I tested it on 7.8.3, and 7.8.4 (which I believe is the latest\
    \ version). What version are you using?\n<|/ c |>\n<| c |>\n: I tested it on 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| a dscore=2 |>\nI like Daniel's answer, but here's another one that\
    \ doesn't use any libraries:\n<code>\ndigitSum :: String -> Int\ndigitSum s =\
    \ sum $ map (ord '0') s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `digitSum` returns `0` for `digitSum(\"\")`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\
    \ What is your GHCi version?\n<|/ c |>\n<| c |>\n: I tested it on GHCi 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| c |>\n: I tested it on 7.8.3, and 7.8.4 (which I believe is the latest\
    \ version). What version are you using?\n<|/ c |>\n<| c |>\n: I tested it on 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyxfmzl9.jl:22\nin expression starting at\
    \ /tmp/tmpqyxfmzl9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yb2sx67.jl:24\nin expression starting at\
    \ /tmp/tmp9yb2sx67.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += toupper(c)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphabetic characters and return 0 if the string\
    \ contains only alphabetic characters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy6nwmeos.jl:21\nin expression starting at /tmp/tmpy6nwmeos.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| a |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3heg00x.jl:22\nin expression starting at\
    \ /tmp/tmpn3heg00x.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += 10\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7hy80_y1.jl:21\nin expression starting at /tmp/tmp7hy80_y1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum += c - 'A' + 10\n        end\n        sum\nend\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the lower characters only'\nASCII codes.\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo9dmobt2.jl:25\nin expression starting at /tmp/tmpo9dmobt2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in s\n        if i <> 'A'\n            sum +=\
    \ i\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam7ra67o.jl:22\nin expression starting at\
    \ /tmp/tmpam7ra67o.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. \nThe function should ignore the case of the characters.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbrulbmwn.jl:22\nin expression starting at /tmp/tmpbrulbmwn.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n    \
    \        sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nThe function should ignore\
    \ all non-alphabetic characters and return 0 if the string contains only alphabetic\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiji888n5.jl:28\nin expression starting at\
    \ /tmp/tmpiji888n5.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p8hywzo.jl:22\nin expression starting at\
    \ /tmp/tmp9p8hywzo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oqn270h.jl:22\nin expression starting at\
    \ /tmp/tmp7oqn270h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi31fnk37.jl:22\nin expression starting at\
    \ /tmp/tmpi31fnk37.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like your solution, although it does require the user to import `Char` from\
    \ `Data.Char`.\n<|/ c |>\n<| c |>\nYes, I agree. My solution does not require\
    \ importing `Char` from `Data.Char`. However, I wanted to show that you can write\
    \ your own `digitSum` function without importing `Char` from `Data.Char`.\n<|/\
    \ c |>\n<| a dscore=2 |>\nThis solution uses recursion and a helper function which\
    \ returns true if the character is uppercase and false otherwise:\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpyx9jdc.jl:22\nin expression starting at\
    \ /tmp/tmpnpyx9jdc.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the lower characters only'\nASCII codes.\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7rplcfom.jl:22\nin expression starting at\
    \ /tmp/tmp7rplcfom.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3e9evb0.jl:22\nin expression starting at\
    \ /tmp/tmpl3e9evb0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpot0qs16b.jl:22\nin expression starting at\
    \ /tmp/tmpot0qs16b.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6yb9l2z.jl:22\nin expression starting at\
    \ /tmp/tmpl6yb9l2z.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the lower characters only'\nASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4b9bprm.jl:22\nin expression starting at\
    \ /tmp/tmpi4b9bprm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c.lower()) - ord('A')\n    return sum\n</code>\n<|/ a\
    \ tags=haskell,string |>\n<| a |>\n<code>\nimport Data.Char\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmnzyqww.jl:22\nin expression starting at\
    \ /tmp/tmpvmnzyqww.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= 'A' and c <= 'Z'\n                sum += c - 'A' + 1\n  \
    \          else\n                sum += c\n        sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are upper case. For\
    \ example, the string \"hello\" has 5 characters that are upper case: \"H\", \"\
    E\", \"L\", \"L\", \"O\".\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphyydr8na.jl:25\nin expression starting at /tmp/tmphyydr8na.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n     \
    \       digitSum += c - '0'\n        end\n    end\n    return digitSum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpre4mpxen.jl:22\nin expression starting at /tmp/tmpre4mpxen.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string. \nThe digits\
    \ are the numbers from 0 to 9. \nThe string can contain any characters, including\
    \ spaces.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2szfstgv.jl:28\nin expression starting at\
    \ /tmp/tmp2szfstgv.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp4uxhkjn.jl:21\nin expression starting at /tmp/tmpp4uxhkjn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += (c - 'A' + 10)\n        else\n            sum += c\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvoai6zk1.jl:22\nin expression starting at /tmp/tmpvoai6zk1.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum\
    \ += toUpper(c)\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpzt_uj238.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzt_uj238.jl:1\n\
    in expression starting at /tmp/tmpzt_uj238.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx4bijq24.jl:21\nin expression starting at /tmp/tmpx4bijq24.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum\
    \ += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fauiuhc.jl:26\nin expression starting at\
    \ /tmp/tmp4fauiuhc.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n    \
    \        sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the sum of the lower characters\
    \ only'\nASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ncqdx8f.jl:28\nin expression starting at\
    \ /tmp/tmp1ncqdx8f.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if ('A' <= c && c <= 'Z') ||\
    \ (\"a\" <= c && c <= \"z\") then\n            sum += c - 'A' + 1\n        else\n\
    \            sum += c\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_gtmc3nt.jl:21\nin expression starting at /tmp/tmp_gtmc3nt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += c - 'A' + 1\n        else\n            sum += c\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzn1vxc5n.jl:22\nin expression starting at /tmp/tmpzn1vxc5n.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        digitSum(tail(s))+sum(map(ord,tail(s)))\
    \ \nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeacmj4fn.jl:25\nin expression starting at\
    \ /tmp/tmpeacmj4fn.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `digitSum` returns `Int64`, but `digitSum \"\
    aAaaaXa\"` returns `153`, which is wrong.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I'll fix it.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzwwbw5h.jl:22\nin expression starting at\
    \ /tmp/tmpvzwwbw5h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work for `digitSum(\"aAaaaXa\")` which returns `153` instead of `151`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code in the answer.\n\
    <|/ c |>\n<| a |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43ozdgu3.jl:22\nin expression starting at\
    \ /tmp/tmp43ozdgu3.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work. `digitSum(\"aAaaaXa\")` returns `153`, not `162`.\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n\
    <| a dscore=1 |>\nI wrote a function that does this in O(n) time and O(1) space:\n\
    <code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33asr9bm.jl:22\nin expression starting at\
    \ /tmp/tmp33asr9bm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a dscore=1 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24tukycp.jl:25\nin expression starting at\
    \ /tmp/tmp24tukycp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu8sov73u.jl:22\nin expression starting at /tmp/tmpu8sov73u.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ocoxqxf.jl:27\nin expression starting at\
    \ /tmp/tmp9ocoxqxf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= 'A' and c <= 'Z' then\
    \ \n            sum += (c - 'A' + 10)\n        else \n            sum += c\n \
    \   return sum\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n\
    I like your solution, but I wouldn't call it \"functional\".  It's more like imperative\
    \ programming.\n<|/ c |>\n<| c |>\nI agree with you, it's more like imperative\
    \ programming. I just wanted to show that you can do it in Haskell without using\
    \ recursion.\n<|/ c |>\n<| c |>\nI agree with you, it's more like imperative programming.\
    \ I just wanted to show that you can do it in Haskell without using recursion.\n\
    <|/ c |>\n<| c |>\nI agree with you, it's more like imperative programming. I\
    \ just wanted to show that you can do it in Haskell without using recursion.\n\
    <|/ c |>\n<| c |>\nI agree with you, it's more like imperative programming. I\
    \ just wanted to show that you can do it in Haskell without using recursion.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum\
    \ (map ord $ filter (\\c -> c >= 'A' && c <= 'Z') s)\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nI like your solution, but I wouldn't call it \"functional\".  It's\
    \ more like imperative programming.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more like imperative programming. I just wanted to show that you can do it in\
    \ Haskell without using recursion.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more like imperative programming. I just wanted to show that you can do it in\
    \ Haskell without using recursion.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = sum (map (\\c -> if c >= 'A' && c <= 'Z' then\
    \ c - 'A' else c) s)\n</code>\n<|/ a tags=haskell,functional-programming |>\n\
    <| c |>\nI like your solution, but I wouldn't call it \"functional\".  It's \n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2u8sthnc.jl:21\nin expression starting at /tmp/tmp2u8sthnc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += 10\n    return\
    \ sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n<| c |>\nThis doesn't work.\
    \ Try `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI fixed it\n<|/ c |>\n<| c\
    \ |>\nThis still doesn't work. Try `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\n\
    I fixed it\n<|/ c |>\n<| c |>\nThis still doesn't work. Try `digitSum(\"aAaaaXa\"\
    )`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl4zzcwhr.jl:21\nin expression starting at /tmp/tmpl4zzcwhr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            digitSum += c - '0'\n        else\n            digitSum += 10\n \
    \       end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ilvnaug.jl:21\nin expression starting at /tmp/tmp3ilvnaug.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the upper characters only'\nASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dte9_ag.jl:22\nin expression starting at\
    \ /tmp/tmp2dte9_ag.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_u8pm_mk.jl:22\nin expression starting at\
    \ /tmp/tmp_u8pm_mk.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum += 0\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the sum of the digits of that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphijh1_x7.jl:25\nin expression starting at /tmp/tmphijh1_x7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a |>\n<| c |>\nThe `sum`\
    \ variable is unnecessary. Just use `return sum + c - '0'`.\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I've edited my answer to reflect your suggestion.\n\
    <|/ c |>\n<| c |>\nThanks, I didn't know that. I've edited my answer to reflect\
    \ your suggestion.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've edited\
    \ my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\nThanks, I didn't know\
    \ that. I've edited my answer to reflect your suggestion.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl (+) 0 $ map digitToInt\
    \ s\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks, I didn't know that. I've edited\
    \ my answer to reflect your suggestion.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = sum $ map digitToInt s\n</code>\n<|/ a\
    \ tags=string,haskell,functional-programming |>\n<| c |>\nThanks, I didn't know\
    \ that. I've edited my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I've edited my answer to reflect your suggestion.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = foldl (+) 0 $ map digitToInt s\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThanks, I didn't know that. I've edited my answer to\
    \ reflect your suggestion.\n<|/ c |>\n<| a dscore=3 |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = foldl (+) 0 $ map digitToInt s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a dscore=3 |>\n<code>\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvht7ah9q.jl:22\nin expression starting at\
    \ /tmp/tmpvht7ah9q.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph53w1wzn.jl:21\nin expression starting at /tmp/tmph53w1wzn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfz132fmm.jl:22\nin expression starting at\
    \ /tmp/tmpfz132fmm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyixw10m.jl:22\nin expression starting at\
    \ /tmp/tmptyixw10m.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=haskell,string\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbvmnk0g.jl:22\nin expression starting at\
    \ /tmp/tmptbvmnk0g.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` should probably be `digitSum = sum . filter (\\c ->\
    \ isUpper c)`.\n<|/ c |>\n<| c |>\n: Yes, that's a good point. I was trying to\
    \ keep it close to the original code as much as possible. I'll edit my answer\
    \ to include your suggestion.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6iywydkx.jl:22\nin expression starting at\
    \ /tmp/tmp6iywydkx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c.lower())\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `ord` takes an `Int` and returns an `Int`, not\
    \ a `Char`.\n<|/ c |>\n<| c |>\nThis also doesn't work. `ord` takes an `Int` and\
    \ returns an `Int`, not a `Char`.\n<|/ c |>\n<| c |>\nThis doesn't work. `ord`\
    \ takes an `Int` and returns an `Int`, not a `Char`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work. `ord` takes an `Int` and returns an `Int`, not a `Char`.\n<|/\
    \ c |>\n<| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdg32_qwj.jl:22\nin expression starting at\
    \ /tmp/tmpdg32_qwj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n \
    \           else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nThe function should ignore\
    \ all non-alphabetic characters and return the number of alphabetic characters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivb_utuu.jl:32\nin expression starting at\
    \ /tmp/tmpivb_utuu.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n    \
    \        digitSum += c - 'A' + 1\n        else\n            digitSum += c\n  \
    \  return digitSum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nTask\nWrite a function that takes a string\
    \ as input and returns the sum of the lower characters only'\nASCII codes.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpneoa45c1.jl:28\nin expression starting at\
    \ /tmp/tmpneoa45c1.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgmq_dpsb.jl:21\nin expression starting at /tmp/tmpgmq_dpsb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotf0jubo.jl:28\nin expression starting at\
    \ /tmp/tmpotf0jubo.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduq0pved.jl:22\nin expression starting at\
    \ /tmp/tmpduq0pved.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` should probably be `digitSum = sum . filter (\\c ->\
    \ c.isUpper)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> c.isUpper)`\
    \ doesn't work. `digitSum = sum . filter (\\c -> isUpper c)` does.\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` doesn't work because `isUpper`\
    \ isn't a function, but a type constructor. `digitSum = sum . filter (\\c -> c.isUpper)`\
    \ works because `isUpper` is a function.\n<|/ c |>\n<| a |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqef1cekq.jl:22\nin expression starting at\
    \ /tmp/tmpqef1cekq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `151`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed the typo.\n<|/ c |>\n<| c |>\n\
    : I added a more efficient solution that doesn't require any imports.\n<|/ c |>\n\
    <| c |>\n: I added a more efficient solution that doesn't require any imports.\n\
    <|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't require any\
    \ imports.\n<|/ c |>\n<| a |>\nThe simplest way is to use Data.Char.digitToInt:\n\
    <code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1aqya9f.jl:22\nin expression starting at\
    \ /tmp/tmpz1aqya9f.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += toLower(c)\n        end\n        sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f4kg4hl.jl:32\nin expression starting at\
    \ /tmp/tmp6f4kg4hl.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n     \
    \       digitSum += c - '0'\n        end\n    end\n    return digitSum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfd08_pug.jl:22\nin expression starting at /tmp/tmpfd08_pug.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphabetic characters and count the alphabetic\
    \ ones.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptcpi_lku.jl:24\nin expression starting at\
    \ /tmp/tmptcpi_lku.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += (c - 'A' + 10)\n\
    \            else\n                sum += c\n        sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp914_ss4t.jl:31\nin expression starting at\
    \ /tmp/tmp914_ss4t.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in s\n        if i >='A' and i <='Z'\n     \
    \       sum += (i - 'A' + 1)\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo48owkr6.jl:22\nin expression starting at /tmp/tmpo48owkr6.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyss8ylf7.jl:25\nin expression starting at\
    \ /tmp/tmpyss8ylf7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || ('a'\
    \ <= c && c <= 'z')\n            sum += c - 'A' + 1\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits of that string. \n    For\
    \ example: digitSum(\"1234\") should return 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhfppqad.jl:28\nin expression starting at\
    \ /tmp/tmpkhfppqad.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n        end\n    end\n    return digitSum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejecq7m2.jl:28\nin expression starting at\
    \ /tmp/tmpejecq7m2.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyfbvwoh.jl:22\nin expression starting at\
    \ /tmp/tmpsyfbvwoh.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe answer by is correct, but I thought I'd add some explanation as to why\
    \ it works.\nThe reason why this works is because of the way that Strings are\
    \ represented in memory. Strings are represented as a pointer to the first character\
    \ of the string followed by the length of the string. \n<code>\nlet s = \"hello\"\
    \nlet s_ptr = &s\nlet s_len = 5\n</code>\nThe first character of the string is\
    \ the character at index 0, the second character is the character at index 1,\
    \ and so on. \n<code>\nlet s_ptr[0]\nlet s_ptr[1]\nlet s_ptr[2]\nlet s_ptr[3]\n\
    let s_ptr[4]\n</code>\nSo if you wanted to get the first character of the string\
    \ you would have to dereference the pointer and then get the first character of\
    \ the dereferenced pointer. \n<code>\nlet first_char = s_ptr[0]\n</code>\nThe\
    \ reason why this works is because Strings are immutable in Rust. \n<code>\nlet\
    \ s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\nlet s_ptr[0]\nlet s_ptr[1]\nlet\
    \ s_ptr[2]\nlet s_ptr[3]\nlet s_ptr[4]\n</code>\nThe above code will throw an\
    \ error because you can't mutate a String. \n<code>\nlet s = \"hello\"\nlet s_ptr\
    \ = &s\nlet s_len = 5\nlet s_ptr[0] = \"a\"\n</code>\nThis code will compile and\
    \ run just fine, but it will not change the value of the string because Strings\
    \ are immutable. \n<code>\nlet s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\n\
    let s_ptr[0] = \"a\"\n</code>\nThe above code will compile and run just fine,\
    \ but it will not change the value of the string because Strings are immutable.\
    \ \n<code>\nlet s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\nlet s_ptr[0] = \"\
    a\"\n</code>\nThe above code will compile and run just fine, but it will not change\
    \ the value of the string because Strings are immutable. \n<code>\nlet s = \"\
    hello\"\nlet s_ptr = &s\nlet s_len = 5\nlet s_ptr[0] = \"a\"\n</code>\nThe above\
    \ code will compile and run just fine, but it will not change the value of the\
    \ string because Strings are immutable. \n<code>\nlet s = \"hello\"\nlet s_ptr\
    \ = &s\nlet s_len = 5\nlet s_ptr[0] = \"a\"\n</code>\nThe above \nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppybr9ldk.jl:22\nin expression starting at\
    \ /tmp/tmppybr9ldk.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum\
    \ += toUpper(c)\n        end\n    end\n    return digitSum\nend\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw8djecza.jl:28\nin expression starting at\
    \ /tmp/tmpw8djecza.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`c.codePointAt(0)`\
    \ will throw an error if the string contains any non-ASCII characters.\n<|/ c\
    \ |>\n<| c |>\nThanks, I added a version that doesn't throw an error\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjf9gsslg.jl:22\nin expression starting at\
    \ /tmp/tmpjf9gsslg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpabwddoa4.jl:21\nin expression starting at /tmp/tmpabwddoa4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm8adcsrx.jl:22\nin expression starting at /tmp/tmpm8adcsrx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the digits in that string. \nThe digits are the characters\
    \ '0' through '9'.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsz3egz9z.jl:22\nin expression starting at /tmp/tmpsz3egz9z.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n    return sum\n</code>\n<|/ a tags=string,haskell,integer\
    \ |>\n<| a |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph8nolvv4.jl:22\nin expression starting at /tmp/tmph8nolvv4.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum = sum + c - '0'\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps9udgiod.jl:21\nin expression starting at /tmp/tmps9udgiod.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum(map(ord, filter(c => c >= 'A' && c <= 'Z',\
    \ s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmputy68mj1.jl:20\nin expression starting at /tmp/tmputy68mj1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in s\n        if i >=48 and i <=57\n       \
    \     sum += i\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7sar4_0j.jl:22\nin expression starting at /tmp/tmp7sar4_0j.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= 'A' and c <= 'Z':\n \
    \           sum += (c - 'A' + 10)\n        elif c >= 'a' and c <= 'z':\n     \
    \       sum += (c - 'a' + 10)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufrjaclp.jl:22\nin expression starting at\
    \ /tmp/tmpufrjaclp.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1_7rg0b.jl:26\nin expression starting at\
    \ /tmp/tmpv1_7rg0b.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqs3pr54.jl:22\nin expression starting at\
    \ /tmp/tmpmqs3pr54.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n     \
    \       digitSum += c - '0'\n        end\n    end\n    return digitSum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpre4mpxen.jl:22\nin expression starting at /tmp/tmpre4mpxen.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            digitSum += c - '0'\n        else\n            digitSum = 0\n   \
    \     end\n    end\n    return digitSum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe6j98tjp.jl:21\nin expression starting at /tmp/tmpe6j98tjp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI like your answer,\
    \ but I think it would be better to use a `fold` instead of a `for` loop. Also,\
    \ `sum` could be replaced with `foldl`.\n<|/ c |>\n<| c |>\nI agree with you on\
    \ `fold` vs `for` loop. `fold` would also allow to return `0` instead of `-1`.\n\
    <|/ c |>\n<| c |>\n`fold` would also allow to return `0` instead of `-1`. I think\
    \ `fold` would be more efficient than `for` loop. `fold` would also allow to return\
    \ `0` instead of `-1`.\n<|/ c |>\n<| c |>\n`fold` would also allow to return `0`\
    \ instead of `-1`. I think `fold` would be more efficient than `for` loop. `fold`\
    \ would also allow to return `0` instead of `-1`.\n<|/ c |>\n<| c |>\n`fold` would\
    \ also allow to return `0` instead of `-1`. I think `fold` would be more efficient\
    \ than `for` loop. `fold` would also allow to return `0` instead of `-1`.\n<|/\
    \ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\ndigitSum ::\
    \ String -> Int\ndigitSum s = foldl (\\acc c -> if isUpper c then acc + c.codePointAt(0)\
    \ else acc) 0 s\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`foldl` would be more efficient\
    \ than `for` loop. `foldl` would also allow to return `0` instead of `-1`.\n<|/\
    \ c |>\n<| c |>\n`foldl` would be more efficient than `for` loop. `foldl` would\
    \ also allow to return `0` instead of `-1`.\n<|/ c |>\n<| c |>\n`foldl` would\
    \ be more efficient than `for` loop. `foldl` would also allow to return `0` instead\
    \ of `-1`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = foldl (\\acc c -> if isUpper c then acc + c.codePointAt(0) else acc) 0 s\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuexhuvq5.jl:22\nin expression starting at\
    \ /tmp/tmpuexhuvq5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\
    \ \n            sum += (c - '0')\n        else\n            sum += (c - 'A' +\
    \ 10)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8wyt2wie.jl:21\nin expression starting at /tmp/tmp8wyt2wie.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ digitSum += c - '0'\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkgddn90x.jl:21\nin expression starting at /tmp/tmpkgddn90x.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to do this\
    \ without using any built-in functions. Also, `ord` returns a `Char`, not a `Int64`.\n\
    <|/ c |>\n<| c |>\nThe question was about how to do this without using any built-in\
    \ functions. I answered it with the code I already had. My answer was to show\
    \ how it could be done without using any built-in functions. I didn't say that\
    \ my answer was wrong, just that it's not the answer to the question.\n<|/ c |>\n\
    <| c |>\nThe question was about how to do this without using any built-in functions.\
    \ I answered it with the code I already had. My answer was to show how it could\
    \ be done without using any built-in functions. I didn't say that my answer was\
    \ wrong, just that it's not the answer to the question.\n<|/ c |>\n<| c |>\nI\
    \ didn't say that my answer was wrong, just that it's not the answer to the question.\n\
    <|/ c |>\n<| c |>\nI didn't say that my answer was wrong, just that it's not the\
    \ answer to the question.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map (\\c -> if isUpper c then c else toUpper c) s\n\
    </code>\n<|/ a tags=haskell,string |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to do this without using any built-in functions. Also, `sum`\
    \ expects a `[Int]`, not a `[Char]`.\n<|/ c |>\n<| c |>\nI didn't say that my\
    \ answer was wrong, just that it's not the answer to the question.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (\\\
    c -> if isUpper c then c else toUpper c) s\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to \nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uyirm2_.jl:22\nin expression starting at\
    \ /tmp/tmp7uyirm2_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= 'A' && c <= 'Z'\n                sum += (c - 'A' + 10)\n\
    \            else\n                sum += c\n        sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplwijlui.jl:31\nin expression starting at\
    \ /tmp/tmpplwijlui.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += (c - '0')\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like your solution, but I wonder if it can be done without recursion.\n\
    <|/ c |>\n<| c |>\n: I believe it can be done without recursion, but it's probably\
    \ more complicated than it needs to be. I'll post a solution without recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppylqlq3c.jl:22\nin expression starting at\
    \ /tmp/tmppylqlq3c.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxlqbwzyw.jl:21\nin expression starting at /tmp/tmpxlqbwzyw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are not digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprbp5kvs_.jl:21\nin expression starting at /tmp/tmprbp5kvs_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for the answer! I didn't know that `isUpper` was a function\
    \ in `Char`. However, this doesn't solve my problem because I still need to convert\
    \ the string to a list of `Char`s first. Also, `digitSum` needs to return an `Int64`,\
    \ not an `Int`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require you\
    \ to convert to a list of `Char`s.\n<|/ c |>\n<| c |>\nThanks for the update!\
    \ I didn't know that `isUpper` was a function in `Char`. However, this doesn't\
    \ solve my problem because I still need to convert the string to a list of `Char`s\
    \ first. Also, `digitSum` needs to return an `Int64`, not an `Int`.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require you to convert to a list of `Char`s.\n\
    <|/ c |>\n<| c |>\nThanks for the update! I didn't know that `isUpper` was a function\
    \ in `Char`. However, this doesn't solve my problem because I still need to convert\
    \ the string to a list of `Char`s first. Also, `digitSum` needs to return an `Int64`,\
    \ not an `Int`.\n<|/ c |>\n<| a tags=string,haskell,ascii |>\nHere's a solution\
    \ using Data.Char's toUpper and sum functions:\n<code>\nimport Data.Char\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1e_wzb8.jl:22\nin expression starting at\
    \ /tmp/tmpu1e_wzb8.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    let digitSum(s:String):Int64 = \n    let rec loop i acc = if i >= s.length then\
    \ acc else loop(i+1) (acc+s.[i]) \n    in loop 0 0\n</code>\n<|/ a dscore=2 tags=recursion,haskell,string\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `131`.\n<|/ c |>\n<| c |>\nI fixed it by changing `acc+s.[i]` to `acc+s.codePointAt(i)`\n\
    <|/ c |>\n<| c |>\n`digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n<|/\
    \ c |>\n<| c |>\nI fixed it by changing `acc+s.[i]` to `acc+s.codePointAt(i)`\n\
    <|/ c |>\n<| a tags=recursion,haskell,string |>\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc + ord x else acc)\
    \ 0 s\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nI fixed it by changing\
    \ `acc+s.[i]` to `acc+s.codePointAt(i)`\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc\
    \ + ord x else acc) 0 s\n</code>\n<|/ a tags=recursion,haskell,string |>\n<| a\
    \ dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x\
    \ -> if isUpper x then acc + ord x else acc) 0 s\n</code>\n<|/ a tags=recursion,haskell,string\
    \ |>\n<| a tags=recursion,haskell,string |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = foldl (\\acc x \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ax373hz.jl:22\nin expression starting at\
    \ /tmp/tmp8ax373hz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `151`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it. I was thinking\
    \ about a more general solution, where you might want to add more characters to\
    \ the sum than just uppercase letters.\n<|/ c |>\n<| c |>\n: I added a more general\
    \ solution that should work for any character.\n<|/ c |>\n<| c |>\n: I added a\
    \ more general solution that should work for any character.\n<|/ c |>\n<| c |>\n\
    : I added a more general solution that should work for any character.\n<|/ c |>\n\
    <| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvufdx8j.jl:22\nin expression starting at\
    \ /tmp/tmpcvufdx8j.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnnfcq5hc.jl:21\nin expression starting at /tmp/tmpnnfcq5hc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum = sum + c - '0'\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbnbv3t4h.jl:21\nin expression starting at /tmp/tmpbnbv3t4h.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw9r02wrr.jl:22\nin expression starting at /tmp/tmpw9r02wrr.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI believe that this is what you are looking for:\n<code>\nimport Data.Char\
    \ (toUpper)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mox3dhf.jl:22\nin expression starting at\
    \ /tmp/tmp9mox3dhf.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplcvgz4my.jl:21\nin expression starting at /tmp/tmplcvgz4my.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += 10\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ttpql39.jl:21\nin expression starting at /tmp/tmp8ttpql39.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb7yvi0h.jl:22\nin expression starting at\
    \ /tmp/tmpkb7yvi0h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= 'A' and c <= 'Z' then\
    \ \n            sum += c - 'A' + 1\n        else \n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxexv246d.jl:21\nin expression starting at /tmp/tmpxexv246d.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell\
    \ |>\nThe other answers are great, but I thought I'd add my own solution:\n<code>\n\
    import Data.Char (toUpper)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntxh94v0.jl:22\nin expression starting at\
    \ /tmp/tmpntxh94v0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s \n        if c >= '0' and c <= '9' \n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg6ur9a_k.jl:22\nin expression starting at /tmp/tmpg6ur9a_k.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += c\n        sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the lower characters only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1u8tl0r.jl:31\nin expression starting at\
    \ /tmp/tmpf1u8tl0r.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' && c <= '9'\n                sum += c - '0'\n       \
    \     else\n                sum\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string. For example, the string \"1234\" should return\
    \ 10.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzap7a7g.jl:32\nin expression starting at\
    \ /tmp/tmpfzap7a7g.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_dp3t2j.jl:24\nin expression starting at\
    \ /tmp/tmpm_dp3t2j.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zjziwbj.jl:22\nin expression starting at\
    \ /tmp/tmp1zjziwbj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += c - 'A' + 1\n        else\n            sum += c\n    return sum\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef digitSum(s):\n    sum\
    \ = 0\n    for c in s:\n        if c.isdigit():\n            sum += int(c)\n \
    \   return sum\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (ord 'A') [x |\
    \ x <- s, x >= 'A' && x <= 'Z']\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (ord 'A') [x | x <-\
    \ s, x >= 'A' && x <= 'Z']\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = sum $ map (ord 'A') [x | x <- s, x >= 'A' &&\
    \ x <= 'Z']\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n\
    Please don't post only code as an answer, but also provide an explanation of what\
    \ your code does and how it solves the problem of the question. Answers with an\
    \ explanation are usually more helpful and of better quality, and are more likely\
    \ to attract upvotes.\n<|/ c |>\n<| a tags=haskell,functional-programming |>\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (ord 'A') [x | x <-\
    \ s, x >= 'A' && x <= 'Z']\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqj8q_wah.jl:22\nin expression starting at /tmp/tmpqj8q_wah.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp636l044c.jl:25\nin expression starting at\
    \ /tmp/tmp636l044c.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like your solution but I think it would be more idiomatic to\
    \ use `foldl` instead of `foldl1 (+) . map toUpper`.\n<|/ c |>\n<| c |>\nI agree\
    \ that `foldl` is more idiomatic. `foldl` is more general than `foldl1`, though.\
    \ `foldl1` only works on `Char`s, whereas `foldl` works on any `Foldable` type.\
    \ `foldl1` also has more general type signatures than `foldl`, so it's more flexible.\n\
    <|/ c |>\n<| c |>\nI agree that `foldl` is more general, but `foldl1` has more\
    \ general type signatures than `foldl`, so it's more flexible.\n<|/ c |>\n<| c\
    \ |>\n`foldl1` has more general type signatures than `foldl`, so it's more flexible.\n\
    <|/ c |>\n<| c |>\n`foldl1` has more general type signatures than `foldl`, so\
    \ it's more flexible.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\nThe most idiomatic way is to use foldl1:\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum s = foldl1 (+) . map toUpper . toEnum\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would be more efficient\
    \ to write `foldl1 (+) . map toUpper` instead of `foldl1 (+) . map toUpper . toEnum`.\n\
    <|/ c |>\n<| c |>\nI guess it depends on how you define efficiency. `foldl1` will\
    \ probably be faster, but `foldl (+) 0` will probably be more efficient.\n<|/\
    \ c |>\n<| c |>\n`foldl (+) 0` will probably be more efficient than `foldl1 (+)\
    \ . map toUpper` because `foldl (+) 0` will have to traverse the entire list before\
    \ it can start accumulating the result. `foldl1 (+) . map toUpper` will stop accumulating\
    \ as soon as it encounter\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxa_csllf.jl:22\nin expression starting at\
    \ /tmp/tmpxa_csllf.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf4e3edxn.jl:21\nin expression starting at /tmp/tmpf4e3edxn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 10\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprk5p_ex2.jl:21\nin expression starting at /tmp/tmprk5p_ex2.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n \
    \           else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore all non-alphabetic\
    \ characters and return 0 if the string contains only alphabetic characters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk57mkeb5.jl:32\nin expression starting at\
    \ /tmp/tmpk57mkeb5.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the digits of that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkp1ip5o.jl:28\nin expression starting at\
    \ /tmp/tmpdkp1ip5o.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum\
    \ += toUpper(c)\n        end\n    end\n    return digitSum\nend\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the digits of that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkzthlmv.jl:28\nin expression starting at\
    \ /tmp/tmprkzthlmv.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += 0\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the numbers in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpycvf99ql.jl:21\nin expression starting at /tmp/tmpycvf99ql.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p8hywzo.jl:22\nin expression starting at\
    \ /tmp/tmp9p8hywzo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n    \
    \        digitSum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n   \
    \         digitSum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n  \
    \          digitSum += c - '0'\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrb300ym.jl:24\nin expression starting at\
    \ /tmp/tmpzrb300ym.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum\
    \ += toUpper(c)\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpzt_uj238.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzt_uj238.jl:1\n\
    in expression starting at /tmp/tmpzt_uj238.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oqn270h.jl:22\nin expression starting at\
    \ /tmp/tmp7oqn270h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oqn270h.jl:22\nin expression starting at\
    \ /tmp/tmp7oqn270h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += toLower(c)\n        end\n        sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxmlqsp9.jl:32\nin expression starting at\
    \ /tmp/tmpoxmlqsp9.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu8sov73u.jl:22\nin expression starting at /tmp/tmpu8sov73u.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf5xumm4n.jl:22\nin expression starting at /tmp/tmpf5xumm4n.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n \
    \           else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nIf the string contains only digits,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcfix7rg.jl:32\nin expression starting at\
    \ /tmp/tmpqcfix7rg.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n    \
    \        digitSum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n   \
    \         digitSum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n  \
    \          digitSum += c - '0'\n    end\n    return digitSum\nend\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28wynshd.jl:24\nin expression starting at\
    \ /tmp/tmp28wynshd.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6yb9l2z.jl:22\nin expression starting at\
    \ /tmp/tmpl6yb9l2z.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf5xumm4n.jl:22\nin expression starting at /tmp/tmpf5xumm4n.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to do it without using recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| a |>\n\
    Here's a solution without recursion:\n<code>\nimport Data.Char (toUpper)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vjjy7xx.jl:22\nin expression starting at\
    \ /tmp/tmp1vjjy7xx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum += 10\n        end\n        sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpemdzb0c5.jl:25\nin expression starting at /tmp/tmpemdzb0c5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        digitSum(tail(s))\n       \
    \     + digit(head(s))\n            * (tail(s) == \"\" ? 0 : 1)\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nTask\nWrite a function that takes a string as input and returns\
    \ the sum of the lower characters only'\nASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"* (\" at\
    \ /tmp/tmp7ipkei4d.jl:25\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ipkei4d.jl:25\n\
    in expression starting at /tmp/tmp7ipkei4d.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` should probably be `digitSum = sum . filter isUpper`\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . filter isUpper` would also work, though `digitSum\
    \ = sum . filter isUpper` is more idiomatic.\n<|/ c |>\n<| c |>\n`digitSum = sum\
    \ . filter isUpper` would also work, though `digitSum = sum . filter isUpper`\
    \ is more idiomatic.\n<|/ c |>\n<| c |>\n`digitSum = sum . filter isUpper` would\
    \ also work, though `digitSum = sum . filter isUpper` is more idiomatic.\n<|/\
    \ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04ov6b6i.jl:25\nin expression starting at\
    \ /tmp/tmp04ov6b6i.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4k883slr.jl:22\nin expression starting at\
    \ /tmp/tmp4k883slr.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq53toyrc.jl:22\nin expression starting at\
    \ /tmp/tmpq53toyrc.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in s\n        if i <> 'A'\n            sum +=\
    \ i\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26859485)\n\
    <|/ c |>\n<| c |>\nI disagree. He asked how to write a function that takes a string\
    \ as input and returns the sum of the upper characters only. He also asked how\
    \ to do this in Haskell. He also asked how to do this in Python. He also asked\
    \ how to do this in R. He also asked how to do this in C. He also asked how to\
    \ do this in C++. He also asked how to do this in Java. He also asked how to do\
    \ this in C#. He also asked how to do this in Haxe. He also asked how to do this\
    \ in F#. He also asked how to do this in OCaml. He also asked how to do this in\
    \ Rust. He also asked how to do this in Scala. He also asked how to do this in\
    \ Haskell. He also asked how to do this in C#. He also asked how to do this in\
    \ C++. He also asked how to do this in C#. He also asked how to do this in C++.\
    \ He also asked how to do this in C++. He also asked how to do this in C#. He\
    \ also asked how to do this in C#. He also asked how to do this in C#. He also\
    \ asked how to do this in C#. He also asked how to do this in C#. He also asked\
    \ how to do this in C#. He also asked how to do this in C#. He also asked how\
    \ to do this in C#. He also asked how to do this in C#. He also asked how to do\
    \ this in C#. He also asked how to do this in C#. He also asked how to do this\
    \ in C#. He also asked how to do this in C#. He also asked how to do this in C#.\
    \ He also asked how to do this in C#. He also asked how to do this in C#. He also\
    \ asked how to do this in C#. He also asked how to do this in C#. \nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vdalg3p.jl:22\nin expression starting at\
    \ /tmp/tmp8vdalg3p.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper c\n            digitSum\
    \ += c - 'A' + 1\n        end\n    end\n    return digitSum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpbwwkeqlu.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpbwwkeqlu.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"abAB\") == 131\n  UndefVarError: isUpper not defined\n\
    \  Stacktrace:\n   [1] digitSum(s::String)\n     @ Main /tmp/tmpbwwkeqlu.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwwkeqlu.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwwkeqlu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbwwkeqlu.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpbwwkeqlu.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwwkeqlu.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwwkeqlu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbwwkeqlu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpbwwkeqlu.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwwkeqlu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwwkeqlu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpbwwkeqlu.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"woArBld\") == 131\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpbwwkeqlu.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:"
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a dscore=2 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_as_8hv.jl:22\nin expression starting at\
    \ /tmp/tmpl_as_8hv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. For example, the string \"Hello\" has 4 characters that are upper\
    \ case: \"H\", \"E\", \"L\", \"L\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9ytyrpk.jl:25\nin expression starting at\
    \ /tmp/tmpg9ytyrpk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw9r02wrr.jl:22\nin expression starting at /tmp/tmpw9r02wrr.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrm7xi8t.jl:25\nin expression starting at\
    \ /tmp/tmpnrm7xi8t.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, s)) - sum(map(ord,\
    \ s[1..]))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphanumeric characters and return the number\
    \ of alphanumeric characters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt57pk5iu.jl:23\nin expression starting at /tmp/tmpt57pk5iu.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += 10\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8fuubgyu.jl:21\nin expression starting at /tmp/tmp8fuubgyu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv2wiy1pa.jl:21\nin expression starting at /tmp/tmpv2wiy1pa.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `151`.\n<|/\
    \ c |>\n<| c |>\nThanks for pointing that out. I was too focused on getting the\
    \ sum of the upper case letters. I've updated my answer to fix the problem.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe other answers here are all great, but I thought\
    \ I'd add another option that is more efficient than converting everything to\
    \ upper case and summing them up. \n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3g1d_3v6.jl:22\nin expression starting at\
    \ /tmp/tmp3g1d_3v6.jl:22\n"
  stdout: ''
