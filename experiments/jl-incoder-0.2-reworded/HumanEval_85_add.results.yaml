language: jl
name: HumanEval_85_add
results:
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ odd numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 14. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. \nFor example, add([4, 2, 6, 7])\
    \ is equal to 10. \nWrite a function that returns the sum of the squares of the\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkxqh_13.jl:15\nin expression starting at\
    \ /tmp/tmpmkxqh_13.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even elements in a given\
    \ vector of integers. \nGiven a vector of integers lst. return the sum of the\
    \ even elements that are at odd indices..\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglzytsa3.jl:13\nin expression starting at\
    \ /tmp/tmpglzytsa3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements in a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the odd elements\
    \ in a given vector of integers lst. \nWrite a function that returns the product\
    \ of the even elements in a given vector of integers lst. \nWrite a function that\
    \ returns the product of the odd elements in a given vector of integers lst. \n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynzsjy_d.jl:13\nin expression starting at\
    \ /tmp/tmpynzsjy_d.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the odd numbers in a\
    \ given vector of integers. \nWrite a function that returns the product of the\
    \ even numbers in a given vector of integers. \nWrite a function that returns\
    \ the product of the odd numbers in a given vector of integers. \nWrite a function\
    \ that returns the maximum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the maximum of the odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the minimum of the even numbers\
    \ in a given vector of integers. \nWrite a function that returns the minimum of\
    \ the odd numbers in a given vector of integers. \nWrite a function that returns\
    \ the absolute value of the even numbers in a given vector of integers. \nWrite\
    \ a function that returns the absolute value of the odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the factorial of a given vector\
    \ of integers. \nWrite a function that returns the factorial of the factorial\
    \ of a given vector of integers. \nWrite a function that returns the factorial\
    \ of the factorial of a given vector of integers. \nWrite a function that returns\
    \ the factorial of the factorial of a given vector of integers. \nWrite a function\
    \ that returns the factorial of the factorial of a given vector of integers. \n\
    Write a function that returns the factorial of the factorial of a given vector\
    \ of integers. \nWrite a function that returns the factorial of the factorial\
    \ of a given vector of integers. \nWrite a function that returns the factorial\
    \ of the factorial of a given vector of integers. \nWrite a function that returns\
    \ the factorial of the factorial of a given vector of integers. \nWrite a function\
    \ that returns the factorial of the factorial of a given vector of integers. \n\
    Write a function that returns the factorial of the factorial of a given vector\
    \ of integers. \nWrite a function that returns the factorial of the factorial\
    \ of a given vector of integers. \nWrite a function that returns the factorial\
    \ of the factorial of a given vector of integers. \nWrite a function that returns\
    \ the factorial of the factorial of a given vector of integers. \nWrite a function\
    \ that returns the factorial of the factorial of a given vector of integers. \n\
    Write a function that returns the factorial of the factorial of a given vector\
    \ of integers. \nWrite a function that returns the factorial of the factorial\
    \ of a given vector of integers. \nWrite a function that returns the factorial\
    \ of the factorial of a given vector of integers. \nWrite a function that returns\
    \ the factorial of the factorial of a given vector of integers. \nWrite a function\
    \ that returns the factorial of the factorial of a given vector of integers. \n\
    Write a function that returns the factorial of the factorial of a given vector\
    \ of integers. \n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp59n2ty2.jl:14\nin expression starting at\
    \ /tmp/tmpp59n2ty2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcr4_tbk0.jl:14\nin expression starting at\
    \ /tmp/tmpcr4_tbk0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the even\
    \ numbers in a given vector of integers. \nWrite a function that returns the sum\
    \ of the odd numbers in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd numbers in a given vector of integers. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaiwhs8_0.jl:14\nin expression starting at\
    \ /tmp/tmpaiwhs8_0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the even elements in a vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlpgfha2.jl:13\nin expression starting at\
    \ /tmp/tmpxlpgfha2.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdurq34h.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpwdurq34h.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 166 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a vector of integers lst, return the sum of the even elements that\
    \ are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp180asnwf.jl:14\nin expression starting at\
    \ /tmp/tmp180asnwf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdurq34h.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpwdurq34h.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 166 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a vector that are greater than a given value.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra8inc3v.jl:15\nin expression starting at\
    \ /tmp/tmpra8inc3v.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns the sum of the even elements that\
    \ are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2a6qdtf8.jl:12\nin expression starting at /tmp/tmp2a6qdtf8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = even.+odd\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ vector lst that have even indices. For example, [4, 2, 6, 7] has even indices\
    \ 1, 3, and 5, so the function should return 8.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qfmh5ry.jl:14\nin expression starting at\
    \ /tmp/tmp5qfmh5ry.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even elements\
    \ of a vector\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnen3bmm_.jl:13\nin expression starting at\
    \ /tmp/tmpnen3bmm_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the sum of the even numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpag1t80g3.jl:14\nin expression starting at\
    \ /tmp/tmpag1t80g3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ vector lst.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0sf5sa2.jl:14\nin expression starting at\
    \ /tmp/tmpf0sf5sa2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the odd elements in a given vector\
    \ of integers. \nWrite a function that returns the product of the even elements\
    \ in a given vector of integers. \nWrite a function that returns the product of\
    \ the odd elements in a given vector of integers. \nWrite a function that returns\
    \ the maximum of a given vector of integers. \nWrite a function that returns the\
    \ minimum of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pwverk7.jl:14\nin expression starting at\
    \ /tmp/tmp7pwverk7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : end]\n    return sum(even) + sum(odd)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ elements of a given vector of integers lst. \nWrite a function that returns\
    \ the sum of the odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even \nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbr3515cw.jl:13\nin expression starting at\
    \ /tmp/tmpbr3515cw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2 :] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcy6bvpgs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcy6bvpgs.jl:1\n\
    in expression starting at /tmp/tmpcy6bvpgs.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : (end)]\n    even.+=(odd.*2)\n    return even\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmplwwd_g_1.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  DimensionMismatch("array
    could not be broadcast to match destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @
    ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543
    [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4]
    instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @
    ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868
    [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmplwwd_g_1.jl:11\n    [8]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmplwwd_g_1.jl:19 [inlined]\n   [10]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmplwwd_g_1.jl:18\ntest set:
    Error During Test at /tmp/tmplwwd_g_1.jl:20\n  Test threw exception\n  Expression:
    candidate([4, 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch("array could not be
    broadcast to match destination")\n  Stacktrace:\n    [1] check_broadcast_shape\n      @
    ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543
    [inlined]\n    [3] check_broadcast_axes\n      @ ./broadcast.jl:547 [inlined]\n    [4]
    instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [5] materialize!\n      @
    ./broadcast.jl:871 [inlined]\n    [6] materialize!\n      @ ./broadcast.jl:868
    [inlined]\n    [7] add(lst::Vector{Int64})\n      @ Main /tmp/tmplwwd_g_1.jl:11\n    [8]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmplwwd_g_1.jl:20 [inlined]\n   [10]
    macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmplwwd_g'
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u7eubpa.jl:13\nin expression starting at\
    \ /tmp/tmp3u7eubpa.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the even elements of a given vector of integers. If the vector is empty, return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwr_vcgc.jl:13\nin expression starting at\
    \ /tmp/tmphwr_vcgc.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x ->\
    \ x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x +\
    \ 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0i2r4ecv.jl:58\nin expression starting at\
    \ /tmp/tmp0i2r4ecv.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even.+ odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even elements in a given\
    \ vector of integers. If the vector is empty return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm330l1ks.jl:13\nin expression starting at\
    \ /tmp/tmpm330l1ks.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers lst and returns the sum of the even elements that are at\
    \ odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprm05ae02.jl:14\nin expression starting at\
    \ /tmp/tmprm05ae02.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the odd numbers in a given vector of integers lst. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsn1fuhly.jl:13\nin expression starting at\
    \ /tmp/tmpsn1fuhly.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2 : end]\n    evens + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 2\nWrite a function called add_all that given a vector of integers\
    \ lst, adds the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6_fp0ik.jl:13\nin expression starting at\
    \ /tmp/tmp_6_fp0ik.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function called sub that subtracts all the even elements that are at odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68dx_2hv.jl:14\nin expression starting at\
    \ /tmp/tmp68dx_2hv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18p4eg8b.jl:13\nin expression starting at\
    \ /tmp/tmp18p4eg8b.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2:end]\n    even = even[findall(even .%2)] \n    even\
    \ = sum(even)\n    odd = odd[findall(odd .%2)]\n    odd = sum(odd)\n    return\
    \ even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers lst and returns\
    \ the sum of the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbv3x83s.jl:17\nin expression starting at\
    \ /tmp/tmpmbv3x83s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpripuu8em.jl:13\nin expression starting at\
    \ /tmp/tmpripuu8em.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even elements of a given vector. \nWrite a function that returns the sum of\
    \ the odd elements of a given vector. \nWrite a function that returns the product\
    \ of the even elements of a given vector. \nWrite a function that returns the\
    \ product of the odd elements of a given vector. \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xjiu7tz.jl:13\nin expression starting at\
    \ /tmp/tmp8xjiu7tz.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ numbers in the given vector. For example, sum([4, 2, 6, 7]) == 50\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbh54755n.jl:13\nin expression starting at\
    \ /tmp/tmpbh54755n.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements in a given\
    \ vector of integers. If the vector is empty, return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm37apmd5.jl:13\nin expression starting at\
    \ /tmp/tmpm37apmd5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the odd numbers in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd62vplpe.jl:12\nin expression starting at /tmp/tmpd62vplpe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even numbers in a given vector.\
    \ \nWrite a function that returns the sum of the odd numbers in a given vector.\
    \ \nWrite a function that returns the product of the even numbers in a given vector.\
    \ \nWrite a function that returns the product of the odd numbers in a given vector.\
    \ \nWrite a function that returns the maximum of a given vector. \nWrite a function\
    \ that returns the minimum of a given vector. \nWrite a function that returns\
    \ the absolute value of a given vector. \nWrite a function that returns the absolute\
    \ value of a given vector. \nWrite a function that returns the absolute value\
    \ of a given vector. \nWrite a function that returns the absolute value of a given\
    \ vector. \nWrite a function that returns the absolute value of a given vector.\
    \ \nWrite a function that returns the absolute value of a given vector. \nWrite\
    \ a function that returns the absolute value of a given vector. \nWrite a function\
    \ that returns the absolute value of a given vector. \nWrite a function that returns\
    \ the absolute value of a given vector. \nWrite a function that returns the absolute\
    \ value of a given vector. \nWrite a function that returns the absolute value\
    \ of a given vector. \nWrite a function that returns the absolute value of a given\
    \ vector. \nWrite a function that returns the absolute value of a given vector.\
    \ \nWrite a function that returns the absolute value of a given vector. \nWrite\
    \ a function that returns the absolute value of a given vector. \nWrite a function\
    \ that returns the absolute value of a given vector. \nWrite a function that returns\
    \ the absolute value of a given vector. \nWrite a function that returns the absolute\
    \ value of a given vector. \nWrite a function that returns the absolute value\
    \ of a given vector. \nWrite a function that returns the absolute value of a given\
    \ vector. \nWrite a function that returns the absolute value of a given vector.\
    \ \nWrite a function that returns the absolute value of a given vector. \nWrite\
    \ a function that returns the absolute value of a given vector. \nWrite a function\
    \ that returns the absolute value of a given vector. \nWrite a function that returns\
    \ the absolute value of a given vector. \nWrite a function that returns the absolute\
    \ value of a given vector. \nWrite a function that returns the absolute value\
    \ of a given vector. \nWrite a function that returns the absolute value of a given\
    \ vector. \nWrite a function that returns the absolute value of a given vector.\
    \ \nWrite a function that returns the absolute value of a given vector. \nWrite\
    \ a function that returns the absolute value of a given vector. \nWrite a function\
    \ that returns the absolute value of a given vector. \nWrite a function that returns\
    \ the absolute value of a given vector. \nWrite a function that returns the absolute\
    \ value of a given vector. \nWrite a function that returns the absolute value\
    \ of a given vector. \nWrite a function that returns the absolute value of a given\
    \ vector. \nWrite a function that returns the absolute \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8wypvo5z.jl:12\nin expression starting at /tmp/tmp8wypvo5z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2 : end]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the elements of a\
    \ given vector. For example, add([4, 2, 6, 7]) is equal to 10. Hint: use map()\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsv223yt.jl:13\nin expression starting at\
    \ /tmp/tmpbsv223yt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpi3rroo.jl:14\nin expression starting at\
    \ /tmp/tmpcpi3rroo.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst):end]\n    even.+=(odd.*2)\n    return even\n\
    end\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even numbers in a given\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7z5bbz1.jl:14\nin expression starting at\
    \ /tmp/tmph7z5bbz1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called sub that subtracts the even elements that are at odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_fgruqo.jl:14\nin expression starting at\
    \ /tmp/tmpd_fgruqo.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ :end] \n    odds = lst[2 :end] \n    evens + sum(odds)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic2ydr3o.jl:13\nin expression starting at\
    \ /tmp/tmpic2ydr3o.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called sub that subtracts the even elements that are at\
    \ odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpromy3wxx.jl:14\nin expression starting at\
    \ /tmp/tmpromy3wxx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even numbers in a given vector. \nWrite a function that returns the sum of the\
    \ odd numbers in a given vector. \nWrite a function that returns the product of\
    \ the even numbers in a given vector. \nWrite a function that returns the product\
    \ of the odd numbers in a given vector. \nWrite a function that returns the maximum\
    \ of a given vector. \nWrite a function that returns the minimum of a given vector.\
    \ \nWrite a function that returns the product of the squares of the even numbers\
    \ in a given vector. \nWrite a function that returns the product of the squares\
    \ of the odd numbers in a given vector. \nWrite a function that returns the sum\
    \ of the squares of the even numbers in a given vector. \nWrite a function that\
    \ returns the sum of the squares of the odd numbers in a given vector. \nWrite\
    \ a function that returns the product of the squares of the even numbers in a\
    \ given vector. \nWrite a function that returns the product of the squares of\
    \ the odd numbers in a given vector. \nWrite a function that returns the sum of\
    \ the cubes of the even numbers in a given vector. \nWrite a function that returns\
    \ the sum of the cubes of the odd numbers in a given vector. \nWrite a function\
    \ that returns the product of the cubes of the even numbers in a given vector.\
    \ \nWrite a function that returns the product of the cubes of the odd numbers\
    \ in a given vector. \nWrite a function that returns the sum of the reciprocals\
    \ of the even numbers in a given vector. \nWrite a function that returns the sum\
    \ of the reciprocals of the odd numbers in a given vector. \nWrite a function\
    \ that returns the product of the reciprocals of the even numbers in a given vector.\
    \ \nWrite a function that returns the product of the reciprocals of the odd numbers\
    \ in a given vector. \nWrite a function that returns the sum of the reciprocals\
    \ of the squares of the even numbers in a given vector. \nWrite a function that\
    \ returns the sum of the reciprocals of the squares of the odd numbers in a given\
    \ vector. \nWrite a function that returns the product of the reciprocals of the\
    \ squares of the even numbers in a given vector. \nWrite a function that returns\
    \ the product of the reciprocals of the squares of the odd numbers in a given\
    \ vector. \nWrite a function that returns the sum of the reciprocals of the cubes\
    \ of the even numbers in a given vector. \nWrite a function that returns the sum\
    \ of the reciprocals of the cubes of the odd numbers in a given vector. \nWrite\
    \ a function that returns the product of the reciprocals of the cubes of the even\
    \ numbers in a given vector. \nWrite a function that returns the product of the\
    \ reciprocals of the cubes of the odd numbers in a given vector. \nWrite a function\
    \ that returns the sum of the reciprocals of the squares of the even numbers in\
    \ a given vector. \nWrite a function that returns the sum of the reciprocals of\
    \ the square\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_v1p17y.jl:13\nin expression starting at\
    \ /tmp/tmpk_v1p17y.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices from the odd elements that\
    \ are at even indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpueyy_ht5.jl:13\nin expression starting at\
    \ /tmp/tmpueyy_ht5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)/2]\n    odds = lst[(end-lst)/2+1 : end]\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 5\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9v_fbq8.jl:13\nin expression starting at\
    \ /tmp/tmpt9v_fbq8.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ a given vector of integers lst. \nThe function should work for both scalars\
    \ and vectors of integers.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6bjdh2f.jl:13\nin expression starting at\
    \ /tmp/tmpn6bjdh2f.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even elements\
    \ in a given vector of integers lst\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ja3h7wz.jl:15\nin expression starting at\
    \ /tmp/tmp0ja3h7wz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n  \
    \  return evens\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ockk13y.jl:14\nin expression starting at\
    \ /tmp/tmp5ockk13y.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    return sum(even + odd)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the odd elements\
    \ of a given vector of integers lst. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given vector of integers lst. \nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbh5prn0.jl:13\nin expression starting at\
    \ /tmp/tmpwbh5prn0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements of a vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfr102q0.jl:13\nin expression starting at\
    \ /tmp/tmpwfr102q0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([4, 2, 6, 7]) == 6\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called sub that subtracts the even elements that are at odd indices from the\
    \ given vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydmfdr_i.jl:13\nin expression starting at\
    \ /tmp/tmpydmfdr_i.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst):end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1vvx17d.jl:13\nin expression starting at\
    \ /tmp/tmpl1vvx17d.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = even + odd\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the odd elements of a given vector\
    \ of integers. \nWrite a function that returns the product of the even elements\
    \ of a given vector of integers. \nWrite a function that returns the product of\
    \ the odd elements of a given vector of integers. \nWrite a function that returns\
    \ the maximum of a given vector of integers. \nWrite a function that returns the\
    \ minimum of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a given vector of integers. \nWrite a function that returns the absolute\
    \ value of a \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg54swl6d.jl:14\nin expression starting at\
    \ /tmp/tmpg54swl6d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a vector of integers lst. find the sum of all even elements that are\
    \ at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nm1loxv.jl:14\nin expression starting at\
    \ /tmp/tmp0nm1loxv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x +\
    \ 1, evens)\n    evens = reduce(add, evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a vector of integers lst, return the sum of the even elements that are at odd\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51xvtsvy.jl:15\nin expression starting at\
    \ /tmp/tmp51xvtsvy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even = even(:).+even\n    odd = odd(:).+odd\n    return\
    \ sum(even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([4, 2,\
    \ 6, 7]) == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in a vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvdmk0hv.jl:15\nin expression starting at\
    \ /tmp/tmpbvdmk0hv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of a given vector of integers lst. \nThe function should work for\
    \ both scalars and vectors.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl06v_6s7.jl:13\nin expression starting at\
    \ /tmp/tmpl06v_6s7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even numbers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqh9z65n.jl:15\nin expression starting at\
    \ /tmp/tmphqh9z65n.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given vector of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given vector of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given vector of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given vector of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given vector of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given vector of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given vector of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given vector of integers. \nWrite a function that returns the sum\
    \ of the even numbers in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the even numbers in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even numbers in\
    \ a given vector of integers. \nWrite a function that returns the sum of the even\
    \ numbers in a given vector of integers. \nWrite a function that returns the \n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm4xt73p.jl:14\nin expression starting at\
    \ /tmp/tmpxm4xt73p.jl:14\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp52rapmq7.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert,
    expected Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @
    Main /tmp/tmp52rapmq7.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52rapmq7.jl:19 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52rapmq7.jl:18\ntest set: Error
    During Test at /tmp/tmp52rapmq7.jl:20\n  Test threw exception\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got a value
    of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp52rapmq7.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52rapmq7.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52rapmq7.jl:18\ntest set: Error
    During Test at /tmp/tmp52rapmq7.jl:21\n  Test threw exception\n  Expression: candidate([4,
    0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got a value of type
    Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp52rapmq7.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52rapmq7.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52rapmq7.jl:18\ntest set: Error
    During Test at /tmp/tmp52rapmq7.jl:22\n  Test threw exception\n  Expression: candidate([4,
    4, 6, 8]) == 12\n  TypeError: in typeassert, expected T'
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1):end]\n    evens + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3.2\nGiven a non-empty vector of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbquu4jn.jl:13\nin expression starting at\
    \ /tmp/tmprbquu4jn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 2, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the even elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr36ji2xa.jl:17\nin expression starting at\
    \ /tmp/tmpr36ji2xa.jl:17\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even elements in a given vector of integers lst. \nWrite a function that returns\
    \ the sum of the odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers lst. \nWrite a function\
    \ that returns the sum\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ib2apsm.jl:13\nin expression starting at\
    \ /tmp/tmp5ib2apsm.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the numbers in the vector lst.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxpa2kpz.jl:14\nin expression starting at\
    \ /tmp/tmpdxpa2kpz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a vector of integers lst, find the index of the first element that\
    \ is greater than or equal to 50\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zciir_e.jl:13\nin expression starting at\
    \ /tmp/tmp6zciir_e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2 : end]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4m0cyfaw.jl:13\nin expression starting at\
    \ /tmp/tmp4m0cyfaw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst):end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even elements of a given vector of integers lst. \nWrite a function that returns\
    \ the sum of the odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc19qhd5i.jl:13\nin expression starting at\
    \ /tmp/tmpc19qhd5i.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x\
    \ + 1, evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given vector of integers. \nFor example, add([4, 2, 6, 7]) should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n4c42hh.jl:17\nin expression starting at\
    \ /tmp/tmp7n4c42hh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given vector of integers. For example, add([4,\
    \ 2, 6, 7]) is equal to 14. Your function should work for vectors of any length.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy3_b6t_.jl:13\nin expression starting at\
    \ /tmp/tmpcy3_b6t_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 6\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the even elements\
    \ of a given vector of integers. Test your function on a few examples:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmlyl2ef.jl:13\nin expression starting at\
    \ /tmp/tmptmlyl2ef.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of all elements in a vector. \nWrite a function\
    \ that returns the product of all elements in a vector. \nWrite a function that\
    \ returns the maximum of all elements in a vector. \nWrite a function that returns\
    \ the minimum of all elements in a vector. \nWrite a function that returns the\
    \ absolute maximum of all elements in a vector. \nWrite a function that returns\
    \ the absolute minimum of all elements in a vector. \nWrite a function that returns\
    \ the sum of the squares of all elements in a vector. \nWrite a function that\
    \ returns the product of the squares of all elements in a vector. \nWrite a function\
    \ that returns the sum of the absolute values of all elements in a vector. \n\
    Write a function that returns the product of the absolute values of all elements\
    \ in a vector. \nWrite a function that returns the sum of the natural logarithms\
    \ of all elements in a vector. \nWrite a function that returns the product of\
    \ the natural logarithms of all elements in a vector. \nWrite a function that\
    \ returns the sum of the absolute values of the natural logarithms of all elements\
    \ in a vector. \nWrite a function that returns the product of the absolute values\
    \ of the natural logarithms of all elements in a vector. \nWrite a function that\
    \ returns the sum of the natural logarithms of the absolute values of all elements\
    \ in a vector. \nWrite a function that returns the product of the natural logarithms\
    \ of the absolute values of all elements in a vector. \nWrite a function that\
    \ returns the sum of the squares of the absolute values of all elements in a vector.\
    \ \nWrite a function that returns the product of the squares of the absolute values\
    \ of all elements in a vector. \nWrite a function that returns the sum of the\
    \ squares of the natural logarithms of all elements in a vector. \nWrite a function\
    \ that returns the product of the squares of the natural logarithms of all elements\
    \ in a vector. \nWrite a function that returns the sum of the squares of the absolute\
    \ values of the natural logarithms of all elements in a vector. \nWrite a function\
    \ that returns the product of the squares of the absolute values of the natural\
    \ logarithms of all elements in a vector. \nWrite a function that returns the\
    \ sum of the squares of the natural logarithms of the absolute values of all elements\
    \ in a vector. \nWrite a function that returns the product of the squares of the\
    \ natural logarithms of the absolute values of all elements in a vector. \nWrite\
    \ a function that returns the sum of the squares of the natural logarithms of\
    \ the absolute values of the natural logarithms of all elements in a vector. \n\
    Write a function that returns the product of the squares of the natural logarithms\
    \ of the absolute values of the natural logarithms of all elements in a vector.\
    \ \nWrite a function that returns the sum of the squares of the natural logarithms\
    \ of the absolute values of the natural logarithms of the absolute values of all\
    \ elements in a vector. \nWrite a function that returns the product of the squares\
    \ of the natural logarithms of the absolute values of the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyez8o_5.jl:13\nin expression starting at\
    \ /tmp/tmpsyez8o_5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cxwofry.jl:13\nin expression starting at\
    \ /tmp/tmp7cxwofry.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 2 \n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the numbers in a vector.\
    \ For example, sum([1, 2, 3]) should return 6. Make sure it works for vectors\
    \ of different lengths too.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqvgegsk.jl:14\nin expression starting at\
    \ /tmp/tmpaqvgegsk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfk_izggt.jl:14\nin expression starting at\
    \ /tmp/tmpfk_izggt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even = even.+even\n    odd = odd.+odd\n    return\
    \ even+odd\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the even numbers in a given vector.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38d81dzq.jl:15\nin expression starting at\
    \ /tmp/tmp38d81dzq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the elements of a\
    \ vector. For example, add([4, 2, 6, 7]) == 10\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuramfq7m.jl:13\nin expression starting at\
    \ /tmp/tmpuramfq7m.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : (end)]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements and the sum of the odd elements. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even elements and the\
    \ sum of the odd elements. \nWrite a function that takes a vector of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a vector of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the even elements and the sum of the odd elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmt7x5hdt.jl:13\nin expression starting at\
    \ /tmp/tmpmt7x5hdt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the odd numbers in a\
    \ given vector of integers. \nWrite a function that returns the product of the\
    \ even numbers in a given vector of integers. \nWrite a function that returns\
    \ the product of the odd numbers in a given vector of integers. \nWrite a function\
    \ that returns the maximum of a given vector of integers. \nWrite a function that\
    \ returns the minimum of a given vector of integers. \nWrite a function that returns\
    \ the absolute value of a given vector of integers. \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9fp3ajf.jl:14\nin expression starting at\
    \ /tmp/tmpo9fp3ajf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvkpys84a.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpvkpys84a.jl:20\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkpys84a.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkpys84a.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvkpys84a.jl:21\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkpys84a.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkpys84a.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvkpys84a.jl:22\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkpys84a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkpys84a.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers in the vector lst that are divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5dg81igq.jl:12\nin expression starting at /tmp/tmp5dg81igq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jwm2of4.jl:13\nin expression starting at\
    \ /tmp/tmp4jwm2of4.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even numbers in a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the odd numbers\
    \ in a given vector of integers lst. \nWrite a function that returns the product\
    \ of the even numbers in a given vector of integers lst. \nWrite a function that\
    \ returns the product of the odd numbers in a given vector of integers lst. \n\
    Write a function that returns the maximum of the even numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the maximum of the odd numbers\
    \ in a given vector of integers lst. \nWrite a function that returns the minimum\
    \ of the even numbers in a given vector of integers lst. \nWrite a function that\
    \ returns the minimum of the odd numbers in a given vector of integers lst. \n\
    Write a function that returns the absolute value of the even numbers in a given\
    \ vector of integers lst. \nWrite a function that returns the absolute value of\
    \ the odd numbers in a given vector of integers lst. \nWrite a function that returns\
    \ the absolute value of the sum of even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the absolute value of the sum of odd numbers\
    \ in a given vector of integers lst. \nWrite a function that returns the absolute\
    \ value of the product of even numbers in a given vector of integers lst. \nWrite\
    \ a function that returns the absolute value of the product of odd numbers in\
    \ a given vector of integers lst. \nWrite a function that returns the absolute\
    \ value of the maximum of the even numbers in a given vector of integers lst.\
    \ \nWrite a function that returns the absolute value of the maximum of the odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ absolute value of the minimum of the even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the absolute value of the minimum of the\
    \ odd numbers in a given vector of integers lst. \nWrite a function that returns\
    \ the absolute value of the sum of the even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the absolute value of the sum of the odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ absolute value of the product of even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the absolute value of the product of odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ absolute value of the maximum of the even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the absolute value of the maximum of the\
    \ odd numbers in a given vector of integers lst. \nWrite a function that returns\
    \ the absolute value of the minimum of the even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the absolute value of the minimum of the\
    \ odd numbers in a given vector of integers lst. \nWrite a function that returns\
    \ the absolute value of the \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoiisay94.jl:13\nin expression starting at\
    \ /tmp/tmpoiisay94.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the squares of the numbers in a vector. \n\
    Write a function that returns the product of the numbers in a vector. \nWrite\
    \ a function that returns the product of the squares of the numbers in a vector.\
    \ \nWrite a function that returns the maximum of the numbers in a vector. \nWrite\
    \ a function that returns the minimum of the numbers in a vector. \nWrite a function\
    \ that returns the number of elements in a vector. \nWrite a function that returns\
    \ the mean of the numbers in a vector. \nWrite a function that returns the variance\
    \ of the numbers in a vector. \nWrite a function that returns the standard deviation\
    \ of the numbers in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite a function that returns the number of non-zero\
    \ elements in a vector. \nWrite \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa21_7s1h.jl:14\nin expression starting at\
    \ /tmp/tmpa21_7s1h.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcdfz1emt.jl:12\nin expression starting at /tmp/tmpcdfz1emt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2alsrrmz.jl:15\nin expression starting at\
    \ /tmp/tmp2alsrrmz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx1_u638.jl:13\nin expression starting at\
    \ /tmp/tmpmx1_u638.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ given vector. \nThe function should work for both real and complex numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5qq7l2b.jl:14\nin expression starting at\
    \ /tmp/tmph5qq7l2b.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2 :]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the squares of the even numbers in a given\
    \ vector of integers. \nThe function should take one argument, lst::Vector{Int64}.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixzbs_3c.jl:14\nin expression starting at\
    \ /tmp/tmpixzbs_3c.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67cdba9d.jl:14\nin expression starting at\
    \ /tmp/tmp67cdba9d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdrbf5xy.jl:13\nin expression starting at\
    \ /tmp/tmpwdrbf5xy.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even.sum\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ vector of integers. \nThe function should take one argument, a vector of integers\
    \ lst. \nThe function should return the sum of the squares of the even numbers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtla2l7k.jl:14\nin expression starting at\
    \ /tmp/tmphtla2l7k.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nGiven a vector of integers lst, return the sum of the squares of the\
    \ even elements that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nitl5lo.jl:13\nin expression starting at\
    \ /tmp/tmp9nitl5lo.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even numbers\
    \ in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn3ggkpi.jl:14\nin expression starting at\
    \ /tmp/tmpzn3ggkpi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-2) : (end-1)]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8i6ev0c.jl:13\nin expression starting at\
    \ /tmp/tmpb8i6ev0c.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+ odd.+\nend\n</cell>\n<code language=julia-1.3>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices from the even elements that\
    \ are at even indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc4_fcd9j.jl:12\nin expression starting at /tmp/tmpc4_fcd9j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in a\
    \ vector. For example, sum([1, 2, 3]) should return 6. Make sure it works for\
    \ both scalars and vectors.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ivtc8pe.jl:14\nin expression starting at\
    \ /tmp/tmp5ivtc8pe.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ .% 2 == 0\n    lst[even] = lst[even] + lst[!even]\n    return lst[even]\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even elements of an array.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_juo0hdk.jl:13\nin expression starting at\
    \ /tmp/tmp_juo0hdk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the squares of the numbers in the given vector. For example, sum([4, 2, 6, 7])\
    \ == 25\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1a0anap.jl:13\nin expression starting at\
    \ /tmp/tmpy1a0anap.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry3gfuc3.jl:13\nin expression starting at\
    \ /tmp/tmpry3gfuc3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_m7n49uv.jl:14\nin expression starting at\
    \ /tmp/tmp_m7n49uv.jl:14\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp52rapmq7.jl:19\n  Test threw
    exception\n  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert,
    expected Type, got a value of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @
    Main /tmp/tmp52rapmq7.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52rapmq7.jl:19 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52rapmq7.jl:18\ntest set: Error
    During Test at /tmp/tmp52rapmq7.jl:20\n  Test threw exception\n  Expression: candidate([4,
    5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got a value
    of type Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp52rapmq7.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52rapmq7.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52rapmq7.jl:18\ntest set: Error
    During Test at /tmp/tmp52rapmq7.jl:21\n  Test threw exception\n  Expression: candidate([4,
    0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got a value of type
    Int64\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp52rapmq7.jl:9\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52rapmq7.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52rapmq7.jl:18\ntest set: Error
    During Test at /tmp/tmp52rapmq7.jl:22\n  Test threw exception\n  Expression: candidate([4,
    4, 6, 8]) == 12\n  TypeError: in typeassert, expected T'
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : (end)]\n    even = sum(even)\n    odd = sum(odd)\n\
    \    return even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even elements in a given vector of integers. If the vector is empty, return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ukiklms.jl:15\nin expression starting at\
    \ /tmp/tmp3ukiklms.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9uku4bq.jl:14\nin expression starting at\
    \ /tmp/tmpz9uku4bq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in the\
    \ given vector. For example, sum([4, 2, 6]) should return 14.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxavoh488.jl:14\nin expression starting at\
    \ /tmp/tmpxavoh488.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called multiply that multiplies a vector by a scalar.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0289p26g.jl:14\nin expression starting at\
    \ /tmp/tmp0289p26g.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsnazap8.jl:14\nin expression starting at\
    \ /tmp/tmpvsnazap8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a vector of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the even elements and the sum of the odd elements. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the even elements and\
    \ the sum of the odd elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3svtmz7.jl:15\nin expression starting at\
    \ /tmp/tmpx3svtmz7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements of a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements of a given vector of integers. \nWrite a function that returns\
    \ the sum of the \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdp44efv.jl:13\nin expression starting at\
    \ /tmp/tmpmdp44efv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the odd numbers\
    \ in a given vector of integers lst. \nWrite a function that returns the sum of\
    \ the even and odd numbers in a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd numbers in a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd numbers in\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers lst. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers lst.\
    \ \nWrite a function that returns the sum of the even and odd numbers in a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ and odd numbers in a given vector of integers lst. \nWrite a function that returns\
    \ the sum of the even and odd numbers in a given vector of integers lst. \nWrite\
    \ a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the even and odd\
    \ numbers in a given vector of integers lst. \nWrite a function that returns the\
    \ sum of the even and odd numbers in a given vector of integers lst. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers lst. \nWrite a function that returns the sum\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rssc5n1.jl:13\nin expression starting at\
    \ /tmp/tmp9rssc5n1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even elements of a given vector\
    \ of integers. Write a test that ensures that your function works as expected.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphrc2u25z.jl:12\nin expression starting at /tmp/tmphrc2u25z.jl:12\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdurq34h.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpwdurq34h.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 166 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdurq34h.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdurq34h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdurq34h.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the numbers in the vector lst that\
    \ have even indices. For example, sum([4, 2, 6, 7]) is 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3n4i3ymh.jl:14\nin expression starting at\
    \ /tmp/tmp3n4i3ymh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a vector of integers lst, return the sum of the even elements that are at odd\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s_1gjxq.jl:14\nin expression starting at\
    \ /tmp/tmp_s_1gjxq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.0>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the squares of the even numbers in a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej2pzyed.jl:12\nin expression starting at\
    \ /tmp/tmpej2pzyed.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze6eco_c.jl:15\nin expression starting at\
    \ /tmp/tmpze6eco_c.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2 : end]\n    evens + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even numbers in a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lbr359d.jl:13\nin expression starting at\
    \ /tmp/tmp2lbr359d.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2:end] \n    return sum(even) + sum(odd) \nend \n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the odd elements\
    \ of a given vector of integers lst. \nWrite a function that returns the product\
    \ of the even elements of a given vector of integers lst. \nWrite a function that\
    \ returns the product of the odd elements of a given vector of integers lst. \n\
    Write a function that returns the maximum of a given vector of integers lst. \n\
    Write a function that returns the minimum of a given vector of integers lst. \n\
    Write a function that returns the product of the squares of the even elements\
    \ of a given vector of integers lst. \nWrite a function that returns the product\
    \ of the squares of the odd elements of a given vector of integers lst. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjveqyjj0.jl:13\nin expression starting at\
    \ /tmp/tmpjveqyjj0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x\
    \ + 1, evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the even elements and of the odd elements.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpensqbf5c.jl:17\nin expression starting at\
    \ /tmp/tmpensqbf5c.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ numbers in the vector lst that are divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49xdtnpk.jl:13\nin expression starting at\
    \ /tmp/tmp49xdtnpk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the even numbers in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprh77mh4j.jl:13\nin expression starting at\
    \ /tmp/tmprh77mh4j.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x0wq8pe.jl:15\nin expression starting at\
    \ /tmp/tmp6x0wq8pe.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function called sub that subtracts all the even elements from\
    \ all the odd elements in a vector. For example, if the vector is [4, 2, 6, 7],\
    \ then the function should return [3, -2, -4, -6]. Make sure your function works\
    \ with vectors of different lengths.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoi16zxo5.jl:13\nin expression starting at\
    \ /tmp/tmpoi16zxo5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : (end)]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nGiven a vector of integers lst, return the sum of the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlebofev.jl:13\nin expression starting at\
    \ /tmp/tmpwlebofev.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ elements of a vector. For example, sum([1, 2, 3]) = 1 + 4 + 9 + 16 = 25\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1chcvqw.jl:13\nin expression starting at\
    \ /tmp/tmpq1chcvqw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the even numbers in a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzhis8pk.jl:14\nin expression starting at\
    \ /tmp/tmptzhis8pk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even elements in a given vector of integers\
    \ lst\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6k_ifunm.jl:14\nin expression starting at\
    \ /tmp/tmp6k_ifunm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a vector of integers lst, return the sum of the even elements that are at odd\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplaxh7epg.jl:14\nin expression starting at\
    \ /tmp/tmplaxh7epg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a vector of integers lst, find the largest element in\
    \ the vector. \nGiven a vector of integers lst, find the smallest element in the\
    \ vector. \nGiven a vector of integers lst, find the product of the elements in\
    \ the vector. \nGiven a vector of integers lst, find the sum of the elements in\
    \ the vector. \nGiven a vector of integers lst, find the index of the first element\
    \ that is greater than the element at index i. \nGiven a vector of integers lst,\
    \ find the index of the first element that is less than the element at index i.\
    \ \nGiven a vector of integers lst, find the index of the element that is divisible\
    \ by 3. \nGiven a vector of integers lst, find the index of the element that is\
    \ divisible by 5. \nGiven a vector of integers lst, find the index of the element\
    \ that is divisible by 7. \nGiven a vector of integers lst, find the index of\
    \ the element that is divisible by 11. \nGiven a vector of integers lst, find\
    \ the index of the element that is divisible by 13. \nGiven a vector of integers\
    \ lst, find the index of the element that is divisible by 17. \nGiven a vector\
    \ of integers lst, find the index of the element that is divisible by 19. \nGiven\
    \ a vector of integers lst, find the index of the element that is divisible by\
    \ 23. \nGiven a vector of integers lst, find the index of the element that is\
    \ divisible by 29. \nGiven a vector of integers lst, find the index of the element\
    \ that is divisible by 31. \nGiven a vector of integers lst, find the index of\
    \ the element that is divisible by 37. \nGiven a vector of integers lst, find\
    \ the index of the element that is divisible by 41. \nGiven a vector of integers\
    \ lst, find the index of the element that is divisible by 43. \nGiven a vector\
    \ of integers lst, find the index of the element that is divisible by 47. \nGiven\
    \ a vector of integers lst, find the index of the element that is divisible by\
    \ 53. \nGiven a vector of integers lst, find the index of the element that is\
    \ divisible by 59. \nGiven a vector of integers lst, find the index of the element\
    \ that is divisible by 61. \nGiven a vector of integers lst, find the index of\
    \ the element that is divisible by 67. \nGiven a vector of integers lst, find\
    \ the index of the element that is divisible by 71. \nGiven a vector of integers\
    \ lst, \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpob249xpl.jl:15\nin expression starting at\
    \ /tmp/tmpob249xpl.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called multiply that multiplies all elements in a vector by 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporzq9kk9.jl:14\nin expression starting at\
    \ /tmp/tmporzq9kk9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ given vector. For example, add([4, 2, 6, 7]) is equal to 10. You may use the\
    \ sum function.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdaj11757.jl:13\nin expression starting at\
    \ /tmp/tmpdaj11757.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjloek2j6.jl:14\nin expression starting at\
    \ /tmp/tmpjloek2j6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2:end] \n    even.+ odd.* 2 \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even elements of a given vector\
    \ of integers lst. \nGiven a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuv1eacp.jl:13\nin expression starting at\
    \ /tmp/tmpwuv1eacp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc9nd8zv.jl:13\nin expression starting at\
    \ /tmp/tmpyc9nd8zv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1):end]\n    return sum(evens) + sum(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1vazd4c1.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp1vazd4c1.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 96 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1vazd4c1.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vazd4c1.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp1vazd4c1.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 148 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vazd4c1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vazd4c1.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp1vazd4c1.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vazd4c1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vazd4c1.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp1vazd4c1.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 28 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1vazd4c1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1vazd4c1.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given vector of integers. \nWrite\
    \ a function that returns the sum of the even and odd elements in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd elements\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd elements in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd elements in a given vector of integers.\
    \ \nWrite a function that returns the sum of the even and odd elements in a given\
    \ vector of integers. \nWrite a function that returns the sum of the even and\
    \ odd elements in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd elements in a given \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwq9g6ne.jl:13\nin expression starting at\
    \ /tmp/tmpuwq9g6ne.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst) : end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements of a\
    \ vector. \nGiven a vector of integers lst. return the sum of the elements that\
    \ are at even indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6icr_jck.jl:14\nin expression starting at\
    \ /tmp/tmp6icr_jck.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpydjvqyeb.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydjvqyeb.jl:12\n\
    in expression starting at /tmp/tmpydjvqyeb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+ odd.+\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called add_all that takes in a list of vectors and returns the sum\
    \ of the even elements of each vector. For example: add_all([Vector{Int64}([4,\
    \ 2, 6, 7]), Vector{Int64}([5, 3, 7, 9])]) should return [5, 7, 11].\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7mfhqc2m.jl:12\nin expression starting at /tmp/tmp7mfhqc2m.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even numbers\
    \ in a given vector. \nWrite a function that returns the sum of the odd numbers\
    \ in a given vector. \nWrite a function that returns the product of the even numbers\
    \ in a given vector. \nWrite a function that returns the product of the odd numbers\
    \ in a given vector. \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_mr6jal.jl:14\nin expression starting at\
    \ /tmp/tmph_mr6jal.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : end]\n    even.+=(odd.*2)\n    return even\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxj50kmvx.jl:14\nin expression starting at\
    \ /tmp/tmpxj50kmvx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers lst and returns the\
    \ sum of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lbxva_9.jl:14\nin expression starting at\
    \ /tmp/tmp6lbxva_9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of integers lst and returns the sum of the even\
    \ elements that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r94fbpi.jl:14\nin expression starting at\
    \ /tmp/tmp4r94fbpi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2 :] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcy6bvpgs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcy6bvpgs.jl:1\n\
    in expression starting at /tmp/tmpcy6bvpgs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even elements of a given vector\
    \ of integers lst. \nWrite a function that returns the sum of the odd elements\
    \ of a given vector of integers lst. \nWrite a function that returns the product\
    \ of the even elements of a given vector of integers lst. \nWrite a function that\
    \ returns the product of the odd elements of a given vector of integers lst. \n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpep4tb6qq.jl:12\nin expression starting at /tmp/tmpep4tb6qq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    return sum(evens) + sum(odds)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5785kycc.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp5785kycc.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5785kycc.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5785kycc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp5785kycc.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 166 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5785kycc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5785kycc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp5785kycc.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5785kycc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5785kycc.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp5785kycc.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 32 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5785kycc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5785kycc.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[(end-1) : end]\n    return sum(even) + sum(odd)\nend\n\
    </cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyy8gxym.jl:13\nin expression starting at\
    \ /tmp/tmpyyy8gxym.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 2 \n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ numbers in the given vector. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1nlcrd6.jl:14\nin expression starting at\
    \ /tmp/tmpx1nlcrd6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst):end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the even elements\
    \ of a given vector of integers. \nWrite a function that returns the sum of the\
    \ squares of the odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the even and odd elements of a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the even and odd elements of a given\
    \ vector of integers. \nWrite a function that returns the sum of the \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwm387zv.jl:13\nin expression starting at\
    \ /tmp/tmpiwm387zv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2 : end]\n    even.+ odd.+\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the odd elements\
    \ of a given vector of integers lst. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even and \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwqpa_ez_.jl:12\nin expression starting at /tmp/tmpwqpa_ez_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst)+1 : (end-lst)]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3qypuvz.jl:15\nin expression starting at\
    \ /tmp/tmph3qypuvz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the odd numbers in a\
    \ given vector of integers. \nWrite a function that returns the sum of the even\
    \ and odd numbers in a given vector of integers. \nWrite a function that returns\
    \ the sum of the even and odd numbers in a given vector of integers. \nWrite a\
    \ function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even and odd numbers in a given vector\
    \ of integers. \nWrite a function that returns the sum of the even and odd numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ even and odd numbers in a given vector of integers. \nWrite a function that\
    \ returns the sum of the even and odd numbers in a given vector of integers. \n\
    Write a function that returns the sum of the even \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfnm5q_ug.jl:14\nin expression starting at\
    \ /tmp/tmpfnm5q_ug.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ % 2 == 0\n    lst[even] = lst[even] + lst[!even]\n    return lst[1]\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers in the vector lst that are divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyoub169.jl:13\nin expression starting at\
    \ /tmp/tmpzyoub169.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the numbers in the vector lst that\
    \ are not divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6uitwhgt.jl:14\nin expression starting at\
    \ /tmp/tmp6uitwhgt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n\
    \    return even + odd\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1;\n@assert add([4, 2, 6, 7]) == 2;\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the squares of the numbers in the given vector.\
    \ For example, sum([1, 2, 3, 4]) should return 10. Make sure you use Julia's sum\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtigyyp5.jl:15\nin expression starting at\
    \ /tmp/tmpgtigyyp5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)/2]\n    odds = lst[(end-lst)/2+1 : end]\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers in the vector lst that have even indices. For example,\
    \ sum([4, 2, 6, 7]) == 6.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58_qlhfi.jl:13\nin expression starting at\
    \ /tmp/tmp58_qlhfi.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbc920_hc.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpbc920_hc.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbc920_hc.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc920_hc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbc920_hc.jl:18\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 134 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc920_hc.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc920_hc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbc920_hc.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc920_hc.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc920_hc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbc920_hc.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc920_hc.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc920_hc.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 2\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum of the numbers in the given vector.\
    \ \nWrite a function that returns the sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9ee9aw8.jl:14\nin expression starting at\
    \ /tmp/tmpo9ee9aw8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ elements of a given vector of integers lst and the sum of the odd elements of\
    \ a given vector of integers lst. \nWrite a function that returns the sum of the\
    \ even elements of a given vector of integers lst and the sum of the odd elements\
    \ of a given vector of integers lst and the sum of the even elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ elements of a given vector of integers lst and the sum of the odd elements of\
    \ a given vector of integers lst and the sum of the even elements of a given vector\
    \ of integers lst and the sum of the odd elements of a given vector of integers\
    \ lst. \nWrite a function that returns the sum of the even elements of a given\
    \ vector of integers lst and the sum of the odd elements of a given vector of\
    \ integers lst and the sum of the even elements of a given vector of integers\
    \ lst and the sum of the odd elements of a given vector of integers lst and the\
    \ sum of the even elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even elements of a given vector of integers lst\
    \ and the sum of the odd elements of a given vector of integers lst and the sum\
    \ of the even elements of a given vector of integers lst and the sum of the odd\
    \ elements of a given vector of integers lst and the sum of the even elements\
    \ of a given vector of integers lst and the sum of the odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ elements of a given vector of integers lst and the sum of the odd elements of\
    \ a given vector of integers lst and the sum of the even elements of a given vector\
    \ of integers lst and the sum of the odd elements of a given vector of integers\
    \ lst and the sum of the even elements of a given vector of integers lst and the\
    \ sum of the odd elements of a given vector of integers lst. \nWrite a function\
    \ that returns the sum of the even elements of a given vector of integers lst\
    \ and the sum of the odd elements of a given vector of integers lst and the sum\
    \ of the even elements of a given vector of integers lst and the sum of the odd\
    \ elements of a given vector of integers lst and the sum of the even elements\
    \ of a given vector of integers lst and the sum of the odd elements of a given\
    \ vector of integers lst. \nWrite a function that returns the sum of the even\
    \ elements of a given vector of integer\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7bx0eku.jl:13\nin expression starting at\
    \ /tmp/tmpt7bx0eku.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given vector of integers. For example, given [4, 2, 6, 7],\
    \ return 14.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnv612zj.jl:13\nin expression starting at\
    \ /tmp/tmpbnv612zj.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst):end]\n    even.+=(odd.*2)\n    return even\n\
    end\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbo4kkonq.jl:14\nin expression starting at\
    \ /tmp/tmpbo4kkonq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called sub that subtracts all the even elements that are\
    \ at odd indices from a given vector of integers lst. \nFor example if lst = [4,\
    \ 2, 6, 7] then sub(lst, lst[1 : (end-lst)]) should return [2, 4, 6, 7].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcnq9nqn.jl:14\nin expression starting at\
    \ /tmp/tmpzcnq9nqn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x\
    \ + 2, evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers lst and returns the\
    \ sum of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fp21aed.jl:17\nin expression starting at\
    \ /tmp/tmp_fp21aed.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x\
    \ + 1, evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given vector of integers. \nWrite a function that returns the sum of the\
    \ squares of the odd numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the squares of the numbers in a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the numbers in a given vector of integers. \nWrite a function that returns the\
    \ sum of the squares of the numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the squares of the numbers in a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the numbers in a given vector of integers. \nWrite a function that returns the\
    \ sum of the squares of the numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the squares of the numbers in a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the numbers in a given vector of integers. \nWrite a function that returns the\
    \ sum of the squares of the numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the squares of the numbers in a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the numbers in a given vector of integers. \nWrite a function that returns the\
    \ sum of the squares of the numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the squares of the numbers in a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the numbers in a given vector of integers. \nWrite a function that returns the\
    \ sum of the squares of the numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector of integers.\
    \ \nWrite a function that returns the sum of the squares of the numbers in a given\
    \ vector of integers. \nWrite a function that returns the sum of the squares of\
    \ the numbers in a given vector of integers. \nWrite a function that returns the\
    \ sum of the squares of the numbers in a given vector of integers. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a given \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwwqdgr7.jl:17\nin expression starting at\
    \ /tmp/tmpxwwqdgr7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the even elements of the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5s20t_6.jl:13\nin expression starting at\
    \ /tmp/tmps5s20t_6.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[(end-lst) : (end-lst+1)]\n    even = sum(even)\n \
    \   odd = sum(odd)\n    return even + odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a given vector of integers.\
    \ If the vector is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilr6uuav.jl:15\nin expression starting at\
    \ /tmp/tmpilr6uuav.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even.-odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even and odd elements. \nWrite a function that takes a vector of integers\
    \ and returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector of integers and returns the sum of the even and\
    \ odd elements. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector of integers and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector of integers and returns the sum of the even and\
    \ odd elements. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector of integers and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector of integers and returns the sum of the even and\
    \ odd elements. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector of integers and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector of integers and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector of integers and returns the sum of the even and\
    \ odd elements. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ even and odd elements. \nWrite a \nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr31n9nv.jl:13\nin expression starting at\
    \ /tmp/tmpsr31n9nv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_al6t24.jl:14\nin expression starting at\
    \ /tmp/tmpy_al6t24.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiy1tv9s9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpiy1tv9s9.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 96 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiy1tv9s9.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy1tv9s9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpiy1tv9s9.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 148 == 122\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy1tv9s9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy1tv9s9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpiy1tv9s9.jl:20\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 23 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy1tv9s9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy1tv9s9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpiy1tv9s9.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 28 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiy1tv9s9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiy1tv9s9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers lst and returns the sum of the even elements that are at\
    \ odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7oqlseg.jl:13\nin expression starting at\
    \ /tmp/tmpe7oqlseg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even numbers. \nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd numbers. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even and\
    \ odd numbers. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even and odd number\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1buxq5af.jl:15\nin expression starting at\
    \ /tmp/tmp1buxq5af.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie7sdg26.jl:15\nin expression starting at\
    \ /tmp/tmpie7sdg26.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the integers in a vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjq9yufg.jl:13\nin expression starting at\
    \ /tmp/tmpgjq9yufg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even elements of a vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmrr3tg98.jl:13\nin expression starting at\
    \ /tmp/tmpmrr3tg98.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + lst[end], evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 3\n</cell>\n<text>\nExercise 3\nWrite a function called mul that multiplies\
    \ all elements in a vector by 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8yxk2mq.jl:15\nin expression starting at\
    \ /tmp/tmpp8yxk2mq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-lst)]\n    odds = lst[(end-lst):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given vector of integers lst. For example,\
    \ add([4, 2, 6, 7]) == 10\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn9saunx.jl:13\nin expression starting at\
    \ /tmp/tmprn9saunx.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85lbrymn.jl:14\nin expression starting at\
    \ /tmp/tmp85lbrymn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ given vector. For example, sum([1, 2, 3, 4]) should return 10. Make sure your\
    \ function works with vectors of different lengths.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rzkpsib.jl:14\nin expression starting at\
    \ /tmp/tmp2rzkpsib.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 4\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called multiply that multiplies each element of a vector\
    \ by a scalar.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprw4dx03h.jl:14\nin expression starting at\
    \ /tmp/tmprw4dx03h.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called sub that subtracts the even elements that are at\
    \ odd indices from the even elements that are at even indices.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3o0v0l7.jl:14\nin expression starting at\
    \ /tmp/tmpy3o0v0l7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2:end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called add_all that takes in a list of vectors and adds all the elements\
    \ in the vectors.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvf89m1kx.jl:13\nin expression starting at\
    \ /tmp/tmpvf89m1kx.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[2:end]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ elements in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94wpecc1.jl:13\nin expression starting at\
    \ /tmp/tmp94wpecc1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add([4, 2, 6, 7]) == 2\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the vector lst.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8v6fena.jl:14\nin expression starting at\
    \ /tmp/tmpl8v6fena.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppbs449ra.jl:12\nin expression starting at /tmp/tmppbs449ra.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the even elements of an array.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgpy64xu.jl:14\nin expression starting at\
    \ /tmp/tmpwgpy64xu.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1):end]\n    evens = filter(x -> x % 2 == 0,\
    \ evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1,\
    \ evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 5\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the squares of the even numbers in a given vector of integers. For example,\
    \ add([4, 2, 6, 7]) == 5 + 9 + 25 + 49 + 81 + 121 = 1026.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplwvvaq4.jl:17\nin expression starting at\
    \ /tmp/tmpplwvvaq4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the product of the elements of a vector. \nWrite a function that\
    \ returns the maximum of a vector. \nWrite a function that returns the minimum\
    \ of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the absolute value of a vector. \nWrite a function\
    \ that returns the sum of the squares of the elements of a vector. \nWrite a function\
    \ that returns the product of the squares of the elements of a vector. \nWrite\
    \ a function that returns the sum of the cubes of the elements of a vector. \n\
    Write a function that returns the product of the cubes of the elements of a vector.\
    \ \nWrite a function that returns the sum of the reciprocals of the elements of\
    \ a vector. \nWrite a function that returns the product of the reciprocals of\
    \ the elements of a vector. \nWrite a function that returns the sum of the absolute\
    \ values of the elements of a vector. \nWrite a function that returns the product\
    \ of the absolute values of the elements of a vector. \nWrite a function that\
    \ returns the sum of the reciprocals of the absolute values of the elements of\
    \ a vector. \nWrite a function that returns the product of the reciprocals of\
    \ the absolute values of the elements of a vector. \nWrite a function that returns\
    \ the sum of the natural logarithms of the elements of a vector. \nWrite a function\
    \ that returns the product of the natural logarithms of the elements of a vector.\
    \ \nWrite a function that returns the sum of the exponential of the elements of\
    \ a vector. \nWrite a function that returns the product of the exponential of\
    \ the elements of a vector. \nWrite a function that returns the sum of the logarithms\
    \ of the elements of a vector. \nWrite a function that returns the product of\
    \ the logarithms of the elements of a vector. \nWrite a function that returns\
    \ the sum of the exponential of the squares of the elements of a vector. \nWrite\
    \ a function that returns the product of the exponential of the squares of the\
    \ elements of a vector. \nWrite a function that returns the sum of the exponential\
    \ of the cubes of the elements of a vector. \nWrite a function that returns the\
    \ product of the exponential of the cubes of the elements of a vector. \nWrite\
    \ a function that returns the sum of the natural logarithms of the squares of\
    \ the elements of a vector. \nWrite a function that returns the product of the\
    \ natural logarithms of the squares of the elements of a vector. \nWrite a function\
    \ that returns the sum of the exponential of the cubes of the squares of the elements\
    \ of a vector. \nWrite a function that returns the product of the exponential\
    \ of the cubes of the squares of the elements of a vector. \nWrite a function\
    \ that returns the sum of the exponential of the reciprocals of the elements of\
    \ a vector. \nWrite a function that returns the product of the exponential of\
    \ the reciprocals of the elements of a vector. \nWrite a function that returns\
    \ the \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsixasd0c.jl:14\nin expression starting at\
    \ /tmp/tmpsixasd0c.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a given vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp20j20t_l.jl:12\nin expression starting at /tmp/tmp20j20t_l.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the product of the elements of a vector.\
    \ \nWrite a function that returns the maximum of a vector. \nWrite a function\
    \ that returns the minimum of a vector. \nWrite a function that returns the number\
    \ of elements of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbiim03nw.jl:14\nin expression starting at\
    \ /tmp/tmpbiim03nw.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :]\
    \ \n    odd = lst[2 :] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcy6bvpgs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcy6bvpgs.jl:1\n\
    in expression starting at /tmp/tmpcy6bvpgs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 6\n</cell>\n\
    <text>\nExercise 3.3\nWrite a function that returns the sum of the numbers in\
    \ the vector lst.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2alkpnj.jl:14\nin expression starting at\
    \ /tmp/tmpo2alkpnj.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :\
    \ (end-lst)]\n    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sumsq that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in the list. For example, sumsq([4, 2, 6, 7])\
    \ == 10\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9e38boj.jl:13\nin expression starting at\
    \ /tmp/tmpv9e38boj.jl:13\n"
  stdout: ''
