name: HumanEval_60_sum_to_n
language: jl
prompt: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
  \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
  \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
  \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
completions: ["    if n==0 \n        then return 0\n    else \n        then return\
    \ n+sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n == 0\n        1\n    else\n\
    \        n * sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1\n        error(\"n must be positive\")\n    else\n \
    \       return n * (n + 1) / 2\nend", "    if n <= 0\n        error(\"n must be\
    \ positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend\nsum_to_n_impl(n::Int64)::Int64\
    \ = \n    if n == 0\n        0\n    else\n        n * sum_to_n_impl(n-1)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that sums numbers from 1 to n where n is given as an argument.", "    if n ==\
    \ 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0 \n       \
    \ then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n       \
    \ return 1 \n    else \n        return n + sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        1 + sum_to_n(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \n(Hint: use the sum_to_n function you defined earlier)",
  "    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by 3.", "    if n == 0 \n        then return 1\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        1 + sum_to_n(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else if\
    \ n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        return n + sum_to_n(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n but\
    \ stops when n reaches zero.", "    if n < 1 \n        error(\"n must be positive\"\
    )\n    else if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n    \
    \    1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \      error(\"n must be positive\")\n    else\n        sum_to_n_impl(n, 0)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    end\n \
    \   return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n numbers of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n==0 \n        then\
    \ return 0\n    else \n        sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 0\n   \
    \     error(\"n must be positive\")\n    else if n == 0\n        1\n    else\n\
    \        sum_to_n(n-1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the numbers from 1 to n except for numbers\
    \ divisible by 3. For example, sum_to_n(30) should return 465.", "    if n ==\
    \ 0\n        0\n    else\n        n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n < 1\n       \
    \ error(\"n must be positive\")\n    else\n        return n * (n + 1) / 2\nend",
  "    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n    \
    \    1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       then return 1 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 0\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a number.",
  "    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the first n numbers of\
    \ the Fibonacci sequence. \nHint: Use a recursive function.", "    if n == 1 \n\
    \        1 \n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 0\n        error(\"n must be positive\")\n    elseif\
    \ n == 0\n        error(\"n must be positive\")\n    else\n        sum_to_n(n\
    \ - 1) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times each element appears in a given array.", " \
    \   if n==0\n        1\n    else\n        n+sum_to_n(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n        1\n\
    \    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 1 \n \
    \       1 \n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0\n  \
    \      0\n    else\n        n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        n * sum_to_n(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1\n        error(\"n must be positive\")\n    elseif\
    \ n < 2\n        1\n    else\n        n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number.", "    if n <=\
    \ 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n but stops when the sum exceeds n.", "    if n == 0 \n        then return\
    \ 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n==1 \n   \
    \     1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nThe function should\
    \ take an input n and output a vector of prime numbers.", "    if n==0 \n    \
    \    then return 0\n    else \n        sum_to_n(n-1)\n        +n\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use the function primes(n) from the package Primes.jl.", "    if n==0\
    \ \n        then return 1\n        else return n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 1\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n == 1 \n        then return\
    \ 1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n Fibonacci numbers. \nThe Fibonacci numbers\
    \ are defined by the recurrence relation:", "    if n==0 \n        then return\
    \ 1\n        else return n*sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        sum_to_n(n - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n<0\n     \
    \   error(\"n must be positive\")\n    else\n        return n*(n+1)/2\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers from 1 to n.", "    if n == 1 \n        then return 1\n        else\
    \ return n*sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 1 \n        1 \n    else\
    \ \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the first n positive integers. \nFor\
    \ example, sum_to_n(3) should return 6.", "    if n == 0 \n        then return\
    \ 1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be >= 1\")\n    elseif\
    \ n < 10 \n        return n\n    elseif n < 100 \n        return sum_to_n(n /\
    \ 10) + n % 10\n    elseif n < 1000 \n        return sum_to_n(n / 100) + n % 100\n\
    \    elseif n < 10000 \n        return sum_to_n(n / 1000) + n % 1000\n    elseif\
    \ n < 100000 \n        return sum_to_n(n / 10000) + n % 10000\n    elseif n <\
    \ 1000000 \n        return sum_to_n(n / 100000) + n % 100000\n    elseif n < 10000000\
    \ \n        return sum_to_n(n / 1000000) + n % 1000000\n    elseif n < 100000000\
    \ \n        return sum_to_n(n / 10000000) + n % 10000000\n    elseif n < 1000000000\
    \ \n        return sum_to_n(n / 100000000) + n % 100000000\n    elseif n < 10000000000\
    \ \n        return sum_to_n(n / 1000000000) + n % 1000000000\n    elseif n < 100000000000\
    \ \n        return sum_to_n(n / 10000000000) + n % 10000000000\n    elseif n <\
    \ 1000000000000 \n        return sum_to_n(n / 100000000000) + n % 100000000000\n\
    \    elseif n < 10000000000000 \n        return sum_to_n(n / 1000000000000) +\
    \ n % 1000000000000\n    elseif n < 100000000000000 \n        return sum_to_n(n\
    \ / 10000000000000) + n % 10000000000000\n    elseif n < 1000000000000000 \n \
    \       return sum_to_n(n / 100000000000000) + n % 100000000000000\n    elseif\
    \ n < 10000000000000000 \n        return sum_to_n(n / 1000000000000000) + n %\
    \ 1000000000000000\n    elseif n < 100000000000000000 \n        return sum_to_n(n\
    \ / 10000000000000000) + n % 10000000000000000\n    elseif n < 1000000000000000000\
    \ \n        return sum_to_n(n / 100000000000000000) + n % 100000000000000000\n\
    \    elseif n < 10000000000000000000 \n        return sum_to_n(n / 1000000000000000000)\
    \ + n % 1000000000000000000\n    elseif n < 100000000000000000000 \n        return\
    \ sum_to_n(n / 10000000000000000000) + n % 10000000000000000000\n    elseif n\
    \ < 1000000000000000000000 \n        return sum_to_n(n / 100000000000000000000)\
    \ + n % 100000000000000000000\n    elseif n < 10000000000000000000000 \n     \
    \   return sum_to_n(n / 1000000000000000000000) + n % 1000000000000000000000\n\
    \    elseif n < 100000000000000000000000 \n        return sum_to_n(n / 10000000000000000000000)\
    \ + n % 10000000000000000000000\n    elseif n < 1000000000000000000000000 \n \
    \       return sum_to_n(n / 100000000000000000000000) + n % 100000000000000000000000\n\
    \    elseif n < 10000000000000000000000000 \n        return sum_to_n(n / 1000000000000000000000000)\
    \ + n % 1000000000000000000000000\n    elseif n < ", "    if n == 0 \n       \
    \ then return 0 \n    else \n        sum_to_n(n - 1) + n \nend \n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n    then 0\n    else n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the first n positive integers, starting from\
    \ 1.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else if\
    \ n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120", "    if n == 0\
    \ \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==0 \n        then return 0\n    else \n        sum_to_n(n-1)+n\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n\
    \        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the first n positive integers. \nFor example, sum_to_n(10) should return\
    \ 55.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the numbers from 1 to n that are divisible by 3.", "    if n == 1 \n    \
    \    1 \n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n==0\n    \
    \    0\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a given number. \nHint: Use a recursive\
    \ function.", "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0\n        0\n    else\n        (n*(n+1))/2\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_impl(n)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that sums numbers from 1 to n but stops when the sum exceeds\
    \ n.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n     \
    \   return n\n    end\nend", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n==0 \n        then return\
    \ 0\n    else if n==1 \n        then return 1\n    else \n        sum_to_n(n-1)+sum_to_n(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a given number. \nFor example,\
    \ factorial(5) = 5 x 4 x 3 x 2 x 1 = 120", "    if n <= 0\n        error(\"n must\
    \ be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n but stops when the sum is greater than n.", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else\n        return n\n    end\nend", "    if n ==\
    \ 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an if statement to check if n is prime.", "    if n == 0 \n    \
    \    then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the first n positive integers.\
    \ \nHint: Use a recursive function.", "    if n <= 0\n        error(\"n must be\
    \ positive\")\n    else\n        return n*(n+1)/2\nend", "    if n < 1\n     \
    \   error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\n\
    end", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n -\
    \ 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n but stops when the sum is greater than n.", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.",
  "    if n == 0 \n        then return 1\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0\n        0\n    else\n        1 + sum_to_n(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: use\
    \ the function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to get the prime numbers. \nHint:\
    \ use the function primes(n) to get the prime numbers. \nHint: use the function\
    \ primes(n) to get the prime numbers. \nHint: use the function primes(n) to get\
    \ the prime numbers. \nHint: use the function primes(n) to get the prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to get the prime numbers. \nHint:\
    \ use the function primes(n) to get the prime numbers. \nHint: use the function\
    \ primes(n) to get the prime numbers. \nHint: use the function primes(n) to get\
    \ the prime numbers. \nHint: use the function primes(n) to get the prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to get the prime numbers. \nHint:\
    \ use the function primes(n) to get the prime numbers. \nHint: use the function\
    \ primes(n) to get the prime numbers. \nHint: use the function primes(n) to get\
    \ the prime numbers. \nHint: use the function primes(n) to get the prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to ", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else\n        return n * (n + 1) / 2\nend", "    if\
    \ n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n</code>\n\
    <|/ a tags=recursion,haskell |>\n<| c |>\n`sum_to_n` doesn't have a base case.\
    \ `sum_to_n 0 = 0` but `sum_to_n 1 = 1`.\n<|/ c |>\n<| c |>\nYes, I know. I just\
    \ wanted to show how to implement the recursive function without having to write\
    \ it out by hand.\n<|/ c |>\n<| c |>\nI see your point, but I believe that `sum_to_n\
    \ 0 = 0` and `sum_to_n 1 = 1` are the only two cases that can happen.\n<|/ c |>\n\
    <| c |>\nYes, but `sum_to_n n = n + 1` can happen.\n<|/ c |>\n<| c |>\nYes, but\
    \ `sum_to_n n = n + 1` can happen.\n<|/ c |>\n<| a tags=recursion,haskell |>\n\
    <code>\nsum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n\
    \ 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n</code>\n<|/ a tags=recursion,haskell\
    \ dscore=2 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int -> Int\n\
    sum_to_n 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n =\
    \ n + sum_to_n (n-1)\n</code>\n<|/ a tags=recursion,haskell |>\n<| a tags=recursion,haskell\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n = n + sum_to_n\
    \ (n-1)\n</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,haskell |>\n<code>\n\
    sum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int ->\
    \ Int", "    if n < 1 \n        error(\"n must be greater than 0\", 2)\n    elseif\
    \ n < 2 \n        1\n    elseif n == 1 \n        1\n    elseif n == 2 \n     \
    \   2\n    elseif n == 3 \n        3\n    elseif n == 4 \n        4\n    elseif\
    \ n == 5 \n        5\n    elseif n == 6 \n        6\n    elseif n == 7 \n    \
    \    7\n    elseif n == 8 \n        8\n    elseif n == 9 \n        9\n    elseif\
    \ n == 10 \n        10\n    elseif n == 11 \n        11\n    elseif n == 12 \n\
    \        12\n    elseif n == 13 \n        13\n    elseif n == 14 \n        14\n\
    \    elseif n == 15 \n        15\n    elseif n == 16 \n        16\n    elseif\
    \ n == 17 \n        17\n    elseif n == 18 \n        18\n    elseif n == 19 \n\
    \        19\n    elseif n == 20 \n        20\n    elseif n == 21 \n        21\n\
    \    elseif n == 22 \n        22\n    elseif n == 23 \n        23\n    elseif\
    \ n == 24 \n        24\n    elseif n == 25 \n        25\n    elseif n == 26 \n\
    \        26\n    elseif n == 27 \n        27\n    elseif n == 28 \n        28\n\
    \    elseif n == 29 \n        29\n    elseif n == 30 \n        30\n    elseif\
    \ n == 31 \n        31\n    elseif n == 32 \n        32\n    elseif n == 33 \n\
    \        33\n    elseif n == 34 \n        34\n    elseif n == 35 \n        35\n\
    \    elseif n == 36 \n        36\n    elseif n == 37 \n        37\n    elseif\
    \ n == 38 \n        38\n    elseif n == 39 \n        39\n    elseif n == 40 \n\
    \        40\n    elseif n == 41 \n        41\n    elseif n == 42 \n        42\n\
    \    elseif n == 43 \n        43\n    elseif n == 44 \n        44\n    elseif\
    \ n == 45 \n        45\n    elseif n == 46 \n        46\n    elseif n == 47 \n\
    \        47\n    elseif n == 48 \n        48\n    elseif n == 49 \n        49\n\
    \    elseif n == 50 \n        50\n    elseif n == 51 \n        51\n    elseif\
    \ n == 52 \n        52\n    elseif n == 53 \n        53\n    elseif n == 54 \n\
    \        54\n    elseif n == 55 \n        55\n    elseif n == 56 \n        56\n\
    \    elseif n == 57 \n        57\n    elseif n == 58 \n        58\n    elseif\
    \ n == 59", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n < 1\n        error(\"n must be >= 1\")\n    else\n        return n * (n +\
    \ 1) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n except for numbers divisible\
    \ by 3.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number.", "    if n <= 0\n        error(\"n must be positive\")\n\
    \    else\n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n < 1\n\
    \        error(\"n must be positive\")\n    elseif n < 2\n        1\n    else\n\
    \        n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the first n positive integers. Use a while loop to do\
    \ this.", "    if n < 0\n        error(\"n must be positive\")\n    end\n    if\
    \ n == 0\n        0\n    else\n        sum_to_n(n - 1) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n inclusive.", "    if n == 0 \n        then return 0 \n        else\
    \ return n + sum_to_n(n - 1)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to know how to implement a recursive function\
    \ without using an explicit loop. He doesn't want to know how to implement a recursive\
    \ function using an explicit loop.\n<|/ c |>\n<| c |>\nThe question was how to\
    \ implement a recursive function without using an explicit loop. He didn't want\
    \ to know how to implement a recursive function using an explicit loop. He wanted\
    \ to know how to implement a recursive function without using an explicit loop.\
    \ He didn't want to know how to implement a recursive function using an explicit\
    \ loop. He didn't want to know how to implement a recursive function using an\
    \ explicit loop. He didn't want to know how to implement a recursive function\
    \ using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. ", "    if n == 0\n        0\n    else\n  \
    \      1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: Use a for loop to iterate over\
    \ all numbers from 2 to n.", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    end\n    sum = 0\n    for i in 1:n\n        sum += i\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the square of a number.",
  "    if n <= 0\n        error(\"n must be positive\")\n    end\n    return n * (n\
    \ + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 1 \n        1 \n    else \n        n * sum_to_n(n-1)\
    \ \nend \n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n but stops when the sum is greater than n.", "    if n == 0 \n       \
    \ then return 0\n    else \n        then return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0\n        0\n\
    \    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else if n == 1 \n        then return 1\n    else \n   \
    \     return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_impl(n)\n    end\nend", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return n +\
    \ sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use an if statement to check\
    \ if n is prime.", "    if n < 1\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the numbers\
    \ from 1 to n squared.", "    if n == 0\n        0\n    else\n        1 + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n where\
    \ n is given as an argument.", "    if n==0 \n        then return 0\n    else\
    \ \n        sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nThe function should\
    \ take one argument, n, which should be an integer.\nThe function should return\
    \ an array of integers, where each element of the array is the nth prime number.\n\
    For example, if the function were called with n=3, the function should return\
    \ [2,3,5].", "    if n < 1\n        error(\"n must be positive\")\n    else\n\
    \        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        return n * (n + 1) / 2\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that computes the factorial of a number.", "    if n < 1\n        error(\"\
    n must be positive\")\n    end\n    sum = 0\n    for i in 1:n\n        sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that computes the factorial of a number.", "    if n < 1 \n        error(\"\
    n must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0\n        0\n    else\n\
    \        n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number.", "    if n==1 \n        1\n \
    \   else\n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use sum_to_n", "    if n <=\
    \ 0\n        error(\"n must be positive\")\n    else\n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the first\
    \ n positive integers. \nFor example, sum_to_n(3) should return 1 + 2 + 3 = 6.",
  "    if n<0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,0)\n\
    \    end\nend", "    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        sum_to_n(n - 1) + sum_to_n(n - 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the factorial of a number.",
  "    if n < 1\n        error(\"n must be positive\")\n    end\n    if n == 1\n \
    \       return 1\n    else\n        return n + sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. Use a while loop to do this.", "    if n < 0\n        error(\"\
    n must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend", "  \
    \  if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n   \
    \     1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by 3.", "    if n == 0 \n        then return 1\n    else \n  \
    \      return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) == 120.", "    if n == 1 \n        then\
    \ return 1 \n        else return n*sum_to_n(n-1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n==0 \n        then return 1\n    else \n        sum_to_n(n-1)+n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number.", "    if n ==\
    \ 1 \n        then return 1\n    else \n        sum_to_n(n - 1) + n\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) == 120.", "    if n==1 \n        1\n\
    \    else\n        n*(n+1)/2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: Use a for loop to iterate through\
    \ all numbers from 2 to n.", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the factorial of a number.", "    if n == 0\n      \
    \  0\n    else\n        n * sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the first n positive integers. \nFor example,\
    \ sum_to_n(10) should return 55.", "    if n == 0 \n        then return 0\n  \
    \  else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by k.", "    if n <= 0\n        error(\"n must be positive\")\n    end\n   \
    \ sum = 0\n    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by k.", "    if n <= 0\n        error(\"n must\
    \ be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n < 1\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        0\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n == 0\n        0\n\
    \    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 0\n   \
    \     error(\"n must be positive\")\n    else\n        return n\n    end\nend",
  "    if n < 1\n        error(\"n must be positive\")\n    elseif n == 0\n      \
    \  0\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the first n positive integers. \nThis function should work for any value\
    \ of n.", "    if n < 1\n        error(\"n must be positive\")\n    else\n   \
    \     return n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the numbers from 1 to n squared.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend", "    if n\
    \ < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n        1\n\
    \    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the first n numbers of a Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence relation:", "    if n\
    \ == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n==1 \n        1 \n    else \n        sum_to_n(n-1)+n \nend \n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        then return\
    \ n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        return n + sum_to_n(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n \
    \   end\nend", "    if n == 0 \n        then return 1\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    end\n    sum = 0\n    for i in 1:n\n        sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. \nFor example, sum_to_n(3)\
    \ should return 3 + 3 + 3 = 9.", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else\n        sum_to_n_aux(n, 1)\n    end\nend", "    if n <= 0\n     \
    \   error(\"n must be positive\")\n    else\n        return n*(n+1)/2\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 1\n        else return n*sum_to_n(n-1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n squared.", "    if n < 1 \n\
    \        error(\"n must be positive\")\n    else if n == 1 \n        1\n    else\
    \ \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the first n positive integers. \nFor example, sum_to_n(10)\
    \ should return 55.", "    if n < 1 \n        error(\"n must be positive\")\n\
    \    elseif n == 1 \n        1\n    elseif n == 2 \n        2\n    elseif n ==\
    \ 3 \n        3\n    elseif n == 4 \n        4\n    elseif n == 5 \n        5\n\
    \    elseif n == 6 \n        6\n    elseif n == 7 \n        7\n    elseif n ==\
    \ 8 \n        8\n    elseif n == 9 \n        9\n    elseif n == 10 \n        10\n\
    \    elseif n == 11 \n        11\n    elseif n == 12 \n        12\n    elseif\
    \ n == 13 \n        13\n    elseif n == 14 \n        14\n    elseif n == 15 \n\
    \        15\n    elseif n == 16 \n        16\n    elseif n == 17 \n        17\n\
    \    elseif n == 18 \n        18\n    elseif n == 19 \n        19\n    elseif\
    \ n == 20 \n        20\n    elseif n == 21 \n        21\n    elseif n == 22 \n\
    \        22\n    elseif n == 23 \n        23\n    elseif n == 24 \n        24\n\
    \    elseif n == 25 \n        25\n    elseif n == 26 \n        26\n    elseif\
    \ n == 27 \n        27\n    elseif n == 28 \n        28\n    elseif n == 29 \n\
    \        29\n    elseif n == 30 \n        30\n    elseif n == 31 \n        31\n\
    \    elseif n == 32 \n        32\n    elseif n == 33 \n        33\n    elseif\
    \ n == 34 \n        34\n    elseif n == 35 \n        35\n    elseif n == 36 \n\
    \        36\n    elseif n == 37 \n        37\n    elseif n == 38 \n        38\n\
    \    elseif n == 39 \n        39\n    elseif n == 40 \n        40\n    elseif\
    \ n == 41 \n        41\n    elseif n == 42 \n        42\n    elseif n == 43 \n\
    \        43\n    elseif n == 44 \n        44\n    elseif n == 45 \n        45\n\
    \    elseif n == 46 \n        46\n    elseif n == 47 \n        47\n    elseif\
    \ n == 48 \n        48\n    elseif n == 49 \n        49\n    elseif n == 50 \n\
    \        50\n    elseif n == 51 \n        51\n    elseif n == 52 \n        52\n\
    \    elseif n == 53 \n        53\n    elseif n == 54 \n        54\n    elseif\
    \ n == 55 \n        55\n    elseif n == 56 \n        56\n    elseif n == 57 \n\
    \        57\n    elseif n == 58 \n        58\n    elseif n == 59 \n        59\n\
    \    elseif n == 60 ", "    if n <= 0\n        error(\"n must be positive\")\n\
    \    else\n        sum_to_n_aux(n,0)\n    end\nend", "    if n == 0 \n       \
    \ then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the numbers from 1 to n except for numbers\
    \ divisible by 3.", "    if n < 1 \n        error(\"n must be positive\")\n  \
    \  else if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by k.", "    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n where\
    \ n is given as a parameter. For example, sum_to_n(30) should return 465.", " \
    \   if n < 1\n        error(\"n must be positive\")\n    else if n == 0\n    \
    \    1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the numbers from 1 to n that are divisible by 3.", "    if n < 1\n      \
    \  error(\"n must be positive\")\n    elseif n == 0\n        1\n    else\n   \
    \     sum_to_n(n - 1) + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times each element appears in a given\
    \ array.", "    if n <= 0\n    then return 0\n    else if n == 1\n    then return\
    \ 1\n    else return n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n     \
    \   1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.",
  "    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n   \
    \     1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.", "    if n <= 0\n        error(\"n must\
    \ be positive\")\n    else\n        return n*(n+1)/2\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the first n numbers of the Fibonacci sequence. Hint:\
    \ Use a recursive function.", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0 \n        else return n + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1 \n  \
    \      error(\"n must be positive\")\n    else if n == 1 \n        1\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n < 1\
    \ \n        error(\"n must be positive\")\n    else if n == 1 \n        1\n  \
    \  else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers.", "    if n==0 \n   \
    \     then return 0\n    else \n        sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the first n prime numbers.\
    \ Use a while loop to do this.", "    if n == 1 \n        then return 1\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use sum_to_n", "    if n ==\
    \ 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0\n  \
    \      0\n    else\n        (n * (n + 1)) / 2\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the first n prime numbers. \nHint: use the sieve\
    \ of Eratosthenes algorithm", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise\nWrite a function that sums numbers from\
    \ 1 to n where n is given as an argument.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n < 0\n        error(\"n must be positive\")\n    else if n == 0\n        0\n\
    \    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1\n   \
    \     error(\"n must be positive\")\n    else\n        return n * (n + 1) / 2\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n ::\
    \ Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int ->\
    \ Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,haskell\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int ->\
    \ Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n\
    <|/ a tags=recursion,haskell |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a tags=recursion,haskell\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n\
    \ n = sum (take n [1..])\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_to_n ", "    if n == 0 \n        then\
    \ return 0\n    else \n        return n + sum_to_n(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0\n        0\n    else\n        (n * (n + 1)) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the factorial of a number.", "    if n\
    \ <= 0\n    then return 0\n    else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return n +\
    \ sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n==0 \n        then return\
    \ 0 \n        else return n*sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \      error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n   \
    \ end\nend\nsum_to_n_impl(n::Int64)::Int64 = \n    if n == 0\n        0\n    else\n\
    \        1 + sum_to_n_impl(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. \nHint: Use\
    \ a recursive function.", "    if n == 0 \n        then return 0\n    else \n\
    \        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n==1 \n        1 \n    else\
    \ \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n    then return 0\n\
    \    else return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
