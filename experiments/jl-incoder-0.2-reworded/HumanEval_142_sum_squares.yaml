name: HumanEval_142_sum_squares
language: jl
prompt: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
  \ in the vector, the function shall square the integer entry if its index is a \n\
  \    multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    change the entries in the\
  \ vector whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
  \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
  \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
  \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t\
  @test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
  \ == -1448)\nend\n"
completions: ["    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x\n        elseif x % 4 == 0\n            sum += x * x\n        else\n  \
    \          sum += x * x * x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and a\
    \ vector of integers as input. The function shall then return the product of the\
    \ entries in the vector \n    whose indexes are a multiple of 3 and a multiple\
    \ of 4. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for x in lst\n        if x\
    \ % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of all entries that are a multiple of 3. The\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3. \nThe function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> sum_squares(lst)\n\
    15", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n   \
    \         sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will\
    \ take a vector of integers and return a new vector that contains the squared\
    \ entries of the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5,\
    \ 0]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x\
    \ % 4 == 0\n            sum += x\n        else\n            sum *= x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [2, 4, 6]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n   \
    \     elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that will take a vector of integers and return a new vector where\
    \ all entries are multiplied by 2 except for those entries that are a multiple\
    \ of 3. The function shall not change the entries in the original vector. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    \"\"\"", "    sum = 0\n    for i in lst\n   \
    \     if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n         \
    \   sum += i*i*i\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and a number as input. The function shall then return the\
    \ sum of the integers in the vector whose indexes are a multiple of 3 or 4 and\
    \ less than or equal to the number input. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ num\n    10\n    >>> num\n    10\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and a\
    \ number as input. The function will then return the number of entries in the\
    \ vector that are multiples of that number. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n \
    \   >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \    >>> ", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and will return the number of entries in the vector that\
    \ are a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum\
    \ + i*i*i\n        else\n            sum = sum + i\n        end\n    end\n   \
    \ return sum\nend", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x\
    \ % 4 == 0\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ where all entries are squared except for the entries whose indexes are a multiple\
    \ of 3 or 4. The function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. \nThe function\
    \ shall not change the original vector. \nThe function shall not change the original\
    \ vector. \nThe function shall not change the original vector. ", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are squared except\
    \ for entries whose indexes are a multiple of 3. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum *= x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where each entry is the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n           \
    \ sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector where all entries are multiplied by 2 except for the entries whose\
    \ indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [2, 4, 6, 8, 10]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are divided by\
    \ 2 except for the entries whose indexes are a multiple of 3 and 4. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n       \
    \ elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that will take a vector of integers and a number as input. The\
    \ function shall then return the sum of the entries in the vector whose indexes\
    \ are a multiple of 3 or 4 and are less than the number input. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> num\n    3\n    >>> num\n    -1\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and will return the\
    \ sum of the squares of the entries in the vector. The function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of ", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the entries in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the entries of the vector that are multiples of 3\
    \ or 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector that contains\
    \ the squared entries of the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n      \
    \      sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer vector as input and returns\
    \ a vector of the same size with each entry being the sum of the squares of the\
    \ entries in the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i^2\n        elseif i%4 == 0\n            sum += i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a vector of integers and returns the sum of the integers\
    \ squared. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n  \
    \  []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        else\n            sum += x*x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers containing the squared values of\
    \ all entries in the vector.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and will return the\
    \ sum of the squares of all entries in the vector. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and will return\
    \ the sum of the squares of the entries in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\
    \ || x % 4 == 0\n            sum += x\n        else\n            sum *= x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are divided by\
    \ 2 except for those entries that are a multiple of 3. The function shall not\
    \ change the entries in the original vector. The function shall then return the\
    \ new vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    [1, 2, 3, 4]\n    \"\"\"", "    sum = 0\n   \
    \ for x in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif\
    \ x % 4 == 0\n            sum += x^3\n        else\n            sum += x\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the entries in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. The function shall not change the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of all entries in the vector that are a multiple of 3. The function shall not\
    \ change the entries in the vector whose indexes are not a multiple of 3. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a vector of integers and will return the number of entries that are a multiple\
    \ of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n         \
    \   sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of all\
    \ entries in the vector whose index is greater than or equal to 10. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\
    \"", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 7: Write a function that will take\
    \ a vector of integers and return a new vector where all entries are squared except\
    \ for the entries whose indexes are a multiple of 3 or 4. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and will return the\
    \ sum of the squares of the entries in the vector. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a vector of integers and return a new vector with\
    \ all the entries that are even and are less than or equal to 100. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    >>> new_lst\n    [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46,\
    \ 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,\
    \ 86, 88, 90, 92, 94, 96, 98, 100]\n    \"\"\"", "    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2,\
    \ 4, 6]\n    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n  \
    \          sum += i*i\n        else\n            sum += i*i*i\n        end\n \
    \   end\n    return sum\nend", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0 || x % 4 == 0\n            sum += x\n        else\n            sum *=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are divided by\
    \ 2 except for those entries that are a multiple of 3. The function shall not\
    \ change the entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\
    \"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a vector of integers and returns the sum of the squares of the entries in the\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are multiplied by 2 except for the\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the original vector. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the new vector. \n\
    The function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall ", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a vector of integers and will return the index of the first non-zero entry\
    \ in the vector. \nThe function shall not change the entries in the vector whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the index\
    \ of the first non-zero entry in the vector. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ index of the first non-zero entry in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the index of the first non-zero entry in the vector. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the index of the first non-zero\
    \ entry in the vector. \nThe function ", "    sum = 0\n    for i in lst\n    \
    \    if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n          \
    \  sum += i^3\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum +=\
    \ x\n        elseif x % 4 == 0\n            sum += x*x\n        else\n       \
    \     sum += x*x*x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and a number\
    \ as input. The function will then return the number of entries in the vector\
    \ that are a multiple of \nthe number input. The function shall not change the\
    \ entries in the vector whose indexes are not a multiple of number input. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the vector whose indexes are a multiple of number input.\
    \ The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of number\
    \ input. The function shall then return the sum of all entries. \n", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n       \
    \ elseif i%4 == 0\n            sum += i^3\n        else\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of all entries in the vector that are not a\
    \ multiple of 3. The function shall not change the entries in the vector whose\
    \ indexes are not a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector where each entry is the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n   \
    \     elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector with all the entries that are a\
    \ multiple of 3. The function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the original\
    \ vector. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the original\
    \ vector. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the original\
    \ vector. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe ", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n  \
    \          sum += i*i\n        else\n            sum += i*i*i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes in a vector of integers and returns the sum of the squares of the entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n    sum = 0\n\
    \    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n       \
    \ else\n            sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes an array of integers and returns the sum of all even numbers\
    \ in the array. \nThe function shall not change the entries in the array whose\
    \ indexes are not a multiple of 2. \nThe function shall then return the sum of\
    \ all even numbers in the array. \nThe function shall not change the entries in\
    \ the array whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all even numbers in the array. \nThe function shall not change the\
    \ entries in the array whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the array. \nThe function shall not\
    \ change the entries in the array whose indexes are not a multiple of 2. \nThe\
    \ function shall then return the sum of all even numbers in the array. \nThe function\
    \ shall not change the entries in the array whose indexes are not a multiple of\
    \ 2. \nThe function shall then return the sum of all even numbers in the array.\
    \ \nThe function shall not change the entries in the array whose indexes are not\
    \ a multiple of 2. \nThe function shall then return the sum of all even numbers\
    \ in the array. \nThe function shall not change the entries in the array whose\
    \ indexes are not a multiple of 2. \nThe function shall then return the sum of\
    \ all even numbers in the array. \nThe function shall not change the entries in\
    \ the array whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all even numbers in the array. \nThe function shall not change the\
    \ entries in the array whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the array. \nThe function shall not\
    \ change the entries in the array whose indexes are not a multiple of 2. \nThe\
    \ function shall then return the sum of all even numbers in the array. \nThe function\
    \ shall not change the entries in the array whose indexes are not a multiple of\
    \ 2. \nThe function shall then return the sum of all even numbers in the array.\
    \ \nThe function shall not change the entries in the array whose indexes are not\
    \ a multiple of 2. \nThe function shall then return the sum of all even numbers\
    \ in the array. \nThe function shall not change the entries in the array whose\
    \ indexes are not a multiple of 2. \nThe function shall then return the sum of\
    \ all even numbers in the array. \nThe function shall not change the entries in\
    \ the array whose indexes are not a multiple of 2. \nThe function shall then return\
    \ the sum of all even numbers in the array. \nThe function shall not change the\
    \ entries in the array whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the array. \nThe function shall not\
    \ change the entries in the ", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and will return the\
    \ sum of the integers squared. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ where all entries are multiplied by 2 except for the entries that are multiples\
    \ of 3 or 4. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer vector and returns a new vector\
    \ with only the even entries in the original vector. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n\
    \    [2, 4, 6]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n          \
    \  sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will take a vector of integers and will return\
    \ the sum of all entries in the vector that are a multiple of 3. The function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3. The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n   \
    \     else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and will return the\
    \ number of entries in the vector that are a multiple of 3 and a multiple of 4.",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a vector\
    \ of integers and will return the sum of the squares of all entries in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a vector of integers and will\
    \ return the number of entries in the vector that are a multiple of 3 and a multiple\
    \ of 4. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the number of entries that are a multiple of 3 and a multiple\
    \ of 4. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose ",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n  \
    \      elseif i%4 == 0\n            sum += i^3\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        end\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a vector of integers and a number as input. The function will\
    \ return the sum of the integers in the vector whose indexes are a multiple of\
    \ 3 or 4 and less than or equal to the number input. \nThe function shall not\
    \ change the entries in the vector whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3 or\
    \ 4. The function ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n   \
    \         sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n\
    \        else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes in a list of integers and returns the sum of\
    \ the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will take a vector of integers and return a\
    \ new vector that contains the squared entries of the original vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -4, -3]\n    \"\"\"", "    sum = 0\n \
    \   for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif\
    \ i%4 == 0\n            sum += i^3\n        else\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even numbers. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a vector of integers and returns the sum of the squares of the entries in the\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif\
    \ i%4 == 0\n            sum += i^3\n        else\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the number of entries in the vector that are negative.", " \
    \   sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n\
    \        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n      \
    \      sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the sum\
    \ of the squares of the integers in the array. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n\
    \        elseif i%4 == 0\n            sum += i^3\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and will return the sum of all entries in the vector that\
    \ are a multiple of 3 or 4. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are divided by 2 except for the entries\
    \ whose indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are squared except for the entries that are a multiple of 3 or 4. The\
    \ function shall not change the entries in the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n   \
    \         sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n    \
    \    else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and will\
    \ return the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that will take a vector of integers and return a new vector\
    \ that contains the squares of the entries in the original vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n   \
    \ >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, ", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the entries in the vector whose indexes are a multiple of 3 or 4.\
    \ The function shall not change the entries in the vector whose indexes are not\
    \ a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the entries in the vector. \n    \n    Examples:\n    >>> lst\n \
    \   [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n     \
    \       sum += i\n        else\n            sum *= i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and return\
    \ a new vector with only the even numbers. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    >>>\
    \ lst\n    [2, 4, 6, 8, 10]\n    \"\"\"", "    sum = 0\n    for x in lst\n   \
    \     if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a vector of integers and will\
    \ return the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n       \
    \ else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and return a new vector with\
    \ only the even numbers. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [2,\
    \ 4, 6]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector with only\
    \ the even entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    >>>\
    \ lst\n    [2, 4, 6, 8, 10]\n    \"\"\"", "    sum = 0\n    for x in lst\n   \
    \     if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n      \
    \      sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where each entry is the sum of\
    \ the squares of the entries in the original vector. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    \"\"\"", "    \n\
    \    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n        \
    \    sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum\
    \ + i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a vector\
    \ of integers and will return the sum of the integers squared. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ that contains the squares of the entries in the original vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -1, -5]\n    \"\"\"", "    \n    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n    \
    \    elseif i%4 == 0\n            sum = sum + i^3\n        else\n            sum\
    \ = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the sum of all\
    \ even entries in the array. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n   \
    \     elseif i%4 == 0\n            sum += i^3\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are divided by\
    \ 2 except for the entries whose indexes are a multiple of 3. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n           \
    \ sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 7: Write a function that takes in a list of integers and returns the\
    \ sum of the squares of the integers in the list. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector that contains the squared entries of the original vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -1, -5]\n    \"\"\"", "    sum = 0\n \
    \   for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif\
    \ i%4 == 0\n            sum += i^3\n        else\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where each entry is the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -", "    \n    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2,\
    \ 4, 6]\n    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector where each entry is the\
    \ sum of the entries in the original vector except for the entry at index i. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, -4, -3]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n   \
    \ [-1, -5, 2, -1, -5, -4, -3]\n", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and will return the\
    \ sum of the squares of the entries in the vector. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of all even entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that will take a vector of integers and a number as input. The function will\
    \ then return the number of entries in the vector that are less than the number\
    \ input. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> num\n    -1\n    >>> num\n    3\n\
    \    >>> num\n    -1\n    >>> num\n    3\n    \"\"\"", "    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector that contains the squared\
    \ entries of the original vector. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n", "    sum =\
    \ 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n   \
    \     else\n            sum += i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ with only the even entries in the original vector. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n\
    \    [2, 4, 6, 8, 10]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i\n        elseif i%4 == 0\n            sum +=\
    \ i*i\n        else\n            sum += i*i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns a list of all even numbers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"", "    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n  \
    \          sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 7: Write a\
    \ function that will take a vector of integers and return a new vector that contains\
    \ the squared entries of the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, ", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries in the vector that are a multiple of 3. The\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3. \nThe function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> sum_squares(lst)\n\
    25\n</text>\n<cell>", "    sum = 0\n    for x in lst\n        if x % 3 == 0 ||\
    \ x % 4 == 0\n            sum += x\n        else\n            sum *= x\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even entries in the original vector. The\
    \ function shall not change the original vector. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    \"\"\"", "    sum = 0\n    for index in lst\n\
    \        if index % 3 == 0 || index % 4 == 0\n            sum += index\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a vector of integers and return a new vector that contains the\
    \ squared entries of the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5,\
    \ 2, -1, -5, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will take a vector of integers and a number\
    \ k and will return the sum of the integers in the vector whose index is less\
    \ than or equal to k. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> k = 2\n    >>> sum_squares(lst,k)\n\
    \    9\n    \"\"\"", "    \n    sum = 0\n    for x in lst\n        if x % 3 ==\
    \ 0 && x % 4 == 0\n            sum += x\n        else\n            sum -= x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 7: Write a function that will take\
    \ a vector of integers and return a new vector where all entries are multiplied\
    \ by 2 except for the entries whose indexes are a multiple of 3. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1,\
    \ 2, 3]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n  \
    \          sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n   \
    \     else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the entries in the vector. \n    \n    Examples:\n    >>> lst\n \
    \   [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and will return\
    \ the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector with all the entries that are a\
    \ multiple of 3. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1,\
    \ 2, 3]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n  \
    \          sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that will take a vector of integers and return a new vector where\
    \ all entries are squared except for the entries whose indexes are a multiple\
    \ of 3 or 4. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum = sum + i\n        elseif i%4 == 0\n            sum = sum + i*i\n     \
    \   else\n            sum = sum + i*i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list of integers\
    \ and returns the sum of the squares of the integers in the list. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if\
    \ x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n            sum\
    \ += x * x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ where all entries are multiplied by 2 if their index is \na multiple of 3 and\
    \ all entries are multiplied by 3 if their index is a multiple of 4. The function\
    \ shall not change the entries in the \noriginal vector. The function shall then\
    \ return the sum of all entries.", "    sum = 0\n    for x in lst\n        if\
    \ x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n            sum\
    \ += x^3\n        else\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the sum\
    \ of the squares of the integers in the array. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of all entries except the entries whose indexes are a multiple of 3 or 4. The\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers except for those entries whose index\
    \ is \n    a multiple of 3 and whose index is also a multiple of 4. The function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n      \
    \  if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n     \
    \       sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n      \
    \  else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and return a new vector where\
    \ all entries are squared except for the entries whose indexes are a multiple\
    \ of 3 or 4. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ that contains the squares of the entries in the original vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries except for those entries whose indexes are\
    \ a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n \
    \           sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers squared. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n       \
    \     sum = sum + i*i*i\n        else\n            sum = sum + i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are multiplied by 2 except for those\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and return\
    \ a new vector with all the entries that are multiples of 3 removed.", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n       \
    \ elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ whose entries are the sum of the squares of the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the squares of the entries in the vector. The function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n", "   \
    \ sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are divided by\
    \ 2 except for the entries whose indexes are a multiple of 3. The function shall\
    \ not change the entries in the original vector. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3, 4]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i\n        elseif i%4 == 0\n            sum += i*i\n        else\n \
    \           sum += i*i*i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and a\
    \ number as input. The function will return the sum of the integers in the vector\
    \ that are a multiple of \nthe number inputted and will return the sum of the\
    \ integers in the vector that are a multiple of 3 and will return the sum of the\
    \ integers in the vector that are a multiple of 4.", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a vector of integers and returns the sum of all entries\
    \ in the vector that are a multiple of 3. The function shall not change the entries\
    \ in the vector whose indexes are not a multiple of 3. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        else\n            sum += x * x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a vector of integers and return\
    \ a new vector where all entries are squared except for those entries whose indexes\
    \ are a multiple of 3 or 4. The function shall not change the entries in the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n\
    \            sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n \
    \       else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers squared. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n   \
    \     elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n          \
    \  sum += x\n        else\n            sum *= x\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and will return the sum of the\
    \ integers squared except for those entries whose indexes are a multiple of 3\
    \ or 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a vector of integers and will return the sum of all\
    \ entries in the vector whose index is less than or equal to 3. The function shall\
    \ not change the entries in the vector whose indexes are not less than or equal\
    \ to 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and will return the sum of the squares of the entries in the vector. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector that contains the squares of all the entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, ", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a vector of integers and return a new vector where all entries are squared\
    \ except for the entries whose indexes are a multiple of 3 or 4. The function\
    \ shall not change the entries in the original vector. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a vector of integers and will return the sum of\
    \ the integers squared. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
    \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n     \
    \   elseif x % 4 == 0\n            sum += x^3\n        else\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ array of integers and returns the number of positive integers in the array.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a vector of integers and will return the sum of the integers squared. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are squared except for entries whose indexes are a multiple of 3 and\
    \ a multiple of 4. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    \"\"\"", "  \
    \  sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i\n    \
    \    elseif i%4 == 0\n            sum += i*i\n        else\n            sum +=\
    \ i*i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ with only the even entries in the original vector. The function shall not change\
    \ the original vector. \nThe function shall then return the sum of the even entries.",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are squared except\
    \ for the entries whose indexes are a multiple of 3 and a multiple of 4. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n \
    \   sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ that contains the squared entries of the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, ",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector where all entries are multiplied by 2 except for the entries whose\
    \ indexes are a multiple of 3. The function shall not change the entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n\
    \        else\n            sum += x*x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that will take a vector of\
    \ integers and return a new vector that contains the squares of the entries in\
    \ the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n   \
    \ >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1,\
    \ 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector that are multiples of 3 or 4.", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a vector of integers and return a new vector where all\
    \ entries are multiplied by 2 except for the entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, ", "    sum = 0\n    for i in lst\n        if i%3==0 ||\
    \ i%4==0\n            sum += i\n        else\n            sum *= i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector where all entries are multiplied by a constant factor.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n", " \
    \   sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend", "    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum\
    \ += i^3\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that will take a vector\
    \ of integers and return a new vector that contains the squared entries of the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n", "    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for x in lst\n        if\
    \ x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n            sum\
    \ *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a vector of integers and return a new vector where\
    \ all entries are divided by 2 except for the entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n     \
    \       sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and will return the number of entries that are a multiple\
    \ of 3. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n   \
    \     elseif i%4 == 0\n            sum += i^3\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a vector of integers and return a new vector that contains the squares of all\
    \ the entries in the original vector. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2,\
    \ -1, -5, -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n            sum\
    \ += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and a number k. The function will then return the sum of\
    \ the integers in the vector whose indexes are a multiple of k. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> k = 3\n    >>> sum_squares(lst,k)\n    25\n    \"\"\"", " \
    \   sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n \
    \       elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and will return the sum of the integers squared. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the vector whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the ", "    sum = 0\n    for i in lst\n    \
    \    if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector that contains the squares of the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i\n    \
    \    elseif i%4 == 0\n            sum += i*i\n        else\n            sum +=\
    \ i*i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are multiplied\
    \ by 3 if the entry is a multiple of 3 and all entries are multiplied by 4 if\
    \ the entry is a multiple of 4. The function shall not change the entries in the\
    \ original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n       \
    \ elseif i%4 == 0\n            sum += i^3\n        else\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and return a new vector that contains the squared values\
    \ of all entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> new_lst\n    [1, 4, 9]\n    \"\"\"", "    sum = 0\n    for i in lst\n \
    \       if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n       \
    \     sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n    \
    \    else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and return a new vector where\
    \ all entries are divided by 2 except for the entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n     \
    \       sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the entries in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif\
    \ i%4 == 0\n            sum += i^3\n        else\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers whose entries are the sum of the squares of\
    \ the entries in the original vector. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and return a new vector where all entries are divided by\
    \ 2 except for those entries that are a multiple of 4. The function shall not\
    \ change the entries in the original vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n  \
    \  [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5, 6]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ where all entries are squared except for the entries whose indexes are a multiple\
    \ of 3 or 4. The function shall not change the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that will take a vector of integers and return a\
    \ new vector where all entries are squared except for the entries that are a multiple\
    \ of 3 and a multiple of 4.", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a vector of integers\
    \ and will return the sum of the integers squared. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the entries in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n\
    \        elseif i%4 == 0\n            sum = sum + i^3\n        else\n        \
    \    sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and a number\
    \ as input. The function shall then return the sum of the entries in the vector\
    \ whose indexes are a multiple of 3 or 4 and less than or equal to the number\
    \ input. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> 3\n    6\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum\
    \ += x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ where all entries are squared except for the entries whose indexes are a multiple\
    \ of 3 or 4. The function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the original vector. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ original vector. \nThe function shall then return the sum of all entries. \n\
    The function shall not change the original vector. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the original vector.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the original vector. \nThe function shall then return the sum of\
    \ all entrie", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4\
    \ == 0\n            sum += x\n        else\n            sum *= x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector that are a multiple\
    \ of 3. The function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n\
    >>> sum_squares(lst)\n25", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n   \
    \     else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will take a vector of integers and a vector of integers\
    \ as input. The function will return the product of the entries in the vector\
    \ whose indexes are a multiple of 3 \nand whose indexes are a multiple of 4. The\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and return a new vector with only the even numbers. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [2, 4, 6,\
    \ 8]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n     \
    \       sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n      \
    \  else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a vector of integers and return a new vector where\
    \ all entries are divided by 2 except for those entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a vector of integers\
    \ and a number as input. The function shall then return the sum of the entries\
    \ in the vector that are a multiple of the number. \n    \n    Examples:\n   \
    \ >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    []\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5,\
    \ 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n  \
    \  [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5,\
    \ 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n  \
    \  [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3,\
    \ 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [1, 2, 3, 4,\
    \ 5, 6]\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of integers and return a new vector where all entries are\
    \ divided by 2 except for those entries that \nare a multiple of 3. The function\
    \ shall not change the entries in the original vector. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the original vector whose indexes are not a multiple of 3. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the original vector whose indexes are not a multiple of 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the original vector whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the original vector whose indexes are not a multiple of\
    \ 4. \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the original vector whose indexes are not a multiple\
    \ of 3. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the original vector whose indexes are not a\
    \ multiple of 4. \nThe function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the original vector whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the original vector whose indexes\
    \ are not a multiple of 4. \nThe function ", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that will take a vector of integers and return\
    \ a new vector with only the even numbers. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n    [2, 4, 6,\
    \ 8]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n     \
    \       sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n\
    \        else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will take a vector of integers and return a new vector\
    \ with only the even entries in the original vector. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 3]\n\
    \    >>> lst\n    [1, 3, 5]\n    >>> lst\n    [1, 3, 5, 7]\n    >>> lst\n    [1,\
    \ 3, 5, 7, 9]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 ==\
    \ 0 && x % 4 == 0\n            sum += x\n        else\n            sum += x*x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of integers\
    \ whose entries are the sum of the squares of the entries in the original vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a vector of integers and return\
    \ a new vector with only the even entries in the original vector. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    >>> lst\n    [2, 4, 6]\n    \"\"\"", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4\
    \ == 0\n            sum += i*i\n        else\n            sum += i*i*i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that takes a vector of integers and returns the sum of all entries in the vector\
    \ that is a multiple of 3 and a multiple of 4. The function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a vector of integers and will return the sum of the integers squared. \n   \
    \ \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum\
    \ += i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the entries of the vector that are a multiple of 3. The function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 4 or 5.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n \
    \           sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the entries in the vector. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n   \
    \     else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries except the entries that are a multiple of\
    \ 3 and a multiple of 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i\n        elseif i%4 == 0\n            sum += i*i\n     \
    \   else\n            sum += i*i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries except the entries whose indexes are a multiple\
    \ of 3 and a multiple of 4. The function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n\
    \    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n\
    \        else\n            sum *= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ where all entries are squared except for the entries whose indexes are a multiple\
    \ of 3 or 4. The function shall not change the entries in the original vector.\
    \ \nThe function shall then return the sum of all entries. \nExamples:\n>>> lst\n\
    [1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> lst\n[4, 9, 16, 25]\n\
    >>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>>\
    \ lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\
    [4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4,\
    \ 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9,\
    \ 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16,\
    \ 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n\
    >>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>>\
    \ lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n\
    [4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4,\
    \ 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9,\
    \ 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n[4, 9, 16,\
    \ 25]\n>>> lst\n[4, 9, 16, 25]\n>>> lst\n", "    sum = 0\n    for i in lst\n \
    \       if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of integers and return a\
    \ new vector where all entries are divided by 2 except for the entries whose indexes\
    \ are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n   \
    \ >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, -3]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if\
    \ i%3==0 || i%4==0\n            sum += i\n        else\n            sum *= i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a vector of integers and return a new vector with only the even entries in the\
    \ original vector. The function shall not change the original vector. \nThe function\
    \ shall then return the sum of all even entries in the original vector. \nThe\
    \ function shall then return the sum of all odd entries in the original vector.\
    \ \nThe function shall then return the product of all even entries in the original\
    \ vector. \nThe function shall then return the product of all odd entries in the\
    \ original vector. \nThe function shall then return the maximum of the original\
    \ vector. \nThe function shall then return the minimum of the original vector.\
    \ \nThe function shall then return the product of the original vector and all\
    \ entries in the original vector that are negative. \nThe function shall then\
    \ return the product of the original vector and all entries in the original vector\
    \ that are positive. \nThe function shall then return the product of the original\
    \ vector and all entries in the original vector that are neither negative nor\
    \ positive. \nThe function shall then return the product of the original vector\
    \ and all entries in the original vector that are neither negative nor positive.\
    \ \nThe function shall then return the product of the original vector and all\
    \ entries in the original vector that are neither negative nor positive. \nThe\
    \ function shall then return the product of the original vector and all entries\
    \ in the original vector that are neither negative nor positive. \nThe function\
    \ shall then return the product of the original vector and all entries in the\
    \ original vector that are neither negative nor positive. \nThe function shall\
    \ then return the product of the original vector and all entries in the original\
    \ vector that are neither negative nor positive. \nThe function shall then return\
    \ the product of the original vector and all entries in the original vector that\
    \ are neither negative nor positive. \nThe function shall then return the product\
    \ of the original vector and all entries in the original vector that are neither\
    \ negative nor positive. \nThe function shall then return the product of the original\
    \ vector and all entries in the original vector that are neither negative nor\
    \ positive. \nThe function shall then return the product of the original vector\
    \ and all entries in the original vector that are neither negative nor positive.\
    \ \nThe function shall then return the product of the original vector and all\
    \ entries in the original vector that are neither negative nor positive. \nThe\
    \ function shall then return the product of the original vector and all entries\
    \ in the original vector that are neither negative nor positive. \nThe function\
    \ shall then return the product of the original vector and all entries in the\
    \ original vector that are neither negative nor positive. \nThe function shall\
    \ then return the product of the original vector and all entries in the original\
    \ vector that are neither ", "    sum = 0\n    for x in lst\n        if x % 3\
    \ == 0\n            sum += x^2\n        elseif x % 4 == 0\n            sum +=\
    \ x^3\n        else\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that will take a vector of\
    \ integers and return a new vector where all entries are multiplied by 2 except\
    \ for those entries that are a multiple of 3. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, ", "    sum = 0\n    for i in lst\n    \
    \    if i%3==0 || i%4==0\n            sum += i\n        else\n            sum\
    \ += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a vector of integers and return a new vector\
    \ that contains the squared entries of the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n\
    \    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2,\
    \ 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5]", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the sum of the squares of the integers in the array.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    []\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the entries in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will\
    \ take a vector of integers and return a new vector where all entries are squared\
    \ except for the entries whose indexes are a multiple of 3 or 4. The function\
    \ shall not change the entries in the original vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
