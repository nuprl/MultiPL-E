name: HumanEval_149_sorted_list_sum
language: jl
prompt: "\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
  \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
  \ vector with a sorted order,\n    The vector is always a vector of strings and\
  \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
  \ of the vector should be ascending by length of each word, and you\n    should\
  \ return the vector sorted by that rule.\n    If two words have the same length,\
  \ sort the vector alphabetically.\n    The function should return a vector of strings\
  \ in sorted order.\n    You may assume that all words will have the same length.\n\
  \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n \
  \   >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\
  \"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
  aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\"\
  , \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"\
  c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
  , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"])\
  \ == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\", \"\
  c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list\
    \ = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n\
    \        if length(word) % 2 != 0\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n\
    \    sorted_list_sum = []\n    for word in sorted_list\n        if length(word)\
    \ % 2 == 1\n            sorted_list_sum .= word\n        end\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n \
    \   \n    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst)\n    \n\
    \    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        ", "    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n\
    \    for word in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n\
    \    \n    for word in sorted_list\n        \n        if length(word) % 2 != 0\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab", "    \n    sorted_list\
    \ = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n        sum\
    \ += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n    \n\
    \    for word in sorted_list\n        sum += length(word)\n    end\n    \n   \
    \ sorted_list\n    \nend\n</cell>\n<code language=julia-1.5>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n \
    \   sorted_list_sum = []\n    for word in sorted_list\n        if length(word)\
    \ == length(sorted_list[1])\n            sorted_list_sum .= word\n        else\n\
    \            sorted_list_sum .= word\n        end\n    end\n    return sorted_list_sum\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n   \
    \ \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sorted_list = sort(lst)\n    \n    sum\
    \ = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list\n      \
    \  sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=length) \n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by=length) \n    \n    for i in sorted_list", "    sorted_list\
    \ = sort(lst)\n    sorted_list = remove!(sorted_list, x -> length(x) % 2 == 1)\n\
    \    sorted_list = remove!(sorted_list, x -> length(x) == 0)\n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted_list = sort(lst)\n    sorted_list_sum\
    \ = []\n    for word in sorted_list\n        if length(word) % 2 == 1\n      \
    \      push!(sorted_list_sum, word)\n        end\n    end\n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    sorted_list\nend\n\"\"\"Write a function that accepts\
    \ a vector of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted vector with a sorted order,\n    The\
    \ vector is always a vector of strings and never a vector of numbers,\n    and\
    \ it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"", "    sorted_list\
    \ = sort(lst)\n    sum = 0\n    for i in sorted_list\n        sum += length(i)\n\
    \    end\n    sorted_list\nend", "    \n    sorted_list = sort(lst)\n    \n  \
    \  sorted_list_sum = []\n    \n    for word in sorted_list\n        \n       \
    \ if length(word) == length(sorted_list[1])\n            \n            sorted_list_sum\
    \ = [word]\n            \n        else\n            \n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ length(x))\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    return sorted_list\nend", "    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for word\
    \ in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            sorted_list_sum = [word]\n            \n        else\n\
    \            \n            sorted_list_sum = sorted_list_sum + word\n        \
    \    \n        end\n        \n    end\n    \n    return sorted_list_sum\nend",
  "    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n  \
    \  sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list = sort(lst)\n    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list = sort(lst)", "    sorted_list = sort(lst)\n    sorted_list\
    \ = sort(sorted_list)\n    return sorted_list\nend", "    \n    sorted_list =\
    \ sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n        sum\
    \ += length(word)\n    end\n    \n    sorted_list = sort(lst, by = x -> length(x))\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(lst, by = x -> x)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n\
    \    for word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n\
    \    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>", "    \n\
    \    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst)\n    \n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst)\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(lst)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst)\n   \
    \ \n    for word in sorted_list\n        sum += length(word)\n    end\n", "  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for\
    \ word in sorted_list\n        if length(word) == length(sorted_list[1])\n   \
    \         sorted_list_sum .= word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sorted_list = Vector{String}()\n    \n    for\
    \ word in lst\n        push!(sorted_list, word)\n    end\n    \n    sorted_list\
    \ = sort(sorted_list)\n    \n    return sorted_list\nend", "    sorted_list_sum\
    \ = []\n    for word in lst\n        push!(sorted_list_sum, word)\n    end\n \
    \   return sorted_list_sum\nend", "    sorted_list = sort(lst)\n    sorted_list_sum\
    \ = Vector{String}()\n    for word in sorted_list\n        if length(word) % 2\
    \ != 0\n            push!(sorted_list_sum, word)\n        end\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>", "    sorted_list\
    \ = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n\
    \        if length(word) % 2 != 0\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    return sorted_list_sum\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how to sort\
    \ a vector of strings by length and alphabetically. Your answer doesn't do that.\n\
    <|/ c |>\n<| c |>\nThe question was how to sort a vector of strings by length\
    \ and alphabetically. My answer does that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nI read the question, but your answer doesn't do that. Your answer sorts\
    \ the strings by length and alphabetically, but doesn't answer the question. OP\
    \ wants to know how to sort a vector of strings by length and alphabetically.\
    \ Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI read the question, and I\
    \ answered it correctly. My answer sorts the strings by length and alphabetically.\
    \ OP wants to know how to sort a vector of strings by length and alphabetically.\
    \ My answer does that. Did you read the question?\n<|/ c |>\n<| c |>\nI read the\
    \ question, and I answered it correctly. My answer sorts the strings by length\
    \ and alphabetically. OP wants to know how to sort a vector of strings by length\
    \ and alphabetically. My answer does that. Did you read the question?\n<|/ c |>\n\
    <| a tags=sorting,julia |>\nI believe this does what you want:\n<code>\njulia>\
    \ function list_sort(lst::Vector{String})\n           sorted_list = sort(lst)\n\
    \           sorted_list_sum = Vector{String}()\n           for word in sorted_list\n\
    \               push!(sorted_list_sum, word)\n           end\n           return\
    \ sorted_list_sum\n       end\nlist_sort (generic function with 1 method)", " \
    \   \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ length(x))\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    return sorted_list\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n\
    \    sum = 0\n    for word in sorted_list\n        sum += length(word)\n    end\n\
    \    return sorted_list[sum:end]\nend\n</cell>\n<code language=julia-1.0>", " \
    \   \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for\
    \ word in sorted_list\n        if length(word) == length(sorted_list[1])\n   \
    \         sorted_list_sum .= word\n        else\n            sorted_list_sum .=\
    \ word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\"])\n\
    </cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\"])", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted_list_sum=Vector{String}()\n\
    \    for word in lst\n        if length(word)%2==1\n            sorted_list_sum=[word]\n\
    \        else\n            sorted_list_sum=[word,sorted_list_sum[end-1]]\n   \
    \     end\n    end\n    return sorted_list_sum\nend\n\"\"\"\nWrite a function\
    \ that accepts a vector of strings as a parameter,\n    deletes the strings that\
    \ have even lengths from it,\n    and returns the resulted vector with a sorted\
    \ order,\n    The vector is always a vector of strings and never a vector of numbers,\n\
    \    and it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"", "    sorted_list\
    \ = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n\
    \        if length(word) % 2 == 1\n            sorted_list_sum .= word\n     \
    \   end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sorted_list_sum = []\n    \n    for word in lst\n        push!(sorted_list_sum,\
    \ word)\n    end\n    \n    return sorted_list_sum\nend", "    sorted_list = sort(lst)\n\
    \    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n       \
    \ push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"", "    sorted_list = sort(lst)\n    sorted_list_sum = []\n\
    \    for word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n\
    \    return sorted_list_sum\nend\n\"\"\"Write a function that accepts a vector\
    \ of strings as a parameter,\n    deletes the strings that have even lengths from\
    \ it,\n    and returns the resulted vector with a sorted order,\n    The vector\
    \ is always a vector of strings and never a vector of numbers,\n    and it may\
    \ contain duplicates.\n    The order of the vector should be ascending by length\
    \ of each word, and you\n    should return the vector sorted by that rule.\n \
    \   If two words have the same length, sort the vector alphabetically.\n    The\
    \ function should return a vector of strings in sorted order.\n    You may assume\
    \ that all words will have the same length.\n    For example:\n    >>> list_sort([\"\
    aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"", "    \n    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>\nlist_sort([\"aa\", \"a\", \"aaa\"])\n\
    </cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"\
    ])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\",\
    \ \"aaa\", \"cd\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\"])\n\
    </cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\",\
    \ \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab", "   \
    \ sorted_list = sort(lst)\n    sum = 0\n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    return sorted_list[sum:end]\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for\
    \ word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  end\n    end\n    \n    return sorted_list_sum\nend", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = sort(lst)\n \
    \   \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sorted_list_sum = []\n  \
    \  \n    for word in lst\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    \n    return sorted_list_sum\nend", "    \n\
    \    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n  \
    \      sum += length(i)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for i in sorted_list\n        if length(i) == sum\n            push!(sorted_list,\
    \ i)\n        end\n    end\n    \n    return sorted_list\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list_sum = []\n    \n    for word in sorted_list\n        \n\
    \        if length(word) == length(sorted_list[1])\n            \n           \
    \ sorted_list_sum = [word]\n            \n        else\n            \n       \
    \     sorted_list_sum = [word + sorted_list_sum[1]]\n        end\n    end\n  \
    \  \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>", " \
    \   sorted_list = sort(lst)\n    sum = 0\n    for word in sorted_list\n      \
    \  sum += length(word)\n    end\n    sorted_list = sort(lst, by=sum)\n    return\
    \ sorted_list\nend", "    \n    sorted_list = Vector{String}()\n    \n    for\
    \ word in lst\n        push!(sorted_list, word)\n    end\n    \n    sorted_list\
    \ = sort(sorted_list)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\"\
    , \"g\", \"h\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for word in sorted_list\n\
    \        if length(word) % 2 == 1\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    \n    return sorted_list_sum\nend", "    sorted_list\
    \ = sort(lst)\n    sorted_list = filter(x -> length(x) % 2 != 0, sorted_list)\n\
    \    sorted_list = filter(x -> x != \"\", sorted_list)\n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted_list = sort(lst)\n    sorted_list_sum\
    \ = Vector{String}()\n    for word in sorted_list\n        push!(sorted_list_sum,\
    \ word)\n    end\n    return sorted_list_sum\nend", "    sorted_list = sort(lst)\n\
    \    \n    sorted_list_sum = []\n    for word in sorted_list\n        if length(word)\
    \ == length(sorted_list[1])\n            sorted_list_sum .= word\n        end\n\
    \    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> length(x))\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ x)\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ sorted_list = sort(lst)\n    sorted_list_sum = []\n    for word in sorted_list\n\
    \        push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n\
    </cell>\n<code language=julia-1.0>", "    sorted_list = sort(lst)\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    sorted_list = sort(lst)\n    sorted_list = remove!(sorted_list,\
    \ x -> length(x) % 2 == 1)\n    return sorted_list\nend", "    sorted_list = sort(lst)\n\
    \    sorted_list_sum = []\n    for word in sorted_list\n        push!(sorted_list_sum,\
    \ word)\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    sorted_list = sort(lst)\n    \n    sorted_list = removeDuplicates(sorted_list)\n\
    \    \n    return sorted_list\nend", "    sorted_list = sort(lst)\n    sum = 0\n\
    \    for i in sorted_list\n        sum += length(i)\n    end\n    sorted_list\
    \ = sort(lst, by=sum)\n    return sorted_list\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia,string\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use sort!\
    \ to sort the vector in-place:\n<code>\njulia> sort!([\"aa\", \"a\", \"aaa\"])\n\
    3-element Array{String,1}:\n \"a\"\n \"aa\"\n \"aaa\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=sorting,julia,string |>\nI believe that your problem can be solved\
    \ using sort!:\n<code>\njulia> sort!([\"aa\", \"a\", \"aaa\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"aa\"\n \"aaa\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>",
  "    \n    sorted_list = Vector{String}()\n    \n    for word in lst\n        if\
    \ length(word) == length(sorted_list) == 0\n            push!(sorted_list, word)\n\
    \        elseif length(word) > length(sorted_list)\n            push!(sorted_list,\
    \ word)\n        elseif length(word) < length(sorted_list)\n            push!(sorted_list,\
    \ word)\n        end\n    end\n    \n    return sorted_list\nend", "    sorted_list\
    \ = sort(lst)\n    sorted_list = sort(sorted_list)\n    return sorted_list\nend\n\
    </cell>\n<code language=julia-1.0>", "    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list_sum = []\n    \n    for word in sorted_list\n        if length(word)\
    \ == length(sorted_list[1])\n            sorted_list_sum .= word\n        else\n\
    \            sorted_list_sum .= word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sorted_list = Vector{String}()\n\
    \    \n    for word in lst\n        if length(word) % 2 == 1\n            push!(sorted_list,\
    \ word)\n        end\n    end\n    \n    return sorted_list\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    sorted_list = sort(lst)\n    sorted_list_sum\
    \ = []\n    for word in sorted_list\n        if length(word) % 2 == 1\n      \
    \      push!(sorted_list_sum, word)\n        end\n    end\n    return sorted_list_sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ as a parameter,\n    deletes the strings that have odd lengths from it,\n  \
    \  and returns the resulted vector with a sorted order,\n    The vector is always\
    \ a vector of strings and never a vector of numbers,\n    and it may contain duplicates.\n\
    \    The order of the vector should be ascending by length of each word, and you\n\
    \    should return the vector sorted by that rule.\n    If two words have the\
    \ same length, sort the vector alphabetically.\n    The function should return\
    \ a vector of strings in sorted order.\n    You may assume that all words will\
    \ have the same length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"\
    aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n \
    \   [\"ab\", \"cd\"]\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list\
    \ = sort(lst)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n\
    \    for word in sorted_list\n        push!(sorted_list_sum, word)\n    end\n\
    \    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>", "    sorted_list\
    \ = sort(lst)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    sorted_list\
    \ = sort(lst)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    sorted_list_sum = []\n    \n    for\
    \ word in lst\n        push!(sorted_list_sum, word)\n    end\n    \n    return\
    \ sorted_list_sum\nend", "    \n    sorted_list_sum = []\n    \n    for word in\
    \ lst\n        push!(sorted_list_sum, word)\n    end\n    \n    return sorted_list_sum\n\
    end", "    sorted_list = sort(lst)\n    sum = 0\n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    sorted_list = sort(lst, by = sum)\n\
    \    return sorted_list\nend", "    sorted_list = sort(lst)\n    sum = 0\n   \
    \ for i in sorted_list\n        sum += length(i)\n    end\n    sorted_list\nend",
  "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for\
    \ word in sorted_list\n        \n        if length(word) == length(sorted_list[1])\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  elseif length(word) > length(sorted_list[1])\n            \n            push!(sorted_list_sum,\
    \ word)\n            \n        elseif length(word) < length(sorted_list[1])\n\
    \            \n            push!(sorted_list_sum, word)\n            \n      \
    \  end\n        \n    end\n    \n    return sorted_list_sum\nend", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n    for\
    \ i in sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list =\
    \ sort(lst, by = x -> x, rev=true)\n    \n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> length(x),\
    \ rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n    \n    for i in\
    \ sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ x, rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n   \
    \ end\n    \n    sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n\
    \    for i in sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list\
    \ = sort(lst, by = x -> x, rev=true)\n    \n    for i in sorted_list\n       \
    \ sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> length(x),\
    \ rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n    end\n\
    \    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n    \n    for i in\
    \ sorted_list\n        sum += length(i)\n    end\n    \n    sorted_list = sort(lst,\
    \ by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n        sum\
    \ += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x -> x, rev=true)\n\
    \    \n    for i in sorted_list\n        sum += length(i)\n    end\n    \n   \
    \ sorted_list = sort(lst, by = x -> length(x), rev=true)\n    \n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by = x ->\
    \ x, rev=true)\n    \n    for i in sorted_list\n        sum += length(i)\n", " \
    \   \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for\
    \ word in sorted_list\n        \n        if length(word) % 2 == 1\n          \
    \  \n            push!(sorted_list_sum, word)\n            \n        end\n   \
    \ end\n    \n    return sorted_list_sum\nend", "    sorted_list = sort(lst)\n\
    \    sorted_list = sort(sorted_list)\n    return sorted_list\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sorted_list = sort(lst)\n    \n    sum\
    \ = 0\n    \n    for word in sorted_list\n        sum += length(word)\n    end\n\
    \    \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend", "    \n    sorted_list = sort(lst)\n    \n\
    \    sorted_list_sum = []\n    \n    for word in sorted_list\n        if length(word)\
    \ == length(sorted_list[1])\n            sorted_list_sum = [word + sorted_list[1]]\n\
    \        else\n            sorted_list_sum = [word + sorted_list[2]]\n       \
    \ end\n    end\n    \n    return sorted_list_sum\nend", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sorted_list_sum = []\n    \n\
    \    for word in lst\n        if length(word) == length(sorted_list_sum)\n   \
    \         push!(sorted_list_sum, word)\n        else\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    \n    return sorted_list_sum\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list_sum = []\n    \n    for word in sorted_list\n        \n\
    \        if length(word) % 2 == 1\n            \n            push!(sorted_list_sum,\
    \ word)\n            \n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n \
    \   sorted_list_sum = []\n    for word in sorted_list\n        if length(word)\
    \ == length(sorted_list[1])\n            sorted_list_sum .= word\n        else\n\
    \            sorted_list_sum .= word\n        end\n    end\n    return sorted_list_sum\n\
    end\n\"\"\"Write a function that accepts a vector of strings as a parameter,\n\
    \    deletes the strings that have even lengths from it,\n    and returns the\
    \ resulted vector with a sorted order,\n    The vector is always a vector of strings\
    \ and never a vector of numbers,\n    and it may contain duplicates.\n    The\
    \ order of the vector should be ascending by length of each word, and you\n  \
    \  should return the vector sorted by that rule.\n    If two words have the same\
    \ length, sort the vector alphabetically.\n    The function should return a vector\
    \ of strings in sorted order.\n    You may assume that all words will have the\
    \ same length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n\
    \    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\"\
    , \"cd\"]\n    \"\"\"", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\nend", " \
    \   sorted_list = sort(lst)\n    \n    sum = 0\n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        if length(word) == sum\n         \
    \   push!(sorted_list, word)\n        end\n    end\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for\
    \ word in sorted_list\n        \n        if length(word) % 2 == 1\n          \
    \  \n            push!(sorted_list_sum, word)\n            \n        end\n   \
    \ end\n    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted_list = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for word\
    \ in sorted_list\n        if length(word) % 2 != 0\n            push!(sorted_list_sum,\
    \ word)\n        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(lst, by=sum)\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    sorted_list = sort(lst)\n    sum = 0\n    for\
    \ i in sorted_list\n        sum += length(i)\n    end\n    sorted_list\nend\n\"\
    \"\"\nWrite a function that accepts a vector of strings as a parameter,\n    deletes\
    \ the strings that have odd lengths from it,\n    and returns the resulted vector\
    \ with a sorted order,\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n\
    \    \n    for word in sorted_list\n        if length(word) % 2 == 1\n       \
    \     sorted_list_sum .= word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nlist_sort([\"aa\", \"a\", \"aaa\"])\n\
    </cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"\
    ])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"\
    cd\", \"e\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\"])\n</cell>\n<code language=julia-1.5>\nlist_", "    sorted_list\
    \ = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n\
    \        if length(word) == length(sorted_list[1])\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    return sorted_list_sum\nend", "    \n   \
    \ sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for word\
    \ in sorted_list\n        if length(word) == length(sorted_list[1])\n        \
    \    sorted_list_sum .= word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(sorted_list)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\n\
    end", "    sorted_list_sum = []\n    for word in lst\n        if length(word)\
    \ == length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n     \
    \   else\n            push!(sorted_list_sum, word)\n        end\n    end\n   \
    \ return sorted_list_sum\nend\n\"\"\"Write a function that accepts a vector of\
    \ strings as a parameter,\n    deletes the strings that have odd lengths from\
    \ it,\n    and returns the resulted vector with a sorted order,\n    The vector\
    \ is always a vector of strings and never a vector of numbers,\n    and it may\
    \ contain duplicates.\n    The order of the vector should be ascending by length\
    \ of each word, and you\n    should return the vector sorted by that rule.\n \
    \   If two words have the same length, sort the vector alphabetically.\n    The\
    \ function should return a vector of strings in sorted order.\n    You may assume\
    \ that all words will have the same length.\n    For example:\n    >>> list_sort([\"\
    aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"", "    sorted_list = sort(lst)\n\
    \    sorted_list = sort(sorted_list)\n    return sorted_list\nend\n\"\"\"Write\
    \ a function that accepts a vector of strings as a parameter,\n    deletes the\
    \ strings that have odd lengths from it,\n    and returns the resulted vector\
    \ with a sorted order,\n    The vector is always a vector of strings and never\
    \ a vector of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ vector should be ascending by length of each word, and you\n    should return\
    \ the vector sorted by that rule.\n    If two words have the same length, sort\
    \ the vector alphabetically.\n    The function should return a vector of strings\
    \ in sorted order.\n    You may assume that all words will have the same length.\n\
    \    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n\
    \    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n \
    \   \"\"\"", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n\
    \    \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word + sorted_list[1]]\n        else\n       \
    \     sorted_list_sum = [word + sorted_list[2]]\n        end\n    end\n    \n\
    \    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n\
    \    sorted_list_sum = []\n    for word in sorted_list\n        push!(sorted_list_sum,\
    \ word)\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted_list_sum = []\n    \n    for word in lst\n        if length(word) ==\
    \ length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n        else\n\
    \            push!(sorted_list_sum, word)\n        end\n    end\n    \n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>", "    sorted_list\
    \ = sort(lst)\n    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n\
    \        if length(word) % 2 != 0\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list\
    \ = sort(lst)\n    \n    sum = 0\n    for word in sorted_list\n        sum +=\
    \ length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n    \n   \
    \ return sorted_list\nend", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum .= word\n        else\n            sorted_list_sum\
    \ .= word\n        end\n    end\n    \n    return sorted_list_sum\nend", "   \
    \ sorted_list = sort(lst)\n    sorted_list = sort(sorted_list)\n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list_sum = []\n    \n    for word in sorted_list\n        if\
    \ length(word) % 2 == 1\n            sorted_list_sum = [word]\n        else\n\
    \            sorted_list_sum = sorted_list_sum + word\n        end\n    end\n\
    \    \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>", " \
    \   \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by =\
    \ sum)\n    \n    return sorted_list\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    sorted_list = sort(lst)\n    sorted_list = filter(x\
    \ -> length(x) % 2 != 0, sorted_list)\n    sorted_list = sort(sorted_list)\n \
    \   return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "    sorted_list\
    \ = sort(lst)\n    sorted_list = sort(sorted_list)\n    return sorted_list\nend\n\
    \"\"\"\nWrite a function that accepts a vector of strings as a parameter,\n  \
    \  deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ vector with a sorted order,\n    The vector is always a vector of strings and\
    \ never a vector of numbers,\n    and it may contain duplicates.\n    The order\
    \ of the vector should be ascending by length of each word, and you\n    should\
    \ return the vector sorted by that rule.\n    If two words have the same length,\
    \ sort the vector alphabetically.\n    The function should return a vector of\
    \ strings in sorted order.\n    You may assume that all words will have the same\
    \ length.\n    For example:\n    >>> list_sort([\"aa\", \"a\", \"aaa\"])\n   \
    \ [\"aa\"]\n    >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\",\
    \ \"cd\"]\n    \"\"\"", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        \n        if length(word) %\
    \ 2 == 1\n            \n            sorted_list_sum = [word]\n            \n \
    \       else\n            \n            sorted_list_sum = sorted_list_sum + word\n\
    \            \n        end\n        \n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sorted_list = sort(lst)\n\
    \    \n    sorted_list_sum = []\n    \n    for word in sorted_list\n        \n\
    \        if length(word) == length(sorted_list[1])\n            \n           \
    \ sorted_list_sum = [word]\n            \n        else\n            \n       \
    \     sorted_list_sum = sorted_list_sum + word\n            \n        end\n  \
    \      \n    end\n    \n    return sorted_list_sum\nend", "    sorted_list_sum\
    \ = []\n    \n    for word in lst\n        push!(sorted_list_sum, word)\n    end\n\
    \    \n    return sorted_list_sum\nend", "    sorted_list = sort(lst)\n    sorted_list\
    \ = sort(sorted_list)\n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ sorted_list_sum = []\n    \n    for word in lst\n        if length(word) ==\
    \ length(sorted_list_sum)\n            push!(sorted_list_sum, word)\n        else\n\
    \            push!(sorted_list_sum, word)\n        end\n    end\n    \n    return\
    \ sorted_list_sum\nend", "    \n    sorted_list = sort(lst)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    return sorted_list\nend", "    \n    sorted_list = sort(lst)\n    \n \
    \   sorted_list_sum = []\n    \n    for word in sorted_list\n        if length(word)\
    \ % 2 != 0\n            push!(sorted_list_sum, word)\n        end\n    end\n \
    \   \n    return sorted_list_sum\nend", "    \n    sorted_list = sort(lst)\n \
    \   \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    return sorted_list\nend", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sorted_list = Vector{String}()\n    \n    for\
    \ word in lst\n        push!(sorted_list, word)\n    end\n    \n    sorted_list\
    \ = sort(sorted_list)\n    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = sort(lst)\n \
    \   \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(lst, by = sum)\n    \n    return sorted_list\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list\
    \ = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n        sum\
    \ += length(word)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n    \n\
    \    return sorted_list\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n\
    \    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n       \
    \ push!(sorted_list_sum, word)\n    end\n    return sorted_list_sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    sorted_list = sort(lst)\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n\
    \    sorted_list_sum = Vector{String}()\n    for word in sorted_list\n       \
    \ if length(word) % 2 != 0\n            sorted_list_sum .= word\n        end\n\
    \    end\n    return sorted_list_sum\nend\n\"\"\"\nWrite a function that accepts\
    \ a vector of strings as a parameter,\n    deletes the strings that have even\
    \ lengths from it,\n    and returns the resulted vector with a sorted order,\n\
    \    The vector is always a vector of strings and never a vector of numbers,\n\
    \    and it may contain duplicates.\n    The order of the vector should be ascending\
    \ by length of each word, and you\n    should return the vector sorted by that\
    \ rule.\n    If two words have the same length, sort the vector alphabetically.\n\
    \    The function should return a vector of strings in sorted order.\n    You\
    \ may assume that all words will have the same length.\n    For example:\n   \
    \ >>> list_sort([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    >>> list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"", "    \n   \
    \ sorted_list = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for word\
    \ in sorted_list\n        if length(word) == length(sorted_list[1])\n        \
    \    sorted_list_sum = [word + sorted_list[1]]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word\
    \ in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(sorted_list)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(sorted_list)\n    \n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted_list = sort(lst)\n    sorted_list_sum\
    \ = Vector{String}()\n    for word in sorted_list\n        if length(word) % 2\
    \ == 1\n            sorted_list_sum .= word\n        end\n    end\n    return\
    \ sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    sorted_list = sort(lst)\n \
    \   sorted_list = filter(x -> length(x) % 2 != 0, sorted_list)\n    return sorted_list\n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    sorted_list = Vector{String}()\n\
    \    \n    for word in lst\n        if length(word) % 2 != 0\n            push!(sorted_list,\
    \ word)\n        end\n    end\n    \n    sorted_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list\
    \ = sort(lst)\n    \n    sorted_list_sum = []\n    \n    for word in sorted_list\n\
    \        if length(word) % 2 != 0\n            push!(sorted_list_sum, word)\n\
    \        end\n    end\n    \n    return sorted_list_sum\nend", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = sort(lst)\n\
    \    \n    sum = 0\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n    \n    sorted_list = sort(sorted_list)\n\
    \    \n    for word in sorted_list\n        sum += length(word)\n    end\n   \
    \ \n    sorted_list = sort(sorted_list)\n    \n    for word in sorted_list\n \
    \       sum += length(word)\n    end\n", "    \n    sorted_list = sort(lst)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        \n        if length(word) ==\
    \ length(sorted_list[1])\n            \n            sorted_list_sum = [word +\
    \ sorted_list[1]]\n            \n        else\n            \n            sorted_list_sum\
    \ = [word + sorted_list[2]]\n            \n        end\n        \n    end\n  \
    \  \n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    sorted_list = Vector{String}()\n    \n    for word in lst\n        push!(sorted_list,\
    \ word)\n    end\n    \n    sorted_list = sort(sorted_list)\n    \n    return\
    \ sorted_list\nend", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n \
    \   \n    for word in sorted_list\n        sum += length(word)\n    end\n    \n\
    \    sorted_list = sort(lst, by = sum)\n    \n    return sorted_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for\
    \ word in sorted_list\n        sum += length(word)\n    end\n    \n    sorted_list\
    \ = sort(sorted_list)\n    \n    for word in sorted_list\n        sum += length(word)\n\
    \    end\n    \n    return sorted_list\nend", "    sorted_list = sort(lst)\n \
    \   sorted_list_sum = Vector{String}()\n    for word in sorted_list\n        if\
    \ length(word) % 2 != 0\n            push!(sorted_list_sum, word)\n        end\n\
    \    end\n    return sorted_list_sum\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    sorted_list = sort(lst)\n    \n    sum = 0\n    for i in sorted_list\n\
    \        sum += length(i)\n    end\n    \n    sorted_list = sort(lst, by=sum)\n\
    \    \n    return sorted_list\nend\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    aa\", \"a\", \"aaa\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n\
    <code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"\
    ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    ])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\nlist_sort([\"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"])\n</cell>\n<code language=julia-1.5>\n\
    list_sort([\"ab\", \"a\", \"", "    \n    sorted_list = Vector{String}()\n   \
    \ \n    for word in lst\n        if length(word) % 2 == 1\n            push!(sorted_list,\
    \ word)\n        end\n    end\n    \n    return sorted_list\nend", "    \n   \
    \ sorted_list = sort(lst)\n    \n    sum = 0\n    \n    for word in sorted_list\n\
    \        sum += length(word)\n    end\n    \n    sorted_list = sort(lst, by =\
    \ sum)\n    \n    return sorted_list\nend", "    sorted_list = sort(lst)\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sorted_list = sort(lst)\n    \n    sorted_list_sum\
    \ = []\n    \n    for word in sorted_list\n        if length(word) == length(sorted_list[1])\n\
    \            sorted_list_sum = [word]\n        else\n            sorted_list_sum\
    \ = sorted_list_sum + word\n        end\n    end\n    \n    return sorted_list_sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted_list = sort(lst)\n    sorted_list_sum\
    \ = []\n    for word in sorted_list\n        if length(word) % 2 != 0\n      \
    \      push!(sorted_list_sum, word)\n        end\n    end\n    return sorted_list_sum\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted_list = Vector{String}()\n\
    \    \n    for word in lst\n        if length(word) == length(sorted_list) ==\
    \ 0\n            push!(sorted_list, word)\n        elseif length(word) > length(sorted_list)\n\
    \            push!(sorted_list, word)\n        end\n    end\n    \n    return\
    \ sorted_list\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
