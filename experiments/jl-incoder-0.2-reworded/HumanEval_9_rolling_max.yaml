name: HumanEval_9_rolling_max
language: jl
prompt: "\"\"\" From a given vector of integers, generate a vector of rolling maximum\
  \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4,\
  \ 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
  \ 100, 100])\nend\n"
completions: ["    \n    maximums = Vector{Int64}(undef, length(numbers))\n    maximums[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        maximums[i] = maximum(maximums[i-1],\
    \ numbers[i])\n    end\n    return maximums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for i in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, i)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local max = 0\n    local max_index = 0\n    local max_value = numbers[1]\n\
    \    \n    for i = 2:length(numbers)\n        if numbers[i] > max_value then\n\
    \            max_value = numbers[i]\n            max_index = i\n        end\n\
    \    end\n    \n    local new_numbers = Vector{Int64}()\n    \n    for i = 1:length(numbers)\n\
    \        if i == max_index then\n            new_numbers[i] = max_value\n    \
    \    else\n            new_numbers[i] = numbers[i]\n        end\n    end\n   \
    \ \n    return new_numbers\nend\n</cell>\n<text>\nrolling_max", "    \n    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        if n > rolling_max\n  \
    \          rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_vec = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n   \
    \     if numbers[i] > rolling_max_vec[i-1]\n            rolling_max_vec[i] = numbers[i]\n\
    \        end\n    end\n    return rolling_max_vec\nend", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    \n    for\
    \ i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a vector of rolling minimum element found until given moment\
    \ in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2,\
    \ 1, 2, 2, 1]\n    \"\"\"", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates a vector of rolling minimum element found\
    \ until given moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n    [1, 2, 3, 3, 3, 4, 2]\n    \"\"\"", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:end], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| c |>\nI believe this should be the accepted answer. `rolling_max` should be\
    \ the name of a function that is already implemented in the `Statistics` package.\
    \ `rolling_max` does not do what the OP wants, which is to find the maximum element\
    \ in a rolling window. `rolling_max` does what `maximum` does, which is to find\
    \ the maximum element in a vector. `rolling_max` also does not do what the OP\
    \ wants, which is to find the maximum element in a rolling window. `rolling_max`\
    \ does what `maximum` does, which is to find the maximum element in a vector.\
    \ `rolling_max` also does not do what the OP wants, which is to find the maximum\
    \ element in a rolling window. `rolling_max` does what `maximum` does, which is\
    \ to find the maximum element in a vector. `rolling_max` does what `maximum` does,\
    \ which is to find the maximum element in a vector. `rolling_max` does what `maximum`\
    \ does, which is to find the maximum element in a vector. `rolling_max` does what\
    \ `maximum` does, which is to find the maximum element in a vector. `rolling_max`\
    \ does what `maximum` does, which is to find the maximum element in a vector.\
    \ `rolling_max` does what `maximum` does, which is to find the maximum element\
    \ in a vector. `rolling_max` does what `maximum` does, which is to find the maximum\
    \ element in a vector. `rolling_max` does what `maximum` does, which is to find\
    \ the maximum element in a vector. `rolling_max` does what `maximum` does, which\
    \ is to find the maximum element in a vector. `rolling_max` does what `maximum`\
    \ does, which is to find the maximum element in a vector. `rolling_max` does what\
    \ `maximum` does, which is to find the maximum element in a vector. `rolling_max`\
    \ does what `maximum` does, which is to find the maximum element in a vector.\
    \ `rolling_max` does what `maximum` does, which is to find the maximum element\
    \ in a vector. `rolling_max` does what `maximum` does, which is to find the maximum\
    \ element in a vector. `rolling_max` does what `maximum` does, which is to find\
    \ the maximum element in a vector. `rolling_max` does ", "    rolling_max_result\
    \ = numbers[end]\n    for i = end - length(input) - 1\n        rolling_max_result\
    \ = max(numbers[i], rolling_max_result)\n    end\n    rolling_max_result\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], rolling_max_array[i-1])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(Int, length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.3>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a vector of rolling minimum element found until given moment\
    \ in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2,\
    \ 2, 2, 2, 2]\n    \"\"\"", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n  \
    \  for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n     \
    \       rolling_max[i] = numbers[i]\n        else\n            rolling_max[i]\
    \ = rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n > rolling_max\n            rolling_max = n\n  \
    \      end\n    end\n    \n    return rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the vector of\
    \ rolling minimum element found until given moment in the sequence.\n    >>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2, 2, 2]\n    \"\"\"", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_array = zeros(Int64, length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i:])\n \
    \   end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_idx = 1\n    rolling_max_value = numbers[1]\n    \n    for idx\
    \ in 2:length(numbers)\n        if numbers[idx] > rolling_max_value\n        \
    \    rolling_max_value = numbers[idx]\n            rolling_max_idx = idx\n   \
    \     end\n    end\n    \n    return numbers[rolling_max_idx+1:end]\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n\
    \        if n > rolling_max\n            rolling_max = n\n        end\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ local max_rolling_numbers = Vector{Int64}()\n    local max_rolling_number =\
    \ numbers[1]\n    local max_rolling_number_index = 2\n    \n    for i = 2:length(numbers)\n\
    \        if numbers[i] > max_rolling_number then\n            max_rolling_number\
    \ = numbers[i]\n            max_rolling_number_index = i\n        end\n    end\n\
    \    \n    max_rolling_numbers[max_rolling_number_index] = max_rolling_number\n\
    \    \n    return max_rolling_numbers\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n    end\n\
    \    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[1:i], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        push!(rolling_max, maximum(rolling_max))\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = numbers[1]\n    for number in numbers[2:end]\n        if number\
    \ > maximum\n            maximum = number\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that generates a vector of rolling minimum element found until given\
    \ moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3,\
    \ 3, 4, 2]\n</text>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that generates a vector of rolling minimum element found until given moment\
    \ in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3,\
    \ 3, 3, 4, 4]\n    \"\"\"", "    rolling_max_vec = Vector{Int64}(undef, 0)\n \
    \   rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n        if\
    \ numbers[i] > rolling_max_vec[i-1]\n            rolling_max_vec[i] = numbers[i]\n\
    \        end\n    end\n    return rolling_max_vec\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max_array = zeros(Int, length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:end],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_vector = Vector{Int64}(undef, 0)\n    rolling_max_vector = rolling_max_vector\
    \ + numbers[end]\n    for i = end - 1 downto 1 do\n        rolling_max_vector\
    \ = rolling_max_vector + numbers[i]\n    end\n    return rolling_max_vector\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.3>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that generates a vector of\
    \ rolling minimum element found until given moment in the sequence.\n    >>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 2]\n    \"\"\"", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that generates a vector of rolling minimum element found until given\
    \ moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1,\
    \ 2, 3, 3, 3, 4, 2]\n    \"\"\"", "    \n    rolling_max_array = zeros(Int64,\
    \ length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[i-1:i+1])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<text>\nRolling mean function", "    \n    rolling_max = numbers[end]\n\
    \    for i = length(numbers):-1:1\n        if numbers[i] > rolling_max\n     \
    \       rolling_max = numbers[i]\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ a vector of rolling minimum element found until given moment in the sequence.\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n</text>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max = Vector{Int64}(undef, length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = Vector{Int64}(undef, 0)\n    for n in numbers\n        push!(rolling_max,\
    \ maximum(n))\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that generates a vector of rolling minimum element found until\
    \ given moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n\
    \    [1, 2, 3, 3, 3, 4, 2]\n    \"\"\"", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n    end\n    return\
    \ rolling_max_array\nend\n</cell>\n<text>\nThe function rolling_max is now ready\
    \ to be used.", "    rolling_max_vector = Vector{Int64}(undef, length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_vector[i] = maximum(numbers[i:i+1])\n\
    \    end\n    return rolling_max_vector\nend\n</cell>\n<code language=julia-1.4>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n</text>\n<code language=julia-1.5>", "    \n   \
    \ rolling_max_result = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       rolling_max_result = rolling_max_result .+ n\n    end\n    \n    return\
    \ rolling_max_result\nend", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = max(rolling_max_array[i-1], numbers[i])\n    end\n \
    \   return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_vec = Vector{Int64}(undef, length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_vec[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    return rolling_max_vec\nend", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    rolling_max = zeros(length(numbers))\n    \n\
    \    for i = 1:length(numbers)\n        rolling_max[i] = maximum(rolling_max[i\
    \ - 1], numbers[i])\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n</text>\n<code language=julia-1.5>", "    rolling_max_result\
    \ = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_result[i-1]\n            rolling_max_result[i]\
    \ = numbers[i]\n        else\n            rolling_max_result[i] = rolling_max_result[i-1]\n\
    \        end\n    end\n    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend", "    rolling_max = Vector{Int64}(undef, 0)\n  \
    \  rolling_max[1] = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max[i]\
    \ = maximum(rolling_max[i-1:end], numbers[i])\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    return rolling_max_array\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,arrays |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>", " \
    \   \n    rolling_max_array = []\n    \n    for number in numbers\n        rolling_max_array.append(number)\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    rolling_max = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that generates a vector of rolling minimum element found until given moment\
    \ in the sequence.\nHint: Use a for loop and a rolling minimum.", "    rolling_max_array\
    \ = zeros(Int64, length(numbers))\n    rolling_max_array[1] = numbers[1]\n   \
    \ for i = 2:length(numbers)\n        rolling_max_array[i] = max(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<text>\nRolling\
    \ minimum", "    rolling_max_idx = 1\n    rolling_max_value = numbers[1]\n   \
    \ rolling_max_idx = 1\n    for number in numbers[2:end]\n        if number > rolling_max_value\n\
    \            rolling_max_value = number\n            rolling_max_idx = rolling_max_idx\n\
    \        else\n            rolling_max_idx = rolling_max_idx + 1\n        end\n\
    \    end\n    return numbers[rolling_max_idx:end]\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <text>\nRolling minimum", "    \n    rolling_max = numbers[end]\n    for n in\
    \ numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n    \n \
    \   return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_vec = Vector{Int64}(undef, 0)\n    for n in numbers\n        rolling_max_vec[end]\
    \ = max(n, rolling_max_vec[end])\n    end\n    return rolling_max_vec\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_vec = Vector{Int64}(undef, 0)\n \
    \   rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n        if\
    \ numbers[i] > rolling_max_vec[i-1]\n            rolling_max_vec[i] = numbers[i]\n\
    \        else\n            rolling_max_vec[i] = rolling_max_vec[i-1]\n       \
    \ end\n    end\n    return rolling_max_vec\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:end],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<text>\nrolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])", "    rolling_max_idx = 1\n    rolling_max_value = numbers[1]\n\
    \    \n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_value\n\
    \            rolling_max_value = numbers[i]\n            rolling_max_idx = i\n\
    \        end\n    end\n    \n    return numbers[rolling_max_idx:end]\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max[i] = maximum(rolling_max[i-1:end],\
    \ numbers[i])\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local max = 0\n    local max_index = 0\n    local max_value = numbers[1]\n\
    \    \n    for i = 2:length(numbers)\n        if numbers[i] > max_value\n    \
    \        max = numbers[i]\n            max_index = i\n            max_value =\
    \ numbers[i]\n        else\n            if numbers[i] > max_value\n          \
    \      max_value = numbers[i]\n                max_index = i\n            end\n\
    \        end\n    end\n    \n    return numbers[max_index+1:end]\nend\n</cell>\n\
    <text>\nExercise 1\nWrite a function that takes a vector of integers and returns\
    \ a vector of rolling maximum element found until given moment in the sequence.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max_array\
    \ = zeros(Int64, length(numbers))\n    rolling_max_array[1] = numbers[1]\n   \
    \ for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, ", "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max\
    \ = rolling_max[end]\n    for n in numbers\n        if rolling_max == n\n    \
    \        rolling_max = rolling_max[end]\n        else\n            push!(rolling_max,\
    \ n)\n        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = Vector{Int64}(undef, 0)\n    for n in numbers\n        if rolling_max[1]\
    \ == 0\n            rolling_max[1] = n\n        else\n            if n > rolling_max[1]\n\
    \                rolling_max[1] = n\n            end\n        end\n    end\n \
    \   return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(Int, length(numbers))\n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[1:i], numbers[i:])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ maximum = numbers[1]\n    \n    for n in numbers[2:end]\n        if n > maximum\n\
    \            maximum = n\n        end\n    end\n    \n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max_vec = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n   \
    \     rolling_max_vec[i] = max(numbers[i], rolling_max_vec[i-1])\n    end\n  \
    \  return rolling_max_vec\nend\n</cell>\n<text>\nThe rolling_max function above\
    \ is very similar to the built-in max function, but we added a rolling_max function\
    \ which can take advantage of rolling window to speed up the computation.", " \
    \   rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<text>\nThe\
    \ rolling_max function above is very similar to the built-in max function, but\
    \ instead of returning the maximum element in the sequence, it returns the rolling\
    \ maximum element found until a given moment in the sequence.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(numbers[i:i+length(numbers)])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    rolling_max[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max[i-1]\n            rolling_max[i] = numbers[i]\n\
    \        else\n            rolling_max[i] = rolling_max[i-1]\n        end\n  \
    \  end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  rolling_max_array = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[1:i-1]) + numbers[i]\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n  \
    \  for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n     \
    \       rolling_max[i] = numbers[i]\n        else\n            rolling_max[i]\
    \ = rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2,\
    \ 3, 4, 2])\n    [1, 2, 3, 1, 2, 3, 4]\n    \"\"\"", "    rolling_max_vector =\
    \ Vector{Int64}(undef, 0)\n    rolling_max_vector[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        if numbers[i] > rolling_max_vector[i-1]\n       \
    \     rolling_max_vector = rolling_max_vector[1:i-1]\n            rolling_max_vector[i]\
    \ = numbers[i]\n        end\n    end\n    return rolling_max_vector\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end", "    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_vector = push!(rolling_max_vector, maximum(rolling_max_vector))\n\
    \    end\n    \n    return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max = zeros(length(numbers))\n    \n\
    \    for i = 1:length(numbers)\n        rolling_max[i] = maximum(rolling_max[i\
    \ - 1], numbers[i])\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max = Vector{Int64}(undef, 0)\n   \
    \ \n    for n in numbers\n        push!(rolling_max, maximum(rolling_max))\n \
    \       push!(rolling_max, n)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_array = zeros(Int64, length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<text>\nrolling_max_vector",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n    end\n\
    \    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.4>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:end],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    \n    for i\
    \ = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n    end\n\
    \    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    local max_so_far = numbers[1]\n\
    \    local max_so_far_index = 1\n    local max_so_far_prev = numbers[1]\n    \n\
    \    for i = 2:length(numbers)\n        if numbers[i] > max_so_far\n         \
    \   max_so_far = numbers[i]\n            max_so_far_index = i\n            max_so_far_prev\
    \ = numbers[i]\n        else\n            max_so_far_prev = max_so_far\n     \
    \       max_so_far = numbers[i]\n        end\n    end\n    \n    local max_so_far_index\n\
    \    local max_so_far_prev\n    \n    return max_so_far\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ max(numbers[i-1], numbers[i])\n    end\n    return rolling_max_array\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  rolling_max\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the elements.\n>>>\
    \ sum([x^2 for x in [1, 2, 3, 4])\n25\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n\
    210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10,\
    \ 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2\
    \ for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n\
    210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10,\
    \ 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2\
    \ for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n\
    210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10,\
    \ 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2\
    \ for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n\
    210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10,\
    \ 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2\
    \ for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n\
    210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10,\
    \ 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2\
    \ for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n\
    210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10,\
    \ 20, 30, 40]])\n210\n>>> sum([x^2 for x in [10, 20, 30, 40]])\n210\n>>> sum([x^2\
    \ for x in [", "    rolling_max_array = zeros(Int64, length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ maximum(rolling_max_array[i-1:i+1], numbers[i])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    rolling_max = zeros(length(numbers))\n    \n\
    \    for i = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_array = zeros(Int64, length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_vector = Vector{Int64}(undef, 0)\n  \
    \  for n in numbers\n        rolling_max_vector = rolling_max_vector + [rolling_max(n)]\n\
    \    end\n    return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximums = Vector{Int64}()\n    maximums.push(numbers[1])\n    for i\
    \ in 2:length(numbers)\n        if maximums[i-1] > numbers[i]\n            maximums.push(numbers[i])\n\
    \        else\n            maximums.push(maximums[i-1])\n        end\n    end\n\
    \    return maximums\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[i-1], numbers[i])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_idx = 1\n    rolling_max_value = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_value\n  \
    \          rolling_max_value = numbers[i]\n            rolling_max_idx = i\n \
    \       end\n    end\n    numbers[rolling_max_idx+1]\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the numbers.\n>>> sum_square([1, 2, 3, 2, 3, 4, 2])\n25\n>>> sum_square([-1,\
    \ -2, -3, -4, -5, -6, -7])\n0\n>>> sum_square([-10, -20, -30, -40, -50, -60, -70])\n\
    0\n>>> sum_square([-10, -20, -30, -40, -50, -60, -70, -80])\n0\n>>> sum_square([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90])\n0\n>>> sum_square([-10, -20, -30,\
    \ -40, -50, -60, -70, -80, -90, -100])\n0\n>>> sum_square([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90, -100, -101])\n0\n>>> sum_square([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90, -100, -101, -102])\n0\n>>> sum_square([-10, -20, -30,\
    \ -40, -50, -60, -70, -80, -90, -100, -101, -102, -103])\n0\n>>> sum_square([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104])\n0\n\
    >>> sum_square([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102,\
    \ -103, -104, -105])\n0\n>>> sum_square([-10, -20, -30, -40, -50, -60, -70, -80,\
    \ -90, -100, -101, -102, -103, -104, -105, -106])\n0\n>>> sum_square([-10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105, -106,\
    \ -107])\n0\n>>> sum_square([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100,\
    \ -101, -102, -103, -104, -105, -106, -107, -108])\n0\n>>> sum_square([-10, -20,\
    \ -30, -40, ", "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ maximum(rolling_max_array[i-1:i+1], numbers[i:i+1])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that generates a vector of rolling minimum element found until given\
    \ moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3,\
    \ 3, 4, 4]\n</text>\n<code language=julia-1.5>", "    \n    local max = 0\n  \
    \  local max_index = 0\n    local max_value = numbers[1]\n    \n    for i = 2:length(numbers)\n\
    \        if numbers[i] > max_value\n            max = numbers[i]\n           \
    \ max_index = i\n            max_value = numbers[i]\n        else\n          \
    \  max = max > numbers[i] ? max : numbers[i]\n        end\n    end\n    \n   \
    \ return numbers[max_index+1:end]\nend\n</cell>\n<text>\nrolling_max", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for i = end - 1 downto 1 \n        if\
    \ numbers[i] > rolling_max \n            rolling_max = numbers[i]\n        end\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\n\
    Rolling Mean\nThe rolling mean of a vector is the arithmetic mean of the vector\
    \ elements over a given number of periods.", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_vector\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_vector[1] = numbers[1]\n    \n  \
    \  for i = 2:length(numbers)\n        rolling_max_vector[i] = max(numbers[i-1],\
    \ rolling_max_vector[i-1])\n    end\n    \n    return rolling_max_vector\nend\n\
    </cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_idx = 1\n    rolling_max_val = numbers[1]\n\
    \    rolling_max_idx = 0\n    for n in numbers[2:end]\n        if n > rolling_max_val\n\
    \            rolling_max_val = n\n            rolling_max_idx = rolling_max_idx\
    \ + 1\n        end\n    end\n    return numbers[rolling_max_idx:end]\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_result = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_result[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_result[1]\n            rolling_max_result[1]\
    \ = numbers[i]\n        else\n            rolling_max_result[i] = rolling_max_result[i-1]\n\
    \        end\n    end\n    rolling_max_result\nend\n</cell>\n<code language=julia-1.3>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    local rolling_max_array = []\n\
    \    local rolling_max_index = 0\n    local rolling_max_value = numbers[1]\n \
    \   local rolling_max_index = numbers[1]\n    \n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_value then\n            rolling_max_value\
    \ = numbers[i]\n            rolling_max_index = i\n        end\n    end\n    \n\
    \    rolling_max_array[rolling_max_index] = rolling_max_value\n    \n    return\
    \ rolling_max_array\nend\n</cell>\n<code language=julia-1.4>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    local max = 0\n    local max_index = 0\n    local max_value = 0\n   \
    \ local max_count = 0\n    local max_index = 0\n    local max_value = 0\n    local\
    \ max_count = 0\n    local max_index = 0\n    local max_value = 0\n    local max_count\
    \ = 0\n    local max_index = 0\n    local max_value = 0\n    local max_count =\
    \ 0\n    local max_index = 0\n    local max_value = 0\n    local max_count = 0\n\
    \    local max_index = 0\n    local max_value = 0\n    local max_count = 0\n \
    \   local max_index = 0\n    local max_value = 0\n    local max_count = 0\n  \
    \  local max_index = 0\n    local max_value = 0\n    local max_count = 0\n   \
    \ local max_index = 0\n    local max_value = 0\n    local max_count = 0\n    local\
    \ max_index = 0\n    local max_value = 0\n    local max_count = 0\n    local max_index\
    \ = 0\n    local max_value = 0\n    local max_count = 0\n    local max_index =\
    \ 0\n    local max_value = 0\n    local max_count = 0\n    local max_index = 0\n\
    \    local max_value = 0\n    local max_count = 0\n    local max_index = 0\n \
    \   local max_value = 0\n    local max_count = 0\n    local max_index = 0\n  \
    \  local max_value = 0\n    local max_count = 0\n    local max_index = 0\n   \
    \ local max_value = 0\n    local max_count = 0\n    local max_index = 0\n    local\
    \ max_value = 0\n    local max_count = 0\n    local max_index = 0\n    local max_value\
    \ = 0\n    local max_count = 0\n    local max_index = 0\n    local max_value =\
    \ 0\n    local max_count = 0\n    local max_index = 0\n    local max_value = 0\n\
    \    local max_count = 0\n    local max_index = 0\n    local max_value = 0\n \
    \   local max_count = 0\n    local max_index = 0\n    local max_value = 0\n  \
    \  local max_count = 0\n    local max_index = 0\n    local max_value = 0\n   \
    \ local max_count = 0\n    local max_index = 0\n    local max_value = 0\n    local\
    \ max_count = 0\n    local max_index = 0\n    local max_value = 0\n    local max_count\
    \ = 0\n    local max_index = 0\n    local max_value = 0\n    local max_count =\
    \ 0\n    local max_index = 0\n    local max_value = 0\n    local max_count = 0\n\
    \    local max_index = 0\n    local max_value = 0\n    local max_count = 0\n \
    \   local max_index = 0\n    local max_value = 0\n    local max_count = 0\n  \
    \  local max_index = 0\n    local max_value = 0\n", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:end], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    rolling_max_vec = Vector{Int64}(undef, length(numbers))\n\
    \    rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_vec[i]\
    \ = maximum(rolling_max_vec[i-1:i+1], numbers[i:i+1])\n    end\n    return rolling_max_vec\n\
    end\n</cell>\n<text>\nThe rolling_max function above is very similar to maximum.\
    \ Let's compare the two to see how they differ.", "    rolling_max_array = zeros(Int64,\
    \ length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend", "    \n    rolling_max\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max[i]\
    \ = maximum(numbers[i:i+length(numbers)-1])\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<text>\nExercise 3\nWrite a function that generates a vector of\
    \ rolling minimum element found until given moment in the sequence.\n    >>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 2]\n    \"\"\"", "    rolling_max\
    \ = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n    \
    \        rolling_max = n\n        end\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.3>", "    \n   \
    \ rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that generates a vector of rolling minimum element found until given\
    \ moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3,\
    \ 3, 4, 4]\n</text>\n<code language=julia-1.5>", "    rolling_max_idx = 1\n  \
    \  rolling_max_value = numbers[1]\n    \n    for i = 2:length(numbers)\n     \
    \   if numbers[i] > rolling_max_value\n            rolling_max_value = numbers[i]\n\
    \            rolling_max_idx = i\n        end\n    end\n    \n    return numbers[rolling_max_idx:end]\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that generates a vector of rolling minimum element found until given\
    \ moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3,\
    \ 3, 4, 4]\n</text>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert\
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]) == 4\n@assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == 4\n@assert rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]) == 4\n", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:end], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_array\nend", "    rolling_max_vec = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n   \
    \     rolling_max_vec[i] = max(numbers[i], rolling_max_vec[i-1])\n    end\n  \
    \  return rolling_max_vec\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the vector of rolling minimum element found\
    \ until given moment in the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n\
    [1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3,\
    \ 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3,\
    \ 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3,\
    \ 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3,\
    \ 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3,\
    \ 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4,\
    \ 2])\n[1, 2, 3, 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3,\
    \ 3, 3, 4, 4]\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\
    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<text>\nThe rolling_max function\
    \ above is very similar to rolling_max function we saw earlier. Here we used a\
    \ for loop to iterate over the vector and find the rolling maximum element in\
    \ the vector. Here we also used a vector to store the rolling maximum element\
    \ found so far.", "    rolling_max_result = numbers[end]\n    for i = length(numbers)-1\
    \ downto 1 do\n        if numbers[i] > rolling_max_result then\n            rolling_max_result\
    \ = numbers[i]\n        end\n    end\n    return rolling_max_result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max_array = zeros(Int64, length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates a vector of rolling minimum element found until\
    \ given moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n\
    \    [1, 2, 2, 2, 2, 2]\n    \"\"\"", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_vector = Vector{Int64}(undef, 0)\n  \
    \  rolling_max_vector = rolling_max_vector + numbers\n    rolling_max_vector =\
    \ rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_vector = rolling_max_vector + rolling_max_vector\n\
    \    rolling_max_vector = rolling_max_vector + rolling_max_vector\n    rolling_max_vector\
    \ = rolling_max_vector + rolling_max_vector\n    rolling_max_vector = rolling_max_vector\
    \ + rolling_max_vector\n    rolling_max_", "    rolling_max_array = zeros(Int,\
    \ length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i:end])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = []\n    \n    for number in numbers\n        rolling_max_array.append(number)\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       push!(rolling_max, maximum(rolling_max))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<text>\nThe function rolling_max is now ready to be used.", "  \
    \  rolling_max_array = zeros(Int64, length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ maximum(rolling_max_array[i-1:i+1], numbers[i])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n\
    \        if n > maximum\n            maximum = n\n        end\n    end\n    \n\
    \    return maximum\nend\n</cell>\n<text>\nThe rolling_max function above is equivalent\
    \ to the following Python code:", "    rolling_max = numbers[end]\n    for n in\
    \ numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max =\
    \ numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n      \
    \      rolling_max = n\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    rolling_max_array = zeros(Int, length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend", "    rolling_max_vec = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n   \
    \     if numbers[i] > rolling_max_vec[i-1]\n            rolling_max_vec[i] = numbers[i]\n\
    \        else\n            rolling_max_vec[i] = rolling_max_vec[i-1]\n       \
    \ end\n    end\n    return rolling_max_vec\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    \n    for i\
    \ = 1:length(numbers)\n        rolling_max[i] = maximum(numbers[i:i+1])\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n   \
    \ for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n      \
    \      rolling_max[i] = numbers[i]\n        else\n            rolling_max[i] =\
    \ rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_vec = Vector{Int64}(undef, 0)\n \
    \   rolling_max_vec[1] = numbers[1]\n    for i = 2:length(numbers)\n        if\
    \ numbers[i] > rolling_max_vec[i-1]\n            rolling_max_vec[i] = numbers[i]\n\
    \        else\n            rolling_max_vec[i] = rolling_max_vec[i-1]\n       \
    \ end\n    end\n    return rolling_max_vec\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n    \n    for number in\
    \ numbers\n        rolling_max_vector = push!(rolling_max_vector, maximum(rolling_max_vector))\n\
    \    end\n    \n    return rolling_max_vector\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(Int64, length(numbers))\n    \n    for i =\
    \ 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       push!(rolling_max, maximum(rolling_max))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2])\n</cell>\n<code language=julia-1.5", "    rolling_max_array = zeros(length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    \n    return rolling_max\nend", "    \n    rolling_max = numbers[end]\n \
    \   for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nrolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nThe rolling_max function above is very\
    \ similar to the built-in function max.", "    rolling_max_array = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, length(numbers))\n    \n    for i\
    \ = 1:length(numbers)\n        rolling_max[i] = maximum(rolling_max[i - 1], numbers[i])\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    @test rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\n</cell>\n<text>\n\
    Exercise 3.3\nWrite a function that generates a vector of rolling minimum element\
    \ found until given moment in the sequence.\n    >>> rolling_min([1, 2, 3, 2,\
    \ 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "    rolling_max_array =\
    \ zeros(Int64, length(numbers))\n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[i-1:i+1])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
