language: jl
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Weights\nTo calculate Mean Absolute Deviation with weights, we\
    \ first need to calculate the weights. We do this by calculating the mean of each\
    \ column and then dividing by the number of elements in the column. Finally, we\
    \ multiply this by the absolute difference between the elements and the mean.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j106nmp.jl:16\nin expression starting at\
    \ /tmp/tmp5j106nmp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    The mean absolute deviation function above is called mean absolute deviation because\
    \ it takes the absolute value of the difference between each element and the mean.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz883cwht.jl:16\nin expression starting at\
    \ /tmp/tmpz883cwht.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far from mean a dataset is. It can be used for outlier\
    \ detection.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnir8s69.jl:16\nin expression starting at\
    \ /tmp/tmpgnir8s69.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a measure of how\
    \ far each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0mi6jzp.jl:16\nin expression starting at\
    \ /tmp/tmpn0mi6jzp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvt5vxrr4.jl:16\nin expression starting at\
    \ /tmp/tmpvt5vxrr4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of how\
    \ far a dataset is from its mean.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhjtruhs.jl:16\nin expression starting at\
    \ /tmp/tmplhjtruhs.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbog9jziz.jl:16\nin expression starting at\
    \ /tmp/tmpbog9jziz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean of the dataset. \nIt is\
    \ a good measure of outliers and is often used in machine learning to determine\
    \ how far a point is from the mean.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkuuoedi.jl:16\nin expression starting at\
    \ /tmp/tmpbkuuoedi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very simple, yet it gives us an idea of how we can\
    \ use Julia to calculate statistical metrics. We will now implement a function\
    \ that calculates the mean absolute deviation for a vector of numbers:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpny9cniw1.jl:16\nin expression starting at\
    \ /tmp/tmpny9cniw1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaa35ytq.jl:16\nin expression starting at\
    \ /tmp/tmpaaa35ytq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2kkhju9.jl:16\nin expression starting at\
    \ /tmp/tmpi2kkhju9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpat1ysz_r.jl:16\nin expression starting at\
    \ /tmp/tmpat1ysz_r.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5wrmxetb.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp5wrmxetb.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp5wrmxetb.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5wrmxetb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wrmxetb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5wrmxetb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp5wrmxetb.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5wrmxetb.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wrmxetb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5wrmxetb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp5wrmxetb.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5wrmxetb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wrmxetb.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure for comparing\
    \ datasets because it is an average of the absolute difference between each element\
    \ and the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbs8qb4ic.jl:16\nin expression starting at\
    \ /tmp/tmpbs8qb4ic.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuutvj9s.jl:16\nin expression starting at\
    \ /tmp/tmpnuutvj9s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxt98onb_.jl:16\nin expression starting at\
    \ /tmp/tmpxt98onb_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nNow let's implement the Mean Absolute Deviation function\
    \ using Julia's built-in functions. We will use the following inputs:\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhxcucbi.jl:16\nin expression starting at\
    \ /tmp/tmpkhxcucbi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute deviation function above\
    \ is quite simple, but we can make it more efficient by calculating the mean only\
    \ once and using it for all the numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5j8nqzc.jl:16\nin expression starting at\
    \ /tmp/tmpv5j8nqzc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far away each data point is from the mean.\nThe\
    \ higher the MAD, the more spread out the data points are.\nThe MAD is calculated\
    \ using the mean of the absolute value of the deviations from the mean.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bp_c4xu.jl:16\nin expression starting at\
    \ /tmp/tmp1bp_c4xu.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8ublfs8.jl:16\nin expression starting at\
    \ /tmp/tmpp8ublfs8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation Prior to each data point. \nThe Mean Absolute Deviation\
    \ Prior to each data point is calculated using the following formula:\nMAD_Prior\
    \ = MAD - |x - x_mean|\nWhere MAD is the Mean Absolute Deviation calculated for\
    \ the entire dataset, and |x - x_mean| is the absolute difference between the\
    \ current data point and the mean of the entire dataset.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4xl10qq.jl:16\nin expression starting at\
    \ /tmp/tmpe4xl10qq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a measure of how\
    \ far each point is from the mean.\nIt is a good measure of outliers and is often\
    \ used in statistical applications.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5d7q92vo.jl:16\nin expression starting at\
    \ /tmp/tmp5d7q92vo.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is called mean_absolute_deviation. Now let's test the\
    \ function by comparing it to our previous mean function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptedm2s86.jl:16\nin expression starting at\
    \ /tmp/tmptedm2s86.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwd76od_.jl:17\nin expression starting at\
    \ /tmp/tmpnwd76od_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\n$$\n\\text{MAD} = \\frac{\\sum{i=1}^{n}(x_i\
    \ - \\bar{x})}{n}\n$$\nwhere $\\bar{x}$ is the mean of the given set of numbers:\n\
    $$\n\\bar{x} = \\frac{1}{n}\\sum{i=1}^{n}x_i\n$$\nThe mean absolute deviation\
    \ function can be implemented using the Mean Absolute Deviation function defined\
    \ above:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbgc38p7.jl:16\nin expression starting at\
    \ /tmp/tmpbbgc38p7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a vector of numbers\
    \ that is sorted in ascending order:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4kyftwb.jl:16\nin expression starting at\
    \ /tmp/tmpq4kyftwb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability in data sets. It is calculated as the average of\
    \ the absolute difference between each element and a centerpoint (mean in this\
    \ case).\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_b8nvpiv.jl:16\nin expression starting at\
    \ /tmp/tmp_b8nvpiv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be interpreted as the average distance between\
    \ each element and the\ncenterpoint (mean).\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckrklsbl.jl:16\nin expression starting at\
    \ /tmp/tmpckrklsbl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far away a point is from the mean.\nIt is a measure of how\
    \ far away a point is from the mean of the dataset.\nIt is a good measure of how\
    \ far a point is from the mean of the dataset.\nIt is a good measure of how far\
    \ a point is from the mean of the dataset.\nIt is a good measure of how far a\
    \ point is from the mean of the dataset.\nIt is a good measure of how far a point\
    \ is from the mean of the dataset.\nIt is a good measure of how far a point is\
    \ from the mean of the dataset.\nIt is a good measure of how far a point is from\
    \ the mean of the dataset.\nIt is a good measure of how far a point is from the\
    \ mean of the dataset.\nIt is a good measure of how far a point is from the mean\
    \ of the dataset.\nIt is a good measure of how far a point is from the mean of\
    \ the dataset.\nIt is a good measure of how far a point is from the mean of the\
    \ dataset.\nIt is a good measure of how far a point is from the mean of the dataset.\n\
    It is a good measure of how far a point is from the mean of the dataset.\nIt is\
    \ a good measure of how far a point is from the mean of the dataset.\nIt is a\
    \ good measure of how far a point is from the mean of the dataset.\nIt is a good\
    \ measure of how far a point is from the mean of the dataset.\nIt is a good measure\
    \ of how far a point is from the mean of the dataset.\nIt is a good measure of\
    \ how far a point is from the mean of the dataset.\nIt is a good measure of how\
    \ far a point is from the mean of the dataset.\nIt is a good measure of how far\
    \ a point is from the mean of the dataset.\nIt is a good measure of how far a\
    \ point is from the mean of the dataset.\nIt is a good measure of how far a point\
    \ is from the mean of the dataset.\nIt is a good measure of how far a point is\
    \ from the mean of the dataset.\nIt is a good measure of how far a point is from\
    \ the mean of the dataset.\nIt is a good measure of how far a point is from the\
    \ mean of the dataset.\nIt is a good measure of how far a point is from the mean\
    \ of the dataset.\nIt is a good measure of how far a point is from the mean of\
    \ the dataset.\nIt is a good measure of how far a point is from the mean of the\
    \ dataset.\nIt is a good measure of how far a point is from the mean of the dataset.\n\
    It is a good measure of how far a point is from the mean of the dataset.\nIt is\
    \ a good measure of how far a point is \nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybah55vc.jl:16\nin expression starting at\
    \ /tmp/tmpybah55vc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe function above\
    \ is called mean_absolute_deviation. Let's try it out on some random numbers:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqr7ruvs.jl:16\nin expression starting at\
    \ /tmp/tmpiqr7ruvs.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnv5lwzxp.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpnv5lwzxp.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpnv5lwzxp.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnv5lwzxp.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnv5lwzxp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnv5lwzxp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpnv5lwzxp.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnv5lwzxp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnv5lwzxp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnv5lwzxp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpnv5lwzxp.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnv5lwzxp.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnv5lwzxp.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a data point is. It is a good measure for\
    \ continuous data, and can be used as a measure of how far from a mean a data\
    \ point is. It is also a good measure for categorical data, where it can give\
    \ a sense of how far from a mean a data point is.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mpshe42.jl:16\nin expression starting at\
    \ /tmp/tmp6mpshe42.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfm2kmt9b.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm2kmt9b.jl:1\n\
    in expression starting at /tmp/tmpfm2kmt9b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure to\
    \ compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\n\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmoggdlp.jl:16\nin expression starting at\
    \ /tmp/tmprmoggdlp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ n * n\n    \n    return sqrt(sum_of_squares / length(numbers))\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zel7twc.jl:16\nin expression starting at\
    \ /tmp/tmp3zel7twc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation Prior to each data point.\nThe Mean Absolute Deviation\
    \ Prior to each data point is calculated as the mean of the absolute difference\
    \ between each element and the mean of the entire dataset.\nThe Mean Absolute\
    \ Deviation Prior to each data point is calculated as the mean of the absolute\
    \ difference between each element and the mean of the entire dataset.\nThe Mean\
    \ Absolute Deviation Prior to each data point is calculated as the mean of the\
    \ absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to \nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbo79jjst.jl:16\nin expression starting at\
    \ /tmp/tmpbo79jjst.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is calculated as the average\
    \ of the absolute difference between each element and the mean of the dataset:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejjt8to4.jl:16\nin expression starting at\
    \ /tmp/tmpejjt8to4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3w4_62a.jl:16\nin expression starting at\
    \ /tmp/tmpa3w4_62a.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's use our new function mean_absolute_deviation to calculate\
    \ the mean absolute deviation for a set of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj_uxoj7.jl:16\nin expression starting at\
    \ /tmp/tmphj_uxoj7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with weights\nThe mean absolute deviation function above is great\
    \ for calculating mean absolute deviation\nfor a single input number. However,\
    \ it can be very inaccurate for calculating mean absolute deviation\nfor multiple\
    \ input numbers. To overcome this problem, we can use weights to calculate mean\
    \ absolute deviation\nfor multiple input numbers. Weights are a vector of numbers\
    \ that sum to one. Weights are used to\nweight each input number differently in\
    \ the calculation of mean absolute deviation. For example, if we have\nthree input\
    \ numbers and one weight vector [1.0, 0.5, 1.0], then the mean absolute deviation\
    \ will be\ncalculated as follows:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz0trit1.jl:16\nin expression starting at\
    \ /tmp/tmplz0trit1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfan9lox6.jl:16\nin expression starting at\
    \ /tmp/tmpfan9lox6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares\
    \ += pow(x-mean(numbers), 2)\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Exercise\nWrite a function that\
    \ calculates the mean absolute deviation of a given vector of numbers. \nThe function\
    \ should take one parameter - a vector of numbers - and return the mean absolute\
    \ deviation of this vector.\nThe function should return the mean absolute deviation\
    \ as Float64.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggrgrfhc.jl:16\nin expression starting at\
    \ /tmp/tmpggrgrfhc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe function above calculates the mean absolute deviation of a set\
    \ of numbers. \nThe mean absolute deviation is the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nThe function above is called mean_absolute_deviation. \nIt takes\
    \ a vector of numbers as an argument and returns the mean absolute deviation of\
    \ this vector.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawyafz0k.jl:16\nin expression starting at\
    \ /tmp/tmpawyafz0k.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers.\
    \ We will use the same set of numbers as before, but this time we will use our\
    \ new function mean_absolute_deviation_2 to calculate the mean absolute deviation.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjvxnmwp.jl:16\nin expression starting at\
    \ /tmp/tmptjvxnmwp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ec6dqtc.jl:16\nin expression starting at\
    \ /tmp/tmp0ec6dqtc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Weights\nThe mean absolute deviation function above is great\
    \ for calculating mean absolute deviation\nfor a single number. However, if we\
    \ want to calculate mean absolute deviation for a vector of\nnumbers, we must\
    \ weight each element by the corresponding weight. For example, if we have\na\
    \ vector of weights:\n    weights = [1.0, 2.0, 3.0, 4.0]\nthen we must weight\
    \ each element by the corresponding weight:\n    MAD = average | x - x_mean |\
    \ \n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n \
    \   weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0,\
    \ 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n\
    \    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0,\
    \ 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n\
    \    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0,\
    \ 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n\
    \    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgh1uszt.jl:16\nin expression starting at\
    \ /tmp/tmpxgh1uszt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj1c2pa.jl:16\nin expression starting at\
    \ /tmp/tmp5pj1c2pa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow(number - mean(numbers), 2)\n    return math.sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend\n</cell>\n<text>\nMean Absolute Deviation with StatsModels\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprq4j9n3y.jl:15\nin expression starting at\
    \ /tmp/tmprq4j9n3y.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuutvj9s.jl:16\nin expression starting at\
    \ /tmp/tmpnuutvj9s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe function above\
    \ calculates the mean absolute deviation of a given set of numbers. Let's try\
    \ it out on a few examples:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju7kux4f.jl:16\nin expression starting at\
    \ /tmp/tmpju7kux4f.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a set of numbers. \nThe mean absolute deviation is calculated as:\n\
    MAD = average | x - x_mean |\nwhere x is the set of numbers, and x_mean is the\
    \ mean of the set of numbers.\nThe mean absolute deviation function can be used\
    \ in a variety of ways. Here are some examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4vxb66f.jl:16\nin expression starting at\
    \ /tmp/tmpw4vxb66f.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the second part of the Mean Absolute Deviation\
    \ algorithm. \nThis algorithm will calculate the MAD between each element and\
    \ each element in the dataset. \nThe MAD will be calculated for each element in\
    \ the dataset and will be averaged over all elements in the dataset.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g9zclpd.jl:16\nin expression starting at\
    \ /tmp/tmp5g9zclpd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1b_jezf.jl:16\nin expression starting at\
    \ /tmp/tmpi1b_jezf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykoofnmc.jl:16\nin expression starting at\
    \ /tmp/tmpykoofnmc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using the\
    \ Julia language (which has many more capabilities than this).\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87ctp91d.jl:16\nin expression starting at\
    \ /tmp/tmp87ctp91d.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2q82bv1.jl:16\nin expression starting at\
    \ /tmp/tmpo2q82bv1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers, as points further from the mean are likely to be outliers.\nThe mean\
    \ is calculated using the mean of each column in the dataset.\nThe standard deviation\
    \ is calculated using the standard deviation of each column in the dataset.\n\
    The mean absolute deviation is calculated using the mean absolute deviation of\
    \ each column in the dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdq0afu3.jl:16\nin expression starting at\
    \ /tmp/tmphdq0afu3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow((number - mean(numbers)), 2)\n    end\n    return math.sqrt(sum_of_squared_deviations)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a good measure of how far\
    \ each point is from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggw9vems.jl:16\nin expression starting at\
    \ /tmp/tmpggw9vems.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation is a good measure of how far away a point is from the mean.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxx09hbc.jl:16\nin expression starting at\
    \ /tmp/tmpzxx09hbc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement Mean Absolute Deviation using Julia code. We'll\
    \ start by defining a function which calculates the mean of a vector:\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp36qdm9.jl:16\nin expression starting at\
    \ /tmp/tmpnp36qdm9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfan9lox6.jl:16\nin expression starting at\
    \ /tmp/tmpfan9lox6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe mean absolute deviation function above is very similar to the\
    \ mean function,\nexcept that it takes the absolute value of the deviation before\
    \ taking the mean.\nThis makes the function more robust to outliers, since it\
    \ can handle negative numbers\nand zeros better.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jyaocan.jl:16\nin expression starting at\
    \ /tmp/tmp8jyaocan.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers. \nThe mean absolute deviation is the average\
    \ absolute difference between each element and a centerpoint (mean in this case):\n\
    MAD = average | x - x_mean |\nThe mean absolute deviation function can be used\
    \ in a variety of ways. \nFor example, we can calculate the mean absolute deviation\
    \ of a set of numbers by passing a vector of numbers to the function:\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzteiou8h.jl:16\nin expression starting at\
    \ /tmp/tmpzteiou8h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia\
    \ code. We'll start by defining a function which calculates the mean of a given\
    \ vector of numbers:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzutph5gp.jl:16\nin expression starting at\
    \ /tmp/tmpzutph5gp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far from mean the data is deviating from its mean.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2bernkg.jl:16\nin expression starting at\
    \ /tmp/tmps2bernkg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Exercise: Write a function that calculates the median absolute deviation of a\
    \ given vector of input numbers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl92p5na4.jl:17\nin expression starting at\
    \ /tmp/tmpl92p5na4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model performs. In our case, we want\
    \ to compare the performance of our model with the baseline model that always\
    \ predicts the mean of the dataset.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn075ow7e.jl:16\nin expression starting at\
    \ /tmp/tmpn075ow7e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in our dataset. Let's try it out on\
    \ our dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpxs5tm8.jl:16\nin expression starting at\
    \ /tmp/tmpgpxs5tm8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far each point is from the mean.\nIt is a good\
    \ measure of outliers and is often used in statistical applications.\nIt is a\
    \ good measure of how far each point is from the mean.\nIt is a good measure of\
    \ how far each point is from the mean.\nIt is a good measure of how far each point\
    \ is from the mean.\nIt is a good measure of how far each point is from the mean.\n\
    It is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6qvczx9.jl:16\nin expression starting at\
    \ /tmp/tmpy6qvczx9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance. \nIt measures the average\
    \ distance between each point and the mean of the dataset. \nIt is a good way\
    \ to evaluate a model's performance when you have an unbiased dataset. \nIt is\
    \ a good metric to evaluate a model's performance when you have an unbiased dataset.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkczwikq7.jl:16\nin expression starting at\
    \ /tmp/tmpkczwikq7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a sample deviates from the mean.\nThe higher the value,\
    \ the more deviation from the mean.\nThe mean is calculated using the mean of\
    \ the dataset.\nThe standard deviation is a measure of how spread out a distribution\
    \ of values is.\nThe lower the value, the more spread out the distribution is.\n\
    The standard deviation is the square root of the mean of the squared deviations.\n\
    The mean of the dataset is calculated using the mean of the dataset.\nThe standard\
    \ deviation is a measure of how spread out a distribution of values is.\nThe lower\
    \ the value, the more spread out the distribution is.\nThe standard deviation\
    \ is the square root of the mean of the squared deviations.\nThe mean of the dataset\
    \ is calculated using the mean of the dataset.\nThe standard deviation is a measure\
    \ of how spread out a distribution of values is.\nThe lower the value, the more\
    \ spread out the distribution is.\nThe standard deviation is the square root of\
    \ the mean of the squared deviations.\nThe mean of the dataset is calculated using\
    \ the mean of the dataset.\nThe standard deviation is a measure of how spread\
    \ out a distribution of values is.\nThe lower the value, the more spread out the\
    \ distribution is.\nThe standard deviation is the square root of the mean of the\
    \ squared deviations.\nThe mean of the dataset is calculated using the mean of\
    \ the dataset.\nThe standard deviation is a measure of how spread out a distribution\
    \ of values is.\nThe lower the value, the more spread out the distribution is.\n\
    The standard deviation is the square root of the mean of the squared deviations.\n\
    The mean of the dataset is calculated using the mean of the dataset.\nThe standard\
    \ deviation is a measure of how spread out a distribution of values is.\nThe lower\
    \ the value, the more spread out the distribution is.\nThe standard deviation\
    \ is the square root of the mean of the squared deviations.\nThe mean of the dataset\
    \ is calculated using the mean of the dataset.\nThe standard deviation is a measure\
    \ of how spread out a distribution of values is.\nThe lower the value, the more\
    \ spread out the distribution is.\nThe standard deviation is the square root of\
    \ the mean of the squared deviations.\nThe mean of the dataset is calculated using\
    \ the mean of the dataset.\nThe standard deviation is a measure of how spread\
    \ out a distribution of values is.\nThe lower the value, the more spread out the\
    \ distribution is.\nThe standard deviation is the square root of the mean of the\
    \ squared deviations.\nThe mean of the dataset is calculated using the mean of\
    \ the dataset.\nThe standard deviation is a measure of how spread out a distribution\
    \ of values is.\nThe \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5quqssbn.jl:16\nin expression starting at\
    \ /tmp/tmp5quqssbn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nThe Mean Absolute Deviation Error is defined as the average\
    \ absolute difference between each\nelement and the mean of the dataset:\nMDE\
    \ = average | x - x_mean |\nwhere x is the current element and x_mean is the mean\
    \ of the dataset:\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\n\
    MDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x\
    \ - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE\
    \ = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x -\
    \ x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE =\
    \ average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean\
    \ |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average\
    \ | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\n\
    MDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x\
    \ - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE\
    \ = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x -\
    \ x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE =\
    \ average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean\
    \ |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average\
    \ | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\n\
    MDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppuof0nxr.jl:16\nin expression starting at\
    \ /tmp/tmppuof0nxr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_ombdrbo.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_ombdrbo.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ombdrbo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ombdrbo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ mean of the absolute differences between each element and the mean of the dataset:\n\
    MAD = average | x - x_mean |\nThis can be calculated using the function mean_absolute_deviation()\
    \ defined above.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1blz4z_.jl:16\nin expression starting at\
    \ /tmp/tmpz1blz4z_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj1c2pa.jl:16\nin expression starting at\
    \ /tmp/tmp5pj1c2pa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation squared. \nThis can be calculated using the following\
    \ formula:\nMAD_SQ = average | x - x_mean | ^ 2\nThe function below calculates\
    \ this for us:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpan8v59bx.jl:16\nin expression starting at\
    \ /tmp/tmpan8v59bx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe mean absolute deviation function above is quite simple, but we\
    \ can make it more efficient by calculating the mean of the numbers before we\
    \ begin to calculate the deviations. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. To do this, we\
    \ first need to calculate the mean of the numbers. To do this, we first need to\
    \ calculate the mean of the numbers. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. To do this, we\
    \ first need to calculate the mean of the numbers. To do this, we first need to\
    \ calculate the mean of the numbers. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. To do this, we\
    \ first need to calculate the mean of the numbers. To do this, we first need to\
    \ calculate the mean of the numbers. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. To do this, we\
    \ first need to calculate the mean of the numbers. To do this, we first need to\
    \ calculate the mean of the numbers. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. To do this, we\
    \ first need to calculate the mean of the numbers. To do this, we first need to\
    \ calculate the mean of the numbers. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. To do this, we\
    \ first need to calculate the mean of the numbers. To do this, we first need to\
    \ calculate the mean of the numbers. To do this, we first need to calculate the\
    \ mean of the numbers. To do this, we first need to calculate the mean of the\
    \ numbers. To do this, we first need to calculate the mean of the numbers. To\
    \ do this, we first need to calculate the mean of the numbers. \nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67o1ecux.jl:16\nin expression starting at\
    \ /tmp/tmp67o1ecux.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2 \n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a good measure of how far away\
    \ a dataset is from the mean of the dataset. For example, if we have a dataset\
    \ of numbers from 0 to 10, the mean is 5, then MAD will be 5.\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc1wvnjl.jl:16\nin expression starting at\
    \ /tmp/tmpcc1wvnjl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each element deviates from the mean of the dataset.\
    \ \nThe higher the MAD, the more deviant each element from the mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9lr3cv_.jl:16\nin expression starting at\
    \ /tmp/tmpa9lr3cv_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2kkhju9.jl:16\nin expression starting at\
    \ /tmp/tmpi2kkhju9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaa35ytq.jl:16\nin expression starting at\
    \ /tmp/tmpaaa35ytq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_ombdrbo.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_ombdrbo.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ombdrbo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ombdrbo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2.0\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far each point\
    \ is from the mean of the dataset. \nThe higher the MAD, the more spread out the\
    \ data is. \nThe MAD can be calculated using the Mean Absolute Deviation function\
    \ above.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc125ux2e.jl:15\nin expression starting at\
    \ /tmp/tmpc125ux2e.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ pow((x - mean(x)), 2)\n    return sqrt(sum_of_squares / length(numbers))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6kefpgv8.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6kefpgv8.jl:1\n\
    in expression starting at /tmp/tmp6kefpgv8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj1c2pa.jl:16\nin expression starting at\
    \ /tmp/tmp5pj1c2pa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures how far each element of the dataset is from the mean.\n\
    The mean is the average of all the numbers in the dataset. \nThe MAD is the average\
    \ of the absolute difference between each element and the mean.\nThe MAD will\
    \ be higher if the dataset is more spread out.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqfv2aix.jl:16\nin expression starting at\
    \ /tmp/tmpsqfv2aix.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpate0zhpj.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpate0zhpj.jl:1\n\
    in expression starting at /tmp/tmpate0zhpj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpii60skgt.jl:16\nin expression starting at\
    \ /tmp/tmpii60skgt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    @test mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfgdt4sta.jl:16\nin expression starting at\
    \ /tmp/tmpfgdt4sta.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(numbers))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far each\
    \ point is from the mean.\nThe higher the value, the more distant the point is\
    \ from the mean.\nThe mean is calculated using the mean of the dataset.\nThe standard\
    \ deviation is calculated using the standard deviation of the dataset.\nThe mean\
    \ and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The mean and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The mean and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The mean and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppq6ht2ic.jl:16\nin expression starting at\
    \ /tmp/tmppq6ht2ic.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2 \n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with Weights\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicvl03ia.jl:16\nin expression starting at\
    \ /tmp/tmpicvl03ia.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ variance of the dataset. \nThe variance is the average of the squared deviations\
    \ from the mean:\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgaumxtr7.jl:16\nin expression starting at\
    \ /tmp/tmpgaumxtr7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuutvj9s.jl:16\nin expression starting at\
    \ /tmp/tmpnuutvj9s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj1c2pa.jl:16\nin expression starting at\
    \ /tmp/tmp5pj1c2pa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaa35ytq.jl:16\nin expression starting at\
    \ /tmp/tmpaaa35ytq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far from mean a dataset is. It can be calculated using\
    \ the function mean_absolute_deviation. Let's try it out on a few numbers:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vsi31e3.jl:16\nin expression starting at\
    \ /tmp/tmp3vsi31e3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2kkhju9.jl:16\nin expression starting at\
    \ /tmp/tmpi2kkhju9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model has learned the data.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9j4jdtnv.jl:16\nin expression starting at\
    \ /tmp/tmp9j4jdtnv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as\
    \ the average of the absolute difference between each element and the\nmean of\
    \ the dataset:\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45sa5b5o.jl:16\nin expression starting at\
    \ /tmp/tmp45sa5b5o.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaa35ytq.jl:16\nin expression starting at\
    \ /tmp/tmpaaa35ytq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model has learned the data.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9j4jdtnv.jl:16\nin expression starting at\
    \ /tmp/tmp9j4jdtnv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure for comparing\
    \ different datasets, since it penalizes deviations from the mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x8g3w0o.jl:16\nin expression starting at\
    \ /tmp/tmp6x8g3w0o.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe function above is very simple, but we\
    \ can make it more efficient by calculating the mean only once and using it for\
    \ all the numbers. We will store the mean in a variable called mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcrzak_t.jl:16\nin expression starting at\
    \ /tmp/tmpjcrzak_t.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with Stats\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7lqgiub.jl:16\nin expression starting at\
    \ /tmp/tmpz7lqgiub.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_ombdrbo.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_ombdrbo.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ombdrbo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_ombdrbo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_ombdrbo.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_ombdrbo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_ombdrbo.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each element deviates from the mean.\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vvgwm09.jl:16\nin expression starting at\
    \ /tmp/tmp6vvgwm09.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each element of the dataset is from the mean.\nIt is\
    \ a good measure of how far each element of the dataset is from the mean.\nIt\
    \ is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is from the mean.\n\
    It is a good measure of how far each element of the dataset is \nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uhbuq83.jl:16\nin expression starting at\
    \ /tmp/tmp4uhbuq83.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure for measuring\
    \ the variability of a set of numbers. It is also a good measure of how far from\
    \ a mean a distribution of numbers is. It is also a good measure of how far from\
    \ a mean a distribution of numbers is from its mean.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgcyqjnit.jl:16\nin expression starting at\
    \ /tmp/tmpgcyqjnit.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers.\
    \ We'll start by defining a function which calculates the mean of a vector:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_18ut0d.jl:16\nin expression starting at\
    \ /tmp/tmp4_18ut0d.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nThe mean absolute deviation function above is very simple, yet it gives\
    \ us an idea of how it works. Let's try it out on some real data:\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmaefb60.jl:15\nin expression starting at\
    \ /tmp/tmpcmaefb60.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfan9lox6.jl:16\nin expression starting at\
    \ /tmp/tmpfan9lox6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykoofnmc.jl:16\nin expression starting at\
    \ /tmp/tmpykoofnmc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far a sample is from the mean of the dataset. For example,\
    \ a sample of $N$ numbers could be considered an outlier if its MAD is greater\
    \ than $3\\sigma$, where $\\sigma$ is the standard deviation of the numbers in\
    \ the sample.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaeknsfri.jl:16\nin expression starting at\
    \ /tmp/tmpaeknsfri.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ standard deviation. \nThe standard deviation is a measure of how spread out\
    \ a distribution of data is. \nIt is a measure of how far a data point is from\
    \ the mean. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the variability of a set\
    \ of numbers. \nThe standard deviation is a measure of the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22o6gb7y.jl:16\nin expression starting at\
    \ /tmp/tmp22o6gb7y.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjao8hygw.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjao8hygw.jl:1\n\
    in expression starting at /tmp/tmpjao8hygw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers. It is also a good way to measure how\
    \ spread out a distribution of values is. It is a good way to measure how outliers\
    \ are spread out. For example, if you have a list of numbers and you know that\
    \ they are all positive, you can use the mean absolute deviation to measure how\
    \ spread out the numbers are around the mean.\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rr139gx.jl:16\nin expression starting at\
    \ /tmp/tmp4rr139gx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3w4_62a.jl:16\nin expression starting at\
    \ /tmp/tmpa3w4_62a.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeb61fvql.jl:15\nin expression starting at\
    \ /tmp/tmpeb61fvql.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjld7kri.jl:17\nin expression starting at\
    \ /tmp/tmpbjld7kri.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a measure of how far\
    \ from a mean a number is, as opposed to how far from a median a number is. It\
    \ is a measure of how far from a mean a number is, as opposed to how far from\
    \ a median a number is. It is a measure of how far from a mean a number is, as\
    \ opposed to how far from a median a number is. It is a measure of how far from\
    \ a mean a number is, as opposed to how far from a median a number is. It is a\
    \ measure of how far from a mean a number is, as opposed to how far from a median\
    \ a number is. It is a measure of how far from a mean a number is, as opposed\
    \ to how far from a median a number is. It is a measure of how far from a mean\
    \ a number is, as opposed to how far from a median a number is. It is a measure\
    \ of how far from a mean a number is, as opposed to how far from a median a number\
    \ is. It is a measure of how far from a mean a number is, as opposed to how far\
    \ from a median a number is. It is a measure of how far from a mean a number is,\
    \ as opposed to how far from a median a number is. It is a measure of how far\
    \ from a mean a number is, as opposed to how far from a median a number is. It\
    \ is a measure of how far from a mean a number is, as opposed to how far from\
    \ a median a number is. It is a measure of how far from a mean a number is, as\
    \ opposed to how far from a median a number is. It is a measure of how far from\
    \ a mean a number is, as opposed to how far from a median a number is. It is a\
    \ measure of how far from a mean a number is, as opposed to how far from a median\
    \ a number is. It is a measure of how far from a mean a number is, as opposed\
    \ to how far from a median a number is. It is a measure of how far from a mean\
    \ a number is, as opposed to how far from a median a number is. It is a measure\
    \ of how far from a mean a number is, as opposed to how far from a median a number\
    \ is. It is a measure of how far from a mean a number is, as opposed to how far\
    \ from a median a number is. It is a measure of how far from a mean a number is,\
    \ as opposed to how far from a median a number is. It is a measure \nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplb3r23q.jl:16\nin expression starting at\
    \ /tmp/tmpplb3r23q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1b_jezf.jl:16\nin expression starting at\
    \ /tmp/tmpi1b_jezf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It can be interpreted as a\
    \ measure of how far from a mean a number is, as opposed to standard deviation,\
    \ which measures how far from a mean a number is, as opposed to variance, which\
    \ measures how far from a mean a number is, as opposed to variance, which is simply\
    \ the square of the variance.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h_6gkxn.jl:16\nin expression starting at\
    \ /tmp/tmp5h_6gkxn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean of the dataset.\nIt is a good measure of how\
    \ far each point is from the mean \nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69unc6u5.jl:16\nin expression starting at\
    \ /tmp/tmp69unc6u5.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in our dataset. Let's see how it works\
    \ on our dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugpi9zem.jl:16\nin expression starting at\
    \ /tmp/tmpugpi9zem.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a data point is. It is calculated using\
    \ the mean of the absolute value of the difference between each data point and\
    \ the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp784ex2g1.jl:16\nin expression starting at\
    \ /tmp/tmp784ex2g1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfan9lox6.jl:16\nin expression starting at\
    \ /tmp/tmpfan9lox6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5a9qxy9c.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp5a9qxy9c.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp5a9qxy9c.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5a9qxy9c.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5a9qxy9c.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5a9qxy9c.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp5a9qxy9c.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5a9qxy9c.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5a9qxy9c.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5a9qxy9c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp5a9qxy9c.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5a9qxy9c.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5a9qxy9c.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x-mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoiz0f562.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoiz0f562.jl:1\n\
    in expression starting at /tmp/tmpoiz0f562.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure of outliers\
    \ and is often used in machine learning to determine how far from a mean a data\
    \ point is. It is also a good way to measure the spread of data points. It is\
    \ often used in statistical models to determine how far from a mean a data point\
    \ is. It is also a good way to measure the spread of data points. It is often\
    \ used in statistical models to determine how far from a mean a data point is.\
    \ It is also a good way to measure the spread of data points. It is often used\
    \ in machine learning to determine how far from a mean a data point is. It is\
    \ also a good way to measure the spread of data points. It is often used in machine\
    \ learning to determine how far from a mean a data point is. It is also a good\
    \ way to measure the spread of data points. It is often used in machine learning\
    \ to determine how far from a mean a data point is. It is also a good way to measure\
    \ the spread of data points. It is often used in machine learning to determine\
    \ how far from a mean a data point is. It is also a good way to measure the spread\
    \ of data points. It is often used in machine learning to determine how far from\
    \ a mean a data point is. It is also a good way to measure the spread of data\
    \ points. It is often used in machine learning to determine how far from a mean\
    \ a data point is. It is also a good way to measure the spread of data points.\
    \ It is often used in machine learning to determine how far from a mean a data\
    \ point is. It is also a good way to measure the spread of data points. It is\
    \ often used in machine learning to determine how far from a mean a data point\
    \ is. It is also a good way to measure the spread of data points. It is often\
    \ used in machine learning to determine how far from a mean a data point is. It\
    \ is also a good way to measure the spread of data points. It is often used in\
    \ machine learning to determine how far from a mean a data point is. It is also\
    \ a good way to measure the spread of data points. It is often used in machine\
    \ learning to determine how far from a mean a data point is. It is also a good\
    \ way to measure the spread of data points. It is often used in machine learning\
    \ to determine how far from a mean a data point is. It is also a good way to measure\
    \ the spread of data points. It is often used in machine learning to determine\
    \ how far from a mean a data point is. It is also \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9ciuqyz.jl:16\nin expression starting at\
    \ /tmp/tmp_9ciuqyz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ec6dqtc.jl:16\nin expression starting at\
    \ /tmp/tmp0ec6dqtc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very similar to the mean function we saw earlier.\
    \ Let's compare the two functions side-by-side.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ggh3591.jl:16\nin expression starting at\
    \ /tmp/tmp4ggh3591.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model performs. In our case, we are\
    \ trying to predict a continuous output (a price) and the mean of the target variable\
    \ is around $10$. Hence, we can use Mean Absolute Deviation to measure the performance\
    \ of the model.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdny_h9c7.jl:16\nin expression starting at\
    \ /tmp/tmpdny_h9c7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow((number - mean(numbers)), 2)\n    end\n    return math.sqrt(sum_of_squared_deviations)\n\
    end\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90xr4204.jl:16\nin expression starting at\
    \ /tmp/tmp90xr4204.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj1c2pa.jl:16\nin expression starting at\
    \ /tmp/tmp5pj1c2pa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers and is often used in machine learning to determine how far a point\
    \ is from the mean.\nThe mean is often used as a centerpoint for calculating MAD.\n\
    The mean is also known as the geometric mean.\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkozd6_hc.jl:16\nin expression starting at\
    \ /tmp/tmpkozd6_hc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptba7q0ni.jl:16\nin expression starting at\
    \ /tmp/tmptba7q0ni.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptba7q0ni.jl:16\nin expression starting at\
    \ /tmp/tmptba7q0ni.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the MAD using the Julia package StatsBase.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjliws6k.jl:16\nin expression starting at\
    \ /tmp/tmpkjliws6k.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphpn3gxg3.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphpn3gxg3.jl:1\n\
    in expression starting at /tmp/tmphpn3gxg3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpey75g64g.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpey75g64g.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpey75g64g.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpey75g64g.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey75g64g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey75g64g.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pj1c2pa.jl:16\nin expression starting at\
    \ /tmp/tmp5pj1c2pa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfan9lox6.jl:16\nin expression starting at\
    \ /tmp/tmpfan9lox6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability in a set of numbers. It is defined as the average\
    \ of the absolute value of the difference between each element and the mean of\
    \ the set.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshpbx6_d.jl:16\nin expression starting at\
    \ /tmp/tmpshpbx6_d.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very similar to the mean function we saw earlier.\
    \ Let's see how it compares to our previous mean function:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa57bt2sa.jl:16\nin expression starting at\
    \ /tmp/tmpa57bt2sa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaa35ytq.jl:16\nin expression starting at\
    \ /tmp/tmpaaa35ytq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nThe mean absolute deviation function above is very similar\
    \ to the mean function we saw earlier. Let's compare the two functions side-by-side.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbw2oe5zc.jl:16\nin expression starting at\
    \ /tmp/tmpbw2oe5zc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from the mean a dataset is. It is a good measure of\
    \ how far away a dataset is from its mean.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2zbvmke.jl:16\nin expression starting at\
    \ /tmp/tmpg2zbvmke.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a point is from its mean.\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprs18mvo_.jl:16\nin expression starting at\
    \ /tmp/tmprs18mvo_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ pow((x - mean(x)), 2)\n    return sqrt(sum_of_squares / length(numbers))\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    </cell>\n<text>\nMean Absolute Deviation Error\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptviwfylb.jl:15\nin expression starting at\
    \ /tmp/tmptviwfylb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nThe Mean Absolute Deviation Error is the mean of the absolute\
    \ value of the deviations from the mean:\n    MEDE = average | x - x_mean |\n\
    \    >>> mean_absolute_error([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4kyepre5.jl:16\nin expression starting at\
    \ /tmp/tmp4kyepre5.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow(number - mean(numbers), 2)\n    end\n    return math.sqrt(sum_of_squared_deviations)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation Function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnj05vp3e.jl:16\nin expression starting at\
    \ /tmp/tmpnj05vp3e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure of outliers\
    \ and is often used in machine learning to determine how far a data point is from\
    \ the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_zih4xl.jl:16\nin expression starting at\
    \ /tmp/tmpb_zih4xl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxrq_zyd.jl:16\nin expression starting at\
    \ /tmp/tmpgxrq_zyd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation Prior to dividing by the number of observations.\nThe\
    \ Mean Absolute Deviation Prior is defined as:\nMAD_P = average | x - x_mean |\
    \ / N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following formula:\nMAD_P = average | x - x_mean | /\
    \ N\nwhere N is the number of observations.\nThe Mean Absolute Deviation Prior\
    \ is calculated using the following \nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5upd_6pm.jl:16\nin expression starting at\
    \ /tmp/tmp5upd_6pm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x-mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far a sample deviates from\
    \ the mean of its values. In other words, it measures how far a sample deviates\
    \ from its mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppk07ix6.jl:15\nin expression starting at\
    \ /tmp/tmpppk07ix6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x-mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nNow let's calculate the mean absolute\
    \ deviation for a set of numbers. We'll do this by first calculating the mean\
    \ of the numbers, then calculating the MAD using the mean of the numbers and the\
    \ mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvb79q6w.jl:15\nin expression starting at\
    \ /tmp/tmppvb79q6w.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers.\
    \ We'll do this by first calculating the mean and then calculating the deviation\
    \ for each number.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt4yscky.jl:16\nin expression starting at\
    \ /tmp/tmpbt4yscky.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom4qnk7s.jl:16\nin expression starting at\
    \ /tmp/tmpom4qnk7s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfhhxgbd.jl:16\nin expression starting at\
    \ /tmp/tmpmfhhxgbd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmwchgvt.jl:16\nin expression starting at\
    \ /tmp/tmppmwchgvt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2kkhju9.jl:16\nin expression starting at\
    \ /tmp/tmpi2kkhju9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbb59m42h.jl:16\nin expression starting at\
    \ /tmp/tmpbb59m42h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability (spread) in a set of numbers. It is defined as:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2i26su7c.jl:16\nin expression starting at\
    \ /tmp/tmp2i26su7c.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a regression model. \nIt is a good idea to have\
    \ a metric to evaluate your model. \nWe will use Mean Absolute Deviation as our\
    \ metric to evaluate our model.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz73ftam.jl:16\nin expression starting at\
    \ /tmp/tmpdz73ftam.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n</cell>\n<code language=julia-1.0\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp329eczac.jl:16\nin expression starting at\
    \ /tmp/tmp329eczac.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the mean absolute deviation for a vector\
    \ of numbers and a vector of weights.\nThe weights are a vector of weights for\
    \ each element in the input vector. \nThe function should return a vector of mean\
    \ absolute deviations for each element in the input vector.\nThe function should\
    \ also accept a vector of weights as an optional argument. \nIf the weights vector\
    \ is omitted, the function should assume a vector of ones as weights.\nThe function\
    \ should return an error if the weights vector is not the same length as the input\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h2kgczz.jl:16\nin expression starting at\
    \ /tmp/tmp2h2kgczz.jl:16\n"
  stdout: ''
