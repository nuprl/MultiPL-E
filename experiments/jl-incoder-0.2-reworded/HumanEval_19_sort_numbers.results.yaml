language: jl
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=julia |>\nI wrote a package for this. It has some nice features like\
    \ the ability to sort by multiple fields and it also has some nice performance\
    \ improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<|/ a dscore=1 |>\n\
    <| a tags=julia |>\nI wrote a package for this. It has some nice features like\
    \ the ability to sort by multiple fields and it also has some nice performance\
    \ improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<|/ a dscore=0 |>\n\
    <| a tags=julia |>\nI wrote a package for this. It has some nice features like\
    \ the ability to sort by multiple fields and it also has some nice performance\
    \ improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<|/ a dscore=0 |>\n\
    <| a tags=julia |>\nI wrote a package for this. It has some nice features like\
    \ the ability to sort by multiple fields and it also has some nice performance\
    \ improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<code>\nusing DataFrames\n\
    using DataFramesMeta\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp426dwi9d.jl:8\nin expression\
    \ starting at /tmp/tmp426dwi9d.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all the words capitalized.\n\
    >>> capitalize_words(\"the quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"the quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"the quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"the\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick bro\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5dgz8f5.jl:12\nin expression starting at\
    \ /tmp/tmpq5dgz8f5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case. \nThe function should ignore any non-alphabetic\
    \ characters.\nThe function should ignore any leading or trailing whitespace.\n\
    The function should ignore any leading or trailing punctuation.\nThe function\
    \ should ignore any leading or trailing numbers.\nThe function should ignore any\
    \ leading or trailing periods.\nThe function should ignore any leading or trailing\
    \ commas.\nThe function should ignore any leading or trailing semicolons.\nThe\
    \ function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\nThe function should\
    \ ignore any leading or trailing semicolons.\nThe function should ignore any leading\
    \ or trailing colons.\nThe function should ignore any leading or trailing periods.\n\
    The function should ignore any leading or trailing commas.\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_cir4it7.jl:12\nin expression starting at\
    \ /tmp/tmp_cir4it7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1oj8jwk.jl:12\nin expression starting at\
    \ /tmp/tmpc1oj8jwk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipj414sv.jl:13\nin expression starting at\
    \ /tmp/tmpipj414sv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gg60hq7.jl:12\nin expression starting at\
    \ /tmp/tmp6gg60hq7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdx8vdbe.jl:13\nin expression starting at\
    \ /tmp/tmprdx8vdbe.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmebdtw5x.jl:8\nin expression\
    \ starting at /tmp/tmpmebdtw5x.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the string with\
    \ all the words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00knzr5q.jl:12\nin expression starting at\
    \ /tmp/tmp00knzr5q.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywxlxe15.jl:13\nin expression starting at\
    \ /tmp/tmpywxlxe15.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| c |>\nI like your solution, however it only works with strings of length\
    \ 9. Try it with `sort_numbers \"one two three four five six seven eight nine\"\
    `.\n<|/ c |>\n<| c |>\nYes, I didn't think about that case. Thanks for pointing\
    \ it out. I'll edit the answer.\n<|/ c |>\n<| a tags=sorting,string,haskell |>\n\
    Here's a solution using Data.List.sortBy and Data.List.tails:\n<code>\nimport\
    \ Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ckm9k_h.jl:11\nin expression starting at\
    \ /tmp/tmp2ckm9k_h.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a |>\n<| c |>\nI believe this answer should be accepted\
    \ as the correct one. Although it does require a little bit of code to be written.\n\
    <|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex8gzevi.jl:12\nin expression starting at\
    \ /tmp/tmpex8gzevi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with all\
    \ the characters in lower case. \n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"hello  world\")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\
    \n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfe9vjd3.jl:12\nin expression starting at\
    \ /tmp/tmpdfe9vjd3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7k9mo20p.jl:8\nin expression\
    \ starting at /tmp/tmp7k9mo20p.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\n</code>\n<|/ a tags=sorting,string,haskell |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_vq4wn0.jl:12\nin expression starting at\
    \ /tmp/tmpi_vq4wn0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2: Write a function that takes a string and returns the string with all the\
    \ words capitalized.\n    >>> capitalize_words(\"the quick brown fox jumps over\
    \ the lazy dog\")\n    \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8c91zgs2.jl:12\nin expression starting at\
    \ /tmp/tmp8c91zgs2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| c |>\nThanks for your answer. Your code works,\
    \ but it sorts the numbers in lexicographical order. I would like to sort them\
    \ in numerical order. For example, if I input \"three one five\", the output should\
    \ be \"one three five\".\n<|/ c |>\n<| c |>\nOh, I see. Sorry about that. I'll\
    \ edit my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works,\
    \ but it sorts the numbers in lexicographical order. I would like to sort them\
    \ in numerical order. For example, if I input \"three one five\", the output should\
    \ be \"one three five\".\n<|/ c |>\n<| c |>\nOh, I see. Sorry about that. I'll\
    \ edit my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are great,\
    \ but I wanted to add my own solution, which is more general (i.e. works for any\
    \ type that implements sort!).\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9x7fjan0.jl:12\nin expression starting at\
    \ /tmp/tmp9x7fjan0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| a tags=julia,sorting,string |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzoa17i1p.jl:12\nin expression starting at\
    \ /tmp/tmpzoa17i1p.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in it sorted from smallest to largest.\nFor example, sort_numbers(\"one two\
    \ three four five six seven eight nine\") should return \"one two three four five\
    \ six seven eight nine\".\nWrite a second function that takes a string and returns\
    \ the string with all numbers in it sorted from largest to smallest.\nFor example,\
    \ sort_numbers(\"one two three four five six seven eight nine\") should return\
    \ \"nine eight seven six five four three two one\".\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmsmj96k.jl:12\nin expression starting at\
    \ /tmp/tmpdmsmj96k.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a |>\n<code>\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpth7bh_at.jl:12\nin expression starting at\
    \ /tmp/tmpth7bh_at.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ with all non-alphabetic characters removed.\n    Valid characters are 'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z', and 'space'.\n    >>> remove_non_alphabetic(\"\")\n    \"\"\n    >>>\
    \ remove_non_alphabetic(\"abc\")\n    \"abc\"\n    >>> remove_non_alphabetic(\"\
    a b c\")\n    \"a b c\"\n    >>> remove_non_alphabetic(\"a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O \n    P Q R S T\
    \ U V W X Y Z space\")\n    \"a b c d e f g h i j k l m n o p q r s t u v w x\
    \ y z A B C D E F G H I J K L M N O \n    P Q R S T U V W X Y Z space\"\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw1r_0dp.jl:13\nin expression starting at\
    \ /tmp/tmpsw1r_0dp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekeuhoo4.jl:12\nin expression starting at\
    \ /tmp/tmpekeuhoo4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,sorting,string |>\nI came up with a solution that\
    \ is pretty straightforward and doesn't require any external packages. I used\
    \ the function sort_numbers to sort the numbers and then used the function join\
    \ to concatenate the strings together. \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmqexpny.jl:12\nin expression starting at\
    \ /tmp/tmpfmqexpny.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a function that sorts numbers in ascending order:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptk3iq8d5.jl:11\nin expression starting at\
    \ /tmp/tmptk3iq8d5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4up44lr.jl:13\nin expression starting at\
    \ /tmp/tmpn4up44lr.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4up44lr.jl:13\nin expression starting at\
    \ /tmp/tmpn4up44lr.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| c |>\nThis does not answer the question. `sort_numbers(\"\
    one three five\")` returns `\"one three five\"`, not `\"one five three\"`.\n<|/\
    \ c |>\n<| c |>\nI believe this answer is correct and should be accepted.\n<|/\
    \ c |>\n<| a tags=julia,sorting,string |>\nA more general solution that does not\
    \ require the string to be split into words and then sorted:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6iye1ty.jl:12\nin expression starting at\
    \ /tmp/tmpl6iye1ty.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmvds5mk.jl:11\nin expression starting at\
    \ /tmp/tmppmvds5mk.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,python |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers =\
    \ map(int, numbers)\n    numbers.sort()\n    numbers = map(str, numbers)\n   \
    \ numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,python |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers =\
    \ map(int, numbers)\n    numbers.sort()\n    numbers = map(str, numbers)\n   \
    \ numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,string,python |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,string,python dscore=0 |>\n<|\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp93b6sbu1.jl:8\nin expression\
    \ starting at /tmp/tmp93b6sbu1.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the string with all 'o's replaced with 'O's\n>>> replace_o(\"one two\
    \ three four five six seven eight nine\")\n\"one two three four five six seven\
    \ eight nine\"\n>>> replace_o(\"one two three four five six seven eight nine zero\"\
    )\n\"one two three four five six seven eight nine zero\"\n>>> replace_o(\"one\
    \ two three four five six seven eight nine zero one\")\n\"one two three four five\
    \ six seven eight nine zero one\"\n>>> replace_o(\"one two three four five six\
    \ seven eight nine zero one two\")\n\"one two three four five six seven eight\
    \ nine zero one two\"\n>>> replace_o(\"one two three four five six seven eight\
    \ nine zero one two three\")\n\"one two three four five six seven eight nine zero\
    \ one two three\"\n>>> replace_o(\"one two three four five six seven eight nine\
    \ zero one two three four\")\n\"one two three four five six seven eight nine zero\
    \ one two three four\"\n>>> replace_o(\"one two three four five six seven eight\
    \ nine zero one two three four five\")\n\"one two three four five six seven eight\
    \ nine zero one two three four five\"\n>>> replace_o(\"one two three four five\
    \ six seven eight nine zero one two three four five six\")\n\"one two three four\
    \ five six seven eight nine zero one two three four five six\"\n>>> replace_o(\"\
    one two three four five six seven eight nine zero one two three four five six\
    \ seven\")\n\"one two three four five six seven eight nine zero one two three\
    \ four five six seven\"\n>>> replace_o(\"one two three four five six seven eight\
    \ nine zero one two \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qg1aoqd.jl:12\nin expression starting at\
    \ /tmp/tmp_qg1aoqd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    number\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6k1lgc0l.jl:8\nin expression\
    \ starting at /tmp/tmp6k1lgc0l.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptkdpukkd.jl:8\nin expression\
    \ starting at /tmp/tmptkdpukkd.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe4blt4sk.jl:8\nin expression\
    \ starting at /tmp/tmpe4blt4sk.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\n</code>\n<|/ a tags=sorting,haskell |>\n<| c |>\nThanks for\
    \ the answer! I ended up doing something similar, except I used `sortBy` instead\
    \ of `sort`. I also used `sortBy` instead of `sort` because I wanted to sort by\
    \ multiple criteria, not just by one criterion.\n<|/ c |>\n<| c |>\n`sortBy` also\
    \ works with multiple criteria, so you can do `sortBy (comparing snd) $ sortBy\
    \ (comparing fst) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ sortBy (comparing length) $ sortBy (comparing fst) $ sortBy\
    \ (comparing snd) $ \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppksvtmkh.jl:12\nin expression starting at\
    \ /tmp/tmppksvtmkh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nIf the string has less than two words, return 0.\nIf the string has\
    \ two or fewer words, return the number of words.\nIf the string has more than\
    \ two words, return the number of words in the first two words.\nFor example,\
    \ if the string is \"one two three four five\", return 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpf4sez2.jl:12\nin expression starting at\
    \ /tmp/tmpqpf4sez2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppm5bxz5.jl:13\nin expression starting at\
    \ /tmp/tmpppm5bxz5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all 'a's\
    \ replaced by 'o's.\n>>> replace_a(\"a b c\")\n\"o b c\"\n>>> replace_a(\"a b\
    \ c d e f g\")\n\"o b c d e f g\"\n>>> replace_a(\"a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z\")\n\"o b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z\"\n>>> replace_a(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\
    \ 1 2 3 4 5 6 7 8 9 0 \")\n\"o b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z 1 2 3 4 5 6 7 8 9 0\"\n>>> replace_a(\"a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadiiwpbs.jl:12\nin expression starting at\
    \ /tmp/tmpadiiwpbs.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized. \n>>> capitalize_words(\"the quick brown fox jumped over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick bro\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1l9u5hvy.jl:12\nin expression starting at\
    \ /tmp/tmp1l9u5hvy.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the characters\
    \ in lower case. \nFor example, \n>>> string_to_lower(\"Hello World\")\n\"hello\
    \ world\"\n>>> string_to_lower(\"Hello World!\")\n\"hello world!\"\n>>> string_to_lower(\"\
    Hello World!!\")\n\"hello world!!\"\n>>> string_to_lower(\"Hello World!!!\")\n\
    \"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!\")\n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!\")\n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!\")\n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!\"\
    )\n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\")\n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello\
    \ world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello\
    \ world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello\
    \ world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mngm99k.jl:12\nin expression starting at\
    \ /tmp/tmp0mngm99k.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string with\
    \ all numbers in it sorted from smallest to largest.\nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") returns \"one two three four five\
    \ six seven eight nine\".\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwv_0vslf.jl:12\nin expression starting at\
    \ /tmp/tmpwv_0vslf.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    number\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6k1lgc0l.jl:8\nin expression\
    \ starting at /tmp/tmp6k1lgc0l.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting |>\n<| a tags=julia,sorting |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpye0mvrco.jl:12\nin expression starting at\
    \ /tmp/tmpye0mvrco.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4up44lr.jl:13\nin expression starting at\
    \ /tmp/tmpn4up44lr.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the words\
    \ capitalized.\n    For example, sort_words(\"The quick brown fox jumps over the\
    \ lazy dog\") should return \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\
    \    Use a regular expression to capitalize the first letter of each word\n  \
    \  Use a regular expression to capitalize the first letter of each word\n    Use\
    \ a regular expression to capitalize the first letter of each word\n    Use a\
    \ regular expression to capitalize the first letter of each word\n    Use a regular\
    \ expression to capitalize the first letter of each word\n    Use a regular expression\
    \ to capitalize the first letter of each word\n    Use a regular expression to\
    \ capitalize the first letter of each word\n    Use a regular expression to capitalize\
    \ the first letter of each word\n    Use a regular expression to capitalize the\
    \ first letter of each word\n    Use a regular expression to capitalize the first\
    \ letter of each word\n    Use a regular expression to capitalize the first letter\
    \ of each word\n    Use a regular expression to capitalize the first letter of\
    \ each word\n    Use a regular expression to capitalize the first letter of each\
    \ word\n    Use a regular expression to capitalize the first letter of each word\n\
    \    Use a regular expression to capitalize the first letter of each word\n  \
    \  Use a regular expression to capitalize the first letter of each word\n    Use\
    \ a regular expression to capitalize the first letter of each word\n    Use a\
    \ regular expression to capitalize the first letter of each word\n    Use a regular\
    \ expression to capitalize the first letter of each word\n    Use a regular expression\
    \ to capitalize the first letter of each word\n    Use a regular expression to\
    \ capitalize the first letter of each word\n    Use a regular expression to capitalize\
    \ the first letter of each word\n    Use a regular expression to capitalize the\
    \ first letter of each word\n    Use a regular expression to capitalize the first\
    \ letter of each word\n    Use a regular expression to capitalize the first letter\
    \ of each word\n    Use a regular expression to capitalize the first letter of\
    \ each word\n    Use a regular expression to capitalize the first letter of each\
    \ word\n    Use a regular expression to capitalize the first letter of each word\n\
    \    Use a regular expression to capitalize the first letter of each word\n  \
    \  Use a regular expression to capitalize the first letter of each word\n    Use\
    \ a regular expression to capitalize the first letter of each word\n    Use a\
    \ regular expression to capitalize the first letter \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncuaxiyk.jl:12\nin expression starting at\
    \ /tmp/tmpncuaxiyk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the words capitalized. \n    For example, \"Hello\
    \ World\" returns \"Hello World\".\n    Use a regular expression to capitalize\
    \ the first letter of each word.\n    Use a regular expression to capitalize the\
    \ first letter of each word.\n    Use a regular expression to capitalize the first\
    \ letter of each word.\n    Use a regular expression to capitalize the first letter\
    \ of each word.\n    Use a regular expression to capitalize the first letter of\
    \ each word.\n    Use a regular expression to capitalize the first letter of each\
    \ word.\n    Use a regular expression to capitalize the first letter of each word.\n\
    \    Use a regular expression to capitalize the first letter of each word.\n \
    \   Use a regular expression to capitalize the first letter of each word.\n  \
    \  Use a regular expression to capitalize the first letter of each word.\n   \
    \ Use a regular expression to capitalize the first letter of each word.\n    Use\
    \ a regular expression to capitalize the first letter of each word.\n    Use a\
    \ regular expression to capitalize the first letter of each word.\n    Use a regular\
    \ expression to capitalize the first letter of each word.\n    Use a regular expression\
    \ to capitalize the first letter of each word.\n    Use a regular expression to\
    \ capitalize the first letter of each word.\n    Use a regular expression to capitalize\
    \ the first letter of each word.\n    Use a regular expression to capitalize the\
    \ first letter of each word.\n    Use a regular expression to capitalize the first\
    \ letter of each word.\n    Use a regular expression to capitalize the first letter\
    \ of each word.\n    Use a regular expression to capitalize the first letter of\
    \ each word.\n    Use a regular expression to capitalize the first letter of each\
    \ word.\n    Use a regular expression to capitalize the first letter of each word.\n\
    \    Use a regular expression to capitalize the first letter of each word.\n \
    \   Use a regular expression to capitalize the first letter of each word.\n  \
    \  Use a regular expression to capitalize the first letter of each word.\n   \
    \ Use a regular expression to capitalize the first letter of each word.\n    Use\
    \ a regular expression to capitalize the first letter of each word.\n    Use a\
    \ regular expression to capitalize the first letter of each word.\n    Use a regular\
    \ expression to capitalize the first letter of each word.\n    Use a regular expression\
    \ to capitalize the first letter of each word.\n    Use a regular expression to\
    \ capitalize the first letter of each word.\n    Use a regular expression to capitalize\
    \ the first letter of each word.\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxeqaeh6.jl:12\nin expression starting at\
    \ /tmp/tmpjxeqaeh6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_4bfi2j.jl:13\nin expression starting at\
    \ /tmp/tmpm_4bfi2j.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly.\
    \ I'm using Julia 0.4.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.4.0 and it works.\
    \ Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it exactly. I'm using Julia 0.4.\n<|/ c |>\n<| a tags=sorting,julia |>\nI wrote\
    \ a package for this: sorting.\n<code>\njulia> using Sorting\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxcdrps6e.jl:11\nin expression starting at\
    \ /tmp/tmpxcdrps6e.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpcyvo0j.jl:12\nin expression starting at\
    \ /tmp/tmpbpcyvo0j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"one two three\")\n\"One Two Three\"\n>>>\
    \ capitalize_words(\"one two three four\")\n\"One Two Three Four\"\n>>> capitalize_words(\"\
    one two three four five\")\n\"One Two Three Four Five\"\n>>> capitalize_words(\"\
    one two three four five six\")\n\"One Two Three Four Five Six\"\n>>> capitalize_words(\"\
    one two three four five six seven\")\n\"One Two Three Four Five Six Seven\"\n\
    >>> capitalize_words(\"one two three four five six seven eight\")\n\"One Two Three\
    \ Four Five Six Seven Eight\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n\
    >>> capitalize_words(\"one two three four five six seven eight nine ten\")\n\"\
    One Two Three Four Five Six Seven Eight Nine Ten\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten eleven\")\n\"One Two Three Four\
    \ Five Six Seven Eight Nine Ten Eleven\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n\"One Two Three Four Five\
    \ Six Seven Eight Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven T\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvg3iiy5.jl:12\nin expression starting at\
    \ /tmp/tmpyvg3iiy5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized. For example, \"This Is A Test\" becomes \"This Is A Test\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq67njax.jl:12\nin expression starting at\
    \ /tmp/tmpbq67njax.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\nHere's a solution using recursion:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi7vmirf.jl:12\nin expression starting at\
    \ /tmp/tmpyi7vmirf.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell\
    \ |>\n<| c |>\nThanks for your answer! I understand that my code was a little\
    \ too complicated and that there might be a better way to do it but I'm still\
    \ a beginner at Haskell and I wanted to try and understand what was going on with\
    \ my code. Thanks again!\n<|/ c |>\n<| c |>\nI added some comments to my answer\
    \ to help you understand what's going on. Let me know if you have any questions.\n\
    <|/ c |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a\
    \ tags=sorting,haskell |>\nThe function sort is defined in the Data.List module\
    \ and takes a list as input. Your function sort_numbers takes as input a String\
    \ and returns a String. \nThe function sort takes a list as input and returns\
    \ a list. Your function sort_numbers returns a String. \nThe function join takes\
    \ a list as input and returns a String. Your function sort_numbers returns a String.\
    \ \nThe function join takes a String as input and returns a String. Your function\
    \ sort_numbers returns a String. \nThe function join takes a String as input and\
    \ returns a String. Your function sort_numbers returns a String. \nThe function\
    \ join takes a String as input and returns a String. Your function sort_numbers\
    \ returns a String. \nThe function join takes a String as input and returns a\
    \ String. Your function sort_numbers returns a String. \nThe function join takes\
    \ a String as input and returns a String. Your function sort_numbers returns a\
    \ String. \nThe function join takes a String as input and returns a String. Your\
    \ function sort_numbers returns a String. \nThe function join takes a String as\
    \ input and returns a String. Your function sort_numbers returns a String. \n\
    The function join takes a String as input and returns a String. Your function\
    \ sort_numbers returns a String. \nThe function join takes a String as input and\
    \ returns a String. Your function sort_numbers returns a String. \nThe function\
    \ join takes a String as input and returns a String. Your function sort_numbers\
    \ returns a String. \nThe function join takes a String as input and returns a\
    \ String. Your function sort_numbers returns a String. \nThe function join takes\
    \ a String as input and returns a String. Your function sort_numbers returns a\
    \ String. \nThe function join takes a String as input and returns a String. Your\
    \ function sort_numbers returns a String. \nThe function join takes a String as\
    \ input and returns a String. Your function sort_numbers returns a String. \n\
    The function join takes a String as input and returns a String. Your function\
    \ sort_numbers returns a \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4014gxcz.jl:8\nin expression\
    \ starting at /tmp/tmp4014gxcz.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,julia |>\n<| a tags=sorting,string,julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjixobqjk.jl:12\nin expression starting at\
    \ /tmp/tmpjixobqjk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting |>\n\
    I wrote a package called Sorting which does this for you. \n<code>\njulia> using\
    \ Sorting\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv4kybh0.jl:13\nin expression starting at\
    \ /tmp/tmpmv4kybh0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mix5ehj.jl:12\nin expression starting at\
    \ /tmp/tmp6mix5ehj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ a string with all the words capitalized.\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Do\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe01llmgr.jl:13\nin expression starting at\
    \ /tmp/tmpe01llmgr.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all the\
    \ words capitalized.\n>>> capitalize_words(\"one two three\")\n\"One Two Three\"\
    \n>>> capitalize_words(\"one two three four\")\n\"One Two Three Four\"\n>>> capitalize_words(\"\
    one two three four five\")\n\"One Two Three Four Five\"\n>>> capitalize_words(\"\
    one two three four five six\")\n\"One Two Three Four Five Six\"\n>>> capitalize_words(\"\
    one two three four five six seven\")\n\"One Two Three Four Five Six Seven\"\n\
    >>> capitalize_words(\"one two three four five six seven eight\")\n\"One Two Three\
    \ Four Five Six Seven Eight\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n\
    >>> capitalize_words(\"one two three four five six seven eight nine ten\")\n\"\
    One Two Three Four Five Six Seven Eight Nine Ten\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten eleven\")\n\"One Two Three Four\
    \ Five Six Seven Eight Nine Ten Eleven\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n\"One Two Three Four Five\
    \ Six Seven Eight Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven T\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pesgxz9.jl:12\nin expression starting at\
    \ /tmp/tmp5pesgxz9.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the characters\
    \ in lowercase.\nFor example, sort_characters(\"Hello World\") should return \"\
    hELLO wORLD\".\nWrite a function that takes a string and returns a string with\
    \ all the characters in uppercase.\nFor example, sort_characters(\"Hello World\"\
    ) should return \"HELLO WORLD\".\nWrite a function that takes a string and returns\
    \ a string with all the characters in uppercase and lowercase.\nFor example, sort_characters(\"\
    Hello World\") should return \"hELLO wORLD\".\nWrite a function that takes a string\
    \ and returns a string with all the characters in uppercase and lowercase and\
    \ numbers in between.\nFor example, sort_characters(\"Hello World\") should return\
    \ \"hEllO w0rld\".\nWrite a function that takes a string and returns a string\
    \ with all the characters in uppercase and lowercase and numbers in between and\
    \ spaces removed.\nFor example, sort_characters(\"Hello World\") should return\
    \ \"hEllO w0rld\".\nWrite a function that takes a string and returns a string\
    \ with all the characters in uppercase and lowercase and numbers in between and\
    \ spaces removed and characters replaced by an underscore.\nFor example, sort_characters(\"\
    Hello World\") should return \"hEllO w0rld\".\nWrite a function that takes a string\
    \ and returns a string with all the characters in uppercase and lowercase and\
    \ numbers in between and spaces removed and characters replaced by an underscore\
    \ and characters replaced by a space.\nFor example, sort_characters(\"Hello World\"\
    ) should return \"hEllO w0rld\".\nWrite a function that takes a string and returns\
    \ a string with all the characters in uppercase and lowercase and numbers in between\
    \ and spaces removed and characters replaced by an underscore and characters replaced\
    \ by a space and characters replaced by a dash.\nFor example, sort_characters(\"\
    Hello World\") should return \"hEllO w0rld\".\nWrite a function that takes a string\
    \ and returns a string with all the characters in uppercase and lowercase and\
    \ numbers in between and spaces removed and characters replaced by an underscore\
    \ and characters replaced by a space and characters replaced by a dash and characters\
    \ replaced by a dot.\nFor example, sort_characters(\"Hello World\") should return\
    \ \"hEllO w0rld\".\nWrite a function that takes a string and returns a string\
    \ with all the characters in uppercase and lowercase and numbers in between and\
    \ spaces removed and characters replaced by an under\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1s213im5.jl:12\nin expression starting at\
    \ /tmp/tmp1s213im5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the words\
    \ capitalized.\n    For example, sort_words(\"The quick brown fox jumps over the\
    \ lazy dog\") should return \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\
    \    >>> sort_words(\"The quick brown fox jumps over the lazy dog\")\n    \"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgeazl2c.jl:12\nin expression starting at\
    \ /tmp/tmpzgeazl2c.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10oum87n.jl:12\nin expression starting at\
    \ /tmp/tmp10oum87n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbavwzy91.jl:12\nin expression starting at\
    \ /tmp/tmpbavwzy91.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer the question. He wants to\
    \ sort the numbers, not just print them.\n<|/ c |>\n<| c |>\nThe question was\
    \ \"how do I sort a string\", not \"how do I sort a number\".  I answered the\
    \ question as asked.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that\
    \ your answer doesn't answer the question as asked.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I believe that your answer doesn't answer the question as asked.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that your answer doesn't answer\
    \ the question as asked.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtjq7gim.jl:13\nin expression starting at\
    \ /tmp/tmphtjq7gim.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1oj8jwk.jl:12\nin expression starting at\
    \ /tmp/tmpc1oj8jwk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpneib0m0p.jl:11\nin expression starting at\
    \ /tmp/tmpneib0m0p.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n    >>> capitalize_words(\"one two three\")\n    \"One Two Three\"\
    \n    >>> capitalize_words(\"one two three four\")\n    \"One Two Three Four\"\
    \n    >>> capitalize_words(\"one two three four five\")\n    \"One Two Three Four\
    \ Five\"\n    >>> capitalize_words(\"one two three four five six\")\n    \"One\
    \ Two Three Four Five Six\"\n    >>> capitalize_words(\"one two three four five\
    \ six seven\")\n    \"One Two Three Four Five Six Seven\"\n    >>> capitalize_words(\"\
    one two three four five six seven eight\")\n    \"One Two Three Four Five Six\
    \ Seven Eight\"\n    >>> capitalize_words(\"one two three four five six seven\
    \ eight nine\")\n    \"One Two Three Four Five Six Seven Eight Nine\"\n    >>>\
    \ capitalize_words(\"one two three four five six seven eight nine ten\")\n   \
    \ \"One Two Three Four Five Six Seven Eight Nine Ten\"\n    >>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven\")\n    \"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven\"\n    >>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten eleven twelve\")\n    \"One Two\
    \ Three Four Five Six Seven Eight Nine Ten Eleven Twelve\"\n    >>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen\")\n \
    \   \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\
    \n    >>> capitalize_words(\"one two three four five six seven eight nine ten\
    \ eleven twelve thirteen fourteen\")\n    \"One Two Three Four Five Six Seven\
    \ Eight Nine Ten Eleven Twel\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xe9gbcn.jl:12\nin expression starting at\
    \ /tmp/tmp6xe9gbcn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,haskell,string\
    \ |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4178qqfk.jl:11\nin expression starting at\
    \ /tmp/tmp4178qqfk.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all the\
    \ words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the\
    \ lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5hlk8db.jl:12\nin expression starting at\
    \ /tmp/tmpo5hlk8db.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for me. `sort` returns a `Vector{String}`, not a `String`.\n<|/ c |>\n<| c |>\n\
    I fixed the code. Sorry for the confusion.\n<|/ c |>\n<| a dscore=2 |>\nI wrote\
    \ a small package that does this in Julia. \n<code>\nusing Pkg\nPkg.add(\"SortNumbers\"\
    )\nusing SortNumbers\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp365k13kt.jl:13\nin expression starting at\
    \ /tmp/tmp365k13kt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with the first letter\
    \ of each word capitalized.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvipt9sn0.jl:12\nin expression starting at\
    \ /tmp/tmpvipt9sn0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekeuhoo4.jl:12\nin expression starting at\
    \ /tmp/tmpekeuhoo4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in reverse order.\n    >>> reverse_numbers(\"one two three four five six seven\
    \ eight nine\")\n    \"nine eight seven six five four three two one\"\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzb64_kh.jl:12\nin expression starting at\
    \ /tmp/tmprzb64_kh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppm5bxz5.jl:13\nin expression starting at\
    \ /tmp/tmpppm5bxz5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the numbers in sorted order.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoes1ul5c.jl:12\nin expression starting at\
    \ /tmp/tmpoes1ul5c.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all numbers\
    \ reversed.\n    >>> reverse_string(\"one two three four five\")\n    \"five four\
    \ three two one\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvxbulzy.jl:12\nin expression starting at\
    \ /tmp/tmphvxbulzy.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nFor example, if the input string is \"The quick brown fox jumps over\
    \ the lazy dog\", the function should return 8.\nIf the input string is \"The\
    \ quick brown fox jumps over the lazy dog.\", the function should return 0.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3hjp1lr.jl:12\nin expression starting at\
    \ /tmp/tmpe3hjp1lr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekeuhoo4.jl:12\nin expression starting at\
    \ /tmp/tmpekeuhoo4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the string with all the letters capitalized.\n>>> capitalize_letters(\"hello\
    \ world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35wxhl4l.jl:13\nin expression starting at\
    \ /tmp/tmp35wxhl4l.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipj414sv.jl:13\nin expression starting at\
    \ /tmp/tmpipj414sv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case. \n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"hello  world\")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello  world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello  world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx9s8rrr.jl:12\nin expression starting at\
    \ /tmp/tmpsx9s8rrr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case separated by spaces.\nFor example, if the input\
    \ is \"Hello World!\", the function should return \"hello world!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \"Hello World!\", the function should return \"Hello World!\".\nIf the input\
    \ is \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqakcqzgc.jl:12\nin expression starting at\
    \ /tmp/tmpqakcqzgc.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ reversed.\nFor example, sort_numbers(\"three one five\") should return \"five\
    \ three one\".\nWrite a second function that takes a string and returns the string\
    \ with all the letters reversed.\nFor example, sort_letters(\"three one five\"\
    ) should return \"five three one\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvu6lesfn.jl:12\nin expression starting at\
    \ /tmp/tmpvu6lesfn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers =\
    \ numbers.sort()\n    numbers = numbers.reverse()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggw6lwvu.jl:8\nin expression\
    \ starting at /tmp/tmpggw6lwvu.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxebokiyv.jl:13\nin expression starting at\
    \ /tmp/tmpxebokiyv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nimport Data.Ord\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3e49jh0z.jl:11\nin expression starting at\
    \ /tmp/tmp3e49jh0z.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns a string with all the words\
    \ in lower case separated by spaces.\n    >>> sort_words(\"one two three four\
    \ five six seven eight nine\")\n    \"one two three four five six seven eight\
    \ nine\"\n    >>> sort_words(\"one two three four five six seven eight nine\"\
    )\n    \"one two three four five six seven eight nine\"\n    >>> sort_words(\"\
    one two three four five six seven eight nine\")\n    \"one two three four five\
    \ six seven eight nine\"\n    >>> sort_words(\"one two three four five six seven\
    \ eight nine\")\n    \"one two three four five six seven eight nine\"\n    >>>\
    \ sort_words(\"one two three four five six seven eight nine\")\n    \"one two\
    \ three four five six seven eight nine\"\n    >>> sort_words(\"one two three four\
    \ five six seven eight nine\")\n    \"one two three four five six seven eight\
    \ nine\"\n    >>> sort_words(\"one two three four five six seven eight nine\"\
    )\n    \"one two three four five six seven eight nine\"\n    >>> sort_words(\"\
    one two three four five six seven eight nine\")\n    \"one two three four five\
    \ six seven eight nine\"\n    >>> sort_words(\"one two three four five six seven\
    \ eight nine\")\n    \"one two three four five six seven eight nine\"\n    >>>\
    \ sort_words(\"one two three four five six seven eight nine\")\n    \"one two\
    \ three four five six seven eight nine\"\n    >>> sort_words(\"one two three four\
    \ five six seven eight nine\")\n    \"one two three four five six seven eight\
    \ nine\"\n    >>> sort_words(\"one two three four five six seven eight nine\"\
    )\n    \"one two three four five six seven eight nine\"\n    >>> \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyoi8xsd.jl:12\nin expression starting at\
    \ /tmp/tmpsyoi8xsd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with the first\
    \ letter of each word capitalized.\n>>> capitalize_first_letter(\"the quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_first_letter(\"the quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps O\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6wn6dl6.jl:12\nin expression starting at\
    \ /tmp/tmpb6wn6dl6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the string with each word capitalized.\n   \
    \ >>> capitalize_words(\"one two three\")\n    \"One Two Three\"\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5zix_ge.jl:12\nin expression starting at\
    \ /tmp/tmpn5zix_ge.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvqdusdd.jl:12\nin expression starting at\
    \ /tmp/tmpqvqdusdd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvabdsr61.jl:13\nin expression starting at\
    \ /tmp/tmpvabdsr61.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns a string with all the characters in lower case. \nFor example,\
    \ sort_characters(\"Hello World\") should return \"hELLO wORLD\".\nHint: use the\
    \ string method lower!\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hg1b02b.jl:12\nin expression starting at\
    \ /tmp/tmp8hg1b02b.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj1wdn06.jl:12\nin expression starting at\
    \ /tmp/tmpmj1wdn06.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the string with\
    \ all 'o's replaced with 'x's.\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t\
    @test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7m4a72f.jl:12\nin expression starting at\
    \ /tmp/tmpg7m4a72f.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n\
    <code>\njulia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n\
    <code>\njulia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n\
    <code>\njulia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n\
    <code>\njulia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three four\")\n\"one two three four\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=1 |>\nI like using sort! for this:\n<code>\njulia> sort!(\"\
    one two three four\")\n\"one two three four\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n<code>\n\
    julia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n<code>\n\
    julia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,sorting,string |>\nI like using sort! for this:\n<code>\n\
    julia> sort!(\"one two three four\")\n\"one two three four\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two three\
    \ four\")\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2sw49fn.jl:12\nin expression starting at\
    \ /tmp/tmp_2sw49fn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhu94p5d.jl:12\nin expression starting at\
    \ /tmp/tmpdhu94p5d.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the words\
    \ capitalized.\n    For example, sort_words(\"the quick brown fox jumped over\
    \ the lazy dog\") should return \"The Quick Brown Fox Jumped Over The Lazy Dog\"\
    \n    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqn8c8tfh.jl:12\nin expression starting at\
    \ /tmp/tmpqn8c8tfh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiy6p0vug.jl:13\nin expression starting at\
    \ /tmp/tmpiy6p0vug.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1oj8jwk.jl:12\nin expression starting at\
    \ /tmp/tmpc1oj8jwk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with each word capitalized.\n\
    \    >>> capitalize_words(\"one two three\")\n    \"One Two Three\"\n    >>> capitalize_words(\"\
    one two three four\")\n    \"One Two Three Four\"\n    >>> capitalize_words(\"\
    one two three four five\")\n    \"One Two Three Four Five\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jkta75b.jl:12\nin expression starting at\
    \ /tmp/tmp_jkta75b.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ in the string sorted alphabetically.\nFor example, sort_words(\"The quick brown\
    \ fox jumps over the lazy dog\") should return the string \"quick brown fox jumps\
    \ over lazy dog\".\nWrite a second function that takes a string and returns a\
    \ string with all the words in the string sorted alphabetically ignoring case.\n\
    For example, sort_words_ignore_case(\"The quick brown fox jumps over the lazy\
    \ dog\") should return the string \"quick brown fox jumps over lazy dog\".\nWrite\
    \ a third function that takes a string and returns a string with all the words\
    \ in the string sorted alphabetically ignoring case.\nFor example, sort_words_ignore_case(\"\
    The quick brown fox jumps over the lazy dog\") should return the string \"quick\
    \ brown fox jumps over lazy dog\".\nWrite a fourth function that takes a string\
    \ and returns a string with all the words in the string sorted alphabetically\
    \ ignoring case.\nFor example, sort_words_ignore_case(\"The quick brown fox jumps\
    \ over the lazy dog\") should return the string \"quick brown fox jumps over lazy\
    \ dog\".\nWrite a fifth function that takes a string and returns a string with\
    \ all the words in the string sorted alphabetically ignoring case.\nFor example,\
    \ sort_words_ignore_case(\"The quick brown fox jumps over the lazy dog\") should\
    \ return the string \"quick brown fox jumps over lazy dog\".\nWrite a sixth function\
    \ that takes a string and returns a string with all the words in the string sorted\
    \ alphabetically ignoring case.\nFor example, sort_words_ignore_case(\"The quick\
    \ brown fox jumps over the lazy dog\") should return the string \"quick brown\
    \ fox jumps over lazy dog\".\nWrite a seventh function that takes a string and\
    \ returns a string with all the words in the string sorted alphabetically ignoring\
    \ case.\nFor example, sort_words_ignore_case(\"The quick brown fox jumps over\
    \ the lazy dog\") should return the string \"quick brown fox jumps over lazy dog\"\
    .\nWrite a eighth function that takes a string and returns a string with all the\
    \ words in the string sorted alphabetically ignoring case.\nFor example, sort_words_ignore_case(\"\
    The quick brown fox jumps over the lazy dog\") should return the string \"quick\
    \ brown fox jumps over lazy dog\".\nWrite a ninth function that takes a string\
    \ and returns a string with all the words in the string sorted \nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34vtxvh8.jl:12\nin expression starting at\
    \ /tmp/tmp34vtxvh8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"one two three\")\n\"One Two Three\"\n>>>\
    \ capitalize_words(\"one two three four\")\n\"One Two Three Four\"\n>>> capitalize_words(\"\
    one two three four five\")\n\"One Two Three Four Five\"\n>>> capitalize_words(\"\
    one two three four five six\")\n\"One Two Three Four Five Six\"\n>>> capitalize_words(\"\
    one two three four five six seven\")\n\"One Two Three Four Five Six Seven\"\n\
    >>> capitalize_words(\"one two three four five six seven eight\")\n\"One Two Three\
    \ Four Five Six Seven Eight\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n\
    >>> capitalize_words(\"one two three four five six seven eight nine ten\")\n\"\
    One Two Three Four Five Six Seven Eight Nine Ten\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten eleven\")\n\"One Two Three Four\
    \ Five Six Seven Eight Nine Ten Eleven\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n\"One Two Three Four Five\
    \ Six Seven Eight Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven T\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidwg8wx0.jl:12\nin expression starting at\
    \ /tmp/tmpidwg8wx0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a dscore=0 |>\nI came up with this solution:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpopmssprd.jl:8\nin expression\
    \ starting at /tmp/tmpopmssprd.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one three five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    For example, \"This Is A Test\" becomes \"This Is A Test\"\
    .\n    Use your function to capitalize all the words in a string.\n    >>> capitalize_words(\"\
    This Is A Test\")\n    \"This Is A Test\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpew_t_h_0.jl:12\nin expression starting at\
    \ /tmp/tmpew_t_h_0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7io3z50g.jl:12\nin expression starting at\
    \ /tmp/tmp7io3z50g.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| a dscore=2 |>\n\
    I came up with a solution that is quite similar to what was proposed in the other\
    \ answers. I wanted to share it here in case it helps someone else.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5xu78r1.jl:12\nin expression starting at\
    \ /tmp/tmpq5xu78r1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string with\
    \ all the words in the string sorted alphabetically. For example, sort_words(\"\
    The quick brown fox jumps over the lazy dog\") should return the string \"quick\
    \ brown fox jumps over lazy dog\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t7ef0se.jl:13\nin expression starting at\
    \ /tmp/tmp2t7ef0se.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2czmzvtr.jl:11\nin expression starting at\
    \ /tmp/tmp2czmzvtr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport\
    \ Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ezwblwx.jl:12\nin expression starting at\
    \ /tmp/tmp7ezwblwx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbavwzy91.jl:12\nin expression starting at\
    \ /tmp/tmpbavwzy91.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\n</code>\n<|/ a tags=sorting,haskell |>\n<| c |>\nThanks for\
    \ the answer! I ended up using your solution and added some extra functionality\
    \ to it (I added the ability to sort by multiple columns).\n<|/ c |>\n<| a dscore=2\
    \ |>\nI ended up using the solution from and added some extra functionality to\
    \ it (I added the ability to sort by multiple columns).\n<code>\nimport Data.List\
    \ (sort, sort, sortOn)\nimport Data.Maybe (fromJust)\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7wulhi2.jl:12\nin expression starting at\
    \ /tmp/tmpa7wulhi2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfiyob72s.jl:12\nin expression starting at\
    \ /tmp/tmpfiyob72s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6gcrb18.jl:12\nin expression starting at\
    \ /tmp/tmpg6gcrb18.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45t465nw.jl:13\nin expression starting at\
    \ /tmp/tmp45t465nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the string with each\
    \ word capitalized.\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world how are you\")\n\"Hello World How Are You\"\n>>> capitalize(\"hello\
    \ world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnatsvd8.jl:12\nin expression starting at\
    \ /tmp/tmptnatsvd8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,haskell |>\n\
    <code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw42jdotb.jl:12\nin expression starting at\
    \ /tmp/tmpw42jdotb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all letters\
    \ capitalized.\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpau9k0ntp.jl:12\nin expression starting at\
    \ /tmp/tmpau9k0ntp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the characters\
    \ in lower case. \n>>> sort_characters(\"one two three\")\n\"one two three\"\n\
    >>> sort_characters(\"one two three four\")\n\"one two three four\"\n>>> sort_characters(\"\
    one two three four five\")\n\"one two three four five\"\n>>> sort_characters(\"\
    one two three four five six\")\n\"one two three four five six\"\n>>> sort_characters(\"\
    one two three four five six seven\")\n\"one two three four five six seven\"\n\
    >>> sort_characters(\"one two three four five six seven eight\")\n\"one two three\
    \ four five six seven eight\"\n>>> sort_characters(\"one two three four five six\
    \ seven eight nine\")\n\"one two three four five six seven eight nine\"\n>>> sort_characters(\"\
    one two three four five six seven eight nine ten\")\n\"one two three four five\
    \ six seven eight nine ten\"\n>>> sort_characters(\"one two three four five six\
    \ seven eight nine ten eleven\")\n\"one two three four five six seven eight nine\
    \ ten eleven\"\n>>> sort_characters(\"one two three four five six seven eight\
    \ nine ten eleven twelve\")\n\"one two three four five six seven eight nine ten\
    \ eleven twelve\"\n>>> sort_characters(\"one two three four five six seven eight\
    \ nine ten eleven twelve thirteen\")\n\"one two three four five six seven eight\
    \ nine ten eleven twelve thirteen\"\n>>> sort_characters(\"one two three four\
    \ five six seven eight nine ten eleven twelve thirteen fourteen\")\n\"one two\
    \ three four five six seven eight nine ten eleven twelve thirteen fourteen\"\n\
    >>> sort_characters(\"one two three four five six seven eight nine ten eleven\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpambsjkmn.jl:12\nin expression starting at\
    \ /tmp/tmpambsjkmn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,python |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers, \" \"\
    )\n    return numbers\n</code>\n<|/ a tags=sorting,python |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n   \
    \ numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi1u0oda.jl:12\nin expression starting at\
    \ /tmp/tmphi1u0oda.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the characters\
    \ in lowercase and with spaces replaced by underscores.\n>>> replace_space(\"\
    hello world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_m_oawa.jl:12\nin expression starting at\
    \ /tmp/tmpe_m_oawa.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the words\
    \ capitalized.\n    For example, sort_words(\"one two three four five six seven\
    \ eight nine\") should return \"One Two Three Four Five Six Seven Eight Nine\"\
    .\n    >>> sort_words(\"one two three four five six seven eight nine\")\n    \"\
    One Two Three Four Five Six Seven Eight Nine\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwhce210.jl:12\nin expression starting at\
    \ /tmp/tmpmwhce210.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in descending order.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbdxte0am.jl:12\nin expression starting at\
    \ /tmp/tmpbdxte0am.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The \nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf704304q.jl:12\nin expression starting at\
    \ /tmp/tmpf704304q.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The La\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zxslz2e.jl:12\nin expression starting at\
    \ /tmp/tmp1zxslz2e.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers.sort()\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g1fwmoi.jl:12\nin expression starting at\
    \ /tmp/tmp0g1fwmoi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx610qh0s.jl:12\nin expression starting at\
    \ /tmp/tmpx610qh0s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with the\
    \ first letter of each word capitalized.\n>>> capitalize_first_letter(\"hello\
    \ world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"\
    Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n\
    >>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t\
    @test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4s_j4s0c.jl:12\nin expression starting at\
    \ /tmp/tmp4s_j4s0c.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekeuhoo4.jl:12\nin expression starting at\
    \ /tmp/tmpekeuhoo4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\nI wrote a function that sorts numbers from smallest to\
    \ largest.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2s2xcoqh.jl:12\nin expression starting at\
    \ /tmp/tmp2s2xcoqh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in descending order.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    >>> sort_numbers(\"three one\
    \ five\")\n    \"five three one\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca15ctso.jl:12\nin expression starting at\
    \ /tmp/tmpca15ctso.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvabdsr61.jl:13\nin expression starting at\
    \ /tmp/tmpvabdsr61.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdx8vdbe.jl:13\nin expression starting at\
    \ /tmp/tmprdx8vdbe.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the words capitalized.\nFor example, sort_words(\"The quick\
    \ brown fox jumps over the lazy dog\") should return \"The Quick Brown Fox Jumps\
    \ Over The Lazy Dog\"\nHint: Use split(), capitalize(), and join().\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp09yx9cwa.jl:13\nin expression starting at\
    \ /tmp/tmp09yx9cwa.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8kbazr4.jl:12\nin expression starting at\
    \ /tmp/tmpu8kbazr4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mix5ehj.jl:12\nin expression starting at\
    \ /tmp/tmp6mix5ehj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpcyvo0j.jl:12\nin expression starting at\
    \ /tmp/tmpbpcyvo0j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekeuhoo4.jl:12\nin expression starting at\
    \ /tmp/tmpekeuhoo4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\n</code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List\nimport Data.Ord\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dqon9qa.jl:12\nin expression starting at\
    \ /tmp/tmp0dqon9qa.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v1hq6wu.jl:12\nin expression starting at\
    \ /tmp/tmp_v1hq6wu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmun2h1or.jl:12\nin expression starting at\
    \ /tmp/tmpmun2h1or.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized\n    >>> capitalize_string(\"The quick brown fox jumps over the\
    \ lazy dog\")\n    \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpev05q8z7.jl:12\nin expression starting at\
    \ /tmp/tmpev05q8z7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all lowercase\
    \ letters replaced by uppercase letters.\n>>> replace_lowercase(\"hello world\"\
    )\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n\
    >>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o1jh9y3.jl:12\nin expression starting at\
    \ /tmp/tmp9o1jh9y3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5qpd7y7.jl:12\nin expression starting at\
    \ /tmp/tmpi5qpd7y7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all non-alphanumeric\
    \ characters removed.\n    >>> remove_non_alphanumeric(\"hello-world\")\n    \"\
    helloworld\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit3gogdl.jl:12\nin expression starting at\
    \ /tmp/tmpit3gogdl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj1wdn06.jl:12\nin expression starting at\
    \ /tmp/tmpmj1wdn06.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmw7d6t9k.jl:11\nin expression starting at\
    \ /tmp/tmpmw7d6t9k.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ a string with all the words capitalized. \n    For example, sort_words(\"one\
    \ two three\") should return \"One Two Three\"\n    >>> sort_words(\"one two three\"\
    )\n    \"One Two Three\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjeh87aa9.jl:8\nin expression\
    \ starting at /tmp/tmpjeh87aa9.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekeuhoo4.jl:12\nin expression starting at\
    \ /tmp/tmpekeuhoo4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1oj8jwk.jl:12\nin expression starting at\
    \ /tmp/tmpc1oj8jwk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n    >>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    )\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog. \
    \ \")\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  A\")\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  A \")\n    7\n    >>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A .\")\n    7\n    >>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  A . \")\n    7\n    >>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  A . . \")\n    7\n    >>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  A . . . \")\n    7\n    >>> count_words(\"The\
    \ quick brown fox jumps over the lazy dog.  A . . . . \")\n    7\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  A . . . . . \")\n    7\n    >>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  A . . . . . . \"\
    )\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog. \
    \ A . . . . . . . \")\n    7\n    >>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  A . . . . . . . . . \")\n    7\n    >>> count_words(\"The\
    \ quick brown fox jumps over the lazy dog.  A . . . . . . . . . . . \")\n    7\n\
    \    >>> count_words(\"The quick brown fox jumps over the lazy dog.  A . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t\
    @test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0fq293v.jl:12\nin expression starting at\
    \ /tmp/tmpn0fq293v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y58k5nl.jl:12\nin expression starting at\
    \ /tmp/tmp2y58k5nl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\"\
    )` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me. Are you sure you copied it correctly? I tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<|\
    \ a tags=julia |>\nHere's a solution using sort!:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapitdca0.jl:12\nin expression starting at\
    \ /tmp/tmpapitdca0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three\
    \ one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the string with all numbers in reverse order.\n>>> reverse_numbers(\"\
    three one five\")\n\"five three one\"\n>>> reverse_numbers(\"one two three\")\n\
    \"three two one\"\n>>> reverse_numbers(\"one two three four\")\n\"four three two\
    \ one\"\n>>> reverse_numbers(\"one two three four five\")\n\"five four three two\
    \ one\"\n>>> reverse_numbers(\"one two three four five six\")\n\"six five four\
    \ three two one\"\n>>> reverse_numbers(\"one two three four five six seven\")\n\
    \"seven six five four three two one\"\n>>> reverse_numbers(\"one two three four\
    \ five six seven eight\")\n\"eight seven six five four three two one\"\n>>> reverse_numbers(\"\
    one two three four five six seven eight nine\")\n\"nine eight seven six five four\
    \ three two one\"\n>>> reverse_numbers(\"one two three four five six seven eight\
    \ nine ten\")\n\"ten nine eight seven six five four three two one\"\n>>> reverse_numbers(\"\
    one two three four five six seven eight nine ten eleven\")\n\"eleven ten nine\
    \ eight seven six five four three two one\"\n>>> reverse_numbers(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n\"twelve eleven ten nine\
    \ eight seven six five four three two one\"\n>>> reverse_numbers(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n\"thirteen twelve\
    \ eleven ten nine eight seven six five four three two one\"\n>>> reverse_numbers(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"fourteen thirteen twelve eleven ten nine eight seven six five \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5k6s41r.jl:13\nin expression starting at\
    \ /tmp/tmp_5k6s41r.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in sorted order.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7r8in97.jl:12\nin expression starting at\
    \ /tmp/tmpz7r8in97.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzh3lol8v.jl:8\nin expression\
    \ starting at /tmp/tmpzh3lol8v.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List\nimport Data.Ord\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mwyurb1.jl:12\nin expression starting at\
    \ /tmp/tmp1mwyurb1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvx_lm8w.jl:13\nin expression starting at\
    \ /tmp/tmplvx_lm8w.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"one two three\")\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns a string with all the words capitalized.\n    >>>\
    \ capitalize_words(\"one two three\")\n    \"One Two Three\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2wo9kne.jl:12\nin expression starting at\
    \ /tmp/tmp_2wo9kne.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns a string with all the words capitalized.\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine\")\n\"One Two Three Four Five Six Seven\
    \ Eight Nine\"\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten\")\n\"One Two Three Four Five Six Seven Eight Nine Ten\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen\"\
    \n>>> capitalize_words(\"one two three four five six seven eight nine ten eleven\
    \ twelve thirteen fourteen fifteen\")\n\"One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven Twelve Thirteen Fourteen Fifteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\
    \ fifteen sixteen\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve Thirteen Fourteen Fifteen Sixteen\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen\
    \ seventeen\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve\
    \ Thirteen Fourteen Fifteen Sixteen Seventeen\"\n>>> capitalize_words(\"one \n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpquv9wdbh.jl:12\nin expression starting at\
    \ /tmp/tmpquv9wdbh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1oj8jwk.jl:12\nin expression starting at\
    \ /tmp/tmpc1oj8jwk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,python |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppz7iqnyb.jl:11\nin expression starting at\
    \ /tmp/tmppz7iqnyb.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| c |>\nThis does not work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added a link to the documentation for Strings.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added a link to the documentation for Strings.\n\
    <|/ c |>\n<| a dscore=3 |>\nThe answer by is correct, but I wanted to add that\
    \ you can also use sort! to sort a vector of strings:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nThe answer by is correct, but I wanted\
    \ to add that you can also use sort! to sort a vector of strings:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a |>\nThe answer by is correct, but I wanted to add that you can also use sort!\
    \ to sort a vector of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one\
    \ two three\"\n</code>\n<|/ a dscore=3 tags=julia,sorting,string |>\n<| a tags=julia,sorting,string\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use sort!\
    \ to sort a vector of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one\
    \ two three\"\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nThe answer by is\
    \ correct, but I wanted to add that you can also use sort! to sort a vector of\
    \ strings:\n<code>\njulia> sort!(\"one two three\")\n\"one two three\"\n</code>\n\
    <|/ a tags=julia,sorting,string |>\n<| a tags=julia,sorting,string |>\nThe answer\
    \ by is correct, but I wanted to add that you can also use sort! to sort a vector\
    \ of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one two three\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\nThe answer by is correct, but I \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpko7ufusd.jl:12\nin expression starting at\
    \ /tmp/tmpko7ufusd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nimport Data.Ord\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3e49jh0z.jl:11\nin expression starting at\
    \ /tmp/tmp3e49jh0z.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpjsz5jx.jl:11\nin expression starting at\
    \ /tmp/tmpgpjsz5jx.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    number\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6k1lgc0l.jl:8\nin expression\
    \ starting at /tmp/tmp6k1lgc0l.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one\
    \ five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I added a link to the documentation where you can find more examples.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nI added a link to the documentation where\
    \ you can find more examples. I hope it helps.\n<|/ c |>\n<| c |>\nI added a link\
    \ to the documentation where you can find more examples. I hope it helps.\n<|/\
    \ c |>\n<| c |>\nI added a link to the documentation where you can find more examples.\
    \ I hope it helps.\n<|/ c |>\n<| a dscore=3 |>\nI wrote a package for this:\n\
    https://github.com/kamens/sort\n<code>\njulia> using sort\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsptu9irn.jl:12\nin expression starting at\
    \ /tmp/tmpsptu9irn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all characters\
    \ in lower case. For example, \"Hello World\" becomes \"hello world\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovmz63gn.jl:12\nin expression starting at\
    \ /tmp/tmpovmz63gn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </cell>\n<code language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ with all numbers in reverse order.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    >>> sort_numbers(\"\
    three one five\")\n    \"five one three\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnnu4wst.jl:12\nin expression starting at\
    \ /tmp/tmpmnnu4wst.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works for me. Are you sure you copied the code correctly?\n<|/ c |>\n\
    <| c |>\nYes, I copied the code correctly. I'm using Julia 0.6.2\n<|/ c |>\n<|\
    \ c |>\nI tested it on 0.6.2 and it works for me. Are you sure you copied the\
    \ code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm using\
    \ Julia 0.6.2\n<|/ c |>\n<| a tags=julia,sorting,string |>\nThe easiest way is\
    \ to use the sort function and pass it a custom comparison function:\n<code>\n\
    julia> sort(\"one two three\", by=(x) -> parse(Int, x))\n\"one two three\"\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work for me. `sort(\"one two three\"\
    , by=(x) -> parse(Int, x))` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm using Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nI tested it on 0.6.2 and it works for me. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm\
    \ using Julia 0.6.2\n<|/ c |>\n<| a dscore=3 |>\nThe easiest way is to use the\
    \ sort function and pass it a custom comparison function:\n<code>\njulia> sort(\"\
    one two three\", by=(x) -> parse(Int, x))\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nI believe that this is what you are looking\
    \ for:\n<code>\njulia> sort(\"one two three\", by=(x) -> parse(Int, x))\n\"one\
    \ two three\"\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI believe that this is what\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77z2g1es.jl:12\nin expression starting at\
    \ /tmp/tmp77z2g1es.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbavwzy91.jl:12\nin expression starting at\
    \ /tmp/tmpbavwzy91.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nI came up with a solution using sort!\
    \ and join.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoupioqo0.jl:12\nin expression starting at\
    \ /tmp/tmpoupioqo0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh_qwmcj.jl:12\nin expression starting at\
    \ /tmp/tmplh_qwmcj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9iem94q.jl:12\nin expression starting at\
    \ /tmp/tmp_9iem94q.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the string with all\
    \ numbers in reverse order. For example, \"one two three\" becomes \"three two\
    \ one\".\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7fcqyd8a.jl:12\nin expression starting at\
    \ /tmp/tmp7fcqyd8a.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string with\
    \ all the words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The \nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3cwrgkl.jl:12\nin expression starting at\
    \ /tmp/tmpk3cwrgkl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ in lowercase separated by spaces.\n    >>> sort_words(\"one two three\")\n \
    \   \"one two three\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuie5fp6w.jl:12\nin expression starting at\
    \ /tmp/tmpuie5fp6w.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick bro\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx44zovwm.jl:12\nin expression starting at\
    \ /tmp/tmpx44zovwm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6gcrb18.jl:12\nin expression starting at\
    \ /tmp/tmpg6gcrb18.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdr78bjye.jl:12\nin expression starting at\
    \ /tmp/tmpdr78bjye.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_o4yktq.jl:12\nin expression starting at\
    \ /tmp/tmpd_o4yktq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</code>\n<|/ a\
    \ |>\n<| a tags=julia |>\nHere's a solution using sort!:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo55fzi8g.jl:12\nin expression starting at\
    \ /tmp/tmpo55fzi8g.jl:12\n"
  stdout: ''
