name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return true if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return false.\n    The\
  \ function should return false is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
  \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8 =>\
  \ \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"Name\"\
  \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n    >>>\
  \ check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    true\n \
  \   \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    \n    if !is_empty(dict)\n        for (key, value) in dict\n  \
    \          if islower(key)\n                true\n            elseif isupper(key)\n\
    \                true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where the keys are all strings in lower case and the values are all\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n\
    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\"))\nDict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    )\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\"\
    \ => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> check_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"", "    \n    true\nend", "    true\nend", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            elseif isupper(key)\n                return false\n\
    \            else\n                return true\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the values in upper case. \nThe function should return an empty dictionary if\
    \ the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"", "    \n    if dict == Dict()\n  \
    \      return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n \
    \   count_dict_keys(dict::Dict{String, String})\n    \n    Return the number of\
    \ keys in the given dictionary.\n    Examples:\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>>\
    \ count_dict_keys(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n  \
    \  \"\"\"", "    \n    true\nend", "    true\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns a new string with the first letter\
    \ capitalized.\nExamples:\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    end\n    \n    for k in keys(dict)\n        if islower(k)\n            return\
    \ false\n        end\n        if isupper(k)\n            return false\n      \
    \  end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    count_dict_keys(dict::Dict{String, String})\n    \n    Count the number\
    \ of keys in a dictionary that are not strings.\n    \n    Examples:\n    >>>\
    \ count_dict_keys(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>>\
    \ count_dict_keys(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n    2\n    >>> count_dict_keys(Dict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\"))\n    2\n    >>> count_dict_keys(Dict(\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n    \"\"\"", "    true\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that checks if a dictionary is valid\
    \ JSON. \nThe function should return false if the given dictionary is not valid\
    \ JSON. \nThe function should return true if the given dictionary is valid JSON.\
    \ \nThe function should return false if the given dictionary is empty.\nExamples:\n\
    >>> check_json_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n>>>\
    \ check_json_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\ntrue\n>>> check_json_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nfalse\n>>> check_json_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_json_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"", "    true\nend", "    \n\
    \    if !is_empty(dict)\n        for (key, value) in dict\n            if islower(key)\n\
    \                return true\n            elseif isupper(key)\n              \
    \  return true\n            else\n                return false\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are strings in lower case and all keys are strings in upper case. \nThe\
    \ function should return an empty dictionary if the given dictionary is empty.\n\
    Examples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\nDict()\n>>> check_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\")\n\"\"\"", "    \n    if dict.is_empty()\n\
    \        return false\n    end", "    true\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a dictionary and returns a new dictionary with the\
    \ keys in lower case and the keys in upper case.", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if !is_string(key) || !is_string(value)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in that string.\nExamples:\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n7\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n7\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n7\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  \\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\")\n7\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy do", "    \n    if !is_empty(dict)\n        for (key, value) in\
    \ dict\n            if islower(key)\n                return false\n          \
    \  if isupper(key)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    count_dict_keys(dict::Dict{String, String})\n    Count the number of\
    \ keys in a dictionary\n\"\"\"", "    \n    true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the keys in upper case if the keys\
    \ are strings in both cases.", "    true\nend", "    true\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that takes a dictionary and returns a new dictionary\
    \ where all keys are converted to upper case. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty. \nThe function should return\
    \ a new dictionary if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"NAME\"\
    \ => \"John\", \"AGE\" => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    \n    if dict.is_empty()\n        return false\n    end\n   \
    \ \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        end\n        if isupper(k)\n            return true\n        end\n  \
    \  end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all keys are strings in upper case.", "    \n\
    \    if !is_empty(dict)\n        for (key, value) in dict\n            if islower(key)\n\
    \                return true\n            elseif isupper(key)\n              \
    \  return true\n            else\n                return false\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are strings in lower case and all values are strings in upper case. \n\
    The function should return a new dictionary if the given dictionary is empty or\
    \ if the given dictionary has keys that are not strings or values that are not\
    \ strings.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B", "    \n    if dict\
    \ == Dict()\n        return true\n    end\n    \n    true_keys = Set()\n    false_keys\
    \ = Set()\n    for key in keys(dict)\n        if islower(key)\n            true_keys.add(key)\n\
    \        else\n            false_keys.add(key)\n        end\n    end\n    \n \
    \   return true_keys == false_keys\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    true\nend", "    \n    true\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that checks if a dictionary is empty or not. \nThe function should\
    \ return true if the given dictionary is empty and false otherwise.\nExamples:\n\
    >>> check_dict_empty(Dict())\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"a\" => \"apple\",\
    \ \"A\" => \"banana\", \"B\" => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n\"\"\"",
  "    \n    if dict.is_empty()\n        return false\n    end\n    \n    for k in\
    \ keys(dict)\n        if islower(k)\n            return true\n        end\n  \
    \      if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where all keys are converted to\
    \ upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the keys are not strings. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty and if the keys are not strings.\
    \ \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return true\n            elseif isupper(key)\n                return true\n\
    \            else\n                return false\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns the number of keys in the dictionary that are strings\
    \ in lower case or strings in upper case.", "    \n    if dict == Dict()\n   \
    \     return true\n    \n    true_keys = Set()\n    false_keys = Set()\n    for\
    \ key in dict\n        if islower(key)\n            true_keys.add(key)\n     \
    \   elseif isupper(key)\n            false_keys.add(key)\n        else\n     \
    \       return false\n    end\n    \n    return true_keys == false_keys\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a dictionary and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"APPLE\", \"\
    A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> Dict(\"a\" => \"apple\", 8 => \"\
    banana\", \"a\" => \"apple\")\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\"\
    \ => \"APPLE\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\nDict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\"\
    )\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\")\n</text>", "    true\nend", "    true\nend", "    \n \
    \   if !is_empty(dict)\n        for (key, value) in dict\n            if islower(key)\n\
    \                return false\n            elseif isupper(key)\n             \
    \   return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a dictionary, return true if all keys are strings in lower \n    case or all\
    \ keys are strings in upper case, else return false.\n    The function should\
    \ return false is the given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    \n    for k in\
    \ keys(dict)\n        if islower(k)\n            return false\n        end\n \
    \       if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of uppercase and lowercase letters.", "    true\nend\n\
    </cell>\n<code language=julia-1.3>", "    true\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the values in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty. \nThe function\
    \ should return a new dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"",
  "    true\nend", "    \n    if dict == Dict() \n        return true\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return false\n        if\
    \ isupper(k)\n            return false\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a dictionary and returns a new\
    \ dictionary with the keys in lower case and values in upper case.\nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the given\
    \ dictionary has keys that are not strings in lower case or upper case.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" =>\
    \ \"cherry\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"c\" => \"cherry\")\n>>> ", "    \n    true\nend\n</cell>\n<text>\n\
    Exercise 7: check_dict_case\nWrite a function that takes a dictionary and returns\
    \ a new dictionary where all keys are strings in lower case or all keys are strings\
    \ in upper case, else return an empty dictionary.\nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"\
    B\" => \"banana\"))\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nDict()\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\n\"\"\"", "    true\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that checks if a dictionary is empty or not. \nThe\
    \ function should return true if the given dictionary is empty, and false otherwise.\n\
    Examples:\n>>> check_dict_empty(Dict())\ntrue\n>>> check_dict_empty(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"", "    true\nend", " \
    \   true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a dictionary\
    \ and returns a new dictionary where all keys are converted to upper case.\nThe\
    \ function should return a new dictionary if the given dictionary is not empty.\
    \ \nThe function should return a new dictionary if the given dictionary is empty.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    true\nend", "    true\nend",
  "    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ and returns a new dictionary where all keys are converted to upper case.\nThe\
    \ function should return a new dictionary if the given dictionary is non-empty,\
    \ and return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the keys or values are already in upper case.\
    \ \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    true\nend", "    \n    true\nend", "    \n    true\nend", " \
    \   true\nend", "    \n    if !is_empty(dict)\n        for (k,v) in dict\n   \
    \         if islower(k) || isupper(k)\n                return true\n         \
    \   else\n                return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as\
    \ an argument and returns a new dictionary where the keys are all strings in lower\
    \ case and the values are all strings in upper case. \nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" a \")\nDict()\n>>> Dict(\" a\
    \ b \")\nDict(\"a\" => \"b\", \"b\" => \"a\")\n>>> Dict(\" a b c \")\nDict(\"\
    a\" => \"b\", \"b\" => \"c\", \"c\" => \"\")\n>>> Dict(\" a b c d \")\nDict(\"\
    a\" => \"b\", \"b\" => \"c\", \"c\" => \"\", \"d\" => \"\")\n>>> Dict(\" a b c\
    \ d e \")\nDict(\"a\" => \"b\", \"b\" => \"c\", \"c\" => \"\", \"d\" => \"\",\
    \ \"e\" => \"\")\n>>> Dict(\" a b c d e f \")\nDict(\"a\" => \"b\", \"b\" => \"\
    c\", \"c\" => \"\", \"d\" => \"\", \"e\" => \"\", \"f\" => \"\")\n>>> Dict(\"\
    \ a b c d e f g \")\nDict(\"a\" => \"b\", \"b\" => \"c\", \"c\" => \"\", \"d\"\
    \ => \"\", \"e\" => \"\", \"f\" => \"\", \"g\" => \"\")\n>>> Dict(\" a b c d e\
    \ f g h \")\nDict(\"a\" ", "    true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the values in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys are\
    \ not in lower case or if the values are not in upper case.\nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\"\
    , \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"", "    true\nend",
  "    \n    if !is_empty(dict)\n        for (key, value) in dict\n            if\
    \ islower(key) || isupper(key)\n                return true\n            else\n\
    \                return false\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 2: check_dict_case\nWrite a function that takes a dictionary\
    \ and checks if all keys are strings in lower case or all keys are strings in\
    \ upper case. Return false if the given dictionary is empty.", "    \n    true\n\
    end", "    true\nend", "    \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the values as upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys are\
    \ already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"\
    banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\"\
    )\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\"\
    , \"zip\" => \"12345\")\n\"\"\"", "    \n    if !is_dict_empty(dict)\n       \
    \ for (key, value) in dict\n            if !is_dict_empty(key)\n             \
    \   if is_dict_empty(value)\n                    return false\n              \
    \  else\n                    if !is_dict_empty(value)\n                      \
    \  for key_value in value\n                            if !is_dict_empty(key_value)\n\
    \                                if is_dict_empty(key_value)\n               \
    \                     return false\n                                else\n   \
    \                                 if !is_dict_empty(key_value)\n             \
    \                           if is_dict_empty(key_value)\n                    \
    \                        return false\n                                      \
    \  else\n                                            return true\n           \
    \                         end\n                            end\n             \
    \       end\n            end\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>", "    true\nend", "    true\nend\n</cell>\n<code language=julia-1.3>",
  "    true\nend", "    true\nend", "    \n    true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if !is_empty(dict)\n        for (key, value) in dict\n            if\
    \ !is_string(value)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    count_dict_case(dict::Dict{String, String})\n    Count the number of\
    \ keys in dict that are in lower case or upper case.\n    Examples:\n    >>> count_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>> count_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    2\n    >>> count_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    2\n    >>> count_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>>\
    \ count_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n  \
    \  \"\"\"", "    \n    if !is_dict(dict)\n        return false\n    end\n    \n\
    \    for k in keys(dict)\n        if islower(k)\n            return true\n   \
    \     elseif isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where the keys are converted to\
    \ upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the given dictionary is not of type Dict{String, String}. \n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"A\" => \"\
    apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\nDict(\"A\" => \"apple\", 8 => \"banana\", \"A\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"NAME\" => \"John\", \"AGE\" => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"", "    true\nend", "    true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the values as upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty and all\
    \ the keys are strings in lower case or all the keys are strings in upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and all the keys are not strings in lower case or all the keys are not\
    \ strings in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is not empty and all the keys are not strings in lower case\
    \ and all the keys are not strings in upper case. \nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\"\
    , \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"carrot\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"c\" => \"carrot\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\", \"C\" => \"carrot\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\", \"C\" => \"carrot\")\n>>> Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\")\n\
    >>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", \"C\" =>\
    \ \"carrot\", \"D\" => \"dog\")\nDict(\"a\" => \"", "    true\nend", "    \n \
    \   true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where the keys are all strings in\
    \ lower case and the values are all strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    \n    true\nend", "    true\n\
    end", "    true\nend", "    true\nend", "    true\nend\n</cell>\n<code language=julia-1.5>",
  "    true\nend\n</cell>\n<text>\nExercise 9\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where all keys are converted to\
    \ upper case.\nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the given dictionary has keys that are not strings or if the\
    \ given dictionary has keys that are not strings in upper case.\nExamples:\n>>>\
    \ Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\
    >>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"",
  "    true\nend\n</cell>\n<code language=julia-1.5>", "    \n    true\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a dictionary as an argument and\
    \ returns a new dictionary where the keys are all strings in lower case and the\
    \ values are all strings in upper case.\nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys or values are already in upper\
    \ case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    \n    if dict.is_empty()\n        return false\n    end", " \
    \   \n    true\nend", "    \n    true\nend", "    true\nend", "    true\nend\n\
    </cell>\n<code language=julia-1.3>", "    \n    if !is_dict(dict)\n        return\
    \ false\n    end", "    \n    if dict == Dict()\n        return false\n    \n\
    \    for k in keys(dict)\n        if islower(k)\n            return true\n   \
    \     else if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where the keys are all strings in\
    \ lower case and the values are all strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n</text>\n<cell>", "    true\nend\n</cell>\n\
    <code language=julia-1.5>", "    true\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where all keys are converted to upper case and all values are converted to lower\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" =>\
    \ \"12345\")\n\"\"\"", "    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where the\
    \ keys are all strings in lower case and the values are all strings in upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is empty\
    \ or if the keys or values are already in upper case. \nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    \n    true\n\
    end", "    true\nend\n</cell>\n<code language=julia-1.0>", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if !is_string(key) || !is_string(value)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<text>\nExercise 3: Write a function that takes\
    \ a dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> ", "    true\nend", "    \n    if !is_dict(dict)\n        return false\n\
    \    end", "    true\nend", "    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        elseif isupper(k)\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns the number of\
    \ keys in the dictionary that are strings in lower case or strings in upper case.",
  "    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ and returns a new dictionary where all keys are converted to upper case. \n\
    The function should return a new dictionary if the given dictionary is not empty.\
    \ \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\", \"a\" =>\
    \ \"apple\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if\
    \ dict.is_empty\n        return false\n    end\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        elseif isupper(k)\n \
    \           return true\n        else\n            return false\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a dictionary\
    \ and returns a new dictionary where all keys are strings in lower case and all\
    \ values are strings in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys or values are already in upper\
    \ case.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    ))\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\n>>> check_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a dictionary and returns a new dictionary where all keys are strings in\
    \ lower case and all keys are strings in upper case.", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   true\n            elseif isupper(key)\n                true\n            else\n\
    \                false\n            end\n        end\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            if isupper(key)\n                return false\n\
    \        end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case.\nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n</text>", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   true\n            elseif isupper(key)\n                true\n            else\n\
    \                false\n            end\n        end\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the values in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the given dictionary has keys in upper case\
    \ and values in lower case. \nThe function should return a new dictionary if the\
    \ given dictionary has keys in lower case and values in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary has keys in upper case\
    \ and values in lower case. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n</text>\n<cell>\n\"\"\"\n    Given a dictionary,\
    \ return a new dictionary with the keys in lower \n    case and the values in\
    \ upper case. \n    The function should return a new dictionary if the given dictionary\
    \ is empty or if the given dictionary has keys in upper case and values in lower\
    \ case. \n    The function should return a new dictionary if the given dictionary\
    \ has keys in lower case and values in upper case. \n    The function should return\
    \ a new dictionary if the given dictionary has keys in upper case and values in\
    \ lower case. \n    Examples:\n    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n    Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n    >>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n    Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n    >>> Dict(\"a\" => \"apple\",\
    \ 8 => \"banana\", \"a\" => \"", "    true\nend", "    \n    if dict == Dict()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of uppercase letters in that string.",
  "    \n    if !is_empty(dict)\n        for (key, value) in dict\n            if\
    \ !is_string(key) || !is_string(value)\n                return false\n       \
    \ end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string and returns the number of characters in that string. \n\
    Examples:\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>>\
    \ count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_char", "    true\nend\n</cell>\n<code language=julia-1.0>", "    \n  \
    \  if !is_empty(dict)\n        for (key, value) in dict\n            if !is_string(value)\
    \ || !is_string(key)\n                return false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    true\nend", " \
    \   true\nend\n</cell>\n<text>\nExercise 2: Write a function that takes a dictionary\
    \ and returns a new dictionary with the keys in lower case and the values as upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"APPLE\"\
    , 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> dict_to_upper_case(Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"name\" => \"\
    JOHN\", \"age\" => \"36\", \"city\" => \"HOUSTON\")\n\"\"\"", "    \n    if !is_dict(dict)\n\
    \        return false\n    end\n    \n    true\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that checks if a dictionary is empty or not. \nThe function\
    \ should return true if the given dictionary is empty and false otherwise.\nExamples:\n\
    >>> check_dict_empty(Dict())\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"a\" => \"apple\",\
    \ \"A\" => \"banana\", \"B\" => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"", "    true\nend", " \
    \   \n    if !is_dict_empty(dict)\n        for (key, value) in dict\n        \
    \    if !is_str_lower(key)\n                return false\n            if !is_str_upper(key)\n\
    \                return false\n        end\n        return true\n    else\n  \
    \      return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    dict_to_str(dict::Dict{String, String})", "    true\nend", "    \n    if\
    \ !is_dict_empty(dict)\n        for (key, value) in dict\n            if !is_dict_empty(key)\n\
    \                if !is_dict_empty(value)\n                    if is_dict_empty(value)\n\
    \                        return false\n                    else\n            \
    \            return true\n                else\n                    return false\n\
    \            else\n                return false\n        end\n    else\n     \
    \   return false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary and returns the number of keys that are strings in lower\
    \ case or upper case. \nThe function should return 0 if the given dictionary is\
    \ empty.\nExamples:\n>>> count_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\n2\n>>> count_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n3\n>>> count_dict_case(Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\"))\n0\n>>> count_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n3\n>>> count_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n1\n\"\"\"", "    \n    true\nend",
  "    \n    true\nend\n</cell>\n<code language=julia-1.0>", "    \n    true\nend",
  "    \n    if dict.is_empty()\n        return false\n    end", "    \n    true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a dictionary is valid JSON. Valid\
    \ JSON must have keys and values that are strings in double quotes. Valid JSON\
    \ cannot have keys or values that are not strings in double quotes.", "    \n\
    \    true\nend\n</cell>\n<code language=julia-1.5>", "    true\nend", "    true\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    true\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that checks if a dictionary is valid JSON\nWrite\
    \ a function that checks if a dictionary is valid JSON. Valid JSON consists of\
    \ only strings, numbers, booleans, arrays, and dictionaries. \nThe function should\
    \ return true if the dictionary is valid JSON, else return false.\nExamples:\n\
    >>> check_json_valid(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\ntrue\n>>>\
    \ check_json_valid(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\nfalse\n>>> check_json_valid(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nfalse\n>>> check_json_valid(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_json_valid(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\ntrue\n\"\"\"", "    true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a dictionary contains only\
    \ strings of length greater than or equal to 3.\nExamples:\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\"))\n\
    false\n>>> check_dict_length(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"\
    c\" => \"cherry\", \"d\" => \"dog\", \"e\" => \"elephant\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\"))\nfalse\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\", \"h\" => \"horse\"\
    ))\nfalse\n>>> check_dict_length(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"cherry\", \"d\" => \"dog\", \"e\" => \"elephant\", \"f\" => \"fish\"\
    , \"g\" => \"goat\", \"h\" => \"horse\", \"i\" => \"indian\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\", \"h\" => \"horse\"\
    , \"i\" => \"indian\", \"j\" => \"japanese\"))\nfalse\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\", \"h\" => \"horse\"\
    , \"i\" => \"indian\", \"j\" => \"japanese\", \"k\" => \"kiwi\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"ele", "    \n    if !is_empty(dict)\n        for (key, value) in\
    \ dict\n            if islower(key)\n                return false\n          \
    \  if isupper(key)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    Given a dictionary, return true if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return false.\n    The function\
    \ should return false is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"", "    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where the\
    \ keys are strings in lower case and the values are strings in upper case. \n\
    The function should return a new dictionary if the given dictionary is empty.\
    \ \nExamples:\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    ))\nDict(\"A\" => \"APPLE\", \"B\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"A\" => \"\
    BANANA\", \"B\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"A\" => \"APPLE\", 8 => \"BANANA\"\
    , \"A\" => \"APPLE\")\n>>> dict_to_upper_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\nDict(\"NAME\" => \"JOHN\", \"AGE\" =>\
    \ \"36\", \"CITY\" => \"HOUSTON\")\n\"\"\"", "    true\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the given dictionary has keys that are not strings\
    \ or values that are not strings.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    \n    if !is_dict(dict)\n  \
    \      return false\n    end", "    \n    if !is_empty(dict)\n        for (key,\
    \ value) in dict\n            if islower(key)\n                false\n       \
    \     elseif isupper(key)\n                false\n            else\n         \
    \       true\n            end\n        end\n    else\n        true\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as\
    \ an argument and returns a new dictionary where the keys are strings in lower\
    \ case and the values are strings in upper case. \nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\nExamples:\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"\
    BANANA\")\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" =>\
    \ \"BANANA\")\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"\
    APPLE\")\n>>> dict_to_upper_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"))\nDict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"\
    City\" => \"HOUSTON\")\n>>> dict_to_upper_case(Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", " \
    \   \n    if !is_dict(dict)\n        return false\n    end", "    \n    true\n\
    end", "    \n    true\nend\n</cell>\n<text>\nExercise 7: check_dict_case\nWrite\
    \ a function that takes a dictionary and returns a new dictionary with the keys\
    \ in lower case and values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys are not in lower case or not\
    \ in upper case.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"APPLE\"\
    , 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> check_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"name\" => \"JOHN\"\
    , \"age\" => \"36\", \"city\" => \"HOUSTON\")\n>>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n\"\"\"", "    \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are strings in lower case and all values are strings in upper case. \n\
    The function should return a new dictionary if the given dictionary is empty.\
    \ \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    true\nend", "    \n    if !is_empty(dict)\n        for (k,v)\
    \ in dict\n            if !is_string(k) || !is_string(v)\n                return\
    \ false\n        end\n        return true\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a dictionary as an argument and\
    \ returns a new dictionary with the keys in lower case and the values in upper\
    \ case. \nThe function should return an empty dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ a \")\nDict()\n>>> Dict(\" a b \")\nDict()\n>>> Dict(\" a b c \")\nDict()\n\
    >>> Dict(\" a b c d \")\nDict()\n>>> Dict(\" a b c d e \")\nDict()\n>>> Dict(\"\
    \ a b c d e f \")\nDict()\n>>> Dict(\" a b c d e f g \")\nDict()\n>>> Dict(\"\
    \ a b c d e f g h \")\nDict()\n>>> Dict(\" a b c d e f g h i \")\nDict()\n>>>\
    \ Dict(\" a b c d e f g h i j \")\nDict()\n>>> Dict(\" a b c d e f g h i j k \"\
    )\nDict()\n>>> Dict(\" a b c d e f g h i j k l \")\nDict()\n>>> Dict(\" a b c\
    \ d e f g h i j k l m \")\nDict()\n>>> Dict(\" a b c d e f g h i j k l m n \"\
    )\nDict()\n>>> Dict(\" a b c d e f g ", "    true\nend", "    true\nend\n</cell>\n\
    <code language=julia-1.5>", "    true\nend", "    true\nend\n</cell>\n<text>\n\
    Exercise 7: check_dict_case\nWrite a function that takes a dictionary and returns\
    \ a new dictionary where all keys are strings in lower case or all keys are strings\
    \ in upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\n>>> check_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    \n    if !is_empty(dict)\n        for (key, value) in dict\n\
    \            if !is_string(key) || !is_string(value)\n                return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the values in upper case.\nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are strings.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\",\
    \ \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" =>\
    \ \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\")\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"\
    dog\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    , \"d\" => \"dog\", \"e\" => \"egg\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"carrot\", \"d\" => \"dog\", \"e\" => \"egg\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\", \"e\"\
    \ => \"egg\", \"f\" => \"fish\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"carrot\", \"d\" => \"dog\", \"e\" => \"egg\", \"f\" => \"fish\")\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" =>\
    \ \"", "    true\nend", "    true\nend", "    true\nend", "    true\nend\n</cell>\n\
    <text>\nExercise 7: Write a function that takes a dictionary and returns a new\
    \ dictionary with the keys in lower case and the keys in upper case.\nThe function\
    \ should return a new dictionary if the given dictionary is not empty. Otherwise\
    \ it should return an empty dictionary.\nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\")\nDict()\n>>>\
    \ Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \"\
    )\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\n\
    Dict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n\
    >>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>>\
    \ Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \"\
    )\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\n\
    Dict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n\
    >>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>>\
    \ Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n", " \
    \   true\nend", "    \n    if !is_dict(dict)\n        return false\n    end",
  "    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the keys in upper case if the keys are both strings. If the given dictionary\
    \ is empty, return an empty dictionary.\nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\nDict()\n\"\"\"", "    \n    true\n\
    end", "    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    A\" => \"apple\", 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"NAME\" => \"John\", \"AGE\" => \"36\"\
    , \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    \n    true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as\
    \ an argument and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the dictionary contains\
    \ any non-string values.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"\
    banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\")\n\"\"\"", "    true\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that takes a dictionary and returns a new dictionary where all\
    \ keys are strings in lower case and all values are strings in upper case. \n\
    The function should return a new dictionary if the given dictionary is empty or\
    \ if the keys or values are already in upper case.\nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"a\" => \"apple\", \"a\" => \"apple\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\", \"a\" => \"apple\", \"a\" => \"apple\")\n>>>\
    \ Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", \"a\" =>\
    \ \"apple\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\", \"a\" => \"apple\", \"a\" => \"apple\")\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\", \"a\" => \"apple\", \"\
    a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\"\
    , \"a\" => \"apple\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"A\"\
    \ => \"ban", "    true\nend", "    \n    true\nend", "    true\nend", "    true\n\
    end\n</cell>\n<code language=julia-1.3>", "    true\nend", "    true\nend\n</cell>\n\
    <code language=julia-1.3>", "    true\nend", "    true\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    if !is_empty(dict)\n        for (key, value) in dict\n            if\
    \ !is_string(value) || !is_string(key)\n                return false\n       \
    \ end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where the keys are all strings in lower case and the values\
    \ are all strings in upper case. \nThe function should return an empty dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n</text>\n<cell>", "    true\nend\n</cell>\n\
    <text>\nExercise 2: Write a function that takes a dictionary and returns a new\
    \ dictionary where all keys are converted to upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is not empty. \nThe function\
    \ should return a new dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"", "    true\nend\n</cell>\n<code language=julia-1.5>",
  "    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the keys or values are\
    \ already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"\
    banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a",
  "    true\nend", "    \n    if dict.is_empty\n        return false\n    end\n  \
    \  \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in that string. \nExamples:\n\
    >>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n", "    \n    if !is_empty(dict)\n  \
    \      for (key, value) in dict\n            if !is_string(value) || !is_string(key)\n\
    \                return false\n        end\n        return true\n    else\n  \
    \      return false\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that takes a dictionary and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty. \nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" =>\
    \ \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\"\
    \ => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b", "    \n    if !is_empty(dict)\n        for\
    \ (key, value) in dict\n            if islower(key)\n                true\n  \
    \          else\n                false\n        end\n    else\n        true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    true\nend", " \
    \   true\nend", "    \n    true\nend", "    \n    if dict.is_empty() \n      \
    \  return false\n    \n    for k in keys(dict)\n        if islower(k)\n      \
    \      return true\n        else if isupper(k)\n            return true\n    \
    \    end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_keys(dict::Dict{String, String})", "    true\nend", "    true\n\
    end", "    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if\
    \ islower(k)\n                return false\n            if isupper(k)\n      \
    \          return false\n        end\n        return true\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a dictionary\
    \ and returns a new dictionary where all keys are strings in lower case and all\
    \ keys are strings in upper case.", "    \n    if !is_empty(dict)\n        for\
    \ (k,v) in dict\n            if !is_string(k)\n                return false\n\
    \        end\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<text>\nExercise 7: check_dict_case", "    true\nend", "    true\nend",
  "    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if islower(k)\n\
    \                return false\n            elseif isupper(k)\n               \
    \ return false\n            end\n        end\n        return true\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            elseif isupper(key)\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as\
    \ an argument and returns a new dictionary where the keys are strings in lower\
    \ case and the values are strings in upper case.\nThe function should return an\
    \ empty dictionary if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"ban", "    true\nend", "    true\nend", "    true\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    if dict == Dict{String, String}() \n        return true\n    \n    for\
    \ k in keys(dict) \n        if islower(k) \n            return true\n        else\
    \ if isupper(k) \n            return true\n        else \n            return false\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary with the\
    \ keys in lower case and the keys in upper case if the dictionary is empty. \n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\"\
    \ => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ a \")\nDict()\n>>> Dict(\" a b \")\nDict()\n>>> Dict(\" a b c \")\nDict()\n\
    >>> Dict(\" a b c d \")\nDict()\n>>> Dict(\" a b c d e \")\nDict()\n>>> Dict(\"\
    \ a b c d e f \")\nDict()\n>>> Dict(\" a b c d e f g \")\nDict()\n>>> Dict(\"\
    \ a b c d e f g h \")\nDict()\n>>> Dict(\" a b c d e f g h i \")\nDict()\n>>>\
    \ Dict(\" a b c d e f g h i j \")\nDict()\n>>> Dict(\" a b c d e f g h i j k \"\
    )\nDict()\n>>> Dict(\" a b c d e f g h i j k l \")\nDict()\n>>> Dict(\" a b c\
    \ d e f g h i j k l m \")\nDict()\n>>> Dict(\" a b c d e f g h i j k l m n \"\
    )\nDict()\n>>> Dict(\" a ", "    true\nend", "    \n    true\nend", "    \n  \
    \  true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    \n    true\n\
    end", "    true\nend", "    true\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that takes a dictionary as an argument and returns the number of keys in the\
    \ dictionary that are strings in lower case or strings in upper case. \nThe function\
    \ should return -1 if the dictionary is empty.\nExamples:\n>>> count_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n2\n>>> count_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n3\n>>> count_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n-1\n>>> count_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n-1\n>>> count_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n3\n\"\"\"", "    true\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    true\nend", "    true\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a new string with\
    \ all \nnon-alphanumeric characters replaced by underscores. \nExamples:\n>>>\
    \ replace_non_alphanumeric(\"hello\")\n\"hello\"\n>>> replace_non_alphanumeric(\"\
    hello123\")\n\"hello_123\"\n>>> replace_non_alphanumeric(\"hello!@#$%^&*()\")\n\
    \"hello_\"\n>>> replace_non_alphanumeric(\"hello_123\")\n\"hello_123\"\n>>> replace_non_alphanumeric(\"\
    hello_123_\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\"\
    )\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"\
    hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\
    \n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>>\
    \ replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"\
    hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\"\
    )\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"\
    hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\
    \n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>>\
    \ replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"\
    hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\"\
    )\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&", "    \n\
    \    if dict.is_empty\n        return false\n    end\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        end\n        if isupper(k)\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nExamples:\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A\"\
    )\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A \")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A .\")\n5\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  A . \")\n5\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  A . . \")\n5\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  A . . . \")\n5\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog.  A . . . . \")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A . . . . .\
    \ \")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  A .\
    \ . . . . . \")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  A . . . . . . . \")\n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  A . . . . . . . . . \")\n5\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  A . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . ", "    \n    if !is_empty(dict)\n\
    \        for (k,v) in dict\n            if !is_string(k) || !is_string(v)\n  \
    \              return false\n        end\n        return true\n    end\n    return\
    \ false\nend", "    \n    true\nend", "    \n    if dict == Dict()\n        return\
    \ false\n    \n    true_keys = Set()\n    false_keys = Set()\n    for key in dict\n\
    \        if islower(key)\n            true_keys.add(key)\n        else\n     \
    \       false_keys.add(key)\n    end\n    \n    return true_keys == false_keys\n\
    end\n</cell>\n<code language=julia-1.5>", "    true\nend", "    true\nend", " \
    \   true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    \n    true\n\
    end", "    \n    if !is_empty(dict)\n        for (key, value) in dict\n      \
    \      if !is_string(key) || !is_string(value)\n                return false\n\
    \        end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict", "    true\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that checks if a dictionary\
    \ is empty. \nThe function should return true if the given dictionary is empty\
    \ and false otherwise. \nThe function should return false if the given dictionary\
    \ is non-empty.\nExamples:\n>>> check_dict_empty(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\ntrue\n\"\"\"", "    \n    true\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a string and returns\
    \ a new string with all the characters in lower case and all the characters in\
    \ upper case. \nExamples:\n>>> lowercase_and_uppercase(\"Hello World\")\n\"hello\
    \ world\"\n>>> lowercase_and_uppercase(\"Hello World!\")\n\"Hello World!\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\
    \"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n\
    >>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
