name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return true if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return false.\n    The\
  \ function should return false is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
  \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8 =>\
  \ \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"Name\"\
  \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n    >>>\
  \ check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    true\n \
  \   \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    \n    if !is_empty(dict)\n        for (key, value) in dict\n  \
    \          if islower(key)\n                true\n            elseif isupper(key)\n\
    \                true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where the keys are all strings in lower case and the values are all\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n\
    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\"))\nDict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    )\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\"\
    \ => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> check_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"", "    \n    true\nend", "    true\nend", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            elseif isupper(key)\n                return false\n\
    \            else\n                return true\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the values in upper case. \nThe function should return an empty dictionary if\
    \ the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"", "    \n    if dict == Dict()\n  \
    \      return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n \
    \   count_dict_keys(dict::Dict{String, String})\n    \n    Return the number of\
    \ keys in the given dictionary.\n    Examples:\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>>\
    \ count_dict_keys(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n  \
    \  \"\"\"", "    \n    true\nend", "    true\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns a new string with the first letter\
    \ capitalized.\nExamples:\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"Banana\"\n>>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"\
    banana\")\n\"", "    \n    if dict == Dict{String, String}()\n        return true\n\
    \    end\n    \n    for k in keys(dict)\n        if islower(k)\n            return\
    \ false\n        end\n        if isupper(k)\n            return false\n      \
    \  end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    count_dict_keys(dict::Dict{String, String})\n    \n    Count the number\
    \ of keys in a dictionary that are not strings.\n    \n    Examples:\n    >>>\
    \ count_dict_keys(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>>\
    \ count_dict_keys(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n    2\n    >>> count_dict_keys(Dict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\"))\n    2\n    >>> count_dict_keys(Dict(\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n    \"\"\"", "    true\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that checks if a dictionary is valid\
    \ JSON. \nThe function should return false if the given dictionary is not valid\
    \ JSON. \nThe function should return true if the given dictionary is valid JSON.\
    \ \nThe function should return false if the given dictionary is empty.\nExamples:\n\
    >>> check_json_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n>>>\
    \ check_json_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\ntrue\n>>> check_json_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nfalse\n>>> check_json_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_json_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"", "    true\nend", "    \n\
    \    if !is_empty(dict)\n        for (key, value) in dict\n            if islower(key)\n\
    \                return true\n            elseif isupper(key)\n              \
    \  return true\n            else\n                return false\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are strings in lower case and all keys are strings in upper case. \nThe\
    \ function should return an empty dictionary if the given dictionary is empty.\n\
    Examples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\nDict()\n>>> check_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\")\n\"\"\"", "    \n    if dict.is_empty()\n\
    \        return false\n    end", "    true\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a dictionary and returns a new dictionary with the\
    \ keys in lower case and the keys in upper case.", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if !is_string(key) || !is_string(value)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in that string.\nExamples:\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n7\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n7\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n7\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  \\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\")\n7\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy do", "    \n    if !is_empty(dict)\n        for (key, value) in\
    \ dict\n            if islower(key)\n                return false\n          \
    \  if isupper(key)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    count_dict_keys(dict::Dict{String, String})\n    Count the number of\
    \ keys in a dictionary\n\"\"\"", "    \n    true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the keys in upper case if the keys\
    \ are strings in both cases.", "    true\nend", "    true\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that takes a dictionary and returns a new dictionary\
    \ where all keys are converted to upper case. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty. \nThe function should return\
    \ a new dictionary if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"NAME\"\
    \ => \"John\", \"AGE\" => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"", "    \n    if dict.is_empty()\n        return false\n    end\n   \
    \ \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        end\n        if isupper(k)\n            return true\n        end\n  \
    \  end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all keys are strings in upper case.", "    \n\
    \    if !is_empty(dict)\n        for (key, value) in dict\n            if islower(key)\n\
    \                return true\n            elseif isupper(key)\n              \
    \  return true\n            else\n                return false\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where all\
    \ keys are strings in lower case and all values are strings in upper case. \n\
    The function should return a new dictionary if the given dictionary is empty or\
    \ if the given dictionary has keys that are not strings or values that are not\
    \ strings.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
