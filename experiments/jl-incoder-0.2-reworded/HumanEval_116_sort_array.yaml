name: HumanEval_116_sort_array
language: jl
prompt: "\"\"\"\n    In this Kata, you have to sort a vector of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
  \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
  \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
  \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5])\
  \ == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
  \ 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
completions: ["    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Q2. Write a function that returns the number of ones in an integer.", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n    \n\
    \    sorted[ones .!= 1] .= arr[ones .!= 1]\n    \n    sorted\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\nHere's a solution using\
    \ sortperm:\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[ones .== 1] = arr[ones\
    \ .== 1]\n    \n    sorted_arr[ones .!= 1] = (arr[ones .!= 1] .- 1) .* 10 + arr[ones\
    \ .!= 1]\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in a given vector of bits.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr\
    \ .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    sorted_arr .= ones\
    \ - sorted_arr\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that sorts a vector\
    \ of non-negative integers according to their absolute value.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n\
    \    \n    sorted[sorted .== 0] = -99\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of ones in an array. Test it on some examples:", " \
    \   \n    sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        ones[i] = sum(arr == i)\n    end\n    \n    sorted[ones\
    \ == 0] = sort(arr[ones == 0])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart 2\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ that counts the number of ones in an array.", "    \n    ones = zeros(Int, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int, length(arr))\n   \
    \ \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sorting by multiple criteria\n\
    In this Kata, you have to sort a vector of non-negative integers according to\n\
    number of ones in their binary representation in ascending order, and then\nsort\
    \ them according to their decimal value.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n\
    \    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in that vector.\
    \ For example, given [1,2,3,4,5], it should return [1,2,3,4].", "    \n    arr\
    \ = sort(arr)\n    \n    ones = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr[ones]\n    \n\
    \    ones = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n       \
    \ ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr[ones]\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3,\
    \ 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part 2\nNow implement a function that checks if a given binary string is a palindrome\
    \ or not. \nFor example \"1010\" is palindrome and \"10\" is not.", "    \n  \
    \  ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted[arr\
    \ .== i] = i\n    end\n    \n    return sorted\nend\n</cell>\n<text>\nSolution\n\
    Click below for the solution.", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n", "    sorted\
    \ = sort(arr)\n    \n    sorted[sorted .== 0] = -1\n    sorted[sorted .== 1] =\
    \ 0\n    sorted[sorted .== 2] = 1\n    \n    return sorted\nend", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of ones in the array.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n\
    \    \n    sorted[ones .!= 1] = arr[ones .!= 1]\n    \n    sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sort a vector of\
    \ non-negative integers according to number of ones in their binary representation\
    \ in descending order", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] =\
    \ -1\n    \n    return sorted\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
