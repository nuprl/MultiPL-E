name: HumanEval_116_sort_array
language: jl
prompt: "\"\"\"\n    In this Kata, you have to sort a vector of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
  \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
  \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
  \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5])\
  \ == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
  \ 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
completions: ["    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Q2. Write a function that returns the number of ones in an integer.", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n    \n\
    \    sorted[ones .!= 1] .= arr[ones .!= 1]\n    \n    sorted\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\nHere's a solution using\
    \ sortperm:\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[ones .== 1] = arr[ones\
    \ .== 1]\n    \n    sorted_arr[ones .!= 1] = (arr[ones .!= 1] .- 1) .* 10 + arr[ones\
    \ .!= 1]\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in a given vector of bits.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr\
    \ .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    sorted_arr .= ones\
    \ - sorted_arr\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that sorts a vector\
    \ of non-negative integers according to their absolute value.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n\
    \    \n    sorted[sorted .== 0] = -99\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of ones in an array. Test it on some examples:", " \
    \   \n    sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        ones[i] = sum(arr == i)\n    end\n    \n    sorted[ones\
    \ == 0] = sort(arr[ones == 0])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart 2\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ that counts the number of ones in an array.", "    \n    ones = zeros(Int, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int, length(arr))\n   \
    \ \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sorting by multiple criteria\n\
    In this Kata, you have to sort a vector of non-negative integers according to\n\
    number of ones in their binary representation in ascending order, and then\nsort\
    \ them according to their decimal value.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n\
    \    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in that vector.\
    \ For example, given [1,2,3,4,5], it should return [1,2,3,4].", "    \n    arr\
    \ = sort(arr)\n    \n    ones = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr[ones]\n    \n\
    \    ones = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n       \
    \ ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr[ones]\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3,\
    \ 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part 2\nNow implement a function that checks if a given binary string is a palindrome\
    \ or not. \nFor example \"1010\" is palindrome and \"10\" is not.", "    \n  \
    \  ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted[arr\
    \ .== i] = i\n    end\n    \n    return sorted\nend\n</cell>\n<text>\nSolution\n\
    Click below for the solution.", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[order(ones)]\n", "    sorted\
    \ = sort(arr)\n    \n    sorted[sorted .== 0] = -1\n    sorted[sorted .== 1] =\
    \ 0\n    sorted[sorted .== 2] = 1\n    \n    return sorted\nend", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of ones in the array.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n\
    \    \n    sorted[ones .!= 1] = arr[ones .!= 1]\n    \n    sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sort a vector of\
    \ non-negative integers according to number of ones in their binary representation\
    \ in descending order", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] =\
    \ -1\n    \n    return sorted\nend", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_ones = sort(ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = sorted_ones\n    \n\
    \    return sorted_arr\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis\
    \ doesn't seem to work. `sort_array([1, 0, 2, 3, 4])` returns `[0, 1, 2, 3, 4]`.\n\
    <|/ c |>\n<| c |>\nIt does work. `sort_array([1, 0, 2, 3, 4])` returns `[0, 1,\
    \ 2, 3, 4]`. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I\
    \ copied it correctly. I'm using Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on\
    \ 0.6.2 and it works. Are you sure you copied it correctly? I tested it on 0.6.2\
    \ too.\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 too. Maybe I missed something.\
    \ I'll try it again and see if it works.\n<|/ c |>\n<| a tags=sorting,julia |>\n\
    I wrote a package called SortArrays.jl that does this for you. \n<code>\njulia>\
    \ using SortArrays", "    \n    ones = zeros(Int64, length(arr))\n    for i =\
    \ 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n\
    \    return arr\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int,\
    \ length(arr))\n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n\
    \    end\n    \n    sorted = zeros(Int, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(i -> ones[i] >= 1, 1:length(ones))]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    </cell>\n<text>\nPart II: Binary search algorithm\nNow let's implement binary\
    \ search algorithm. We'll use binary search algorithm to find if there exist an\
    \ element in a sorted array. We'll use binary search algorithm to find if there\
    \ exist an element in a sorted array. We'll use binary search algorithm to find\
    \ if there exist an element in a sorted array. We'll use binary search algorithm\
    \ to find if there exist an element in a sorted array. We'll use binary search\
    \ algorithm to find if there exist an element in a sorted array. We'll use binary\
    \ search algorithm to find if there exist an element in a sorted array. We'll\
    \ use binary search algorithm to find if there exist an element in a sorted array.\
    \ We'll use binary search algorithm to find if there exist an element in a sorted\
    \ array. We'll use binary search algorithm to find if there exist an element in\
    \ a sorted array. We'll use binary search algorithm to find if there exist an\
    \ element in a sorted array. We'll use binary search algorithm to find if there\
    \ exist an element in a sorted array. We'll use binary search algorithm to find\
    \ if there exist an element in a sorted array. We'll use binary search algorithm\
    \ to find if there exist an element in a sorted array. We'll use binary search\
    \ algorithm to find if there exist an element in a sorted array. We'll use binary\
    \ search algorithm to find if there exist an element in a sorted array. We'll\
    \ use binary search algorithm to find if there exist an element in a sorted array.\
    \ We'll use binary search algorithm to find if there exist an element in a sorted\
    \ array. We'll use binary search algorithm to find if there exist an element in\
    \ a sorted array. We'll use binary search algorithm to find if there exist an\
    \ element in a sorted array. We'll use binary search algorithm to find if there\
    \ exist an element in a sorted array. We'll use binary search algorithm to find\
    \ if there exist an element in a sorted array. We'll use binary search algorithm\
    \ to find if there exist an element in a sorted array. We'll use binary search\
    \ algorithm to find ", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = zeros(Int64, length(arr))\n    sorted[ones .==\
    \ 1] = arr[ones .== 1]\n    \n    sorted[ones .!= 1] = arr[ones .!= 1]\n    \n\
    \    sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position in the vector. For example, given [1, 1,\
    \ 0, 1], your function should return [2, 2, 0, 1]. Your function should return\
    \ an array of integers.", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted = sort(ones)\n    \n    sorted[sorted .!= 1] .= 0\n    \n  \
    \  return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position in the vector.", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[ones_sorted .== 1] = 1\n    \n \
    \   sorted_arr = sort(sorted_arr)\n    \n    return sorted_arr\nend", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = sort(ones)\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of ones in the binary representation of an integer.", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n    \n\
    \    sorted[sorted .== 0] = -1\n    \n    return sorted\nend", "    \n    arr\
    \ = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n    \n    for i in\
    \ 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart 2: Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm to find if some element exists in sorted array.", "    \n    arr =\
    \ sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr == i)\n    end\n    \n    ones = sort(ones)\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[1:end]\n    \n    return arr[ones]\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart II: Binary Search\nIn this\
    \ Kata, you have to implement binary search algorithm for searching elements in\
    \ a sorted array.", "    \n    ones = zeros(Int, length(arr))\n    \n    for i\
    \ = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted\
    \ = sort(ones)\n    \n    sorted\nend\n</cell>\n<code language=julia-1.0>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of ones in an integer.", "    \n    sort_arr = sort(arr)\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr[1]\n    sort_arr = sort_arr\
    \ .- sort_arr[1]\n    sort_arr = sort_arr .- sort_arr", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    sorted[sorted==0] = -Inf \n    \n  \
    \  return arr .- sorted\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nPart II: Binary Search\nIn this Kata, you have to implement binary search\
    \ to find if an element is present in a sorted array.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n\
    \    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position in the vector.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 4\nWrite a function that counts the\
    \ number of ones in a binary representation of an integer.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr\
    \ .= sort(ones)\n    \n    sorted_arr .= sort(arr)\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will sort a vector of integers according to their absolute value.", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr .- ones\n    \n   \
    \ sorted_arr .= sort(sorted_arr)\n    \n    return sorted_arr\nend\n</cell>\n\
    <text>\nPart III. Sorting by number of ones", "    \n    sort_array = zeros(length(arr))\n\
    \    \n    ones = findall(arr ==1)\n    \n    sort_array(ones) = sort(arr[ones])\n\
    \    \n    sort_array(findall(arr ==0)) = sort(arr - sort_array(findall(arr ==0)))\n\
    \    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nPart III. Binary Search Algorithm\nIn this Kata, you have to implement\
    \ binary search algorithm for searching \nthe element in the sorted array.", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart 2\nNow let's implement a function that counts the number of ones\
    \ in binary representation of an integer.", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr\n    \n    for i =\
    \ 1:length(arr)\n        \n        ones_count = sum(ones[arr .== i])\n       \
    \ \n        if ones_count == 0\n            sorted_arr .= arr\n            break\n\
    \        end\n        \n        sorted_arr .= sort(arr .== i)\n        \n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<text>\nPart 2\nNow implement the\
    \ function count_ones that counts the number of ones in an array. \nThe function\
    \ should return an array of integers such that each element is the count of ones\
    \ in that position in the original array.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(ones)\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of ones in an array.\
    \ For example, for [1, 1, 0, 1] it should return 3.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(ones)\n    \n    return\
    \ sorted_arr\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\nHere\
    \ is a solution using Julia's built-in sort function, which sorts arrays in ascending\
    \ order according to their natural ordering (i.e. lexicographical order).\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of ones in that vector. \nFor example, sort_array([1,\
    \ 5, 2, 3, 4]) should return 4.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 4\nImplement a function that returns the\
    \ number of ones in a binary representation of an integer.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sort_arr = sort(arr)\n    \n    sort_arr2\
    \ = zeros(length(arr))\n    \n    for i = 1:length(arr)\n        \n        if\
    \ arr[i] == 0\n            sort_arr2[i] = 0\n        else\n            sort_arr2[i]\
    \ = length(arr) - i - 1\n        end\n    end\n    \n    return sort_arr2\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the number of 1's\
    \ in its binary representation.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr .=\
    \ arr\n    \n    sorted_arr .= sort(ones)\n    \n    return sorted_arr\nend\n\
    </cell>\n<code language=julia-1.3>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary\
    \ Search\nIn this Kata, you have to implement binary search algorithm. Binary\
    \ search algorithm is very useful when you want to find an element in a sorted\
    \ array. Binary search algorithm has two steps:", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    sorted_arr .= arr\n    \n    sorted_arr .= ones\n    \n    sorted_arr\
    \ .= sort(sorted_arr)\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sort(ones,\
    \ rev=true)]\n    \n    for i in 1:length(ones)\n        arr[i] = ones[i]\n  \
    \  end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nPart 2\nImplement the function count_ones(arr::Vector{Int64})::Vector{Int64}\
    \ which counts the number of ones in each element of arr and returns a vector\
    \ of length length(arr).", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    sort_array = sort(arr)\n    \n    sort_array = sort_array[(sort_array .!=\
    \ sort_array[1]) .& (sort_array .!= sort_array[2])]\n    \n    sort_array = sort_array[(sort_array\
    \ .!= sort_array[3]) .& (sort_array .!= sort_array[4])]\n    \n    sort_array\
    \ = sort_array[(sort_array .!= sort_array[5]) .& (sort_array .!= sort_array[6])]\n\
    \    \n    sort_array = sort_array[(sort_array .!= sort_array[7]) .& (sort_array\
    \ .!= sort_array[8])]\n    \n    sort_array = sort_array[(sort_array .!= sort_array[9])\
    \ .& (sort_array .!= sort_array[10])]\n    \n    sort_array = sort_array[(sort_array\
    \ .!= sort_array[11]) .& (sort_array .!= sort_array[12])]\n    \n    sort_array\
    \ = sort_array[(sort_array .!= sort_array[13]) .& (sort_array .!= sort_array[14])]\n\
    \    \n    sort_array = sort_array[(sort_array .!= sort_array[15]) .& (sort_array\
    \ .!= sort_array[16])]\n    \n    sort_array = sort_array[(sort_array .!= sort_array[17])\
    \ .& (sort_array .!= sort_array[18])]\n    \n    sort_array = sort_array[(sort_array\
    \ .!= sort_array[19]) .& (sort_array .!= sort_array[20])]\n    \n    sort_array\
    \ = sort_array[(sort_array .!= sort_array[21]) .& (sort_array .!= sort_array[22])]\n\
    \    \n    sort_array = sort_array[(sort_array .!= sort_array[23]) .& (sort_array\
    \ .!= sort_array[24])]\n    \n    sort_array = sort_array[(sort_array .!= sort_array[25])\
    \ .& (sort_array .!= sort_array[26])]\n    \n    sort_array = sort_array[(sort_array\
    \ .!= sort_array[27]) .& (sort_array .!= sort_array[28])]\n    \n    sort_array\
    \ = sort_array[(sort_array .!= sort_array[29]) .& (sort_array .!= sort_array[30])]\n\
    \    \n    sort_array = sort_array[(sort_array .!= sort_array[31]) .& (sort_array\
    \ .!= sort_array[32])]\n    \n    sort_array = sort_array[(sort_array .!= sort_array[33])\
    \ .& (sort_array .!= sort_array[34])]\n    \n    sort_array = sort_array[(sort_array\
    \ .!= sort_array[35]) .& (sort_array .!= sort_array[36])]\n    ", "    \n    ones\
    \ = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr\
    \ .== i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sorted Arrays\nIn this Kata,\
    \ you have to implement a function that sorts a vector of integers according to\
    \ their absolute value.", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones\
    \ .== 1]\n    \n    sorted[ones .!= 1] .= sort(arr[ones .!= 1])\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Sort by frequency\nIn this Kata, you have to sort a vector of\
    \ non-negative integers according to\nnumber of occurrences of each value in ascending\
    \ order.\nFor similar number of occurrences, sort based on decimal value.", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones\
    \ = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int,\
    \ length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n    \n    sorted[ones\
    \ .!= 1] .= sort(arr[ones .!= 1])\n    \n    return sorted\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,julia |>\nI wrote a package called BitArrays.jl\
    \ that does this kind of thing very efficiently.\n<code>\njulia> using BitArrays",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the number\
    \ of ones in their binary representation.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    return sorted\n\
    end", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    return arr[ones]\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart III: Binary Search\nIn this\
    \ Kata, you have to implement binary search algorithm for searching in\nsorted\
    \ array. Binary search algorithm is very similar to binary search algorithm\n\
    from previous Kata, but instead of searching for a value, it searches for index\n\
    of a value. The main difference is that in binary search algorithm you search\n\
    for a value in a sorted array and in binary search algorithm you search for index\n\
    of a value in sorted array.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of ones in each position.", "    \n    ones = zeros(Int64, length(arr))\n  \
    \  \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted_ones = zeros(Int64, length(ones))\n    \n    for i = 1:length(ones)\n\
    \        sorted_ones[i] = ones[i]\n    end\n    \n    sorted_ones = sort(sorted_ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[sorted_ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a dscore=1 |>\nHere is a\
    \ solution that uses Julia's built-in sort function and does not require any packages:\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    sort_array = sort(arr)\n    sort_array = sort_array[sort_array .!= 0]\n \
    \   sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= 0]\n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    sort_array = sort_array[sort_array .!= ", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = ones[order(ones)]\n    \n    return arr[ones]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part III. Binary Search Algorithm\nIn this Kata, you have to implement binary\
    \ search algorithm to find if some number is in sorted array or not.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sorted = sort(arr)\n\
    \    \n    ones = zeros(length(arr))\n    \n    for i in 1:length(arr)\n     \
    \   ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = sort(ones)\n    \n\
    \    return sorted\nend\n</cell>\n<text>\nPart III: Binary Search Algorithm\n\
    In this Kata, you have to implement binary search algorithm for searching in a\
    \ sorted array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = ones[order(ones)]\n    \n    return arr[ones]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part II: Binary search algorithm\nIn this Kata, you have to implement binary search\
    \ algorithm. Binary search algorithm is very useful when you have sorted array\
    \ and want to find some element in the array (for example, find maximum or minimum).",
  "    \n    sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted\
    \ = sort(ones)\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1,2,3,4,5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,-5,-4,-3,-2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0,1,2,3,4]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of integers\
    \ \nthat represent their binary representation in descending order.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    sorted = sort(ones)\n    \n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of integers and returns an array of integers \n    that represent\
    \ their binary representation in descending order. \n    For example, for input\
    \ [1,2,3,4,5], the output should be [5,4,3,2,1].", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n     \
    \   ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3,\
    \ 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5,\
    \ -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ its lexicographical ordering.", "    sorted = sort(arr)\n    sorted = sorted[sorted..-1]\n\
    \    return sorted\nend", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .== i])\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in that vector. Test it on some vectors.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted[ones .== i] =\
    \ i\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that sorts a vector\
    \ of non-negative integers according to their binary representation in descending\
    \ order.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = arr[ones[i]]\n    end\n    \n    return sorted_arr\nend", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of ones in a binary representation of an integer.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = sort(ones[ones\
    \ .== 1])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sort a vector of non-negative integers\
    \ according to number of ones in their binary representation in descending order\n\
    Implement the function sort_array_descending which sorts a vector of non-negative\
    \ integers according to number of ones in their binary representation in descending\
    \ order.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] =\
    \ 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI came up with another solution,\
    \ using sort! and a custom comparison function. The idea is to first count the\
    \ number of ones in the binary representation of each number, then sort by the\
    \ number of ones. Then sort by the decimal representation of the number.\n<code>",
  "    \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted\
    \ = sort(ones)\n    \n    sorted_arr = zeros(Int, length(arr))\n    sorted_arr[ones_sorted\
    \ .== 1] = 1\n    \n    sorted_arr = sort(sorted_arr)\n    \n    return sorted_arr\n\
    end", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n \
    \   \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] = -99\n    \n  \
    \  return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position in the vector.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    sorted_arr .= arr\n    \n    ones_count = zeros(Int64, length(arr))\n   \
    \ ones_count[ones .== 1] = 1\n    \n    sorted_arr .= ones_count\n    \n    sorted_arr\
    \ .= sort(sorted_arr)\n    \n    return sorted_arr\nend", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    ones_count = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones_count[i] = sum(ones[arr .== i])\n    end\n    \n    for i in 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones_count[i] .== 1][1]\n    end\n    \n    return\
    \ sorted_arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\n\
    Problem 7\nImplement the function count_bits(x::Int64)::Int64 that counts the\
    \ number of bits in the given integer.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted\
    \ .== 0] = -99\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm for searching \nthe target number in a\
    \ sorted array.", "    \n    ones = zeros(Int, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] = -99\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 4\nImplement a function that checks if a binary string is a palindrome.\n\
    A palindrome is a string that reads the same backward as forward.", "    \n  \
    \  ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(ones)\n        sorted[ones\
    \ == i] = i\n    end\n    \n    return sorted\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't seem to work. `sort_array([1, 5, 2, 3, 4])` gives\
    \ `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nIt does work. `sort_array([1, 0, 2, 3,\
    \ 4])` gives `[0, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for clarifying.\n\
    <|/ c |>\n<| a tags=julia,sorting |>\nI came up with a solution using sortperm:\n\
    <code>", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sort(ones[arr .== i])[1]\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a function that sorts\
    \ integers according to their binary representation in ascending order:\n<code>",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = sort(ones)\n    \n    sorted[sorted .== 0] = -(length(sorted) + 1)\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.0>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search Algorithm\nIn this Kata, you have to implement\
    \ binary search algorithm to find if some value exists in sorted array.", "  \
    \  \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n   \
    \ \n    return arr[ones]\nend\n</cell>\n<text>\nSolution\nLet's test our solution:",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=0 |>\nI came up with a solution that is more efficient than sorting\
    \ and also more readable than the other solutions posted here.\n<code>", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sorted = sort(arr)\n\
    \    \n    sorted = sorted[sorted..-1]\n    \n    sorted = sorted[sorted..-1]\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of ones in binary\
    \ representation of an integer.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64,\
    \ length(ones_sorted))\n    decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted\
    \ = sort(decimals)\n    \n    sorted_arr = zeros(Int64, length(ones_sorted))\n\
    \    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n \
    \   \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr[ones_sorted .== 1]\n    \n    sorted_arr[ones_sorted .== 1] = arr[ones_sorted\
    \ .== ", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted = sort(ones)\n    \n    sorted[sorted .!= ones] = arr[sorted\
    \ .!= ones]\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 7: Sort a vector of non-negative integers\
    \ according to their binary representation in descending order\nImplement the\
    \ function sort_array_descending which sorts a vector of non-negative integers\
    \ according to their binary representation in descending order.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones >\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[2:end]\n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in eachindex(arr)\n        ones[i] = sum(arr[i]\
    \ .== 1)\n    end\n    \n    ones = sort(ones)\n    \n    ones = ones[ones .!=\
    \ 0]\n    \n    ones = ones[reverse(ones)]\n    \n    return ones\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 0, 2, 3, 4])\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of ones in an array", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] =\
    \ -99\n    \n    return sorted\nend", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary search algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm for searching in a sorted array\
    \ of non-negative integers. \nThe search should return index of the searched element\
    \ or -1 if it is not found.", "    sorted = sort(arr)\n    ones = zeros(length(arr))\n\
    \    ones[arr .== 1] = ones(length(arr))\n    ones[arr .== 0] = sort(ones[arr\
    \ .== 0])\n    ones[arr .== -1] = sort(ones[arr .== -1])\n    ones[arr .== -2]\
    \ = sort(ones[arr .== -2])\n    ones[arr .== -3] = sort(ones[arr .== -3])\n  \
    \  ones[arr .== -4] = sort(ones[arr .== -4])\n    ones[arr .== -5] = sort(ones[arr\
    \ .== -5])\n    ones[arr .== -6] = sort(ones[arr .== -6])\n    ones[arr .== -7]\
    \ = sort(ones[arr .== -7])\n    ones[arr .== -8] = sort(ones[arr .== -8])\n  \
    \  ones[arr .== -9] = sort(ones[arr .== -9])\n    ones[arr .== -10] = sort(ones[arr\
    \ .== -10])\n    ones[arr .== -11] = sort(ones[arr .== -11])\n    ones[arr .==\
    \ -12] = sort(ones[arr .== -12])\n    ones[arr .== -13] = sort(ones[arr .== -13])\n\
    \    ones[arr .== -14] = sort(ones[arr .== -14])\n    ones[arr .== -15] = sort(ones[arr\
    \ .== -15])\n    ones[arr .== -16] = sort(ones[arr .== -16])\n    ones[arr .==\
    \ -17] = sort(ones[arr .== -17])\n    ones[arr .== -18] = sort(ones[arr .== -18])\n\
    \    ones[arr .== -19] = sort(ones[arr .== -19])\n    ones[arr .== -20] = sort(ones[arr\
    \ .== -20])\n    ones[arr .== -21] = sort(ones[arr .== -21])\n    ones[arr .==\
    \ -22] = sort(ones[arr .== -22])\n    ones[arr .== -23] = sort(ones[arr .== -23])\n\
    \    ones[arr .== -24] = sort(ones[arr .== -24])\n    ones[arr .== -25] = sort(ones[arr\
    \ .== -25])\n    ones[arr .== -26] = sort(ones[arr .== -26])\n    ones[arr .==\
    \ -27] = sort(ones[arr .== -27])\n    ", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   sorted_arr .= arr\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ .= i\n    end\n    \n    sorted_arr .= ones\n    \n    return sorted_arr\nend",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= ", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns its sum.", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sort_array(arr)\nend", "    \n    sorted = sort(arr)\n\
    \    \n    ones = zeros(length(arr))\n    \n    for i = 1:length(arr)\n      \
    \  ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = sort(ones)\n    \n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Sorting by multiple criteria\nNow let's try to sort a vector\
    \ of non-negative integers according to two criteria: number of ones in their\
    \ binary representation in ascending order and decimal value.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    \n    for i in eachindex(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones > 0]\n    \n    ones\
    \ = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[ones(length(ones))\
    \ .> 0]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = ones[ones\
    \ .>= 1]\n    \n    ones = ones[ones .<= length(ones)]\n    \n    ones = one",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] = sort(ones[ones\
    \ .== 1])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nProblem 4\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ that returns the number of ones in arr in ascending order.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_ones\
    \ = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr\
    \ .== 1] = sorted_ones\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.0>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.0>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nProblem 7\nImplement the function count_bits(x::Int64)::Int64\
    \ that returns the number of bits in the binary representation of x.", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n    \n\
    \    sorted[ones .!= 1] = (arr[ones .!= 1] .- 1) .* 10 + arr[ones .!= 1]\n   \
    \ \n    return sorted\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    arr = arr .- ones\n    \n    arr = sort(arr)\n    \n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nProblem 8: Find all subsets of a\
    \ set\nWrite a function that finds all subsets of a set. \nThe function should\
    \ return an Array of Arrays.", "    \n    ones = zeros(Int64, length(arr))\n \
    \   ones[arr .== 1] = 1\n    \n    sorted_ones = zeros(Int64, length(arr))\n \
    \   sorted_ones[ones .== 1] = sort(ones[ones .== 1])\n    \n    sorted_ones[ones\
    \ .== 0] = (sort(arr .== 0) - 1) .+ 1\n    \n    return sorted_ones\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 0, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of ones in an array. For example, for [1, 1, 0, 1] it should return 3.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_ones = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] =\
    \ sorted_ones\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n    \n    ones\
    \ = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(", "    \n    ones =\
    \ zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position in the vector.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 4\nWrite a function that sorts\
    \ a vector of non-negative integers according to their decimal value\nin ascending\
    \ order. For example, sort_array([1, 5, 2, 3, 4]) should return [5, 4, 3, 2, 1].",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_ones = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] =\
    \ sorted_ones\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the number of ones in their binary representation.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted .==\
    \ i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in an integer.", "    \n    sort_array = sort(arr)\n    \n  \
    \  sort_array = sort_array[sort_array .!= 0]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= sort_array]\n    \n    sort_array = sort_array[sort_array .!= sort_array]\n\
    \    \n    sort_array = sort_array[sort_array .!= sort_array]\n    \n    sort_array\
    \ = sort_array[sort_array .!= sort_array]\n    \n    sort_array = sort_array[sort_array\
    \ .!= ", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_ones = zeros(Int64, length(ones))\n    \n    sorted_ones[ones\
    \ .== 1] .= 1\n    \n    sorted_ones[ones .== 0] .= 2\n    \n    sorted_ones[ones\
    \ .== -1] .= 3\n    \n    sorted_ones[ones .== -2] .= 4\n    \n    sorted_ones[ones\
    \ .== -3] .= 5\n    \n    sorted_ones[ones .== -4] .= 6\n    \n    sorted_ones[ones\
    \ .== -5] .= 7\n    \n    sorted_ones[ones .== -6] .= 8\n    \n    sorted_ones[ones\
    \ .== -7] .= 9\n    \n    sorted_ones[ones .== -8] .= 10\n    \n    sorted_ones[ones\
    \ .== -9] .= 11\n    \n    sorted_ones[ones .== -10] .= 12\n    \n    sorted_ones[ones\
    \ .== -11] .= 13\n    \n    sorted_ones[ones .== -12] .= 14\n    \n    sorted_ones[ones\
    \ .== -13] .= 15\n    \n    sorted_ones[ones .== -14] .= 16\n    \n    sorted_ones[ones\
    \ .== -15] .= 17\n    \n    sorted_ones[ones .== -16] .= 18\n    \n    sorted_ones[ones\
    \ .== -17] .= 19\n    \n    sorted_ones[ones .== -18] .= 20\n    \n    sorted_ones[ones\
    \ .== -19] .= 21\n    \n    sorted_ones[ones .== -20] .= 22\n    \n    sorted_ones[ones\
    \ .== -21] .= 23\n    \n    sorted_ones[ones .== -22] .= 24\n    \n    sorted_ones[ones\
    \ .== -23] .= 25\n    \n    sorted_ones[ones .== -24] .= 26\n    \n    sorted_ones[ones\
    \ .== -25] .= 27\n    \n    sorted_ones[ones .== -26] .= 28\n    \n    sorted_ones[ones\
    \ .== -27] .= 29\n    \n    sorted_ones[ones .== -28] .= 30\n    \n    sorted_ones[ones\
    \ .== -29] .= 31\n    \n    sorted_ones[ones .", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm for searching \nfor a value in sorted array.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = sort(ones)\n    \n    sorted[sorted .== 0] = -(length(sorted) + 1)\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    </cell>\n<text>\nPart II: Binary Search\nIn this Kata, you have to implement binary\
    \ search algorithm for searching \na value in sorted array. Binary search algorithm\
    \ has two parts: \none for searching in the sorted array and another for searching\
    \ in the unsorted array.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted = sorted .- ones\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns the number of ones in an array.\
    \ For example, for [1, 1, 0, 1] it should return 3.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nThe binary search algorithm\
    \ is one of the most important algorithms in computer science.\nIt is a very efficient\
    \ algorithm that searches for an element in a sorted array.\nThe binary search\
    \ algorithm is also called \"binary search\" because it is an algorithm that finds\
    \ the position of an element in a sorted array.\nThe binary search algorithm is\
    \ also known as \"binary search\" because it finds the position of an element\
    \ in a sorted array.\nThe binary search algorithm is also known as \"binary search\"\
    \ because it finds the position of an element in a sorted array.", "    \n   \
    \ ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted =\
    \ zeros(Int, length(arr))\n    sorted[ones .== 1] = arr[ones .== 1]\n    \n  \
    \  sorted[ones .!= 1] = arr[ones .!= 1]\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the number of ones in each position\
    \ in the vector.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i =\
    \ 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .== i])\n    end\n \
    \   \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of ones in a given\
    \ vector of integers. \nFor example, for [1, 1, 0, 1] it should return 3.", " \
    \   sorted = sort(arr)\n    sorted[sorted .== 0] .= -1\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.0>\n@testset \"Sort array tests\" begin\n    @test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    @test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    @test sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the number of ones in each position in\
    \ the vector.", "    \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_ones = zeros(Int,\
    \ length(arr))\n    for i = 1:length(arr)\n        sorted_ones[i] = ones[i]\n\
    \    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr = zeros(Int,\
    \ length(arr))\n    for i = 1:length(arr)\n        sorted_arr[i] = arr[sorted_ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nI wrote a function that sorts integers according to their binary representation\
    \ in ascending order. \n<code>", "    \n    ones = zeros(Int, length(arr))\n \
    \   \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    for i in 1:length(sorted)\n        arr[i]\
    \ = sorted[i]\n    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that sorts a vector\
    \ of integers according to their absolute value.", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(x -> x == ones[i], 1:length(ones))]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III: Binary Search\nNow let's implement binary search algorithm.\
    \ We'll use binary search algorithm to find if an element exists in sorted array\
    \ or not. Binary search algorithm has two parts: divide and conquer. Divide part\
    \ is dividing array into two parts: left part and right part. Conquer part is\
    \ searching element in left part and if element is not found, searching element\
    \ in right part. After searching all elements in both parts, we return index of\
    \ element if element exists in sorted array or -1 if element doesn't exist.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    sorted_arr .= ones - sorted_arr\n    \n    return sorted_arr\nend\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nThe last Kata was about sorting\
    \ a vector of strings in ascending order.\nThe function sort_array is implemented\
    \ like this:", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted = sort(ones)\n    \n    return sorted\nend", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position. For example, sort_array([1, 5, 2, 3, 4])\
    \ should return [1, 1, 2, 2, 1]. Your function should work for vectors of any\
    \ length.", "    sorted = sort(arr)\n    sorted[sorted .== 0] .= -1\n    return\
    \ sorted\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = sort(ones)\n    \n    sorted[sorted .== 0] = -(length(sorted) + 1)\n    \n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ its sum.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position. For example, given [1, 1, 0, 1], your function\
    \ should return [3, 2, 1].", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n    \n\
    \    sorted = sorted .- ones\n    \n    return sorted\nend", "    \n    ones =\
    \ zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(ones)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nProblem 7: Sort a vector of non-negative integers according to their binary\
    \ representation in descending order", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .== i])\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of ones in a binary\
    \ representation of an integer.", "    \n    arr = sort(arr)\n    \n    ones =\
    \ zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n\
    \    \n    arr = arr[ones]\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in an integer.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in\
    \ 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n\
    \    \n    return arr\nend\n</cell>\n<text>\nSolution", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of ones in each position in the vector.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = i\n    end\n    \n    sorted_arr = sort(sorted_arr)\n \
    \   \n    sorted_ones = zeros(Int64, length(ones))\n    \n    for i = 1:length(ones)\n\
    \        sorted_ones[i] = i\n    end\n    \n    sorted_ones = sort(sorted_ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(ones))\n    \n    for i = 1:length(ones)\n\
    \        sorted_arr[i] = ones[sorted_ones[i]]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    ones = zeros(Int64, length(arr))\n\
    \    for (i,v) in enumerate(arr)\n        ones[i] = v==1\n    end\n    \n    ones_sorted\
    \ = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n    for (i,v)\
    \ in enumerate(arr)\n        sorted_arr[i] = ones_sorted[i]*v\n    end\n    \n\
    \    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of 1's in each position in the vector. For example, sort_array([1,\
    \ 5, 2, 3, 4]) should return [1, 1, 2, 2, 1]. Your function should use only one\
    \ for loop.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1]\
    \ = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = ones_sorted[i]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.0>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in an array. For example, for [1, 1, 0, 1] it should return 3.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr\n    \n\
    \    for i = 1:length(arr)\n        \n        if ones[i] != 0\n            \n\
    \            ones_count = ones[i]\n            \n            sorted_arr[i] = sort(sorted_arr[i],\
    \ rev=true)\n            \n            sorted_arr[i] .-= ones_count\n        end\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nSolution\nLet's test\
    \ our solution:", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int, length(arr))\n    for i in eachindex(arr)\n      \
    \  ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3,\
    \ 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part II: Binary Search\nIn this Kata, you have to implement binary search algorithm.\
    \ Binary search is very useful when you have sorted vector and want to find some\
    \ element inside it. In Julia, binary search is implemented as function searchsorted\
    \ which takes two arguments: vector and value to search for. Here is an example\
    \ of binary search implementation:", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of ones in each position. For example, for [1, 1, 0, 1] it should\
    \ return [1, 1, 0, 0].", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .!= 1] .=\
    \ 0\n    \n    return sorted\nend", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = sort(ones[arr .== i])[1]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nImplement a function that counts the\
    \ number of zeros in an array. \nThe function should return an array of integers\
    \ where the i-th element is the number of\nzeros in the i-th element of the given\
    \ array.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] =\
    \ 1\n    \n    sorted_ones = zeros(Int64, length(arr))\n    sorted_ones[ones .==\
    \ 1] = arr[ones .== 1]\n    \n    sorted_ones = sort(sorted_ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[ones .== 1] = arr[ones .== 1]\n\
    \    \n    sorted_arr = sort(sorted_arr)\n    \n    return sorted_arr\nend", " \
    \   \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n    \n\
    \    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n   \
    \ \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    for i in 1:length(arr)\n\
    \        arr[i] = arr[i] - ones[i]\n    end\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 0, 2, 3, 4])\n</cell>\n<text>\nPart III: Binary Search Algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm to find if some value exists in\
    \ sorted array.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    decimals = zeros(Int64,\
    \ length(ones_sorted))\n    decimals[ones_sorted .== 1] = 1\n    \n    decimals_sorted\
    \ = sort(decimals)\n    \n    sorted_arr = zeros(Int64, length(ones_sorted))\n\
    \    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n  \
    \  \n    sorted_arr[ones_sorted .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted\
    \ .== 1] = arr .== 1\n    \n    sorted_arr[ones_sorted .== 1] = arr .== ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int, length(arr))\n   \
    \ \n    sorted_arr .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 7: Sort a vector of non-negative integers according to number\
    \ of ones in their binary representation in descending order\nImplement a function\
    \ that sorts a vector of non-negative integers according to number of ones in\
    \ their binary representation in descending order."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
