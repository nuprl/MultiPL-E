name: HumanEval_42_incr_list
language: jl
prompt: "\"\"\"Return vector with elements incremented by 1.\n    >>> incr_list([1,\
  \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6,\
  \ 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
completions: ["    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the product of the\
    \ elements of a vector.\nWrite a function that returns the maximum of the elements\
    \ of a vector.\nWrite a function that returns the minimum of the elements of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the sign of a\
    \ vector.\nWrite a function that returns the absolute ", "    l = copy(l)\n  \
    \  i = length(l)\n    while i > 1\n        l[i-1] = l[i-1] + 1\n        i = i-1\n\
    \    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n\
    \    l = l + [length(l)]\n    return l\nend", "    l = l + [Int64]\n    return\
    \ l\nend", "    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector", "    l = l + [Int64]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i\
    \ = length(l)\n    while i > 0\n        l[i] = l[i] + 1\n        i = i - 1\n \
    \   end\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, incremented by 1.\nWrite a function that returns the last\
    \ element of a vector, decremented by 1.\nWrite a function that returns the sum\
    \ of a vector, incremented by 1.\nWrite a function that returns the product of\
    \ a vector, multiplied by 1.\nWrite a function that returns the maximum of a vector,\
    \ incremented by 1.\nWrite a function that returns the minimum of a vector, decremented\
    \ by 1.\nWrite a function that returns the absolute value of a vector.\nWrite\
    \ a function that returns the sign of a vector.\nWrite a function that returns\
    \ the absolute value of a vector, incremented by 1.\nWrite a function that returns\
    \ the absolute value of a vector, decremented by 1.\nWrite a function that returns\
    \ the sum of a vector, incremented by 1, multiplied by 1.\nWrite a function that\
    \ returns the product of a vector, multiplied by 1, multiplied by 1.\nWrite a\
    \ function that returns the maximum of a vector, incremented by 1, multiplied\
    \ by 1.\nWrite a function that returns the minimum of a vector, decremented by\
    \ 1, multiplied by 1.\nWrite a function that returns the absolute value of a vector,\
    \ incremented by 1, multiplied by 1.\nWrite a function that returns the absolute\
    \ value of a vector, decremented by 1, multiplied by 1.\nWrite a function that\
    \ returns the sum of a vector, incremented by 1, multiplied by 1, multiplied by\
    \ 1.\nWrite a function that returns the product of a vector, multiplied by 1,\
    \ multiplied by 1, multiplied by 1.\nWrite a function that returns the maximum\
    \ of a vector, incremented by 1, multiplied by 1, multiplied by 1.\nWrite a function\
    \ that returns the minimum of a vector, decremented by 1, multiplied by 1, multiplied\
    \ by 1.\nWrite a function that returns the absolute value of a vector, incremented\
    \ by 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the absolute\
    \ value of a vector, decremented by 1, multiplied by 1, multiplied by 1.\nWrite\
    \ a function that returns the sum of a vector, incremented by 1, multiplied by\
    \ 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the product\
    \ of a vector, multiplied by 1, multiplied by 1, multiplied by 1, multiplied by\
    \ 1.\nWrite a function that returns the maximum of a vector, incremented by 1,\
    \ multiplied by 1, multiplied by 1, multiplied by 1.\nWrite a function that returns\
    \ the minimum of a vector, decremented by 1, multiplied by 1, multiplied by 1,\
    \ multiplied by 1.\nWrite a function that returns the absolute value of a vector, ",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the vector\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123] in Julia by adding 1 to each element of the vector.",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a ", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of elements in a vector that are greater than\
    \ a given value.", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns a new vector with elements incremented by 1.", "    l =\
    \ l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the vector with its elements multiplied by 2.\n>>> mult2([2, 3,\
    \ 4])\n[4, 6, 8]\n>>> mult2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[5, 15, 25, 35, 45,\
    \ 55, 65, 75, 85]\n</text>\n<code language=julia-1.5>", "    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the product of the elements of a vector.\
    \ \nWrite a function that returns the maximum of the elements of a vector. \n\
    Write a function that returns the minimum of the elements of a vector. \nWrite\
    \ a function that returns the absolute value of a number. \nWrite a function that\
    \ returns the sign of a number. \nWrite a function that returns the factorial\
    \ of a number. \nWrite a function that returns the floor of a number. \nWrite\
    \ a function that returns the ceil of a number. \nWrite a function that returns\
    \ the absolute value of a vector. \nWrite a function that returns the sign of\
    \ a vector. \nWrite a function that returns the factorial of a vector. \nWrite\
    \ a function that returns the floor of a vector. \nWrite a function that returns\
    \ the ceil of a vector. \nWrite a function that returns the absolute value of\
    \ a matrix. \nWrite a function that returns the sign of a matrix. \nWrite a function\
    \ that returns the factorial of a matrix. \nWrite a function that returns the\
    \ floor of a matrix. \nWrite a function that returns the ceil of a matrix. \n\
    Write a function that returns the absolute value of a matrix. \nWrite a function\
    \ that returns the sign of a matrix. \nWrite a function that returns the factorial\
    \ of a matrix. \nWrite a function that returns the floor of a matrix. \nWrite\
    \ a function that returns the ceil of a matrix. \nWrite a function that returns\
    \ the absolute value of a matrix. \nWrite a function that returns the sign of\
    \ a matrix. \nWrite a function that returns the factorial of a matrix. \nWrite\
    \ a function that returns the floor of a matrix. \nWrite a function that returns\
    \ the ceil of a matrix. \nWrite a function that returns the absolute value of\
    \ a matrix. \nWrite a function that returns the sign of a matrix. \nWrite a function\
    \ that returns the factorial of a matrix. \nWrite a function that returns the\
    \ floor of a matrix. \nWrite a function that returns the ceil of a matrix. \n\
    Write a function that returns the absolute value of a matrix. \nWrite a function\
    \ that returns the sign of a matrix. \nWrite a function that returns the factorial\
    \ of a matrix. \nWrite a function that returns the floor of a matrix. \nWrite\
    \ a function that returns the ceil of a matrix. \nWrite a function that returns\
    \ the absolute value of a matrix. \nWrite a function that returns the sign of\
    \ a matrix. \nWrite a function that returns the factorial of a matrix. \nWrite\
    \ a function that returns the floor of a matrix. \nWrite a function that returns\
    \ the ceil of a matrix. \nWrite a function that returns the absolute value of\
    \ a matrix. \nWrite a function that returns the sign of a matrix. \nWrite a function\
    \ that returns the factorial ", "    l = l + [Int64]\n    return l\nend", "  \
    \  l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of an array with elements incremented by 1.", "    l = l .+ 1\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l .+ 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the product of the elements of a vector.\
    \ \nWrite a function that returns the maximum of the elements of a vector. \n\
    Write a function that returns the minimum of the elements of a vector. \nWrite\
    \ a function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute value\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the absolute value of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the absolute ",
  "    l = copy(l)\n    for i in eachindex(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector and returns the\
    \ vector with its elements incremented by 1.", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] += 1\n        i -= 1\n    end\n    l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + 1\n    return\
    \ l\nend", "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a matrix. \nWrite a function that returns the sum\
    \ of the elements of a sparse matrix. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite ",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a vector with elements incremented\
    \ by 1 until a condition is met. For example, if the condition is that the vector\
    \ is incremented by 1 until it reaches 10, the function should return [10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19]. Test your function by calling it with the vector\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123] and 10. How many elements are in the resulting\
    \ vector?", "    l = l + [Int64]\n    return l\nend", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + ones(length(l)) * 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.4>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the first element of a vector, plus 1.", "    l = copy(l)\n   \
    \ l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n elements of a vector. \nFor example, \n    firstn(x, 3) = [x[1],\
    \ x[2], x[3]].\nWrite a function that returns the first n elements of a vector,\
    \ where n is a positive integer.\nFor example, \n    firstn(x, 3) = [x[1], x[2],\
    \ x[3]].\nWrite a function that returns the first n elements of a vector, where\
    \ n is a positive integer.\nFor example, \n    firstn(x, 3) = [x[1], x[2], x[3]].\n\
    Write a function that returns the first n elements of a vector, where n is a positive\
    \ integer.\nFor example, \n    firstn(x, 3) = [x[1], x[2], x[3]].\nWrite a function\
    \ that returns the first n elements of a vector, where n is a positive integer.\n\
    For example, \n    firstn(x, 3) = [x[1], x[2], x[3]].\nWrite a function that returns\
    \ the first n elements of a vector, where n is a positive integer.\nFor example,\
    \ \n    firstn(x, 3) = [x[1], x[2], x[3]].\nWrite a function that returns the\
    \ first n elements of a vector, where n is a positive integer.\nFor example, \n\
    \    firstn(x, 3) = [x[1], x[2], x[3]].\nWrite a function that returns the first\
    \ n elements of a vector, where n is a positive integer.\nFor example, \n    firstn(x,\
    \ 3) = [x[1], x[2], x[3]].\nWrite a function that returns the first n elements\
    \ of a vector, where n is a positive integer.\nFor example, \n    firstn(x, 3)\
    \ = [x[1], x[2], x[3]].\nWrite a function that returns the first n elements of\
    \ a vector, where n is a positive integer.\nFor example, \n    firstn(x, 3) =\
    \ [x[1], x[2], x[3]].\nWrite a function that returns the first n elements of a\
    \ vector, where n is a positive integer.\nFor example, \n    firstn(x, 3) = [x[1],\
    \ x[2], x[3]].\nWrite a function that returns the first n elements of a vector,\
    \ where n is a positive integer.\nFor example, \n    firstn(x, 3) = [x[1], x[2],\
    \ x[3]].\nWrite a function that returns the first n elements of a vector, where\
    \ n is a positive integer.\nFor example, \n    firstn(x, 3) = [x[1], x[2], x[3]].\n\
    Write a function that returns the first n elements of a vector, where n is a positive\
    \ integer.\nFor example, \n    firstn(x, 3) = [x[1], x[2], x[3]].\nWrite ", " \
    \   l = l + ones(length(l)) * 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns a vector\
    \ with elements incremented by 1 until a condition is met. For example, if the\
    \ condition is that the vector has at least 3 elements, then the function should\
    \ return [2, 3, 4] because [2, 3, 4] has 3 elements and [2, 3, 4] has 3 elements.\
    \ If the condition is that the vector has at least 4 elements, then the function\
    \ should return [2, 3, 3, 4] because [2, 3, 3, 4] has 4 elements and [2, 3, 3,\
    \ 4] has 4 elements. If the condition is that the vector has at least 5 elements,\
    \ then the function should return [2, 3, 3, 4, 4] because [2, 3, 3, 4, 4] has\
    \ 5 elements and [2, 3, 3, 4, 4] has 5 elements.", "    l = l + 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\n@assert incr_list([1, 2, 3]) ==\
    \ [2, 3, 4]\n@assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3,\
    \ 4, 4, 10, 1, 124]\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of a vector, plus 1.\nWrite a function that returns the first\
    \ element of a vector, multiplied by 2.\nWrite a function that returns the first\
    \ element of a vector, divided by 3.\nWrite a function that returns the first\
    \ element of a vector, raised to the power of 4.\nWrite a function that returns\
    \ the first element of a vector, negated.\nWrite a function that returns the first\
    \ element of a vector, concatenated to the end of a vector.\nWrite a function\
    \ that returns the first element of a vector, concatenated to the beginning of\
    \ a vector.\nWrite a function that returns the first element of a vector, concatenated\
    \ to the middle of a vector.\nWrite a function that returns the first element\
    \ of a vector, concatenated to the end of a vector.\nWrite a function that returns\
    \ the first element of a vector, concatenated to the beginning of a vector.\n\
    Write a function that returns the first element of a vector, concatenated to the\
    \ middle of a vector.\nWrite a function that returns the first element of a vector,\
    \ concatenated to the end of a vector.\nWrite a function that returns the first\
    \ element of a vector, concatenated to the beginning of a vector.\nWrite a function\
    \ that returns the first element of a vector, concatenated to the middle of a\
    \ vector.\nWrite a function that returns the first element of a vector, concatenated\
    \ to the end of a vector.\nWrite a function that returns the first element of\
    \ a vector, concatenated to the beginning of a vector.\nWrite a function that\
    \ returns the first element of a vector, concatenated to the middle of a vector.\n\
    Write a function that returns the first element of a vector, concatenated to the\
    \ end of a vector.\nWrite a function that returns the first element of a vector,\
    \ concatenated to the beginning of a vector.\nWrite a function that returns the\
    \ first element of a vector, concatenated to the middle of a vector.\nWrite a\
    \ function that returns the first element of a vector, concatenated to the end\
    \ of a vector.\nWrite a function that returns the first element of a vector, concatenated\
    \ to the beginning of a vector.\nWrite a function that returns the first element\
    \ of a vector, concatenated to the middle of a vector.\nWrite a function that\
    \ returns the first element of a vector, concatenated to the end of a vector.\n\
    Write a function that returns the first element of a vector, concatenated to the\
    \ beginning of a vector.\nWrite a function that returns the first element of a\
    \ vector, concatenated to the middle of a vector.\nWrite a function that returns\
    \ the first element of a vector, concatenated to the end of a vector.\nWrite a\
    \ function that returns the first element of a vector, concatenated to the beginning\
    \ of a vector.\nWrite a function that returns the first element of a vector, concatenated\
    \ to the middle of a vector.\nWrite a function that returns the first element\
    \ of a vector, concatenated to the end of a vector.\nWrite a function that returns\
    \ the ", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\n@time incr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the elements of an\
    \ array.", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the product\
    \ of the elements of a vector. \nWrite a function that returns the maximum of\
    \ the elements of a vector. \nWrite a function that returns the minimum of the\
    \ elements of a vector. \nWrite a function that returns the absolute value of\
    \ a number. \nWrite a function that returns the sign of a number. \nWrite a function\
    \ that returns the floor of a number. \nWrite a function that returns the ceil\
    \ of a number. \nWrite a function that returns the factorial of a number. \nWrite\
    \ a function that returns the factorial of a number modulo 10. \nWrite a function\
    \ that returns the factorial of a number modulo 100. \nWrite a function that returns\
    \ the factorial of a number modulo 1000. \nWrite a function that returns the factorial\
    \ of a number modulo 10000. \nWrite a function that returns the factorial of a\
    \ number modulo 100000. \nWrite a function that returns the factorial of a number\
    \ modulo 1000000. \nWrite a function that returns the factorial of a number modulo\
    \ 10000000. \nWrite a function that returns the factorial of a number modulo 100000000.\
    \ \nWrite a function that returns the factorial of a number modulo 1000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 10000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 100000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 1000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 10000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 100000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 1000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 10000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 100000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 1000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 10000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 100000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 1000000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 10000000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 100000000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 1000000000000000000000000.\
    \ \nWrite a function that returns the factorial of a number modulo 10000000000000000000000000.\
    \ \nWrite a ", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l .+ 1\n    return l\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns a vector with elements incremented by a specified amount.\nFor\
    \ example, incr_list([1, 2, 3], 2) returns [3, 4, 5].", "    l = l + ones(length(l))\
    \ * 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n\
    \    for i = length(l); i >= 1; i--\n        l[i] = l[i] + 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nFor example, incr_list([2, 3, 4]) should return 5.", "    l = l .+\
    \ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the sum of the elements\
    \ of an array.", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements in a vector.", "    l = copy(l)\n    l = l + 1\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1, 2, 3])\n\
    @time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write\
    \ a function that returns a vector with elements incremented by 1 modulo 10.\n\
    The function should take an input vector l and output a vector with elements incremented\
    \ by 1 modulo 10. \nThe function should work for vectors of any length.", "  \
    \  l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = copy(l)\n    i = length(l) - 1\n    while i >=\
    \ 0\n        l[i] = l[i] + 1\n        i = i - 1\n    end\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the elements of an array. \nThe function should take\
    \ an array as input, and output a number.", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n    l =\
    \ l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector as input and returns a vector with elements incremented\
    \ by 1.", "    l = l + [Int64]\n    return l\nend", "    l = l + [Int64]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.3>", "    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l .+ 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the vector with its\
    \ elements incremented by 1.", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Return vector with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \"\"\"", "    l = l |> Vector{Int64}\n    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 0\n        l[i] = l[i] + 1\n        i -= 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the vector\
    \ with its elements incremented by 1.\nThe function should work for vectors of\
    \ any length.", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array.", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = copy(l)\n    for i in 1:length(l)\n     \
    \   l[i] = l[i] + 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite a function that returns the sum of the elements\
    \ of a vector.\nWrite a function that returns the sum of the elements of a vector.\n\
    Write a function that returns the sum of the elements of a vector.\nWrite a function\
    \ that returns the sum of the elements of a vector.\nWrite a function that returns\
    \ the sum of the elements of a vector.\nWrite a function that returns the sum\
    \ of the elements of a vector.\nWrite ", "    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the number of elements in a vector.\n    >>> count_list([1,\
    \ 2, 3])\n    3\n    >>> count_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    12\n \
    \   \"\"\"", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of a vector.", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the elements of a vector. \nThe function should accept\
    \ a vector as input, and return a scalar.", "    l = copy(l)\n    for i in 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.", "    l\
    \ = l + [Int64]\n    return l\nend", "    l = l + 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.3>", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the product\
    \ of the elements of a vector. \nWrite a function that returns the maximum of\
    \ the elements of a vector. \nWrite a function that returns the minimum of the\
    \ elements of a vector. \nWrite a function that returns the absolute value of\
    \ the elements of a vector. \nWrite a function that returns the sign of the elements\
    \ of a vector. \nWrite a function that returns the absolute value of the elements\
    \ of a vector. \nWrite a function that returns the sign of the elements of a vector.\
    \ \nWrite a function that returns the absolute value of the elements of a vector.\
    \ \nWrite a function that returns the sign of the elements of a vector. \nWrite\
    \ a function that returns the absolute value of the elements of a vector. \nWrite\
    \ a function that returns the sign of the elements of a vector. \nWrite a function\
    \ that returns the absolute value of the elements of a vector. \nWrite a function\
    \ that returns the sign of the elements of a vector. \nWrite a function that returns\
    \ the absolute value of the elements of a vector. \nWrite a function that returns\
    \ the sign of the elements of a vector. \nWrite a function that returns the absolute\
    \ value of the elements of a vector. \nWrite a function that returns the sign\
    \ of the elements of a vector. \nWrite a function that returns the absolute value\
    \ of the elements of a vector. \nWrite a function that returns the sign of the\
    \ elements of a vector. \nWrite a function that returns the absolute value of\
    \ the elements of a vector. \nWrite a function that returns the sign of the elements\
    \ of a vector. \nWrite a function that returns the absolute value of the elements\
    \ of a vector. \nWrite a function that returns the sign of the elements of a vector.\
    \ \nWrite a function that returns the absolute value of the elements of a vector.\
    \ \nWrite a function that returns the sign of the elements of a vector. \nWrite\
    \ a function that returns the absolute value of the elements of a vector. \nWrite\
    \ a function that returns the sign of the elements of a vector. \nWrite a function\
    \ that returns the absolute value of the elements of a vector. \nWrite a function\
    \ that returns the sign of the elements of a vector. \nWrite a function that returns\
    \ the absolute value of the elements of a vector. \nWrite a function that returns\
    \ the sign of the elements of a vector. \nWrite a function that returns the absolute\
    \ value of the elements of a vector. \nWrite a function that returns the sign\
    \ of the elements of a vector. \nWrite a function that returns the absolute value\
    \ of the elements of a vector. \nWrite a function that returns the sign of the\
    \ elements of a vector. \nWrite a function that returns the absolute value of\
    \ the elements of a vector. \nWrite a function that returns the sign of the elements\
    \ of a vector. \nWrite a function that returns the absolute value of the elements\
    \ of a vector. \nWrite a function that returns the sign of the elements of a vector.\
    \ \nWrite a function that returns the absolute value of the elements of a vector.\
    \ \nWrite a ", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the elements of an array. \nWrite a function that returns the maximum of the\
    \ elements of an array. \nWrite a function that returns the minimum of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the elements\
    \ of an array. \nWrite a function that returns the sign of the elements of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first n elements of\
    \ an array. \nWrite a function that returns the product of the first n elements\
    \ of an array. \nWrite a function that returns the maximum of the first n elements\
    \ of an array. \nWrite a function that returns the minimum of the first n elements\
    \ of an array. \nWrite a function that returns the absolute value of the first\
    \ n elements of an array. \nWrite a function that returns the sign of the first\
    \ n elements of an array. \nWrite a function that returns the sum of the first\
    \ n elements of an array. \nWrite a function that returns the product of the first\
    \ n elements of an array. \nWrite a function that returns the maximum of the first\
    \ n elements of an array. \nWrite a function that returns the minimum of the first\
    \ n elements of an array. \nWrite a function that returns the absolute value of\
    \ the first n elements of an array. \nWrite a function that returns the sign of\
    \ the first n elements of an array. \nWrite a function that returns the sum of\
    \ the first n elements of an array. \nWrite a function that returns the product\
    \ of the first n elements of an array. \nWrite a function that returns the maximum\
    \ of the first n elements of an array. \nWrite a function that returns the minimum\
    \ of the first n elements of an array. \nWrite a function that returns the absolute\
    \ value of the first n elements of an array. \nWrite a function that returns the\
    \ sign of the first n elements of an array. \nWrite a function that returns the\
    \ sum of the first n elements of an array. \nWrite a function that returns the\
    \ product of the first n elements of an array. \nWrite a function that returns\
    \ the maximum of the first n elements of an array. \nWrite a function that returns\
    \ the minimum of the first n elements of an array. \nWrite a function that returns\
    \ the absolute value of the first n elements of an array. \nWrite a function that\
    \ returns the sign of the first n elements of an array. \nWrite a function that\
    \ returns the sum of the first n elements of an array. \nWrite a function that\
    \ returns the product of the first n elements of an array. \nWrite a function\
    \ that returns the maximum of the first n elements of an array. \nWrite a function\
    \ that returns the minimum of the first n elements of ", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + 1\n    return l\nend", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of an array.", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.4>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. ", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. ", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first element of a list\
    \ if it is non-empty, or the second element otherwise.", "    l = l .+ 1\n   \
    \ return l\nend", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n  \
    \  l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of a vector. \nThe function should accept a vector as an argument.\
    \ \nThe function should return a single number.", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector as input and returns a\
    \ vector with elements incremented by 1.", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i] - 1\n        i = i-1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l = l + ones(length(l))\
    \ * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n elements\
    \ of a vector. For example, incr_list([1, 2, 3], 2) should return [2, 3].", " \
    \   l = copy(l)\n    l += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    @time incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the elements of a vector. \nWrite a function that returns the sum of\
    \ the elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector and returns the vector with its elements incremented\
    \ by 1.", "    l = copy(l)\n    i = length(l)\n    \n    while i > 1\n       \
    \ l[i-1] += 1\n        i -= 1\n    end\n    \n    return l\nend", "    l = l +\
    \ [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array. \nThe function should take an input array and return\
    \ the sum of the elements. \nThe function should work for both 1D and 2D arrays.",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the vector\
    \ with elements incremented by 1 but starting at position n. For example, incr_list([1,\
    \ 2, 3], 2) should return [3, 3, 3].", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\n@time incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(incr_list(in",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + [Int64]\n    return l\nend", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the product of the elements of a vector. \nWrite a function that\
    \ returns the maximum of the elements of a vector. \nWrite a function that returns\
    \ the minimum of the elements of a vector. \nWrite a function that returns the\
    \ absolute value of a number. \nWrite a function that returns the sign of a number.\
    \ \nWrite a function that returns the floor of a number. \nWrite a function that\
    \ returns the ceil of a number. \nWrite a function that returns the floor of the\
    \ absolute value of a number. \nWrite a function that returns the floor of the\
    \ sign of a number. \nWrite a function that returns the floor of the absolute\
    \ value of the sign of a number. \nWrite a function that returns the floor of\
    \ the sign of the absolute value of a number. \nWrite a function that returns\
    \ the floor of the sign of the absolute value of the sign of a number. \nWrite\
    \ a function that returns the floor of the sign of the absolute value of the sign\
    \ of the absolute value of a number. \nWrite a function that returns the floor\
    \ of the sign of the absolute value of the sign of the absolute value of the sign\
    \ of a number. \nWrite a function that returns the floor of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of the absolute value of\
    \ a number. \nWrite a function that returns the floor of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of the absolute value of\
    \ the sign of a number. \nWrite a function that returns the floor of the sign\
    \ of the absolute value of the sign of the absolute value of the sign of the absolute\
    \ value of the sign of the absolute value of a number. \nWrite a function that\
    \ returns the floor of the sign of the absolute value of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of the absolute value of\
    \ the sign of a number. \nWrite a function that returns the floor of the sign\
    \ of the absolute value of the sign of the absolute value of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of the absolute value of\
    \ a number. \nWrite a function that returns the floor of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of the absolute value of\
    \ the sign of the absolute value of the sign of the absolute value of the sign\
    \ of a number. \nWrite a function that returns the floor of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of the absolute value of\
    \ the sign of the absolute value of the sign of the absolute value of the sign\
    \ of the absolute value of a number. \nWrite a function that returns the floor\
    \ of the sign of the absolute value of the sign of the absolute value of the sign\
    \ of the absolute value of the sign of the absolute value of the sign of the absolute\
    \ value of the sign of the absolute value of the sign of a number. \nWrite a function\
    \ that returns the floor of the sign of the absolute value of the sign of the\
    \ absolute value of the sign of the absolute value of the sign of the absolute\
    \ value of the sign of the absolute ", "    l = copy(l)\n    for i = length(l)-1;\
    \ i>=0; i--\n        l[i+1] = l[i]+1\n    end\n    l\nend\n</cell>\n<code language=julia-1.3>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l = l\
    \ + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of a list of numbers.", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = copy(l)\n    l = l .+ 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the elements of a vector in reverse order. For example, incr_list([1, 2, 3])\
    \ should return [3, 2, 1].", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.", "    l = copy(l)\n    l = l + ones(length(l))\
    \ * Int64(1)\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times the element x appears in the list l.", "    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\n@time incr_list([5,3,5,2,3,3,9,0,123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a vector, incremented\
    \ by 1.", "    l = copy(l)\n    i = length(l) - 1\n    while i >= 0\n        l[i+1]\
    \ += 1\n        i -= 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + ones(length(l))\
    \ * 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, incremented by 1.\n    >>> incr_vec([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \"\"\"", "    l = l + [Int64(1)]\n    return l\nend", " \
    \   l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = copy(l)\n    l = l + ones(length(l)) * Int64(1)\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of elements in a vector. \nFor example, incr_vec(v)\
    \ should return v.length.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + ones(length(l))\
    \ * 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l = l +\
    \ 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1\
    \ \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n\
    \    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a ", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i - 1] +\
    \ 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ sum of the elements of an array. \nWrite a function that returns the sum of\
    \ the elements of an array. \nWrite a function that returns the sum of the elements\
    \ of an array. \nWrite a function that returns the sum of the elements of an array.\
    \ \nWrite a function that returns the sum of the elements of an array. \nWrite\
    \ a function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of an array. \nWrite a function that returns the sum of the elements\
    \ of an array. \nWrite a function that returns the sum of the elements of an array.\
    \ \nWrite a function that returns the sum of the elements of an array. \nWrite\
    \ a function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of an array. \nWrite a function that returns the sum of the elements\
    \ of an array. \nWrite a function that returns the sum of the elements of an array.\
    \ \nWrite a function that returns the sum of the elements of an array. \nWrite\
    \ a function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of an array. \nWrite a function that returns the sum of the elements\
    \ of an array. \nWrite a function that returns the sum of the elements of an array.\
    \ \nWrite a function that returns the sum of the elements of an array. \nWrite\
    \ a function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of an array. \nWrite a function that returns the sum of the elements\
    \ of an array. \nWrite a function that returns the sum of the elements of an array.\
    \ \nWrite a function that returns the sum of the elements of an array. \nWrite\
    \ a function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the sum\
    \ of the elements of an array. ", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of a list of numbers.", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a vector. \nThe function should\
    \ take one argument, x, of type Vector{Int64}, and return a value of type Int64.",
  "    l = l + 1\n    return l\nend", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the first element of a vector, incremented by 1.\nWrite a function\
    \ that returns the last element of a vector, decremented by 1.\nWrite a function\
    \ that returns the sum of a vector, incremented by 1.\nWrite a function that returns\
    \ the product of a vector, multiplied by 1.\nWrite a function that returns the\
    \ mean of a vector, divided by 1.\nWrite a function that returns the standard\
    \ deviation of a vector, multiplied by 1.\nWrite a function that returns the variance\
    \ of a vector, multiplied by 1.\nWrite a function that returns the minimum of\
    \ a vector, incremented by 1.\nWrite a function that returns the maximum of a\
    \ vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\nWrite a function that returns the absolute value\
    \ of a vector, multiplied by 1.\n", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.3>", "    l = l .+ 1\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the elements of a vector.\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"", "    l\
    \ = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the vector with its elements multiplied by 2.\n    >>> mult_list([1,\
    \ 2, 3])\n    [2, 4, 6]\n    >>> mult_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [5, 15, 5, 15, 15, 15, 15, 15, 123]\n    \"\"\"", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i-1] + 1\n        i = i-1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first element of a list\
    \ that satisfies a condition. For example, suppose you have a list of integers\
    \ and you want to find the first element in the list that is a multiple of 3.\
    \ The function should return 3 if there is a 3 in the list, otherwise it should\
    \ return nothing. Write a function that takes in a list as an argument and returns\
    \ the first element that satisfies the condition.", "    l = l + [Int64]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l\
    \ = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    @time incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a vector, incremented by 1.", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = copy(l)\n    for i in 1:length(l)\n        l[i]\
    \ = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    l += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that returns the first\
    \ element of a vector, incremented by 1.", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of elements in a vector that are not equal\
    \ to zero.", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2: Write a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\n    >>>\
    \ incr_vector([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_vector([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "    l = l + 1\
    \ \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the elements\
    \ of an array.", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n   \
    \ l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n    \n    for\
    \ k in 1:i-1\n        l[k+1] = l[k] + 1\n    end\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + 1\n    return l\nend", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
