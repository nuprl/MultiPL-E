name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
  1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
  )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ num == \"\"\n        return 0\n    \n    digits = num.digits\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n    \n\
    \    prime_digits_count_2 = prime_digits_count * prime_digits_count\n    \n  \
    \  prime_digits_count_3 = prime_digits_count_2 * prime_digits_count\n    \n  \
    \  prime_digits_count_4 = prime_digits_count_3 * prime_digits_count\n    \n  \
    \  prime_digits_count_5 = prime_digits_count_4 * prime_digits_count\n    \n  \
    \  prime_digits_count_6 = prime_digits_count_5 * prime_digits_count\n    \n  \
    \  prime_digits_count_7 = prime_digits_count_6 * prime_digits_count\n    \n  \
    \  prime_digits_count_8 = prime_digits_count_7 * prime_digits_count\n    \n  \
    \  prime_digits_count_9 = prime_digits_count_8 * prime_digits_count\n    \n  \
    \  prime_digits_count_10 = prime_digits_count_9 * prime_digits_count\n    \n \
    \   prime_digits_count_11 = prime_digits_count_10 * prime_digits_count\n    \n\
    \    prime_digits_count_12 = prime_digits_count_11 * prime_digits_count\n    \n\
    \    prime_digits_count_13 = prime_digits_count_12 * prime_digits_count\n    \n\
    \    prime_digits_count_14 = prime_digits_count_13 * prime_digits_count\n    \n\
    \    prime_digits_count_15 = prime_digits_count_14 * prime_digits_count\n    \n\
    \    prime_digits_count_16 = prime_digits_count_15 * prime_digits_count\n    \n\
    \    prime_digits_count_17 = prime_digits_count_16 * prime_digits_count\n    \n\
    \    prime_digits_count_18 = prime_digits_count_17 * prime_digits_count\n    \n\
    \    prime_digits_count_19 = prime_digits_count_18 * prime_digits_count\n    \n\
    \    prime_digits_count_20 = prime_digits_count_19 * prime_digits_count\n    \n\
    \    prime_digits_count_21 = prime_digits_count_20 * prime_digits_count\n    \n\
    \    prime_digits_count_22 = prime_digits_count_21 * prime_digits_count\n    \n\
    \    prime_digits_count_23 = prime_digits_count_22 * prime_digits_count\n    \n\
    \    prime_digit", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n    \n  \
    \  prime_digits = primes.filter(|x| digits.contains(x))\n    \n    prime_digits_count\
    \ = prime_digits.count()\n    \n    return prime_digits_count\nend\n</cell>\n\
    <code language=julia-1.1>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.1>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.1>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.1>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.1>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"AB\")\n1\n>>> not_letters(\"1077E\"\
    )\n3\n>>> not_letters(\"ABED1A33\")\n4\n>>> not_letters(\"123456789ABCDEF0\")\n\
    6\n>>> not_letters(\"2020\")\n2\n\"\"\"", "    if num == \"\"\n        return\
    \ 0\n    \n    digits = num.digits\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = length(primes)\n    \n    prime_digits_count =\
    \ prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count -\
    \ 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_", "    \n    primes = prime_numbers(num)\n\
    \    prime_digits = primes.map(x -> digits(x))\n    prime_digits = prime_digits.filter(x\
    \ -> x != 0)\n    prime_digits = prime_digits.filter(x -> x != 1)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 2)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 3)\n    prime_digits = prime_digits.filter(x -> x != 4)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 5)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 6)\n    prime_digits = prime_digits.filter(x -> x != 7)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 8)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 9)\n    prime_digits = prime_digits.filter(x -> x != 10)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 11)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 12)\n    prime_digits = prime_digits.filter(x -> x != 13)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 14)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 15)\n    prime_digits = prime_digits.filter(x -> x != 16)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 17)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 18)\n    prime_digits = prime_digits.filter(x -> x != 19)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 20)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 21)\n    prime_digits = prime_digits.filter(x -> x != 22)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 23)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 24)\n    prime_digits = prime_digits.filter(x -> x != 25)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 26)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 27)\n    prime_digits = prime_digits.filter(x -> x != 28)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 29)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 30)\n    prime_digits = prime_digits.filter(x -> x != 31)\n", "    \n\
    \    primes = primes_list(10)\n    \n    primes_count = 0\n    \n    for prime\
    \ in primes\n        \n        if num == prime\n            primes_count += 1\n\
    \        end\n    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>",
  "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = length(primes)\n    \n\
    \    hex_count = 0\n    \n    for digit in digits\n        if digit in primes\n\
    \            hex_count += 1\n            \n    return hex_count\nend\n</cell>\n\
    <code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = primes.count\n    \n    prime_digits_count_2 =\
    \ prime_digits_count * prime_digits_count\n    \n    prime_digits_count_3 = prime_digits_count_2\
    \ * prime_digits_count\n    \n    prime_digits_count_4 = prime_digits_count_3\
    \ * prime_digits_count\n    \n    prime_digits_count_5 = prime_digits_count_4\
    \ * prime_digits_count\n    \n    prime_digits_count_6 = prime_digits_count_5\
    \ * prime_digits_count\n    \n    prime_digits_count_7 = prime_digits_count_6\
    \ * prime_digits_count\n    \n    prime_digits_count_8 = prime_digits_count_7\
    \ * prime_digits_count\n    \n    prime_digits_count_9 = prime_digits_count_8\
    \ * prime_digits_count\n    \n    prime_digits_count_10 = prime_digits_count_9\
    \ * prime_digits_count\n    \n    prime_digits_count_11 = prime_digits_count_10\
    \ * prime_digits_count\n    \n    prime_digits_count_12 = prime_digits_count_11\
    \ * prime_digits_count\n    \n    prime_digits_count_13 = prime_digits_count_12\
    \ * prime_digits_count\n    \n    prime_digits_count_14 = prime_digits_count_13\
    \ * prime_digits_count\n    \n    prime_digits_count_15 = prime_digits_count_14\
    \ * prime_digits_count\n    \n    prime_digits_count_16 = prime_digits_count_15\
    \ * prime_digits_count\n    \n    prime_digits_count_17 = prime_digits_count_16\
    \ * prime_digits_count\n    \n    prime_digits_count_18 = prime_digits_count_17\
    \ * prime_digits_count\n    \n    prime_digits_count_19 = prime_digits_count_18\
    \ * prime_digits_count\n    \n    prime_digits_count_20 = prime_digits_count_19\
    \ * prime_digits_count\n    \n    prime_digits_count_21 = prime_digits_count_20\
    \ * prime_digits_count\n    \n    prime_digits_count_22 = prime_digits_count_21\
    \ * prime_digits_count\n    \n    prime_digits_count_23 = prime_digits_count_22\
    \ * prime_digits_count\n    \n    prime_digits_count_24 = prime_", "    \n   \
    \ primes = primes_list(10)\n    \n    primes_count = primes.count{|x| num.chars.all{|c|\
    \ c==x}}\n    \n    primes_count += primes.count{|x| num.chars.all{|c| c==x.to_i(16)}}\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.3>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.3>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"", " \
    \   num = num.upper()\n    count = 0\n    for i in num:\n        if i == 'A' or\
    \ i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n            count\
    \ += 1\n    return count\n</code>\n<|/ a tags=primes,haskell |>\n<| c |>\nThank\
    \ you very much! I appreciate your help!\n<|/ c |>\n<| c |>\nThe `count` function\
    \ can be written more concisely as `length . filter (== 'A' || == 'B' || == 'C'\
    \ || == 'D' || == 'E' || == 'F') . toUpper`.\n<|/ c |>\n<| c |>\nThank you very\
    \ much! I appreciate your help!\n<|/ c |>\n<| a tags=primes,haskell |>\nHere's\
    \ a solution using Data.List's filter and length functions:\n<code>\nimport Data.List",
  "    \n    primes = primes_list(10)\n    \n    digits = num.chars\n    \n    prime_digits\
    \ = primes[digits]\n    \n    prime_digits_count = prime_digits.count\n    \n\
    \    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    ", "    \n    digits = num.chars\n \
    \   \n    primes = prime_digits(digits)\n    \n    prime_count = length(primes)\n\
    \    \n    prime_count_2 = prime_count + 1\n    \n    prime_count_3 = prime_count_2\
    \ + 1\n    \n    prime_count_4 = prime_count_3 + 1\n    \n    prime_count_5 =\
    \ prime_count_4 + 1\n    \n    prime_count_6 = prime_count_5 + 1\n    \n    prime_count_7\
    \ = prime_count_6 + 1\n    \n    prime_count_8 = prime_count_7 + 1\n    \n   \
    \ prime_count_9 = prime_count_8 + 1\n    \n    prime_count_10 = prime_count_9\
    \ + 1\n    \n    prime_count_11 = prime_count_10 + 1\n    \n    prime_count_12\
    \ = prime_count_11 + 1\n    \n    prime_count_13 = prime_count_12 + 1\n    \n\
    \    prime_count_14 = prime_count_13 + 1\n    \n    prime_count_15 = prime_count_14\
    \ + 1\n    \n    prime_count_16 = prime_count_15 + 1\n    \n    prime_count_17\
    \ = prime_count_16 + 1\n    \n    prime_count_18 = prime_count_17 + 1\n    \n\
    \    prime_count_19 = prime_count_18 + 1\n    \n    prime_count_20 = prime_count_19\
    \ + 1\n    \n    prime_count_21 = prime_count_20 + 1\n    \n    prime_count_22\
    \ = prime_count_21 + 1\n    \n    prime_count_23 = prime_count_22 + 1\n    \n\
    \    prime_count_24 = prime_count_23 + 1\n    \n    prime_count_25 = prime_count_24\
    \ + 1\n    \n    prime_count_26 = prime_count_25 + 1\n    \n    prime_count_27\
    \ = prime_count_26 + 1\n    \n    prime_count_28 = prime_count_27 + 1\n    \n\
    \    prime_count_29 = prime_count_28 + 1\n    \n    prime_count_30 = prime_count_29\
    \ + 1\n    \n    prime_count_31 = prime_count_30 + 1\n    \n    prime_count_32\
    \ = prime_count_31 + 1\n    \n    prime_count_33 = prime_count_32 + 1\n    \n\
    \    prime_count_34 = prime_count_33 + 1\n    \n    prime_count_35 = prime_count_34\
    \ + 1\n    \n    prime_count_36 = prime_count_35 + 1\n", "    \n    primes = primes_list(10)\n\
    \    \n    digits = num.chars\n    \n    prime_digits = primes.filter(x -> digits.contains(x))\n\
    \    \n    prime_digits_count = prime_digits.count()\n    \n    if prime_digits_count\
    \ > 0 \n        \n        prime_digits_count = prime_digits_count - 1\n      \
    \  \n        prime_digits_count = prime_digits_count + 1\n        \n        return\
    \ prime_digits_count\n    \n    else\n        \n        return 0\n    \nend\n\
    </cell>\n<code language=julia-1.3>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    primes = primes_list(10)\n    \n    digits = num.chars\n    \n    count\
    \ = 0\n    \n    for digit in digits\n        \n        if digit in primes\n \
    \           count += 1\n            \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters (uppercase or lowercase).\n\
    Examples:\n>>> not_letters(\"abc def\")\n3\n>>> not_letters(\"abc def\")\n0\n\
    >>> not_letters(\"abc def\")\n1\n>>> not_letters(\"abc def\")\n2\n>>> not_letters(\"\
    abc def\")\n3\n>>> not_letters(\"abc def\")\n4\n>>> not_letters(\"abc def\")\n\
    5\n>>> not_letters(\"abc def\")\n6\n>>> not_letters(\"abc def\")\n7\n>>> not_letters(\"\
    abc def\")\n8\n>>> not_letters(\"abc def\")\n9\n>>> not_letters(\"abc def\")\n\
    10\n>>> not_letters(\"abc def\")\n11\n>>> not_letters(\"abc def\")\n12\n>>> not_letters(\"\
    abc def\")\n13\n>>> not_letters(\"abc def\")\n14\n>>> not_letters(\"abc def\"\
    )\n15\n>>> not_letters(\"abc def\")\n16\n>>> not_letters(\"abc def\")\n17\n>>>\
    \ not_letters(\"abc def\")\n18\n>>> not_letters(\"abc def\")\n19\n>>> not_letters(\"\
    abc def\")\n20\n>>> not_letters(\"abc def\")\n21\n>>> not_letters(\"abc def\"\
    )\n22\n>>> not_letters(\"abc def\")\n23\n>>> not_letters(\"abc def\")\n24\n>>>\
    \ not_letters(\"abc def\")\n25\n>>> not_letters(\"abc def\")\n26\n>>> not_letters(\"\
    abc def\")\n27\n>>> not_letters(\"abc def\")\n28\n>>> not_letters(\"abc def\"\
    )\n29\n>>> not_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits = num.chars\n\
    \    \n    hex_digits_len = len(hex_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_count = prime_digits_len\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
