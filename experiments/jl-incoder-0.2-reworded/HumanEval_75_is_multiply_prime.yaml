name: HumanEval_75_is_multiply_prime
language: jl
prompt: "\"\"\"Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
  \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 *\
  \ 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
  \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
  \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t\
  @test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
  \ == false)\n\t@test(candidate(1001) == true)\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n        if a\
    \ % i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == true\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\nKnowing that (a) is\
    \ less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\n\
    false\n>>> is_prime(101)\ntrue\n>>> is_prime(102)\nfalse\n>>> is_prime(103)\n\
    true\n>>> is_prime(104)\nfalse\n>>> is_prime(105)\ntrue\n>>> is_prime(106)\nfalse\n\
    >>> is_prime(107)\ntrue\n>>> is_prime(108)\nfalse\n>>> is_prime(109)\ntrue\n>>>\
    \ is_prime(110)\nfalse\n>>> is_prime(111)\ntrue\n>>> is_prime(112)\nfalse\n>>>\
    \ is_prime(113)\ntrue\n>>> is_prime(114)\nfalse\n>>> is_prime(115)\ntrue\n>>>\
    \ is_prime(116)\nfalse\n>>> is_prime(117)\ntrue\n>>> is_prime(118)\nfalse\n>>>\
    \ is_prime(119)\ntrue\n>>> is_prime(120)\nfalse\n>>> is_prime(121)\ntrue\n>>>\
    \ is_prime(122)\nfalse\n>>> is_prime(123)\ntrue\n>>> is_prime(124)\nfalse\n>>>\
    \ is_prime(125)\ntrue\n>>> is_prime(126)\nfalse\n>>> is_prime(127)\ntrue\n>>>\
    \ is_prime(128)\nfalse\n>>> is_prime(129)\ntrue\n>>> is_prime(130)\nfalse\n>>>\
    \ is_prime(131)\ntrue\n>>> is_prime(132)\nfalse\n>>> is_prime(133)\ntrue\n>>>\
    \ is_prime(134)\nfalse\n>>> is_prime(135)\ntrue\n>>> is_prime(136)\nfalse\n>>>\
    \ is_prime(137)\ntrue\n>>> is_prime(138)\nfalse\n>>> is_prime(139)\ntrue\n>>>\
    \ is_prime(140)\nfalse\n>>> is_prime(141)\ntrue\n>>> is_prime(142)\nfalse\n>>>\
    \ is_prime(143)\ntrue\n>>> is_prime(144)\n", "    if a < 100\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50\
    \ = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n\
    200 = 2 * 3 * 7\n>>> is_prime(300)\nfalse\n300 = 2 * 3 * 7\n>>> is_prime(400)\n\
    false\n400 = 2 * 3 * 7\n>>> is_prime(500)\nfalse\n500 = 2 * 3 * 7\n>>> is_prime(600)\n\
    false\n600 = 2 * 3 * 7\n>>> is_prime(700)\nfalse\n700 = 2 * 3 * 7\n>>> is_prime(800)\n\
    false\n800 = 2 * 3 * 7\n>>> is_prime(900)\nfalse\n900 = 2 * 3 * 7\n>>> is_prime(1000)\n\
    false\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\nfalse\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\n\
    false\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\nfalse\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\n\
    false\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\nfalse\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\n\
    false\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\nfalse\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\n\
    false\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\nfalse\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\n\
    false\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\nfalse\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\n\
    false\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\nfalse\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\n\
    false\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\nfalse\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\n\
    false\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\nfalse\n2800 = 2 * 3 * 7\n>>> is_prime(",
  "    \n    primes = primes_list(100)\n    \n    for p in primes\n        if a %\
    \ p == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return true\n\
    \    else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.4>\n@time is_multiply_prime(10000)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns true if the given number is the\
    \ multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that\
    \ (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n\
    \    primes = prime_numbers(a)\n    \n    for i in primes\n        if i%3 == 0\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 3 * 7\n    \"\"\"", "    if a < 100\n        return false\n\
    \    else if a % 3 == 0 && a % 5 == 0\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.0>",
  "    if a < 100\n        return false\n    else if a == 2\n        return true\n\
    \    else if a == 3\n        return true\n    else if a == 5\n        return true\n\
    \    else if a == 7\n        return true\n    else if a == 11\n        return\
    \ true\n    else if a == 13\n        return true\n    else if a == 17\n      \
    \  return true\n    else if a == 19\n        return true\n    else if a == 23\n\
    \        return true\n    else if a == 29\n        return true\n    else if a\
    \ == 31\n        return true\n    else if a == 37\n        return true\n    else\
    \ if a == 41\n        return true\n    else if a == 43\n        return true\n\
    \    else if a == 47\n        return true\n    else if a == 53\n        return\
    \ true\n    else if a == 59\n        return true\n    else if a == 61\n      \
    \  return true\n    else if a == 67\n        return true\n    else if a == 71\n\
    \        return true\n    else if a == 73\n        return true\n    else if a\
    \ == 79\n        return true\n    else if a == 83\n        return true\n    else\
    \ if a == 89\n        return true\n    else if a == 97\n        return true\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\n    end\nend\n\"\"\"\n   \
    \ \n    \n    \n\"\"\"\n    Write a function that returns true if the given number\
    \ is the multiplication of 5 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 100\n        false\n    else\n       \
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    for i in primes:\n        if a % i == 0:\n  \
    \          return False\n    return True\n    \n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
