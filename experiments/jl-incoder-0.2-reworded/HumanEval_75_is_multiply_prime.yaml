name: HumanEval_75_is_multiply_prime
language: jl
prompt: "\"\"\"Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
  \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 *\
  \ 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
  \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
  \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t\
  @test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
  \ == false)\n\t@test(candidate(1001) == true)\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n        if a\
    \ % i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == true\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\nKnowing that (a) is\
    \ less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\n\
    false\n>>> is_prime(101)\ntrue\n>>> is_prime(102)\nfalse\n>>> is_prime(103)\n\
    true\n>>> is_prime(104)\nfalse\n>>> is_prime(105)\ntrue\n>>> is_prime(106)\nfalse\n\
    >>> is_prime(107)\ntrue\n>>> is_prime(108)\nfalse\n>>> is_prime(109)\ntrue\n>>>\
    \ is_prime(110)\nfalse\n>>> is_prime(111)\ntrue\n>>> is_prime(112)\nfalse\n>>>\
    \ is_prime(113)\ntrue\n>>> is_prime(114)\nfalse\n>>> is_prime(115)\ntrue\n>>>\
    \ is_prime(116)\nfalse\n>>> is_prime(117)\ntrue\n>>> is_prime(118)\nfalse\n>>>\
    \ is_prime(119)\ntrue\n>>> is_prime(120)\nfalse\n>>> is_prime(121)\ntrue\n>>>\
    \ is_prime(122)\nfalse\n>>> is_prime(123)\ntrue\n>>> is_prime(124)\nfalse\n>>>\
    \ is_prime(125)\ntrue\n>>> is_prime(126)\nfalse\n>>> is_prime(127)\ntrue\n>>>\
    \ is_prime(128)\nfalse\n>>> is_prime(129)\ntrue\n>>> is_prime(130)\nfalse\n>>>\
    \ is_prime(131)\ntrue\n>>> is_prime(132)\nfalse\n>>> is_prime(133)\ntrue\n>>>\
    \ is_prime(134)\nfalse\n>>> is_prime(135)\ntrue\n>>> is_prime(136)\nfalse\n>>>\
    \ is_prime(137)\ntrue\n>>> is_prime(138)\nfalse\n>>> is_prime(139)\ntrue\n>>>\
    \ is_prime(140)\nfalse\n>>> is_prime(141)\ntrue\n>>> is_prime(142)\nfalse\n>>>\
    \ is_prime(143)\ntrue\n>>> is_prime(144)\n", "    if a < 100\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50\
    \ = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n\
    200 = 2 * 3 * 7\n>>> is_prime(300)\nfalse\n300 = 2 * 3 * 7\n>>> is_prime(400)\n\
    false\n400 = 2 * 3 * 7\n>>> is_prime(500)\nfalse\n500 = 2 * 3 * 7\n>>> is_prime(600)\n\
    false\n600 = 2 * 3 * 7\n>>> is_prime(700)\nfalse\n700 = 2 * 3 * 7\n>>> is_prime(800)\n\
    false\n800 = 2 * 3 * 7\n>>> is_prime(900)\nfalse\n900 = 2 * 3 * 7\n>>> is_prime(1000)\n\
    false\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\nfalse\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\n\
    false\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\nfalse\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\n\
    false\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\nfalse\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\n\
    false\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\nfalse\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\n\
    false\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\nfalse\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\n\
    false\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\nfalse\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\n\
    false\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\nfalse\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\n\
    false\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\nfalse\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\n\
    false\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\nfalse\n2800 = 2 * 3 * 7\n>>> is_prime(",
  "    \n    primes = primes_list(100)\n    \n    for p in primes\n        if a %\
    \ p == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return true\n\
    \    else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.4>\n@time is_multiply_prime(10000)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns true if the given number is the\
    \ multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that\
    \ (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n\
    \    primes = prime_numbers(a)\n    \n    for i in primes\n        if i%3 == 0\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 3 * 7\n    \"\"\"", "    if a < 100\n        return false\n\
    \    else if a % 3 == 0 && a % 5 == 0\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.0>",
  "    if a < 100\n        return false\n    else if a == 2\n        return true\n\
    \    else if a == 3\n        return true\n    else if a == 5\n        return true\n\
    \    else if a == 7\n        return true\n    else if a == 11\n        return\
    \ true\n    else if a == 13\n        return true\n    else if a == 17\n      \
    \  return true\n    else if a == 19\n        return true\n    else if a == 23\n\
    \        return true\n    else if a == 29\n        return true\n    else if a\
    \ == 31\n        return true\n    else if a == 37\n        return true\n    else\
    \ if a == 41\n        return true\n    else if a == 43\n        return true\n\
    \    else if a == 47\n        return true\n    else if a == 53\n        return\
    \ true\n    else if a == 59\n        return true\n    else if a == 61\n      \
    \  return true\n    else if a == 67\n        return true\n    else if a == 71\n\
    \        return true\n    else if a == 73\n        return true\n    else if a\
    \ == 79\n        return true\n    else if a == 83\n        return true\n    else\
    \ if a == 89\n        return true\n    else if a == 97\n        return true\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\n    end\nend\n\"\"\"\n   \
    \ \n    \n    \n\"\"\"\n    Write a function that returns true if the given number\
    \ is the multiplication of 5 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 100\n        false\n    else\n       \
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    for i in primes:\n        if a % i == 0:\n  \
    \          return False\n    return True\n    \n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    if a < 100\n        return\
    \ false\n    else \n        primes = prime_numbers(a)\n        prime_3 = primes[2]\
    \ \n        for i in primes\n            if i%3 == 0 and i != prime_3\n      \
    \          return false\n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of all prime numbers between 1 and a given number. \n    Example:\n    >>> prime_multiplication(100)\n\
    \    121\n    \"\"\"", "    \n    if a < 100\n        return false\n    \n   \
    \ primes = primes(a)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given number is a prime number or false otherwise.\n   \
    \ \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 3 * 7 * 11\n    \"\"\
    \"", "    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n", "    \n    if a < 100\n        return true\n    \n \
    \   primes = primes(a)\n    \n    for i in primes\n        if a % i == 0\n   \
    \         return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.1>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.1>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\n\
    true\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\n\
    true\n300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    true\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    true\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    true\n900 = 2 * 3 * 7\n>>> is_prime(1000)\nfalse\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    true\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\nfalse\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    true\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\nfalse\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    true\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    true\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    true\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    true\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    true\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\nfalse\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    true\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\nfalse\n", "    if a < 100\n      \
    \  return false\n    \n    primes = primes(a)\n    \n    for i in primes\n   \
    \     if a % i == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100.\nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(15)\n\
    false\n>>> is_prime(20)\ntrue\n>>> is_prime(25)\nfalse\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(1000)\ntrue\n>>> is_prime(10000)\nfalse\n>>> is_prime(100000)\ntrue\n\
    >>> is_prime(1000000)\nfalse\n>>> is_prime(10000000)\ntrue\n>>> is_prime(100000000)\n\
    false\n>>> is_prime(1000000000)\ntrue\n>>> is_prime(10000000000)\nfalse\n>>> is_prime(100000000000)\n\
    true\n>>> is_prime(1000000000000)\nfalse\n>>> is_prime(1000000000000)\ntrue\n\
    >>> is_prime(1000000000001)\nfalse\n>>> is_prime(1000000000002)\ntrue\n>>> is_prime(1000000000003)\n\
    false\n>>> is_prime(1000000000004)\ntrue\n>>> is_prime(1000000000005)\nfalse\n\
    >>> is_prime(1000000000006)\ntrue\n>>> is_prime(1000000000007)\nfalse\n>>> is_prime(1000000000008)\n\
    true\n>>> is_prime(1000000000009)\nfalse\n>>> is_prime(1000000000010)\ntrue\n\
    >>> is_prime(1000000000011)\nfalse\n>>> is_prime(1000000000012)\ntrue\n>>> is_prime(1000000000013)\n\
    false\n>>> is_prime(1000000000014)\ntrue\n>>> is_prime(1000000000015)\nfalse\n\
    >>> is_prime(1000000000016)\ntrue\n>>> is_prime(1000000000017)\nfalse\n>>> is_prime(1000000000018)\n\
    true\n>>> is_prime(1000000000019)\nfalse\n>>> is_prime(1000000000020)\ntrue\n\
    >>> is_prime(1000000000021)\nfalse\n>>> is_prime(100", "    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if\
    \ prime_numbers_set.issubset([a])\n        true\n    else\n        false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 =\
    \ 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_multiply_prime_helper(a, 3,\
    \ 100) == true\n    else false\nend", "    if is_multiply_prime_helper(a,3,100)\
    \ == true\n    else \n        return false\n    end\nend", "    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"",
  "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>", "    if\
    \ is_multiply_prime_helper(a) == true\n    else \n        false\n    end\nend\n\
    \"\"\"\n    \n\"\"\"\n    Problem 2\n    \n    Write a function that returns true\
    \ if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>", "    if is_multiply_prime_helper(a) == true\n    else\
    \ \n        false\nend\n\"\"\"\n    Write a function that returns true if the\
    \ given number is the multiplication of 5 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_multiply_prime_helper(a, 3, 100) == true\n\
    \    else \n        false\n    end\nend", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend", "    if a < 100\n        true\n    else\n      \
    \  false\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"Write a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    prime_numbers = primes(a)\n    \n    for n in prime_numbers:\n     \
    \   if n % 3 == 0 and n % 5 == 0:\n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\nis_prime(100)\nfalse\n100 = 2 * 3 * 5\nHint: \nThe first thing\
    \ you should do is write a function that checks if a number is prime. \nThe second\
    \ thing you should do is write a function that checks if a number is divisible\
    \ by another number. \nThe third thing you should do is write a function that\
    \ checks if a number is divisible by 3 or 5. \nThe fourth thing you should do\
    \ is write a function that checks if a number is divisible by both 3 and 5. \n\
    The fifth thing you should do is write a function that checks if a number is divisible\
    \ by both 3 and 5.", "    \n    if a < 100\n        return false\n    \n    primes\
    \ = primes_upto(a)\n    \n    for p in primes\n        if a % p == 0\n       \
    \     return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100.\nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n\
    >>> is_prime(15)\ntrue\n>>> is_prime(30)\ntrue\n>>> is_prime(35)\nfalse\n>>> is_prime(50)\n\
    true\n>>> is_prime(100)\ntrue\n>>> is_prime(1000)\nfalse\n>>> is_prime(10000)\n\
    true\n>>> is_prime(100000)\nfalse\n>>> is_prime(1000000)\ntrue\n>>> is_prime(10000000)\n\
    false\n>>> is_prime(100000000)\ntrue\n>>> is_prime(1000000000)\nfalse\n>>> is_prime(10000000000)\n\
    true\n>>> is_prime(100000000000)\nfalse\n>>> is_prime(1000000000000)\ntrue\n>>>\
    \ is_prime(1000000000000)\nfalse\n>>> is_prime(1000000000001)\ntrue\n>>> is_prime(1000000000002)\n\
    false\n>>> is_prime(1000000000003)\ntrue\n>>> is_prime(1000000000004)\nfalse\n\
    >>> is_prime(1000000000005)\ntrue\n>>> is_prime(1000000000006)\nfalse\n>>> is_prime(1000000000007)\n\
    true\n>>> is_prime(1000000000008)\nfalse\n>>> is_prime(1000000000009)\ntrue\n\
    >>> is_prime(1000000000010)\nfalse\n>>> is_prime(1000000000011)\ntrue\n>>> is_prime(1000000000012)\n\
    false\n>>> is_prime(1000000000013)\ntrue\n>>> is_prime(1000000000014)\nfalse\n\
    >>> is_prime(1000000000015)\ntrue\n>>> is_prime(1000000000016)\nfalse\n>>> is_prime(1000000000017)\n\
    true\n>>> is_prime(1000000000018)\nfalse\n>>> is_prime(1000000000019)\ntrue\n\
    >>> is_prime(1000000000020)\nfalse\n>>> is_prime(1000000000021)\ntrue\n>>> is_prime(1000000000022)",
  "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n   \
    \ \n    for p in primes\n        if p * 3 == a\n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if is_prime(a) == false \n        return false \n   \
    \ else \n        for b in primes \n            if a % b == 0 \n              \
    \  return false \n        return true \nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>", "    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n@assert is_multiply_prime(101) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \n    >>> is_perfect_square(25)\n\
    \    true\n    25 = 2 * 3\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for i in primes\n        if a % i ==\
    \ 0\n            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a power of 2 and\nfalse otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_power_of_2(30)\ntrue\n30 = 2\
    \ * 2 * 2\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 3\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 5\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 7\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 9\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 11\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 13\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 15\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 17\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 19\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 21\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 23\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 25\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 27\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 29\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 31\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 33\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 35\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 37\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 39\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 41\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 43\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 45\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 47\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 49\n>>> is_power_of_2(30)\nfalse\n30 = 2 * 2 * 51\n>>> is_power_of_2(30)\n\
    true\n30 = 2 * 2 * 53\n>>> is_power_of_2(30)\n", "    \n    primes = primes_list(100)\n\
    \    \n    for prime in primes\n        if a % prime == 0\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a < 100\n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "    \n    prime_numbers =\
    \ primes(a)\n    \n    for num in prime_numbers:\n        if a % num == 0: return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for prime in primes\n        if prime\
    \ * prime > a\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3 * 7\n>>> is_prime(1000)\ntrue\n1000\
    \ = 2 * 3 * 7\n>>> is_prime(10000)\nfalse\n10000 = 2 * 3 * 7\n>>> is_prime(100000)\n\
    true\n100000 = 2 * 3 * 7\n>>> is_prime(1000000)\nfalse\n1000000 = 2 * 3 * 7\n\
    >>> is_prime(10000000)\ntrue\n10000000 = 2 * 3 * 7\n>>> is_prime(100000000)\n\
    false\n100000000 = 2 * 3 * 7\n>>> is_prime(1000000000)\ntrue\n1000000000 = 2 *\
    \ 3 * 7\n>>> is_prime(10000000000)\nfalse\n10000000000 = 2 * 3 * 7\n>>> is_prime(100000000000)\n\
    true\n100000000000 = 2 * 3 * 7\n>>> is_prime(1000000000000)\nfalse\n1000000000000\
    \ = 2 * 3 * 7\n>>> is_prime(10000000000000)\ntrue\n10000000000000 = 2 * 3 * 7\n\
    >>> is_prime(100000000000000)\nfalse\n100000000000000 = 2 * 3 * 7\n>>> is_prime(1000000000000000)\n\
    true\n1000000000000000 = 2 * 3 * 7\n>>> is_prime(10000000000000000)\nfalse\n10000000000000000\
    \ = 2 * 3 * 7\n>>> is_prime(100000000000000000)\ntrue\n100000000000000000 = 2\
    \ * 3 * 7\n>>> is_prime(1000000000000000000)\nfalse\n1000000000000000000 = 2 *\
    \ 3 * 7\n>>> is_prime(10000000000000000000)\ntrue\n10000000000000000000 = 2 *\
    \ 3 * 7\n>>> is_prime(1000000000000000000)\nfalse\n1000000000000000000 = 2 * 3\
    \ * 7\n>>> is_prime(10000000000000000000)\ntrue\n10000000000000000000 = 2 * 3\
    \ * 7\n>>> is_prime(100000000000000000000)\nfalse\n100000000000000000000 = 2 *\
    \ 3 * 7\n>>> is_prime(1000000000000000000000)\ntrue\n1000000000000000000000 =\
    \ 2 * 3 * 7\n", "    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for p in primes\n        if p > 100\n            return false\n   \
    \     \n        if p == a \n            return true\n        \n        if p %\
    \ 3 == 0\n            return false\n        \n        if p % 5 == 0\n        \
    \    return false\n        \n        if p % 7 == 0\n            return false\n\
    \        \n        if p % 11 == 0\n            return false\n        \n      \
    \  if p % 13 == 0\n            return false\n        \n        if p % 17 == 0\n\
    \            return false\n        \n        if p % 19 == 0\n            return\
    \ false\n        \n        if p % 23 == 0\n            return false\n        \n\
    \        if p % 29 == 0\n            return false\n        \n        if p % 31\
    \ == 0\n            return false\n        \n        if p % 37 == 0\n         \
    \   return false\n        \n        if p % 41 == 0\n            return false\n\
    \        \n        if p % 43 == 0\n            return false\n        \n      \
    \  if p % 47 == 0\n            return false\n        \n        if p % 53 == 0\n\
    \            return false\n        \n        if p % 59 == 0\n            return\
    \ false\n        \n        if p % 61 == 0\n            return false\n        \n\
    \        if p % 67 == 0\n            return false\n        \n        if p % 71\
    \ == 0\n            return false\n        \n        if p % 73 == 0\n         \
    \   return false\n        \n        if p % 79 == 0\n            return false\n\
    \        \n        if p % 83 == 0\n            return false\n        \n      \
    \  if p % 89 == 0\n            return false\n        \n        if p % 97 == 0\n\
    \            return false\n        \n        if p % 103 == 0\n            return\
    \ false\n        \n        if p % 107 == 0\n            return false\n       \
    \ \n        if p % 111 == 0\n            return false\n        \n        if p\
    \ % 117 == 0\n            return false\n        \n        if p % 121 == 0\n  \
    \          return false\n        \n        if p % 127 == 0\n            return\
    \ false\n        \n        if p % 131 == 0\n            return false\n       \
    \ \n        if p % 137 == 0\n            return false\n        \n        if p\
    \ % 141 == 0\n            return false\n        \n        if p % 147 == 0\n  \
    \          return false\n        \n        if p % 151 == 0\n            return\
    \ false\n        \n        if p % 157 == 0\n            return false\n       \
    \ \n        if p % 161 == 0\n            return false\n        \n        if p\
    \ % 167 == 0\n            return false\n        \n        if p % 173 == 0\n  \
    \          return false\n        \n        if p % 179 == 0\n            return\
    \ false\n        \n        if p % 183 == 0\n            return false\n       \
    \ \n        if p % 187 == 0\n            return false", "    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100.\nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>>\
    \ is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 *\
    \ 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\ntrue\n300 =\
    \ 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\ntrue\n\
    500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    true\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    true\n900 = 2 * 3 * 7\n>>> is_prime(1000)\ntrue\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\ntrue\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\ntrue\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    true\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    true\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    true\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    true\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    true\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\ntrue\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\ntrue\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\n\
    false\n2800 = 2 * 3 * 7\n>>> is_prime", "    \n    prime_numbers = primes(100)\n\
    \    \n    for p in prime_numbers\n        if a % p == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_prime(a) == false \n        return false \n \
    \   else \n        primes = prime_numbers(a) \n        for i in primes \n    \
    \        if i == a \n                return true \n            else \n       \
    \         return false \nend \n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\n    \n    Example:\n    >>> is_perfect_square(25)\n\
    \    true\n    25 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a < 100\n        return false\n    \n\
    \    primes = primes(a)\n    \n    for p in primes\n        if p * p > a\n   \
    \         return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the multiplication of 3 prime numbers. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        false\n \
    \   else\n        true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a power of 3 or false otherwise.\nExample: \n>>> is_power_of_3(30)\ntrue\n\
    >>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_", " \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n   \
    \ \n    for i in primes\n        if i % 3 == 0\n            return false\n   \
    \ \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_", "    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if is_prime(a) and is_prime(a+2)\
    \ and is_prime(a+3) and is_prime(a+5):\n        return true\n    return false\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime", "    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a power of 3 or false otherwise.\n    Example:\n\
    \    >>> is_power_of_3(30)\n    true\n    30 = 3 * 3 * 3\n    \"\"\"", "    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns true if the given number is the multiplication of 3\
    \ prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    if is_multiply_prime_helper(a, 3, 100) == true\n    else \n\
    \        return false\nend\n\"\"\"\n    Write a function that returns true if\
    \ the given number is the multiplication of 5 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    if a < 100\n        return\
    \ false\n    \n    prime_numbers = primes(a)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns true if the given number is a\
    \ power of 3 prime and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_power_of_3_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3_prime(100)\n\
    false\n>>> is_power_of_3_prime(100)\nfalse\n>>> is_power_of_3_prime(200)\ntrue\n\
    >>> is_power_of_3_prime(300)\ntrue\n>>> is_power_of_3_prime(400)\ntrue\n>>> is_power_of_3_prime(500)\n\
    true\n>>> is_power_of_3_prime(600)\ntrue\n>>> is_power_of_3_prime(700)\ntrue\n\
    >>> is_power_of_3_prime(800)\ntrue\n>>> is_power_of_3_prime(900)\ntrue\n>>> is_power_of_3_prime(1000)\n\
    true\n>>> is_power_of_3_prime(1100)\ntrue\n>>> is_power_of_3_prime(1200)\ntrue\n\
    >>> is_power_of_3_prime(1300)\ntrue\n>>> is_power_of_3_prime(1400)\ntrue\n>>>\
    \ is_power_of_3_prime(1500)\ntrue\n>>> is_power_of_3_prime(1600)\ntrue\n>>> is_power_of_3_prime(1700)\n\
    true\n>>> is_power_of_3_prime(1800)\ntrue\n>>> is_power_of_3_prime(1900)\ntrue\n\
    >>> is_power_of_3_prime(2000)\ntrue\n>>> is_power_of_3_prime(2100)\ntrue\n>>>\
    \ is_power_of_3_prime(2200)\ntrue\n>>> is_power_of_3_prime(2300)\ntrue\n>>> is_power_of_3_prime(2400)\n\
    true\n>>> is_power_of_3_prime(2500)\ntrue\n>>> is_power_of_3_prime(2600)\ntrue\n\
    >>> is_power_of_3_prime(2700)\ntrue\n>>> is_power_of_3_prime(2800)\ntrue\n>>>\
    \ is_power_of_3_prime(2900)\ntrue\n>>> is_power_of_3_prime(3000)\ntrue\n>>> is_power_of_3_prime(3100)\n\
    true\n>>> is_power_of_3_prime(3200) \ntrue\n>>> is_", "    \n    primes = primes_list(100)\n\
    \    \n    primes_set = Set(primes)\n    \n    primes_set = primes_set - Set(primes_list(a\
    \ % primes_set))\n    \n    return primes_set == Set(primes)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3 * 5\n\"\"\"", "    if is_multiply_prime_helper(a,\
    \ 3, 100)\n    else false\nend", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"Write a function that returns true\
    \ if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)",
  "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n   \
    \ \n    for p in primes\n        if p > a\n            return false\n        if\
    \ p % 3 == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n", "    \n    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for i in primes\n        if a % i ==\
    \ 0\n            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    primes = primes_list(100)\n    \n    for\
    \ i in primes\n        if a % i == 0\n            return false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    if a < 100\n        return false\n \
    \   \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if p*p\
    \ > a\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n   \
    \ \n    for i in primes\n        if a % i == 0\n            return false\n   \
    \ \n    return true\nend", "    if a < 100\n        return false\n    else \n\
    \        primes = primes_list(100)\n        for i in primes\n            if a\
    \ % i == 0\n                return false\n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)", "    \n    if a <\
    \ 100\n        return false\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000001)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000002)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000003)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000004)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000005)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n     \
    \   if a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        false\n    else\n        true\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      return false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    >>> is_prime(100)\nfalse\n100 = 2 * 3 * 5\n</text>\n<code language=julia-1.5>",
  "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n   \
    \ \n    for i in primes\n        if a % i == 0\n            return false\n   \
    \ end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = ", "    \n    primes = primes_list(100)\n    \n    for i in primes\n    \
    \    if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n     \
    \   if a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(34) == true\n@assert is_multiply_prime(35)\
    \ == false\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == false\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == false\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == false\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == false\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == false\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == false\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == false\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == false\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == false\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == false\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == false\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == false\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == false\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == false\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == false\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == false\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == false\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == false\n@assert is_multiply_prime", "    if a < 100\n        return false\n\
    \    else if a == 2\n        return true\n    else if a == 3\n        return true\n\
    \    else if a % 2 == 0\n        return false\n    else if a % 3 == 0\n      \
    \  return false\n    else if a % 5 == 0\n        return false\n    else if a %\
    \ 7 == 0\n        return false\n    else\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>",
  "    \n    if a < 100\n        return false\n    \n    primes = primes(a)\n    \n\
    \    for prime in primes\n        if a % prime == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>", "    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == true\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == true\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == true\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == true\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == true\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == true\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == true\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == true\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == true\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == true\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == true\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == true\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == true\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == true\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == true\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == true\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == true\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == true\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == true\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == true\n\
    @assert is_multiply_prime(72) == false", "    if a < 100\n        return false\n\
    \    \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if p\
    \ * p > a\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(100", "    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if i == a\n            return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i == 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes", "    \n    prime_numbers = primes(a)\n    \n    for\
    \ p in prime_numbers:\n        if p * p > a:\n            return false\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n   \
    \ else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(100) == true\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a power of 2 and\nfalse otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n>>> is_power_of_2(30)\ntrue\n\
    30 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * ", "    if is_multiply_prime_helper(a, 3, 100) == true\n    else false\nend",
  "    if is_prime(a) and is_prime(a+2) and is_prime(a+4) and is_prime(a+6) and is_prime(a+8)\
    \ and is_prime(a+10) and is_prime(a+12) and is_prime(a+14) and is_prime(a+16)\
    \ and is_prime(a+18) and is_prime(a+20) and is_prime(a+22) and is_prime(a+24)\
    \ and is_prime(a+26) and is_prime(a+28) and is_prime(a+30) and is_prime(a+32)\
    \ and is_prime(a+34) and is_prime(a+36) and is_prime(a+38) and is_prime(a+40)\
    \ and is_prime(a+42) and is_prime(a+44) and is_prime(a+46) and is_prime(a+48)\
    \ and is_prime(a+50) and is_prime(a+52) and is_prime(a+54) and is_prime(a+56)\
    \ and is_prime(a+58) and is_prime(a+60) and is_prime(a+62) and is_prime(a+64)\
    \ and is_prime(a+66) and is_prime(a+68) and is_prime(a+70) and is_prime(a+72)\
    \ and is_prime(a+74) and is_prime(a+76) and is_prime(a+78) and is_prime(a+80)\
    \ and is_prime(a+82) and is_prime(a+84) and is_prime(a+86) and is_prime(a+88)\
    \ and is_prime(a+90) and is_prime(a+92) and is_prime(a+94) and is_prime(a+96)\
    \ and is_prime(a+98) and is_prime(a+100) and is_prime(a+102) \n    then true\n\
    \    else false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Write\
    \ a function that returns true if the given number is the multiplication of 3\
    \ prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    if a < 100\n        return false\n    \n    primes =\
    \ primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n       \
    \     return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_", "    \n    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for p in primes\n        if p * p > a\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 3 * 7\n    \"\"\"",
  "    if is_multiply_prime_helper(a) == true\n        return true\n    return false\n\
    end\n\"\"\"\n    Write a function that returns true if the given number is the\
    \ multiplication of 5 prime numbers\n    and false otherwise.\n    Knowing that\
    \ (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>", "    if is_multiply_prime_helper(a,3,100)\
    \ == true\n        return true\n    return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"",
  "    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n   \
    \ \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == true\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    if a < 100\n        return true\n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000", " \
    \   if is_multiply_prime_helper(a, 3, 100) == true\n    else return false\nend",
  "    if a < 100\n        true\n    else\n        false\n    end\nend", "    if is_multiply_prime_helper(a)\
    \ == true\n        return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == false\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == false\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == false\n\
    @assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73) == false\n",
  "    if is_prime(a) == false \n        error(\"a is not a prime number\")\n    else\
    \ \n        if is_multiply_prime_helper(a, 2) == false \n            error(\"\
    a is not a multiplication of 3 prime numbers\")\n        else \n            return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * ", "    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 3 * 7 * 11\n    \"\"\"", "    \n    primes = primes_list(100)\n\
    \    \n    primes_count = count(primes)\n    \n    primes_count_2 = count(primes)\n\
    \    \n    primes_count_3 = count(primes)\n    \n    primes_count_4 = count(primes)\n\
    \    \n    primes_count_5 = count(primes)\n    \n    primes_count_6 = count(primes)\n\
    \    \n    primes_count_7 = count(primes)\n    \n    primes_count_8 = count(primes)\n\
    \    \n    primes_count_9 = count(primes)\n    \n    primes_count_10 = count(primes)\n\
    \    \n    primes_count_11 = count(primes)\n    \n    primes_count_12 = count(primes)\n\
    \    \n    primes_count_13 = count(primes)\n    \n    primes_count_14 = count(primes)\n\
    \    \n    primes_count_15 = count(primes)\n    \n    primes_count_16 = count(primes)\n\
    \    \n    primes_count_17 = count(primes)\n    \n    primes_count_18 = count(primes)\n\
    \    \n    primes_count_19 = count(primes)\n    \n    primes_count_20 = count(primes)\n\
    \    \n    primes_count_21 = count(primes)\n    \n    primes_count_22 = count(primes)\n\
    \    \n    primes_count_23 = count(primes)\n    \n    primes_count_24 = count(primes)\n\
    \    \n    primes_count_25 = count(primes)\n    \n    primes_count_26 = count(primes)\n\
    \    \n    primes_count_27 = count(primes)\n    \n    primes_count_28 = count(primes)\n\
    \    \n    primes_count_29 = count(primes)\n    \n    primes_count_30 = count(primes)\n\
    \    \n    primes_count_31 = count(primes)\n    \n    primes_count_32 = count(primes)\n\
    \    \n    primes_count_33 = count(primes)\n    \n    primes_count_34 = count(primes)\n\
    \    \n    primes_count_35 = count(primes)\n    \n    primes_count_36 = count(primes)\n\
    \    \n    primes_count_37 = count(primes)\n    \n    primes_count_38 = count(primes)\n\
    \    \n    primes_count_39 = count(primes)\n    \n    primes_count_40 = count(primes)\n\
    \    \n    primes_count_41 = count(primes)\n    \n    primes_count_42 = count(primes)\n\
    \    \n    primes_count_43 = count(primes)", "    \n    prime_numbers = primes(100)\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.remove(a)\n\
    \    \n    if prime_numbers_set.isEmpty\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<text>\nExercise\nWrite a function that returns true if\
    \ the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_multiply_prime_helper(a, 3, 100) == true\n\
    \    else false\nend\n\"\"\"\n    Write a function that returns true if the given\
    \ number is the multiplication of 5 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    if a < 100\n        return\
    \ false\n    \n    primes = primes(a)\n    \n    for p in primes\n        if p*p\
    \ > a\n            return false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\n\
    true\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\n\
    true\n300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    true\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    true\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    true\n900 = 2 * 3 * 7\n>>> is_prime(1000)\ntrue\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\ntrue\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\ntrue\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    false\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\ntrue\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    false\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\ntrue\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    false\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\ntrue\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    false\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\ntrue\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    false\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\ntrue\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\ntrue", "    if a < 100\n        return\
    \ false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n    \
    \    if a % i == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    primes = primes_list(100)\n    \n    primes_set\
    \ = Set(primes)\n    \n    primes_set = primes_set - Set(primes_list(a % primes_set))\n\
    \    \n    return primes_set == Set(primes)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   if a < 100\n        return false\n    \n    primes = primes(a)\n    \n   \
    \ for p in primes\n        if p*p > a\n            return false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == true\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == true\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == true\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == true\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == true\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == true\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == true\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == true\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == true\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == true\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == true\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == true\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == true\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == true\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == true\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == true\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == true\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == true\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == true\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71", "    \n    if a < 100\n        return\
    \ false\n    \n    prime_numbers = prime_numbers(a)\n    \n    for num in prime_numbers\n\
    \        if a % num == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 3 * 7 * 11\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\n\
    true\n>>> is_prime(11)\nfalse\n>>> is_prime(15)\ntrue\n>>> is_prime(17)\nfalse\n\
    >>> is_prime(19)\ntrue\n>>> is_prime(21)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\ntrue\n>>> is_prime(33)\nfalse\n>>> is_prime(37)\ntrue\n\
    >>> is_prime(39)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(43)\nfalse\n>>>\
    \ is_prime(47)\ntrue\n>>> is_prime(49)\nfalse\n>>> is_prime(51)\ntrue\n>>> is_prime(55)\n\
    false\n>>> is_prime(57)\ntrue\n>>> is_prime(59)\nfalse\n>>> is_prime(61)\ntrue\n\
    >>> is_prime(63)\nfalse\n>>> is_prime(67)\ntrue\n>>> is_prime(69)\nfalse\n>>>\
    \ is_prime(71)\ntrue\n>>> is_prime(73)\nfalse\n>>> is_prime(79)\ntrue\n>>> is_prime(81)\n\
    false\n>>> is_prime(83)\ntrue\n>>> is_prime(89)\nfalse\n>>> is_prime(91)\ntrue\n\
    >>> is_prime(93)\nfalse\n>>> is_prime(97)\ntrue\n>>> is_prime(99)\nfalse\n>>>\
    \ is_prime(101)\ntrue\n>>> is_prime(103)\nfalse\n>>> is_prime(107)\ntrue\n>>>\
    \ is_prime(109)\nfalse\n>>> is_prime(111)\ntrue\n>>> is_prime(113)\nfalse\n>>>\
    \ is_prime(117)\ntrue\n>>> is_prime(121)\nfalse\n>>> is_prime(129)\ntrue\n>>>\
    \ is_prime(131)", "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = ", "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p*p > a\n            return false\n   \
    \     \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n    \
    \    if p > 100\n            return false\n        \n        if p == a \n    \
    \        return true\n        \n        if p % 3 == 0\n            return false\n\
    \        \n        if p % 5 == 0\n            return false\n        \n       \
    \ if p % 7 == 0\n            return false\n        \n        if p % 11 == 0\n\
    \            return false\n        \n        if p % 13 == 0\n            return\
    \ false\n        \n        if p % 17 == 0\n            return false\n        \n\
    \        if p % 19 == 0\n            return false\n        \n        if p % 23\
    \ == 0\n            return false\n        \n        if p % 29 == 0\n         \
    \   return false\n        \n        if p % 31 == 0\n            return false\n\
    \        \n        if p % 37 == 0\n            return false\n        \n      \
    \  if p % 41 == 0\n            return false\n        \n        if p % 43 == 0\n\
    \            return false\n        \n        if p % 47 == 0\n            return\
    \ false\n        \n        if p % 53 == 0\n            return false\n        \n\
    \        if p % 59 == 0\n            return false\n        \n        if p % 61\
    \ == 0\n            return false\n        \n        if p % 67 == 0\n         \
    \   return false\n        \n        if p % 71 == 0\n            return false\n\
    \        \n        if p % 73 == 0\n            return false\n        \n      \
    \  if p % 79 == 0\n            return false\n        \n        if p % 83 == 0\n\
    \            return false\n        \n        if p % 89 == 0\n            return\
    \ false\n        \n        if p % 97 == 0\n            return false\n        \n\
    \        if p % 101 == 0\n            return false\n        \n        if p % 103\
    \ == 0\n            return false\n        \n        if p % 107 == 0\n        \
    \    return false\n        \n        if p % 109 == 0\n            return false\n\
    \        \n        if p % 111 == 0\n            return false\n        \n     \
    \   if p % 113 == 0\n            return false\n        \n        if p % 117 ==\
    \ 0\n            return false\n        \n        if p % 121 == 0\n           \
    \ return false\n        \n        if p % 123 == 0\n            return false\n\
    \        \n        if p % 127 == 0\n            return false\n        \n     \
    \   if p % 131 == 0\n            return false\n        \n        if p % 133 ==\
    \ 0\n            return false\n        \n        if p % 137 == 0\n           \
    \ return false\n        \n        if p % 139 == 0\n            return false\n\
    \        \n        if p % 143 == 0\n            return false\n        \n     \
    \   if p % 147 == 0\n            return false\n        \n        if p % 151 ==\
    \ 0\n            return false\n        \n        if p % 153 == ", "    \n    if\
    \ a < 100\n        return false\n    \n    primes = primes_list(100)\n    \n \
    \   for p in primes\n        if p == a\n            return true\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(200)\n\
    true\n>>> is_prime(300)\nfalse\n>>> is_prime(400)\ntrue\n>>> is_prime(500)\nfalse\n\
    >>> is_prime(600)\ntrue\n>>> is_prime(700)\nfalse\n>>> is_prime(800)\ntrue\n>>>\
    \ is_prime(900)\nfalse\n>>> is_prime(1000)\ntrue\n>>> is_prime(1100)\ntrue\n>>>\
    \ is_prime(1200)\ntrue\n>>> is_prime(1300)\ntrue\n>>> is_prime(1400)\ntrue\n>>>\
    \ is_prime(1500)\ntrue\n>>> is_prime(1600)\ntrue\n>>> is_prime(1700)\ntrue\n>>>\
    \ is_prime(1800)\ntrue\n>>> is_prime(1900)\ntrue\n>>> is_prime(2000)\ntrue\n>>>\
    \ is_prime(2100)\ntrue\n>>> is_prime(2200)\ntrue\n>>> is_prime(2300)\ntrue\n>>>\
    \ is_prime(2400)\ntrue\n>>> is_prime(2500)\ntrue\n>>> is_prime(2600)\ntrue\n>>>\
    \ is_prime(2700)\ntrue\n>>> is_prime(2800)\ntrue\n>>> is_prime(2900)\ntrue\n>>>\
    \ is_prime(3100)\ntrue\n>>> is_prime(3200) \ntrue\n>>> is_prime(3300) \ntrue\n\
    >>> is_prime(3400)\ntrue\n>>> is_prime(3500)\ntrue\n>>> is_prime(3600)\ntrue\n\
    >>> is_prime(3700)\ntrue\n>>> is_prime(3800)\ntrue\n>>> is_prime(3900)\ntrue\n\
    >>> is_prime(4100)\ntrue\n>>> is_prime(4200)\ntrue\n>>> is_prime(4300)\ntrue\n\
    >>> is_prime(4400)\ntrue\n>>> is_prime(4500)\ntrue\n>>> is_", "    \n    prime_numbers\
    \ = prime_numbers(a)\n    \n    for prime in prime_numbers\n        if a % prime\
    \ == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(11)\nfalse\n\
    >>> is_prime(15)\ntrue\n>>> is_prime(17)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(21)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(29)\nfalse\n>>> is_prime(33)\ntrue\n\
    >>> is_prime(37)\nfalse\n>>> is_prime(39)\ntrue\n>>> is_prime(47)\nfalse\n>>>\
    \ is_prime(49)\ntrue\n>>> is_prime(59)\nfalse\n>>> is_prime(61)\ntrue\n>>> is_prime(67)\n\
    false\n>>> is_prime(71)\ntrue\n>>> is_prime(73)\nfalse\n>>> is_prime(79)\ntrue\n\
    >>> is_prime(83)\nfalse\n>>> is_prime(89)\ntrue\n>>> is_prime(97)\nfalse\n>>>\
    \ is_prime(101)\ntrue\n>>> is_prime(103)\nfalse\n>>> is_prime(107)\ntrue\n>>>\
    \ is_prime(109)\nfalse\n>>> is_prime(113)\ntrue\n>>> is_prime(127)\nfalse\n>>>\
    \ is_prime(131)\ntrue\n>>> is_prime(137)\nfalse\n>>> is_prime(139)\ntrue\n>>>\
    \ is_prime(149)\nfalse\n>>> is_prime(151)\ntrue\n>>> is_prime(157)\nfalse\n>>>\
    \ is_prime(159)\ntrue\n>>> is_prime(163)\nfalse\n>>> is_prime(167)\ntrue\n>>>\
    \ is_prime(173)\nfalse\n>>> is_prime(179)\ntrue\n>>> is_prime(181)\nfalse\n>>>\
    \ is_prime(191)\ntrue\n>>> is_prime(193)\nfalse\n>>> is_prime(197)\ntrue\n>>>\
    \ is_prime(199)\nfalse\n>>> is_prime(20", "    if a < 100\n        return false\n\
    \    else \n        primes = primes(a)\n        for i in primes\n            if\
    \ i%3 == 0\n                return false\n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>>\
    \ is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>>\
    \ is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(10)\ntrue\n>>> is_prime(20)", "    if is_multiply_prime_helper(a) ==\
    \ true\n    else \n        false\n    end\nend", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multi", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   if is_multiply_prime_helper(a, 3, 100) == true\n    else \n        return\
    \ false\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>", "    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n    primes =\
    \ prime_numbers(a)\n    \n    for p in primes\n        if p == 3 || p == 5\n \
    \           return true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = prime_numbers(a)\n\
    \    \n    for p in prime_numbers\n        if p * p > a\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nHint: use the function is_prime(a::Int64)::Bool",
  "    if is_multiply_prime_helper(a, 3, 100) == true\n    else \n        return false\n\
    \    end\nend", "    \n    if a < 100\n        true\n    else\n        false\n\
    \    end\nend", "    if is_prime(a) == false \n        return false\n    else\
    \ \n        if is_multiply_prime(a) == true \n            return true\n      \
    \  else \n            return is_multiply_prime(a+2)\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if is_prime(a)\
    \ == false \n        return false\n    else \n        prime_numbers = prime_numbers(a)\n\
    \        prime_numbers_count = length(prime_numbers)\n        if prime_numbers_count\
    \ > 1 \n            return false\n        else \n            prime_numbers_count\
    \ = length(prime_numbers)\n            if prime_numbers_count == 1 \n        \
    \        return true\n            else \n                prime_numbers_count =\
    \ length(prime_numbers)\n                if prime_numbers_count == 2 \n      \
    \              return true\n                else \n                    prime_numbers_count\
    \ = length(prime_numbers)\n                    if prime_numbers_count == 3 \n\
    \                        return true\n                    else \n            \
    \            prime_numbers_count = length(prime_numbers)\n                   \
    \     if prime_numbers_count == 4 \n                            return true\n\
    \                        else \n                            prime_numbers_count\
    \ = length(prime_numbers)\n                            if prime_numbers_count\
    \ == 5 \n                                return true\n                       \
    \     else \n                                prime_numbers_count = length(prime_numbers)\n\
    \                                if prime_numbers_count == 6 \n              \
    \                      return true\n                                else \n  \
    \                                  prime_numbers_count = length(prime_numbers)\n\
    \                                    if prime_numbers_count == 7 \n          \
    \                              return true\n                                 \
    \   else \n                                        prime_numbers_count = length(prime_numbers)\n\
    \                                        if prime_numbers_count == 8 \n      \
    \                                      return true\n                         \
    \               else \n                                            prime_numbers_count\
    \ = length(prime_numbers)\n                                            if prime_numbers_count\
    \ == 9 \n                                                return true\n       \
    \                                     else \n                                \
    \                prime_numbers_count = length(prime_numbers)\n               \
    \                                 if prime_numbers_count == 10 \n            \
    \                                        return true\n                       \
    \                         else \n                                            \
    \        prime_numbers_count = length(prime_numbers)\n                       \
    \                             if prime_numbers_count == 11 \n                \
    \                                        return true\n                       \
    \                             else \n                                        \
    \                prime_numbers_count = length(prime_numbers)\n               \
    \                                         if prime_numbers_count == 12 \n    \
    \                                                        return true\n       \
    \                                                 else \n                    \
    \                                        prime_numbers_count = length(prime_numbers)\n\
    \                                                                if prime_numbers_count\
    \ == 13 \n                                                                   \
    \ return true\n                                                              \
    \  else \n                                                                   \
    \ prime_numbers_count = length(prime_numbers)\n                              \
    \                                          if prime_numbers_count == 14 \n   \
    \                                                                         return\
    \ true\n                                                                     \
    \   else \n                                                                  \
    \          prime_numbers_count = length(prime_numbers)\n                     \
    \                                                           if prime_numbers_count\
    \ == 15 \n                                                                   \
    \                 return true\n                                              \
    \                                  else \n                                   \
    \                                                 prime_numbers_count = length(prime_numbers)\n\
    \                                                                            \
    \            if prime_numbers_count == 16 \n                                 \
    \                                                           return true\n    \
    \                                                                            \
    \        else \n                                                             \
    \                               prime_numbers_count = length(prime_numbers)\n\
    \                                                                            \
    \                    if prime_numbers_count == ", "    \n    if a < 100\n    \
    \    return false\n    \n    primes = prime_numbers(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.3>", "    \n    primes\
    \ = primes(a)\n    \n    for i in primes\n        if a % i == 0\n            return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a power of 2 and\nfalse otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * ", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_prime(a) and is_prime(a+2) and is_prime(a+3) and is_prime(a+5):\n\
    \        return true\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if is_prime(a) == false \n   \
    \ then return false \n    else if is_prime(a) == false \n    then return false\
    \ \n    else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then ",
  "    \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 *\
    \ 7\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 9\n>>> is_prime(30)\nfalse\n30 = 2\
    \ * 3 * 11\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 13\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 17\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 19\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 23\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 29\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 31\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 37\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 41\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 43\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 47\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 53\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 59\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 61\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 67\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 71\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 73\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 79\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 83\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 89\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 93\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 97\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 101\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 103\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 107\n>>> ", "    if a < 100\n        false\n    else\n   \
    \     true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    if a < 100\n        return false\n    \n    primes = primes(a)\n    \n    for\
    \ p in primes\n        if p*p > a\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number or false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 100\n        return false\n    else \n\
    \        for i in 2..a\n            if a % i == 0\n                return false\n\
    \        return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n   \
    \ else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(50) == false\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n    primes =\
    \ primes_upto(a)\n    \n    for prime in primes\n        if a % prime == 0\n \
    \           return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Write a function that returns true if the given\
    \ number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </", "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3\
    \ * 5\n>>> is_prime(200)\ntrue\n200 = 2 * 3 * 5\n>>> is_prime(400)\nfalse\n400\
    \ = 2 * 3 * 5\n>>> is_prime(500)\ntrue\n500 = 2 * 3 * 5\n>>> is_prime(600)\nfalse\n\
    600 = 2 * 3 * 5\n>>> is_prime(700)\ntrue\n700 = 2 * 3 * 5\n>>> is_prime(800)\n\
    false\n800 = 2 * 3 * 5\n>>> is_prime(900)\ntrue\n900 = 2 * 3 * 5\n>>> is_prime(1000)\n\
    false\n1000 = 2 * 3 * 5\n>>> is_prime(1100)\ntrue\n1100 = 2 * 3 * 5\n>>> is_prime(1200)\n\
    false\n1200 = 2 * 3 * 5\n>>> is_prime(1300)\ntrue\n1300 = 2 * 3 * 5\n>>> is_prime(1400)\n\
    false\n1400 = 2 * 3 * 5\n>>> is_prime(1500)\ntrue\n1500 = 2 * 3 * 5\n>>> is_prime(1600)\n\
    false\n1600 = 2 * 3 * 5\n>>> is_prime(1700)\ntrue\n1700 = 2 * 3 * 5\n>>> is_prime(1800)\n\
    false\n1800 = 2 * 3 * 5\n>>> is_prime(1900)\ntrue\n1900 = 2 * 3 * 5\n>>> is_prime(2100)\n\
    false\n2100 = 2 * 3 * 5\n>>> is_prime(2200)\ntrue\n2200 = 2 * 3 * 5\n>>> is_prime(2300)\n\
    false\n2300 = 2 * 3 * 5\n>>> is_prime(2400)\ntrue\n2400 = 2 * 3 * 5\n>>> is_prime(2500)\n\
    false\n2500 = 2 * 3 * 5\n>>> is_prime(2600)\ntrue\n2600 = 2 * 3 * 5\n>>> is_prime(2700)\n\
    false\n2700 = 2 * 3 * 5\n>>> is_prime(2800)\n", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n   \
    \ else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    </text>\n<code language=julia-1.3>", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write\
    \ a function that returns true if the given number is the multiplication of 3\
    \ prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is a perfect square (i.e.\
    \ a number that is\n    equal to the sum of its positive divisors excluding itself)\
    \ and false otherwise.\n    Example:\n    >>> is_perfect_square(25)\n    true\n\
    \    25 = (1 + 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + 31 + 37 + 41 + 43\
    \ + 47 + 53 + 59 + \n    61 + 67 + 71 + 73 + 79 + 83 + 89 + 97)\n    \"\"\"",
  "    \n    primes = primes_list(100)\n    \n    for p in primes\n        if p*p*p\
    \ == a\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n", "    \n  \
    \  if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = primes(a)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a %\
    \ i == 0\n            return false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 =\
    \ 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\n", "    \n    if a < 100\n        true\n   \
    \ else\n        false\n    end\nend\n</cell>\n<code language=julia-1.1>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime", "    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\nKnowing that (a) is\
    \ less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_prime(", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(2600)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(2700)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(2800)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(29",
  "    \n    if a < 100\n        return false\n    \n    primes = primes(a)\n    \n\
    \    for i in primes\n        if a % i == 0\n            return false\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell", "    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Write a function that returns true if\
    \ the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    for i in prime_numbers\n        if i%3 == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 3 * 7 * 11 * 13 * 17 * 19 * 23 * 29 *\
    \ 31 * 37 * 41\n</text>\n<code language=julia-1.5>", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend\n\"\"\"\n    Write a function that\
    \ returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
