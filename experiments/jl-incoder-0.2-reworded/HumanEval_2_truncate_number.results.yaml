language: jl
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmtdb4wd.jl:12\nin expression starting at\
    \ /tmp/tmpsmtdb4wd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv49wfwj_.jl:13\nin expression starting at\
    \ /tmp/tmpv49wfwj_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nThe function\
    \ truncate_number above returns the decimal part of the number. Let's see how\
    \ it works.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1dopw55.jl:13\nin expression starting at\
    \ /tmp/tmpc1dopw55.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive floating point number as input and returns\
    \ the number of decimal places it is composed of. For example, truncate_number(3.5)\
    \ should return 2.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqe2o0rhq.jl:13\nin expression starting at\
    \ /tmp/tmpqe2o0rhq.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive floating point number and returns the number\
    \ rounded to a specific number of decimal places.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkwmnllb.jl:13\nin expression starting at\
    \ /tmp/tmptkwmnllb.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpadite8jb.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpadite8jb.jl:17\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadite8jb.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadite8jb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpadite8jb.jl:18\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadite8jb.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadite8jb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpadite8jb.jl:19\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadite8jb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadite8jb.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    return truncate_number\nend\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ == 0.5\n</cell>\n<text>\nExercise 4\nWrite a function that converts a floating\
    \ point number to a string with two decimal places.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_a4gkw9.jl:13\nin expression starting at\
    \ /tmp/tmpj_a4gkw9.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxtsstcr.jl:15\nin expression starting at\
    \ /tmp/tmphxtsstcr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq103ql.jl:13\nin expression starting at\
    \ /tmp/tmp_kq103ql.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `trunc` returns `-1` for negative\
    \ numbers. `trunc` also doesn't work for `Float64` numbers. `trunc` returns `Float64`\
    \ for `Float64` numbers. `trunc` also doesn't work for `Float32` numbers. `trunc`\
    \ returns `Float32` for `Float32` numbers. `trunc` also doesn't work for `Int`\
    \ numbers. `trunc` returns `Int` for `Int` numbers. `trunc` also doesn't work\
    \ for `UInt` numbers. `trunc` returns `UInt` for `UInt` numbers. `trunc` also\
    \ doesn't work for `Bool` numbers. `trunc` returns `Bool` for `Bool` numbers.\
    \ `trunc` also doesn't work for `Complex` numbers. `trunc` returns `Complex` for\
    \ `Complex` numbers. `trunc` also doesn't work for `Any` numbers. `trunc` returns\
    \ `Any` for `Any` numbers. `trunc` also doesn't work for `Array` numbers. `trunc`\
    \ returns `Array` for `Array` numbers. `trunc` also doesn't work for `Dict` numbers.\
    \ `trunc` returns `Dict` for `Dict` numbers. `trunc` also doesn't work for `Union`\
    \ numbers. `trunc` returns `Union` for `Union` numbers. `trunc` also doesn't work\
    \ for `Unit` numbers. `trunc` returns `Unit` for `Unit` numbers. `trunc` also\
    \ doesn't work for `Nothing` numbers. `trunc` returns `Nothing` for `Nothing`\
    \ numbers. `trunc` also doesn't work for `NaN` numbers. `trunc` returns `NaN`\
    \ for `NaN` numbers. `trunc` also doesn't work for `Inf` numbers. `trunc` returns\
    \ `Inf` for `Inf` numbers. `trunc` also doesn't work for `Nothing` numbers. `trunc`\
    \ returns `Nothing` for `Nothing` numbers. `trunc` also doesn't work for `NaN`\
    \ numbers. `trunc` returns `NaN` for `NaN` numbers. `trunc` also doesn't work\
    \ for `Inf` numbers. `trunc` returns `Inf` for `Inf` numbers. `trunc` also doesn't\
    \ work for `Nothing` numbers. `trunc` returns `Nothing` for `Nothing` numbers.\
    \ `trunc` also \nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsrm6wa0.jl:12\nin expression starting at\
    \ /tmp/tmplsrm6wa0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nTruncating floats\n\
    The function truncate truncates a floating point number to a given precision.\n\
    The precision can be specified as a positive integer or as a Float64 number.\n\
    The default precision is 6.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cj3ceuv.jl:13\nin expression starting at\
    \ /tmp/tmp4cj3ceuv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        truncate_number\n    else\n        truncate_number - truncate_number(number)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(2.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(2.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(2.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(1.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(1.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(1.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(0.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(0.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(0.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(0.6)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6s6n6on.jl:19\nin expression starting at\
    \ /tmp/tmpe6s6n6on.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a positive floating point number as input and returns\
    \ the integer part and the decimal part as a tuple.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp36scyf.jl:13\nin expression starting at\
    \ /tmp/tmpxp36scyf.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    if number == 0.\n        return 0.\n    \n    digits = floor(log10(number))\n\
    \    decimals = digits-(digits-1)\n    \n    if number < 1.\n        return number\n\
    \    \n    trunc_number = round(number*10^decimals)/10^decimals\n    \n    return\
    \ trunc_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a decimal number to\
    \ its binary representation.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vw0fydy.jl:24\nin expression starting at\
    \ /tmp/tmp7vw0fydy.jl:24\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1pejfgh6.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp1pejfgh6.jl:17\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 4.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1pejfgh6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1pejfgh6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1pejfgh6.jl:18\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1pejfgh6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1pejfgh6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1pejfgh6.jl:19\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1pejfgh6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1pejfgh6.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3607g426.jl:12\nin expression starting at\
    \ /tmp/tmp3607g426.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq103ql.jl:13\nin expression starting at\
    \ /tmp/tmp_kq103ql.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits of an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3z5v092t.jl:13\nin expression starting at\
    \ /tmp/tmp3z5v092t.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph43qnw3i.jl:12\nin expression starting at\
    \ /tmp/tmph43qnw3i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is implemented\
    \ in the following cell:\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mj4f4u0.jl:14\nin expression starting at\
    \ /tmp/tmp5mj4f4u0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    decimal_part = number % 1\n  \
    \  \n    if decimal_part == 0.\n        decimal_part = 1\n    \n    integer_part\
    \ = floor(number)\n    \n    return integer_part * decimal_part\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \nFor instance,\
    \ truncate_number(3) should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1xx9bzu.jl:22\nin expression starting at\
    \ /tmp/tmpq1xx9bzu.jl:22\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57c0mcbi.jl:1\nin expression starting at /tmp/tmp57c0mcbi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a tags=julia |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ntruncate_number(number::Float64)::Float64 \n    truncate_number\
    \ = number % 1\n    return truncate_number\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv_wdmih.jl:12\nin expression starting at\
    \ /tmp/tmpuv_wdmih.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp92icjmze.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp92icjmze.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp92icjmze.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp92icjmze.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64_cm94t.jl:13\nin expression starting at\
    \ /tmp/tmp64_cm94t.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph43qnw3i.jl:12\nin expression starting at\
    \ /tmp/tmph43qnw3i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzi309nrl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzi309nrl.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's implement the function truncate_number in Julia\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrnx67pk.jl:13\nin expression starting at\
    \ /tmp/tmpkrnx67pk.jl:13\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp66k9o0s1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp66k9o0s1.jl:19\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp66k9o0s1.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66k9o0s1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66k9o0s1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp66k9o0s1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp66k9o0s1.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66k9o0s1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66k9o0s1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp66k9o0s1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp66k9o0s1.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66k9o0s1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66k9o0s1.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm81wdqym.jl:13\nin expression starting at\
    \ /tmp/tmpm81wdqym.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number % 1 == 0.0:\n      \
    \  return number\n    \n    decimal_part = number % 1\n    \n    if number < 1:\n\
    \        return number\n    \n    integer_part = floor(number)\n    \n    return\
    \ integer_part + decimal_part\nend\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoamu7znf.jl:14\nin expression starting at\
    \ /tmp/tmpoamu7znf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number == 0.0:\n        return\
    \ number\n    \n    decimal_part = number % 1\n    \n    if decimal_part == 0.0:\n\
    \        return number\n    \n    integer_part = floor(number)\n    \n    if integer_part\
    \ == number:\n        return number\n    \n    return integer_part + decimal_part\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(7.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(8.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(9.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(10.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(11.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(12.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(13.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(14.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(15.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(16.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(17.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(18.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(19.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(20.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(21.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(22.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(23.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(24.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(25.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(26.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(27.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(28.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(29.5)\n</cell>\n<code language=julia-1.5>\ntruncate_\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivmtjpyp.jl:14\nin expression starting at\
    \ /tmp/tmpivmtjpyp.jl:14\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq103ql.jl:13\nin expression starting at\
    \ /tmp/tmp_kq103ql.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.4>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ == 0.5\n</cell>\n<text>\nExercise 3\nWrite a function that returns the floor\
    \ of a number. For example, trunc(2.8) = 2.\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntvly3vd.jl:13\nin expression starting at\
    \ /tmp/tmpntvly3vd.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that takes a vector of numbers and returns\
    \ a vector of numbers with the same number of elements as the original vector\
    \ but with the decimal part truncated.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt2svn5g.jl:13\nin expression starting at\
    \ /tmp/tmprt2svn5g.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's write our own truncate function which truncates the decimal part of\
    \ a number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41lv2u2j.jl:13\nin expression starting at\
    \ /tmp/tmp41lv2u2j.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncate number function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in a number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8vhkb3i.jl:13\nin expression starting at\
    \ /tmp/tmp_8vhkb3i.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1kmp6fs.jl:14\nin expression starting at\
    \ /tmp/tmpd1kmp6fs.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq103ql.jl:13\nin expression starting at\
    \ /tmp/tmp_kq103ql.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    digits = floor(log10(number))\n    decimals = number - truncate_number(number)\n\
    \    \n    if digits == 0\n        digits = 1\n    \n    return truncate_number(decimals)\
    \ / pow(10, digits)\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in a number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgeybjez.jl:19\nin expression starting at\
    \ /tmp/tmpsgeybjez.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1kmp6fs.jl:14\nin expression starting at\
    \ /tmp/tmpd1kmp6fs.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if `number` is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if `number`\
    \ is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if `number` is negative.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if `number` is negative.\n<|/ c |>\n<| a tags=julia,truncate\
    \ |>\nI wrote a package truncate that does this for you:\n<code>\njulia> using\
    \ truncate\njulia> truncate(3.5)\n0.5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaorhbdrj.jl:12\nin expression starting at\
    \ /tmp/tmpaorhbdrj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ has two outputs: truncate_number returns the truncated number and the truncate_number\
    \ function returns the truncated number as a Float64.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnwv60o2.jl:12\nin expression starting at\
    \ /tmp/tmpxnwv60o2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ a function that will compute the mean of a vector of numbers. If the vector\
    \ is empty, return NaN.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbm62fui1.jl:13\nin expression starting at\
    \ /tmp/tmpbm62fui1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncates a floating point number to its integer part and\
    \ decimal part.\n    \"\"\"\n    return math.trunc(number)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuj111nx2.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpuj111nx2.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: math not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpuj111nx2.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuj111nx2.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj111nx2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuj111nx2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: math not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpuj111nx2.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuj111nx2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj111nx2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpuj111nx2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: math not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpuj111nx2.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuj111nx2.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj111nx2.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in a given number. \nFor instance,\
    \ the number of digits of 1234 is 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgmoqszov.jl:13\nin expression starting at\
    \ /tmp/tmpgmoqszov.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <text>\nNow let's test our truncate function:\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnvx0kjs.jl:13\nin expression starting at\
    \ /tmp/tmpmnvx0kjs.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's use\
    \ our truncate function to truncate our data set\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqesu0yj9.jl:13\nin expression starting at\
    \ /tmp/tmpqesu0yj9.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <text>\nLet's test our truncate function:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvtl2vn9.jl:13\nin expression starting at\
    \ /tmp/tmphvtl2vn9.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzi309nrl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzi309nrl.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's try\
    \ it out on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbix7h6x3.jl:13\nin expression starting at\
    \ /tmp/tmpbix7h6x3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzi309nrl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzi309nrl.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    if number == 0.0:\n        return 0.0\n    \n    precision = floor(log10(abs(number)))\n\
    \    \n    if number < 0.0:\n        precision = -precision\n    \n    number\
    \ = round(number, precision)\n    \n    if number == 0.0:\n        return 0.0\n\
    \    \n    return number\n</code>\n<|/ a tags=julia,floating-point |>\n<| a dscore=2\
    \ |>\nI wrote a package that does this for you:\nhttps://github.com/jrm/FloatTruncation\n\
    <code>\nusing FloatTruncation\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxoml0y_e.jl:12\nin expression starting at\
    \ /tmp/tmpxoml0y_e.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1agts23e.jl:13\nin expression starting at\
    \ /tmp/tmp1agts23e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia,floating-point |>\n<| c |>\n`truncate_number(3.5)` returns\
    \ `0.5`, not `2`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the answer.\n<|/ c |>\n<| a dscore=3 |>\nThe other answers are correct in that\
    \ truncating floating point numbers is rarely a good idea. \nHowever, sometimes\
    \ it can be useful to do so. \nFor example, if you're writing a function that\
    \ computes some value based on a floating point number, and you want to round\
    \ the result to some number of decimal places, you can do so by rounding the floating\
    \ point number to the nearest integer and then dividing by that integer. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9fa9ks6.jl:14\nin expression starting at\
    \ /tmp/tmpb9fa9ks6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cjy6b7j.jl:13\nin expression starting at\
    \ /tmp/tmp1cjy6b7j.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\nend\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a list of numbers:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsuemp1i.jl:12\nin expression starting at\
    \ /tmp/tmpfsuemp1i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's try\
    \ it out on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjej31aa.jl:13\nin expression starting at\
    \ /tmp/tmpjjej31aa.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57c0mcbi.jl:1\nin expression starting at /tmp/tmp57c0mcbi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    if number < 1.0\n        return number\n    \n    decimal_part =\
    \ floor(log10(number))\n    \n    if decimal_part == 0\n        return number\n\
    \    \n    decimal_part = min(decimal_part, 10)\n    \n    number = round(number,\
    \ decimal_part)\n    \n    return number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's use our truncate function to\
    \ truncate our data set. We'll use the truncated data set from before to test\
    \ our model.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoeglzlb8.jl:25\nin expression starting at\
    \ /tmp/tmpoeglzlb8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive floating point number as input and returns\
    \ the absolute value of the number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wf7ahad.jl:13\nin expression starting at\
    \ /tmp/tmp3wf7ahad.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = trunc(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's see how we can use these functions to solve the problem of finding the\
    \ largest prime factor of a given number. We'll start by defining the function\
    \ prime_factors(number::Int64)::Vector{Int64} which takes an integer and returns\
    \ a vector containing the prime factors of that integer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwgnsfve.jl:15\nin expression starting at\
    \ /tmp/tmpkwgnsfve.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    digits = floor(log10(number))\n    decimals = digits - floor(log10(digits))\n\
    \    \n    if number < 1\n        return number\n    \n    trunc_number = round(number,\
    \ digits)\n    \n    if decimals > 0\n        return trunc_number - trunc_number\
    \ * 10^decimals\n    else\n        return trunc_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5m9jchq.jl:24\nin expression starting at\
    \ /tmp/tmph5m9jchq.jl:24\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvncxkp8p.jl:13\nin expression starting at\
    \ /tmp/tmpvncxkp8p.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number % 1 == 0.0:\n      \
    \  return number\n    \n    decimal_part = number % 1\n    \n    number = number\
    \ / 1\n    \n    return number\n</code>\n<|/ a tags=julia,floating-point,rounding\
    \ |>\n<| c |>\nThis doesn't work for negative numbers, e.g. `truncate_number(-0.5)`\
    \ returns `-0.5`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers, because\
    \ `truncate_number(-0.5)` returns `-0.5`, not `-0.5`.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've edited my answer to fix that.\n<|/ c |>\n<| a tags=julia,floating-point,rounding\
    \ |>\nThe accepted answer doesn't work for negative numbers, e.g. truncate_number(-0.5)\
    \ returns -0.5. Here's a version that does:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx52dvg6b.jl:14\nin expression starting at\
    \ /tmp/tmpx52dvg6b.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's use\
    \ our truncate function to truncate our data to a certain number of decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9aii09os.jl:13\nin expression starting at\
    \ /tmp/tmp9aii09os.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n\
    \        truncate_number = truncate_number + 1.0\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<text>\nNow let's test our truncate function on a few examples:\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9hq9j9e.jl:19\nin expression starting at\
    \ /tmp/tmpw9hq9j9e.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh8ymmy5.jl:12\nin expression starting at\
    \ /tmp/tmpmh8ymmy5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlcfcndy.jl:14\nin expression starting at\
    \ /tmp/tmpjlcfcndy.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on our dataset!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_39qawfs.jl:15\nin expression starting at\
    \ /tmp/tmp_39qawfs.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph43qnw3i.jl:12\nin expression starting at\
    \ /tmp/tmph43qnw3i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh8ymmy5.jl:12\nin expression starting at\
    \ /tmp/tmpmh8ymmy5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1kmp6fs.jl:14\nin expression starting at\
    \ /tmp/tmpd1kmp6fs.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = round(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's create a function that will plot a histogram of the given data\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm7jmy4f.jl:15\nin expression starting at\
    \ /tmp/tmpxm7jmy4f.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ == 0.5\n</cell>\n<text>\nExercise 4\nWrite a function that returns the floor\
    \ of a number. For example, truncate_number(3.5) should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7dmwf3nw.jl:13\nin expression starting at\
    \ /tmp/tmp7dmwf3nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's use\
    \ our truncate function to round the number to the nearest whole number:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjlq5uoz.jl:13\nin expression starting at\
    \ /tmp/tmpxjlq5uoz.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<text>\nThe function\
    \ truncate_number above is now a Julia function, and can be called from Julia\
    \ as follows:\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbx48lycx.jl:13\nin expression starting at\
    \ /tmp/tmpbx48lycx.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphem6vao.jl:15\nin expression starting at\
    \ /tmp/tmpphem6vao.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nThe function\
    \ truncate_number above is equivalent to the following Python code:\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bp8yvy0.jl:13\nin expression starting at\
    \ /tmp/tmp5bp8yvy0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1agts23e.jl:13\nin expression starting at\
    \ /tmp/tmp1agts23e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Given a positive floating point number, it can be decomposed\
    \ into\n    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp049pnsyn.jl:1\nin expression starting at /tmp/tmp049pnsyn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh8ymmy5.jl:12\nin expression starting at\
    \ /tmp/tmpmh8ymmy5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57c0mcbi.jl:1\nin expression starting at /tmp/tmp57c0mcbi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number < 1:\n        return\
    \ number\n    \n    decimals = math.floor(math.log(number, 10))\n    \n    if\
    \ number % 1 == 0.0:\n        return number / 10 ** decimals\n    else:\n    \
    \    return number / 10 ** decimals + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95yp71fk.jl:14\nin expression starting at\
    \ /tmp/tmp95yp71fk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0m3xmwix.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0m3xmwix.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp0m3xmwix.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0m3xmwix.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0m3xmwix.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0m3xmwix.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp0m3xmwix.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0m3xmwix.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0m3xmwix.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0m3xmwix.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp0m3xmwix.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0m3xmwix.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0m3xmwix.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh8ymmy5.jl:12\nin expression starting at\
    \ /tmp/tmpmh8ymmy5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = trunc(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that converts a number from one base\
    \ to another. We'll use our truncate_number function to truncate the decimal part\
    \ of a number and then multiply it by the base to convert it to another base.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9l2i6rg.jl:15\nin expression starting at\
    \ /tmp/tmpa9l2i6rg.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n\
    \        truncate_number = truncate_number + 1.0\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoga1pegq.jl:19\nin expression starting at\
    \ /tmp/tmpoga1pegq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = round(number)\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `truncate_number(-0.5)` returns `-0.5`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `truncate_number(-0.5)` returns `-0.5`.\n<|/ c |>\n\
    <| a dscore=4 |>\nI like using round() for this purpose:\n<code>\njulia> round(3.5)\n\
    3\n</code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `round(3.5)` returns `3`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `round(3.5)` returns `3`.\n<|/ c |>\n<| a dscore=4\
    \ |>\nI like using floor() and ceil() for this purpose:\n<code>\njulia> floor(3.5)\n\
    3\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyn8t3fd6.jl:14\nin expression starting at\
    \ /tmp/tmpyn8t3fd6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n\
    \        truncate_number = truncate_number + 1.0\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a positive floating point number and returns\
    \ the integer part and decimal part separately. For example, truncate_number(3.5)\
    \ should return (3,0.5).\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjyxk4z0.jl:18\nin expression starting at\
    \ /tmp/tmppjyxk4z0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't seem to work for `truncate_number(3.5)` which returns\
    \ `0.5` instead of `2`.\n<|/ c |>\n<| c |>\nI believe this should work. Can you\
    \ try it again? I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on\
    \ Julia 0.6.2 and it works. I guess you didn't reload the module after changing\
    \ the function.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I\
    \ guess you didn't reload the module after changing the function.\n<|/ c |>\n\
    <| c |>\nI tested it on Julia 0.6.2 and it works. I guess you didn't reload the\
    \ module after changing the function.\n<|/ c |>\n<| a dscore=2 |>\nThe truncate\
    \ function works on Float64 and Float32, but does not work on Float16. \n<code>\n\
    julia> truncate(3.5)\nERROR: MethodError: no method matching truncate(::Float16)\n\
    Closest candidates are:\n  truncate(::Float32) at float.jl:18\n  truncate(::Float64)\
    \ at float.jl:18\n  ...\nStacktrace:\n [1] top-level scope at none:0\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work for `truncate(3.5)` which\
    \ returns `0.5` instead of `2`.\n<|/ c |>\n<| c |>\nI believe this should work.\
    \ Can you try it again? I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and it works. I guess you didn't reload the module after changing\
    \ the function.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I\
    \ guess you didn't reload the module after changing the function.\n<|/ c |>\n\
    <| a tags=julia |>\nThe truncate function works on Float64 and Float32, but does\
    \ not work on Float16. \n<code>\njulia> truncate(3.5)\nERROR: MethodError: no\
    \ method matching truncate(::Float16)\nClosest candidates are:\n  truncate(::Float32)\
    \ at float.jl:18\n  truncate(::Float64) at float.jl:18\n  ...\nStacktrace:\n [1]\
    \ top-level scope at none:0\n</code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsipwvl60.jl:12\nin expression starting at\
    \ /tmp/tmpsipwvl60.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkamnt_z.jl:13\nin expression starting at\
    \ /tmp/tmpwkamnt_z.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ truncate_number(1000) should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj92exhds.jl:13\nin expression starting at\
    \ /tmp/tmpj92exhds.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        \n        return number\n    \n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    \n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74aueau_.jl:21\nin expression starting at\
    \ /tmp/tmp74aueau_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzi309nrl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzi309nrl.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    digits = floor(log10(number))\n    decimals = number - digits*pow(10,\
    \ digits)\n    \n    return decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer\n    number. For example, truncate_number(123)\
    \ = 2, truncate_number(12345) = 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnd1981c9.jl:16\nin expression starting at\
    \ /tmp/tmpnd1981c9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = trunc(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# export\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfrpvw4k.jl:15\nin expression starting at\
    \ /tmp/tmptfrpvw4k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number into its decimal part.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5ljj8sy.jl:1\nin expression starting at /tmp/tmpm5ljj8sy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ a function that will compute the mean of a vector of numbers:\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ehgsv_t.jl:13\nin expression starting at\
    \ /tmp/tmp2ehgsv_t.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2tv4n98.jl:15\nin expression starting at\
    \ /tmp/tmpt2tv4n98.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp92icjmze.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp92icjmze.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp92icjmze.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp92icjmze.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh8ymmy5.jl:12\nin expression starting at\
    \ /tmp/tmpmh8ymmy5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7w191og.jl:15\nin expression starting at\
    \ /tmp/tmpm7w191og.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that converts a number to a string with two\
    \ decimal places.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96711dsg.jl:13\nin expression starting at\
    \ /tmp/tmp96711dsg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpadite8jb.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpadite8jb.jl:17\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadite8jb.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadite8jb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpadite8jb.jl:18\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadite8jb.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadite8jb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpadite8jb.jl:19\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadite8jb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadite8jb.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkamnt_z.jl:13\nin expression starting at\
    \ /tmp/tmpwkamnt_z.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph43qnw3i.jl:12\nin expression starting at\
    \ /tmp/tmph43qnw3i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number into an integer part and\
    \ decimal part.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbu_bwwh.jl:1\nin expression starting at /tmp/tmphbu_bwwh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's use our truncate function to\
    \ truncate our data frame to just the numerical columns and then apply our truncate\
    \ function to each of those columns.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikp63tbt.jl:12\nin expression starting at\
    \ /tmp/tmpikp63tbt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc0bneuze.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpc0bneuze.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 4.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0bneuze.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0bneuze.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpc0bneuze.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0bneuze.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0bneuze.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpc0bneuze.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0bneuze.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0bneuze.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function that returns the floor of a number:\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnoa7yz8b.jl:12\nin expression starting at\
    \ /tmp/tmpnoa7yz8b.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number % 1 == 0.0:\n      \
    \  return number\n    \n    decimal_part = number % 1\n    \n    number = number\
    \ / 1\n    \n    return number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's see how we can use these functions to solve the problem\
    \ of finding the largest integer less than or equal to a given floating point\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpseiycbjo.jl:14\nin expression starting at\
    \ /tmp/tmpseiycbjo.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t8grw7e.jl:13\nin expression starting at\
    \ /tmp/tmp8t8grw7e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <text>\nLet's try it out:\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqev9a9xt.jl:13\nin expression starting at\
    \ /tmp/tmpqev9a9xt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's try\
    \ it out on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85v2gwxu.jl:13\nin expression starting at\
    \ /tmp/tmp85v2gwxu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzi309nrl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzi309nrl.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxtsstcr.jl:15\nin expression starting at\
    \ /tmp/tmphxtsstcr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number < 1:\n        return\
    \ number\n    \n    decimal_part = number % 1\n    \n    if decimal_part == 0:\n\
    \        return number\n    \n    integer_part = number / 1\n    \n    return\
    \ integer_part * 1 + decimal_part\nend\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eigiao8.jl:14\nin expression starting at\
    \ /tmp/tmp5eigiao8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq103ql.jl:13\nin expression starting at\
    \ /tmp/tmp_kq103ql.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0m3xmwix.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp0m3xmwix.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp0m3xmwix.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0m3xmwix.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0m3xmwix.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0m3xmwix.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp0m3xmwix.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0m3xmwix.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0m3xmwix.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp0m3xmwix.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp0m3xmwix.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0m3xmwix.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0m3xmwix.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxtsstcr.jl:15\nin expression starting at\
    \ /tmp/tmphxtsstcr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number % 1 == 0.0:\n      \
    \  return number\n    else:\n        return number - int(number)\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the square root of a number. Test your function\
    \ on different numbers. What happens when you pass a negative number?\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3pacmgy.jl:14\nin expression starting at\
    \ /tmp/tmpu3pacmgy.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq103ql.jl:13\nin expression starting at\
    \ /tmp/tmp_kq103ql.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to a given precision.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4k7ixj7s.jl:1\nin expression starting at /tmp/tmp4k7ixj7s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that will convert a number from one base to\
    \ another.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphim_bjdg.jl:13\nin expression starting at\
    \ /tmp/tmphim_bjdg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive floating point number\
    \ as input and returns the integer part and the decimal part as a tuple.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bz0p3xy.jl:13\nin expression starting at\
    \ /tmp/tmp2bz0p3xy.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57c0mcbi.jl:1\nin expression starting at /tmp/tmp57c0mcbi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzi309nrl.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzi309nrl.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzi309nrl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpzi309nrl.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi309nrl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi309nrl.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the floor of a given number. \nThe floor\
    \ of a number is the largest integer smaller than the given number.\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8fszjn1.jl:15\nin expression starting at\
    \ /tmp/tmpn8fszjn1.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakgzu_wb.jl:13\nin expression starting at\
    \ /tmp/tmpakgzu_wb.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number % 1 == 0.0:\n      \
    \  return number\n    else:\n        return number - number % 1\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nExercise 2: Implement the function truncate_number_with_precision(number,\
    \ precision)\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1ithx5n.jl:14\nin expression starting at\
    \ /tmp/tmp_1ithx5n.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the sum of its digits.\
    \ \nFor instance, sum(digits(123)) == 1 + 2 + 3 = 6\nHint: use the function digits(number)\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hbv9e9x.jl:13\nin expression starting at\
    \ /tmp/tmp1hbv9e9x.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on our truncated numbers:\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn3h1zxp.jl:15\nin expression starting at\
    \ /tmp/tmpbn3h1zxp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ above is equivalent to the Julia function trunc\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp7opvh8.jl:12\nin expression starting at\
    \ /tmp/tmpnp7opvh8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the next bigger integer\
    \ after it (starting from 0).\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0s56atj.jl:13\nin expression starting at\
    \ /tmp/tmpy0s56atj.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1agts23e.jl:13\nin expression starting at\
    \ /tmp/tmp1agts23e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx306m3e.jl:13\nin expression starting at\
    \ /tmp/tmpsx306m3e.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph43qnw3i.jl:12\nin expression starting at\
    \ /tmp/tmph43qnw3i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxtsstcr.jl:15\nin expression starting at\
    \ /tmp/tmphxtsstcr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number, digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's use our truncate function and\
    \ see what happens when we truncate a number that is too big:\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97_a7_3z.jl:12\nin expression starting at\
    \ /tmp/tmp97_a7_3z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=julia,floating-point |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_aa483w8.jl:12\nin expression starting at\
    \ /tmp/tmp_aa483w8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp92icjmze.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp92icjmze.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp92icjmze.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp92icjmze.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp92icjmze.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp92icjmze.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp92icjmze.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number < 1:\n        return\
    \ number\n    \n    decimals = math.floor(math.log(number, 10))\n    \n    return\
    \ number - decimals * math.pow(10, -decimals)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb46v27uy.jl:14\nin expression starting at\
    \ /tmp/tmpb46v27uy.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp04nvkrp.jl:13\nin expression starting at\
    \ /tmp/tmpp04nvkrp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87q99pt7.jl:14\nin expression starting at\
    \ /tmp/tmp87q99pt7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number::Float64)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that returns the number of digits of an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpxul6x5.jl:12\nin expression starting at\
    \ /tmp/tmptpxul6x5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95pqn09_.jl:13\nin expression starting at\
    \ /tmp/tmp95pqn09_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's see how we can use these functions to solve the problem of finding the\
    \ largest prime factor of a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8lc3frau.jl:15\nin expression starting at\
    \ /tmp/tmp8lc3frau.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpquqrgyg9.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpquqrgyg9.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpquqrgyg9.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquqrgyg9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquqrgyg9.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
