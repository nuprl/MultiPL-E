language: jl
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: use min() and a\
    \ for loop.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzzww94v.jl:17\nin expression starting at\
    \ /tmp/tmprzzww94v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfhk9i9h.jl:18\nin expression starting at\
    \ /tmp/tmpcfhk9i9h.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in a given vector.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqn4ib6n1.jl:20\nin expression starting at\
    \ /tmp/tmpqn4ib6n1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxqmcqj8.jl:18\nin expression starting at\
    \ /tmp/tmpfxqmcqj8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfdlqsqp.jl:20\nin expression starting at\
    \ /tmp/tmpmfdlqsqp.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphk3ldia_.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmphk3ldia_.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:27\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:30\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use a for loop to iterate through nums.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf56v0y1l.jl:18\nin expression starting at\
    \ /tmp/tmpf56v0y1l.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0he_2mw9.jl:20\nin expression starting at\
    \ /tmp/tmp0he_2mw9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpfhvvjh.jl:20\nin expression starting at\
    \ /tmp/tmpgpfhvvjh.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbd271bn_.jl:18\nin expression starting at\
    \ /tmp/tmpbd271bn_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nProblem 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64})::Vector{Int64}\
    \ that takes in an array of integers and returns the minimum sum of any non-empty\
    \ sub-array of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl9gd1un.jl:20\nin expression starting at\
    \ /tmp/tmppl9gd1un.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82qkzssx.jl:18\nin expression starting at\
    \ /tmp/tmp82qkzssx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the sum of the numbers in the\
    \ array nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqqojgz7.jl:20\nin expression starting at\
    \ /tmp/tmpgqqojgz7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are less than a given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj6mji_n.jl:17\nin expression starting at\
    \ /tmp/tmpfj6mji_n.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of positive integers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wt7qdub.jl:20\nin expression starting at\
    \ /tmp/tmp8wt7qdub.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2j6occo.jl:20\nin expression starting at\
    \ /tmp/tmpl2j6occo.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>>\
    \ minSubArraySum([-1, -2, -3])\n-6\nHint: You will need to use the function minSubArraySum.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrpk07p2.jl:20\nin expression starting at\
    \ /tmp/tmphrpk07p2.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64}) which returns\
    \ the minimum sum of any non-empty sub-vector of nums.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg27zho9.jl:20\nin expression starting at\
    \ /tmp/tmpmg27zho9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0c398bux.jl:20\nin expression starting at\
    \ /tmp/tmp0c398bux.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given element appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvaybb0uv.jl:20\nin expression starting at\
    \ /tmp/tmpvaybb0uv.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.0>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the minimum product of any non-empty sub-array of nums.\nExample\nGiven\
    \ nums = [-1, -2, -3, 0, 3, 6, 9], the function should return 0.\nThe product\
    \ of any sub-array of nums is defined as the product of its elements multiplied\
    \ by the first element. Since the empty set has no product, it is not included.\n\
    The product of any two non-adjacent sub-arrays of nums is defined as the product\
    \ of the two elements at the two indices (first and second) multiplied by the\
    \ first element. Since the two sub-arrays are non-adjacent, it is not included.\n\
    The product of any three non-adjacent sub-arrays of nums is defined as the product\
    \ of the three elements at the three indices (first, second, and third) multiplied\
    \ by the first element. Since the three sub-arrays are non-adjacent, it is not\
    \ included.\nThe product of any four-element sub-array of nums is defined as the\
    \ product of the four elements at the first three indices multiplied by the first\
    \ element. Since the four sub-array is non-adjacent, it is not included.\nThe\
    \ product of any five-element sub-array of nums is defined as the product of the\
    \ five elements at the first four indices multiplied by the first element. Since\
    \ the five sub-array is non-adjacent, it is not included.\nThe product of any\
    \ six-element sub-array of nums is defined as the product of the six elements\
    \ at the first five indices multiplied by the first element. Since the six sub-array\
    \ is non-adjacent, it is not included.\nThe product of any seven-element sub-array\
    \ of nums is defined as the product of the seven elements at the first six indices\
    \ multiplied by the first element. Since the seven sub-array is non-adjacent,\
    \ it is not included.\nThe product of any eight-element sub-array of nums is defined\
    \ as the product of the eight elements at the first seven indices multiplied by\
    \ the first element. Since the eight sub-array is non-adjacent, it is not included.\n\
    The product of any nine-element sub-array of nums is defined as the product of\
    \ the nine elements at the first eight indices multiplied by the first element.\
    \ Since the nine sub-array is non-adjacent, it is not included.\nThe product of\
    \ any 10-element sub-array of nums is defined as the product of the ten elements\
    \ at the first n\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntrc4tk5.jl:18\nin expression starting at\
    \ /tmp/tmpntrc4tk5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd50n6kat.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpd50n6kat.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx8l9h0j.jl:20\nin expression starting at\
    \ /tmp/tmpmx8l9h0j.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that finds the minimum sum of a given array of integers.\
    \ \nThe function should take an array of integers as an argument and return the\
    \ minimum sum.\nExample\n>>> minSum([2, 3, 4, 1, 2, 4])\n1\n>>> minSum([-1, -2,\
    \ -3])\n-6\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh1j7pye.jl:20\nin expression starting at\
    \ /tmp/tmpfh1j7pye.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0v0to9zd.jl:20\nin expression starting at\
    \ /tmp/tmp0v0to9zd.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nPart 2\nGiven a vector of integers nums, find the minimum sum\
    \ of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbnhsfzg.jl:20\nin expression starting at\
    \ /tmp/tmppbnhsfzg.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0he_2mw9.jl:20\nin expression starting at\
    \ /tmp/tmp0he_2mw9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that finds the minimum sum of any non-empty\
    \ sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>>\
    \ minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate over the sub-vectors\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9es79q30.jl:20\nin expression starting at\
    \ /tmp/tmp9es79q30.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ integers in a given vector that are less than a given value.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sqt53mi.jl:20\nin expression starting at\
    \ /tmp/tmp5sqt53mi.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3q5mi3dc.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp3q5mi3dc.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:27\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:30\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3t4v7n2.jl:17\nin expression starting at\
    \ /tmp/tmps3t4v7n2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc7o3luc.jl:20\nin expression starting at\
    \ /tmp/tmpuc7o3luc.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd50n6kat.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpd50n6kat.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd50n6kat.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd50n6kat.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpd50n6kat.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Problem 7\nGiven a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiy7rl_cp.jl:18\nin expression starting at\
    \ /tmp/tmpiy7rl_cp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the number of times a given number appears\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66skhmlj.jl:18\nin expression starting at\
    \ /tmp/tmp66skhmlj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of integers in a given vector that\
    \ are less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpje4gd1sy.jl:19\nin expression starting at\
    \ /tmp/tmpje4gd1sy.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctd1_gdp.jl:18\nin expression starting at\
    \ /tmp/tmpctd1_gdp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use a for loop and a variable sum to keep track of the current\
    \ sum.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3p1og_5.jl:18\nin expression starting at\
    \ /tmp/tmpm3p1og_5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise: Find the minimum sum\
    \ of any non-empty sub-vector of nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\nminSubArraySum([-1, -2, -3])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2b9l8pn.jl:17\nin expression starting at\
    \ /tmp/tmpr2b9l8pn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqu7sypf.jl:18\nin expression starting at\
    \ /tmp/tmpjqu7sypf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9zehjpg.jl:18\nin expression starting at\
    \ /tmp/tmpk9zehjpg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of integers in an array that\
    \ are less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fvc_u2m.jl:20\nin expression starting at\
    \ /tmp/tmp1fvc_u2m.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxkf24i9q.jl:20\nin expression starting at\
    \ /tmp/tmpxkf24i9q.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1,\
    \ 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate\
    \ over the sub-vectors of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qtcnyto.jl:20\nin expression starting at\
    \ /tmp/tmp5qtcnyto.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.\nFor example, given nums = [2, 3, 4, 1, 2, 4], the function\
    \ should return 1.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0q4bmklv.jl:18\nin expression starting at\
    \ /tmp/tmp0q4bmklv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 7\nGiven a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqiggi9ka.jl:20\nin expression starting at\
    \ /tmp/tmpqiggi9ka.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum of\
    \ a given vector of integers nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzyopyik.jl:20\nin expression starting at\
    \ /tmp/tmpuzyopyik.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum sum of a vector\
    \ of integers nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47ryaxlp.jl:20\nin expression starting at\
    \ /tmp/tmp47ryaxlp.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0he_2mw9.jl:20\nin expression starting at\
    \ /tmp/tmp0he_2mw9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy841dex4.jl:20\nin expression starting at\
    \ /tmp/tmpy841dex4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcmohnovl.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpcmohnovl.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmohnovl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmohnovl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcmohnovl.jl:27\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmohnovl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmohnovl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcmohnovl.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmohnovl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmohnovl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcmohnovl.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcmohnovl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcmohnovl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcmohnovl.jl:30\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector that are less than a given value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzrn1qc8.jl:20\nin expression starting at\
    \ /tmp/tmpvzrn1qc8.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times the number n appears in\
    \ nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2xb5l53.jl:18\nin expression starting at\
    \ /tmp/tmp_2xb5l53.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-array of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wy40xql.jl:20\nin expression starting at\
    \ /tmp/tmp1wy40xql.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times the given\
    \ element appears in the given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4ydnguw.jl:20\nin expression starting at\
    \ /tmp/tmpu4ydnguw.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3e725v1.jl:20\nin expression starting at\
    \ /tmp/tmpi3e725v1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7bs58aw.jl:17\nin expression starting at\
    \ /tmp/tmpc7bs58aw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in a given vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppz74hoe7.jl:20\nin expression starting at\
    \ /tmp/tmppz74hoe7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8md9o3s2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp8md9o3s2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8md9o3s2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8md9o3s2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8md9o3s2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8md9o3s2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8md9o3s2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8md9o3s2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8md9o3s2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8md9o3s2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8md9o3s2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8md9o3s2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8md9o3s2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8md9o3s2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: You can use the function minSubArraySum.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87jlufdo.jl:17\nin expression starting at\
    \ /tmp/tmp87jlufdo.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times the number \"x\" appears in the vector \"nums\". For example, the number\
    \ of times the number \"3\" appears in the vector [3, 4, 3, 6, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, \nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprljzzicv.jl:20\nin expression starting at\
    \ /tmp/tmprljzzicv.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38cgrp8_.jl:18\nin expression starting at\
    \ /tmp/tmp38cgrp8_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of a given vector of integers nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21hmrug9.jl:20\nin expression starting at\
    \ /tmp/tmp21hmrug9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the numbers in a given vector.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk491hkz_.jl:20\nin expression starting at\
    \ /tmp/tmpk491hkz_.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>>\
    \ minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate over the sub-arrays\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a_w6xxk.jl:20\nin expression starting at\
    \ /tmp/tmp3a_w6xxk.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82qkzssx.jl:18\nin expression starting at\
    \ /tmp/tmp82qkzssx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of prime numbers less than a given integer n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq2cgtq1.jl:17\nin expression starting at\
    \ /tmp/tmpkq2cgtq1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfhk9i9h.jl:18\nin expression starting at\
    \ /tmp/tmpcfhk9i9h.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekl8r9nb.jl:17\nin expression starting at\
    \ /tmp/tmpekl8r9nb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>>\
    \ minSubArraySum([-1, -2, -3])\n-6\nHint: Use minSubArraySum(nums[start:end])\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwb85jxed.jl:18\nin expression starting at\
    \ /tmp/tmpwb85jxed.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixz48vec.jl:20\nin expression starting at\
    \ /tmp/tmpixz48vec.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuev_yf7.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpiuev_yf7.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlug66fh.jl:20\nin expression starting at\
    \ /tmp/tmphlug66fh.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-array of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x8rwt0l.jl:20\nin expression starting at\
    \ /tmp/tmp4x8rwt0l.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctd1_gdp.jl:18\nin expression starting at\
    \ /tmp/tmpctd1_gdp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82qkzssx.jl:18\nin expression starting at\
    \ /tmp/tmp82qkzssx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given number appears in a given vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2ty9xk0.jl:20\nin expression starting at\
    \ /tmp/tmpw2ty9xk0.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 7: Find the minimum sum of any non-empty sub-vector of\
    \ length 3 of the given array.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    1\n>>> minSubArraySum([-1, -2, -3])\n-6\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzru3r97.jl:20\nin expression starting at\
    \ /tmp/tmpdzru3r97.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jusffxq.jl:20\nin expression starting at\
    \ /tmp/tmp8jusffxq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43r7rxpx.jl:20\nin expression starting at\
    \ /tmp/tmp43r7rxpx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe79giv4.jl:20\nin expression starting at\
    \ /tmp/tmpfe79giv4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvw8yvgwr.jl:19\nin expression starting at\
    \ /tmp/tmpvw8yvgwr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys8jzspm.jl:20\nin expression starting at\
    \ /tmp/tmpys8jzspm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given element appears in a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9abgssaw.jl:20\nin expression starting at\
    \ /tmp/tmp9abgssaw.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnl5_06r.jl:18\nin expression starting at\
    \ /tmp/tmphnl5_06r.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given value appears\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8evpsyu.jl:18\nin expression starting at\
    \ /tmp/tmpc8evpsyu.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use a for loop to iterate over the vector. \nHint: Use a\
    \ while loop to iterate over the vector. \nHint: Use a recursive function to solve\
    \ the problem. \nHint: Use a while loop to iterate over the vector. \nHint: Use\
    \ a recursive function to solve the problem. \nHint: Use a while loop to iterate\
    \ over the vector. \nHint: Use a recursive function to solve the problem. \nHint:\
    \ Use a while loop to iterate over the vector. \nHint: Use a recursive function\
    \ to solve the problem. \nHint: Use a while loop to iterate over the vector. \n\
    Hint: Use a recursive function to solve the problem. \nHint: Use a while loop\
    \ to iterate over the vector. \nHint: Use a recursive function to solve the problem.\
    \ \nHint: Use a while loop to iterate over the vector. \nHint: Use a recursive\
    \ function to solve the problem. \nHint: Use a while loop to iterate over the\
    \ vector. \nHint: Use a recursive function to solve the problem. \nHint: Use a\
    \ while loop to iterate over the vector. \nHint: Use a recursive function to solve\
    \ the problem. \nHint: Use a while loop to iterate over the vector. \nHint: Use\
    \ a recursive function to solve the problem. \nHint: Use a while loop to iterate\
    \ over the vector. \nHint: Use a recursive function to solve the problem. \nHint:\
    \ Use a while loop to iterate over the vector. \nHint: Use a recursive function\
    \ to solve the problem. \nHint: Use a while loop to iterate over the vector. \n\
    Hint: Use a recursive function to solve the problem. \nHint: Use a while loop\
    \ to iterate over the vector. \nHint: Use a recursive function to solve the problem.\
    \ \nHint: Use a while loop to iterate over the vector. \nHint: Use a recursive\
    \ function to solve the problem. \nHint: Use a while loop to iterate over the\
    \ vector. \nHint: Use a recursive function to solve the problem. \nHint: Use a\
    \ while loop to iterate over the vector. \nHint: Use a recursive function to solve\
    \ the problem. \nHint: Use a while loop to iterate over the vector. \nHint: Use\
    \ \nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3nztsq9.jl:18\nin expression starting at\
    \ /tmp/tmpd3nztsq9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        \n        if num > 0\n            \n\
    \            sum += num\n            \n        else\n            \n          \
    \  sum -= num\n            \n        end\n        \n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a given element appears in a given vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynj2gb50.jl:30\nin expression starting at\
    \ /tmp/tmpynj2gb50.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc7o3luc.jl:20\nin expression starting at\
    \ /tmp/tmpuc7o3luc.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        \n        if sum < n\n            sum = n\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find\
    \ the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2,\
    \ -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6166f09.jl:23\nin expression starting at\
    \ /tmp/tmpw6166f09.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1,\
    \ 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: You will need to use\
    \ a for loop to iterate over the sub-vectors of nums.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw657yxof.jl:20\nin expression starting at\
    \ /tmp/tmpw657yxof.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3e725v1.jl:20\nin expression starting at\
    \ /tmp/tmpi3e725v1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nProblem 3\nGiven a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1mims41.jl:20\nin expression starting at\
    \ /tmp/tmpj1mims41.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in a vector that\
    \ satisfy a given condition. For example, a vector with elements greater than\
    \ 5 would return 3.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzd6xkho.jl:17\nin expression starting at\
    \ /tmp/tmpfzd6xkho.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogo1xfya.jl:20\nin expression starting at\
    \ /tmp/tmpogo1xfya.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj69emokl.jl:20\nin expression starting at\
    \ /tmp/tmpj69emokl.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vubd9fh.jl:20\nin expression starting at\
    \ /tmp/tmp7vubd9fh.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint\nThe function minSubArraySum(nums::Vector{Int64})\
    \ should return an Int64.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5utpxsf.jl:20\nin expression starting at\
    \ /tmp/tmpy5utpxsf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of integers in a\
    \ given array that add up to a specific value.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1wae8nt.jl:18\nin expression starting at\
    \ /tmp/tmpr1wae8nt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        \n        if sum < i\n            sum\
    \ = i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of integers and returns the number\
    \ of elements in the vector that are less than the given value.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq409f4dz.jl:23\nin expression starting at\
    \ /tmp/tmpq409f4dz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in the input array. For example, given [1, 1,\
    \ 2, 3], return [1, 1, 2, 3]. You may assume that the array does not contain duplicate\
    \ elements.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjf1fkkov.jl:17\nin expression starting at\
    \ /tmp/tmpjf1fkkov.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjezflek.jl:19\nin expression starting at\
    \ /tmp/tmpxjezflek.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 7\nGiven a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzd1frdsn.jl:20\nin expression starting at\
    \ /tmp/tmpzd1frdsn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3e725v1.jl:20\nin expression starting at\
    \ /tmp/tmpi3e725v1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3y1va28.jl:19\nin expression starting at\
    \ /tmp/tmpo3y1va28.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszak8r8a.jl:20\nin expression starting at\
    \ /tmp/tmpszak8r8a.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu189lf_7.jl:20\nin expression starting at\
    \ /tmp/tmpu189lf_7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        \n        if sum < x\n            sum = x\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the number of elements in a vector that are less\
    \ than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ejn6xd2.jl:23\nin expression starting at\
    \ /tmp/tmp3ejn6xd2.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ vector. For example, if the vector is [4, 9, 16, 25], then the function should\
    \ return 50.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokstliw9.jl:20\nin expression starting at\
    \ /tmp/tmpokstliw9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz3o6yn73.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpz3o6yn73.jl:22\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:26\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:27\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:28\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:29\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the first n positive integers, where\
    \ n is given as an input to the function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnz3wh6n.jl:20\nin expression starting at\
    \ /tmp/tmprnz3wh6n.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times each element appears in\
    \ an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcoz9lww7.jl:18\nin expression starting at\
    \ /tmp/tmpcoz9lww7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 3\nGiven a vector\
    \ of integers nums, find the maximum sum of any non-empty sub-vector\n    of nums.\n\
    \    Example\n    >>> maxSubArraySum([2, 3, 4, 1, 2, 4])\n    10\n    >>> maxSubArraySum([-1,\
    \ -2, -3])\n    -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6hva956.jl:17\nin expression starting at\
    \ /tmp/tmpc6hva956.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2nnxtur5.jl:20\nin expression starting at\
    \ /tmp/tmp2nnxtur5.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfdlqsqp.jl:20\nin expression starting at\
    \ /tmp/tmpmfdlqsqp.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of prime numbers less than or equal\
    \ to a given number.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9mkd8ic.jl:20\nin expression starting at\
    \ /tmp/tmpu9mkd8ic.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe79giv4.jl:20\nin expression starting at\
    \ /tmp/tmpfe79giv4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwma3hpf.jl:18\nin expression starting at\
    \ /tmp/tmpkwma3hpf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ first n positive integers. \nExample\n>>> sumFirstN([2, 3, 4, 1, 2, 4])\n10\n\
    >>> sumFirstN([-1, -2, -3])\n6\n>>> sumFirstN([-10, -20, -30])\n60\n>>> sumFirstN([-10,\
    \ -20, -30, -40])\n140\n>>> sumFirstN([-10, -20, -30, -40, -50])\n210\n>>> sumFirstN([-10,\
    \ -20, -30, -40, -50, -60])\n280\n>>> sumFirstN([-10, -20, -30, -40, -50, -60,\
    \ -70])\n360\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70, -80])\n440\n>>>\
    \ sumFirstN([-10, -20, -30, -40, -50, -60, -70, -80, -90])\n520\n>>> sumFirstN([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100])\n600\n>>> sumFirstN([-10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90, -100, -101])\n660\n>>> sumFirstN([-10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90, -100, -101, -102])\n760\n>>> sumFirstN([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103])\n850\n>>> sumFirstN([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104])\n950\n\
    >>> sumFirstN([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102,\
    \ -103, -104, -105])\n1050\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90, -100, -101, -102, -103, -104, -105, -106])\n1150\n>>> sumFirstN([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -10\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe909aw2v.jl:20\nin expression starting at\
    \ /tmp/tmpe909aw2v.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjepw4wtu.jl:17\nin expression starting at\
    \ /tmp/tmpjepw4wtu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of a given vector\
    \ of integers nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjn01zf0b.jl:18\nin expression starting at\
    \ /tmp/tmpjn01zf0b.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function called maxSubArraySum(nums::Vector{Int64}) that\
    \ returns the maximum sum of any non-empty sub-vector of nums.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qvj9z8m.jl:18\nin expression starting at\
    \ /tmp/tmp2qvj9z8m.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd13hl172.jl:20\nin expression starting at\
    \ /tmp/tmpd13hl172.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv6dp8fh.jl:20\nin expression starting at\
    \ /tmp/tmpvv6dp8fh.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.\nExample\n\
    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n\
    -6\nHint: Use a for loop to iterate through nums.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyohoeaw.jl:17\nin expression starting at\
    \ /tmp/tmpkyohoeaw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers in the vector nums up to the first occurrence of the number num.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunyg6of6.jl:20\nin expression starting at\
    \ /tmp/tmpunyg6of6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuihpqj95.jl:20\nin expression starting at\
    \ /tmp/tmpuihpqj95.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3e725v1.jl:20\nin expression starting at\
    \ /tmp/tmpi3e725v1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0he_2mw9.jl:20\nin expression starting at\
    \ /tmp/tmp0he_2mw9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of a given array of integers.\
    \ \nExample\n>>> minSum([2, 3, 4, 1, 2, 4])\n1\n>>> minSum([-1, -2, -3])\n-6\n\
    </text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8krii9az.jl:18\nin expression starting at\
    \ /tmp/tmp8krii9az.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9om346uv.jl:18\nin expression starting at\
    \ /tmp/tmp9om346uv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsbyk17b3.jl:17\nin expression starting at\
    \ /tmp/tmpsbyk17b3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_52cq2xb.jl:20\nin expression starting at\
    \ /tmp/tmp_52cq2xb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: You may want to use the function minSubArraySum defined\
    \ above.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvdxv85b.jl:17\nin expression starting at\
    \ /tmp/tmpxvdxv85b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8m8hw3wl.jl:20\nin expression starting at\
    \ /tmp/tmp8m8hw3wl.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8840shuz.jl:20\nin expression starting at\
    \ /tmp/tmp8840shuz.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbws3u3wq.jl:20\nin expression starting at\
    \ /tmp/tmpbws3u3wq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz3o6yn73.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpz3o6yn73.jl:22\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:26\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:27\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:28\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3o6yn73.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3o6yn73.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz3o6yn73.jl:29\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in a given vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mi643rj.jl:17\nin expression starting at\
    \ /tmp/tmp6mi643rj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptb54y5n2.jl:20\nin expression starting at\
    \ /tmp/tmptb54y5n2.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphk3ldia_.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmphk3ldia_.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:27\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:30\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called maxSubArraySum(nums::Vector{Int64})\
    \ that returns the maximum sum of any non-empty sub-vector of nums.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nvkqbfb.jl:20\nin expression starting at\
    \ /tmp/tmp4nvkqbfb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9zehjpg.jl:18\nin expression starting at\
    \ /tmp/tmpk9zehjpg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphk3ldia_.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmphk3ldia_.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:27\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3ldia_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3ldia_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphk3ldia_.jl:30\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchme1hfy.jl:18\nin expression starting at\
    \ /tmp/tmpchme1hfy.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuev_yf7.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpiuev_yf7.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuev_yf7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuev_yf7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiuev_yf7.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq86av2b0.jl:18\nin expression starting at\
    \ /tmp/tmpq86av2b0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        \n        if sum > 0\n            sum += num\n\
    \        else\n            sum -= num\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h6aleji.jl:25\nin expression starting at\
    \ /tmp/tmp_h6aleji.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe79giv4.jl:20\nin expression starting at\
    \ /tmp/tmpfe79giv4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 4\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb12nh8wt.jl:20\nin expression starting at\
    \ /tmp/tmpb12nh8wt.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        \n        if num > 0\n            sum\
    \ += num\n        else\n            sum -= num\n        end\n    end\n    \n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers in a given vector.\nExample\n>>> sumOfNumbers([1, 2,\
    \ 3, 4])\n10\n</text>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvu51bwp.jl:25\nin expression starting at\
    \ /tmp/tmptvu51bwp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepd9f2t4.jl:20\nin expression starting at\
    \ /tmp/tmpepd9f2t4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06dtl033.jl:20\nin expression starting at\
    \ /tmp/tmp06dtl033.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ to iterate through the array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjh7u4eb.jl:20\nin expression starting at\
    \ /tmp/tmpnjh7u4eb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the first n positive integers.\
    \ \nExample\n>>> sumFirstN([2, 3, 4, 1, 2, 4])\n10\n>>> sumFirstN([-1, -2, -3])\n\
    -6\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx2iyjwt.jl:18\nin expression starting at\
    \ /tmp/tmpmx2iyjwt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqu7sypf.jl:18\nin expression starting at\
    \ /tmp/tmpjqu7sypf.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of integers in an array that\
    \ are less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpve3dhewq.jl:18\nin expression starting at\
    \ /tmp/tmpve3dhewq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82qkzssx.jl:18\nin expression starting at\
    \ /tmp/tmp82qkzssx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector that are\
    \ greater than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8lzbtkq.jl:20\nin expression starting at\
    \ /tmp/tmpr8lzbtkq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys8jzspm.jl:20\nin expression starting at\
    \ /tmp/tmpys8jzspm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3q5mi3dc.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp3q5mi3dc.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:27\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q5mi3dc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q5mi3dc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3q5mi3dc.jl:30\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g5fhyl2.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g5fhyl2.jl:25\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:29\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:30\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:31\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g5fhyl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g5fhyl2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g5fhyl2.jl:32\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a given value appears in a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6c9gajx1.jl:17\nin expression starting at\
    \ /tmp/tmp6c9gajx1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that finds the minimum sum of any non-empty sub-array of\
    \ nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use a for loop to iterate over the sub-array and add each\
    \ element to the sum.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps35dn_ae.jl:20\nin expression starting at\
    \ /tmp/tmps35dn_ae.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use a for loop to iterate through the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1ievtav.jl:18\nin expression starting at\
    \ /tmp/tmpn1ievtav.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0knbocrt.jl:17\nin expression starting at\
    \ /tmp/tmp0knbocrt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd13hl172.jl:20\nin expression starting at\
    \ /tmp/tmpd13hl172.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwks1d_p0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwks1d_p0.jl:1\n\
    in expression starting at /tmp/tmpwks1d_p0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ times a given value appears in a given vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtdv3fg_.jl:20\nin expression starting at\
    \ /tmp/tmpjtdv3fg_.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        \n        if num > 0\n            \n     \
    \       sum += num\n            \n        else\n            \n            sum\
    \ += num\n            \n        end\n        \n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of integers less than or\
    \ equal to n that are divisible by k.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkl8aw_r.jl:30\nin expression starting at\
    \ /tmp/tmpdkl8aw_r.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times each unique element\
    \ appears in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgfzntqx.jl:20\nin expression starting at\
    \ /tmp/tmpxgfzntqx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given element appears\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gjlqkzo.jl:20\nin expression starting at\
    \ /tmp/tmp2gjlqkzo.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0fofe1w.jl:17\nin expression starting at\
    \ /tmp/tmpl0fofe1w.jl:17\n"
  stdout: ''
