name: HumanEval_125_split_words
language: jl
prompt: "\"\"\"\n    Given a string of words, return a vector of words split on whitespace,\
  \ if no whitespaces exists in the text you\n    should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n\
  \    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"\
  Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"abcdef\")\n\
  \    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String}, Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
  Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
  ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
  , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
  , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
  \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
completions: ["    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789",
  "    words = split(txt)\n    word_counts = Dict()\n    for word in words\n     \
    \   word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    word_counts =\
    \ map(x -> x[1], word_counts)\n    word_counts = sort(word_counts, by=x->x[2],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = filter(x\
    \ -> x[2] % 2 != 0, word_counts)\n    word_counts = map(x -> x[2], word_counts)\n\
    \    word_counts = sort(word_counts, by=x->x[3], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = filter(x -> x[3] % 2 != 0, word_counts)\n\
    \    word_counts = map(x -> x[3], word_counts)\n    word_counts = sort(word_counts,\
    \ by=x->x[4], rev=true)\n    word_counts = reverse(word_counts)\n    word_counts\
    \ = filter(x -> x[4] % 2 != 0, word_counts)\n    word_counts = map(x -> x[4],\
    \ word_counts)\n    word_counts = sort(word_counts, by=x->x[5], rev=true)\n  \
    \  word_counts = reverse(word_counts)\n    word_counts = filter(x -> x[5] % 2\
    \ != 0, word_counts)\n    word_counts = map(x -> x[5], word_counts)\n    word_counts\
    \ = sort(word_counts, by=x->x[6], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[6] % 2 != 0, word_counts)\n    word_counts =\
    \ map(x -> x[6], word_counts)\n    word_counts = sort(word_counts, by=x->x[7],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = filter(x\
    \ -> x[7] % 2 != 0, word_counts)\n    word_counts = map(x -> x[7], word_counts)\n\
    \    word_counts = sort(word_counts, by=x->x[8], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = filter(x -> x[8] % 2 != 0, word_counts)\n\
    \    word_counts = map(x -> x[8], word_counts)\n    word_counts = sort(word_counts,\
    \ by", "    words = split(txt)\n    \n    words_vec = Vector{String}(undef, 0)\n\
    \    words_vec_size = Vector{Int64}(undef, 0)\n    \n    for word in words\n \
    \       words_vec_size += length(word)\n        words_vec += word\n    end\n \
    \   \n    if words_vec_size == 0\n        return words_vec\n    else\n       \
    \ return words_vec\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    count_words(txt::String)\n    Count number of words in a string\n    \n \
    \   Arguments\n    ---------\n    txt :: String\n        Text to count words from\n\
    \    \n    Returns\n    -------\n    words_count :: Int64\n        Number of words\
    \ in txt\n    Examples\n    --------\n    >>> count_words(\"Hello world!\")\n\
    \    7\n    >>> count_words(\"Hello world! Hello world!\")\n    9\n    >>> count_words(\"\
    Hello world! Hello world! Hello world!\")\n    15\n    \"\"\"", "    words = split(txt,\
    \ \" \")\n    words_no_spaces = filter(x -> !contains(x, \" \"), words)\n    words_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_spaces)\n    words_no_commas_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas)\n    words_no_commas_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces)\n    words_no_commas_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces)\n  \
    \  words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words_no_commas_no_spaces_no_spaces_no_spaces)\n    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?", "    words = split(txt,\
    \ \" \")\n    words_no_spaces = filter(x -> !isspace(x), words)\n    words_no_commas\
    \ = filter(x -> !iscomma(x), words_no_spaces)\n    words_no_commas_no_spaces =\
    \ filter(x -> !isspace(x), words_no_commas)\n    words_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces)\n    words_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n \
    \   words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_",
  "    \n    words = split(txt)\n    \n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  word_counts = collect(values(word_counts))\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_", " \
    \   \n    words = split(txt, \" \")\n    \n    words_split = [split(word, \",\"\
    ) for word in words]\n    \n    words_split = [word for word in words_split if\
    \ !isempty(word)]\n    \n    words_split = [word for word in words_split if !islower(word)]\n\
    \    \n    words_split = [word for word in words_split if !isupper(word)]\n  \
    \  \n    words_split = [word for word in words_split if !isdigit(word)]\n    \n\
    \    words_split = [word for word in words_split if !isspace(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isempty(word)]\n    \n    words_split\
    \ = [word for word in words_split if !islower(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isupper(word)]\n    \n    words_split = [word\
    \ for word in words_split if !isdigit(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isspace(word)]\n    \n    words_split = [word for word\
    \ in words_split if !isempty(word)]\n    \n    words_split = [word for word in\
    \ words_split if !islower(word)]\n    \n    words_split = [word for word in words_split\
    \ if !isupper(word)]\n    \n    words_split = [word for word in words_split if\
    \ !isdigit(word)]\n    \n    words_split = [word for word in words_split if !isspace(word)]\n\
    \    \n    words_split = [word for word in words_split if !isempty(word)]\n  \
    \  \n    words_split = [word for word in words_split if !islower(word)]\n    \n\
    \    words_split = [word for word in words_split if !isupper(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isdigit(word)]\n    \n    words_split\
    \ = [word for word in words_split if !isspace(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isempty(word)]\n    \n    words_split = [word\
    \ for word in words_split if !islower(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isupper(word)]\n    \n    words_split = [word for word\
    \ in words_split if !isdigit(word)]\n    \n    words_split = [word for word in\
    \ words_split if !isspace(word)]\n    \n    words_split = [word for word in words_split\
    \ if !ise", "    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if word != \"\"\n            words_split\
    \ = push!(words_split, word)\n        end\n    end\n    words_split\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_words(txt::String)\n    Count the\
    \ number of words in a given text\n    \n    Arguments\n    ---------\n    txt\
    \ :: String\n        Text to count the words from\n    \n    Returns\n    -------\n\
    \    words_count :: Int64\n        Number of words in the given text\n    Examples\n\
    \    --------\n    >>> count_words(\"Hello world!\")\n    3\n    \"\"\"", "  \
    \  words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"abcdef\"]\n    words = [w for w in words\
    \ if w != \"abcdefghijklmnopqrstuvwxyz\"]\n    words = [w for w in words if w\
    \ != \"abcdefghijklmnopqrstuvwxyz0123456789\"]\n    words = [w for w in words\
    \ if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w !=\
    \ \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/:;'\\\"\
    \\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w\
    \ != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/:;'\\\
    \"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for\
    \ w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\\
    ,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!",
  "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n   \
    \ \n    if txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\"-\")\n        return txt.split(\"-\")\n    elseif\
    \ txt.includes(\";\")\n        return txt.split(\";\")\n    elseif txt.includes(\"\
    :\")\n        return txt.split(\":\")\n    elseif txt.includes(\";\")\n      \
    \  return txt.split(\";\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n    elseif txt.includes(\"-\")\n      \
    \  return txt.split(\"-\")\n    elseif txt.includes(\";\")\n        return txt.split(\"\
    ;\")\n    elseif txt.includes(\":\")\n        return txt.split(\":\")\n    elseif\
    \ txt.includes(\";\")\n        return txt.split(\";\")\n    elseif txt.includes(\"\
    ,\")\n        return txt.split(\",\")\n    elseif txt.includes(\"!\")\n      \
    \  return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"\
    ?\")\n    elseif txt.includes(\".\")\n        return txt.split(\".\")\n    elseif\
    \ txt.includes(\"-\")\n        return txt.split(\"-\")\n    elseif txt.includes(\"\
    ;\")\n        return txt.split(\";\")\n    elseif txt.includes(\":\")\n      \
    \  return txt.split(\":\")\n    elseif txt.includes(\";\")\n        return txt.split(\"\
    ;\")\n    elseif txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\"-\")\n        return txt.split(\"\
    -\")\n    elseif txt.includes(\";\")\n        return txt.split(\";\")\n    elseif\
    \ txt.includes(\":\")\n        return txt.split(\":\")\n    elseif txt.includes(\"\
    ;\")\n        return txt.split(\";\")\n    elseif txt.includes(\",\")\n      \
    \  return txt.split(\",\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"\
    !\")\n    elseif txt", "    \n    words = split(txt, \" \")\n    \n    word_counts\
    \ = Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[1] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[2],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[2] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[2] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[2], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[3],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[3] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[3] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[3], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[4],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[4] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[4] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[4], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[5],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[5] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[5] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[5], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[6],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[6] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[6] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[6], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[7],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[7", "    words = split(txt,\
    \ \" \")\n    word_counts = Dict{String, Int64}()\n    for word in words\n   \
    \     word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = collect(values(word_counts))\n    word_counts = sort(word_counts)\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_count", "    words = split(txt, \" \")\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"", "    \n    if isempty(txt)\n\
    \        return Vector{String}()\n    end\n    \n    words = split(txt, \" \"\
    )\n    \n    words = [w for w in words if w != \"\"]\n    \n    if isempty(words)\n\
    \        return Vector{String}()\n    end\n    \n    words = [w for w in words\
    \ if w != \",\"]\n    \n    if isempty(words)\n        return length(unique(lowercase(txt)))\n\
    \    end\n    \n    return length(unique(lowercase(words)))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    split_words_with_delimiter(txt::String, delimiter::String)\n\
    \    \n    Split a text into words using given delimiter\n    \n    Arguments\n\
    \    ---------\n    txt :: String\n        Text to split\n    delimiter :: String\n\
    \        Delimiter used to split words\n    \n    Returns\n    -------\n    Vector{String}\n\
    \        Vector of words\n    \n    Examples\n    --------\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter",
  "    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    else\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n", "    if isempty(txt)\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words_no_spaces = filter(x -> !isempty(x),\
    \ words)\n        words_no_commas = filter(x -> isempty(x), words)\n        words_no_commas\
    \ = map(x -> replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(",
  "    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split2\
    \ = split(txt, \",\")\n    if length(words) == length(words_split)\n        return\
    \ words\n    elseif length(words) == length(words_split2)\n        return words_split\n\
    \    else\n        return length(words)\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"", "    \n    words =\
    \ split(txt)\n    \n    if length(words) == 0\n        return words\n    else\n\
    \        \n        words = words[2:end]\n        \n        if all(islower(word))\n\
    \            return words\n        else\n            \n            words = words[2:end]\n\
    \            \n            if all(islower(word))\n                return words\n\
    \            else\n                \n                words = words[2:end]\n  \
    \              \n                if all(islower(word))\n                    return\
    \ words\n                else\n                    \n                    words\
    \ = words[2:end]\n                    \n                    if all(islower(word))\n\
    \                        return words\n                    else\n            \
    \            \n                        words = words[2:end]\n                \
    \        \n                        if all(islower(word))\n                   \
    \         return words\n                        else\n                       \
    \     \n                            words = words[2:end]\n                   \
    \         \n                            if all(islower(word))\n              \
    \                  return words\n                            else\n          \
    \                      \n                                words = words[2:end]\n\
    \                                \n                                if all(islower(word))\n\
    \                                    return words\n                          \
    \      else\n                                    \n                          \
    \          words = words[2:end]\n                                    \n      \
    \                              if all(islower(word))\n                       \
    \                 return words\n                                    else\n   \
    \                                     \n                                     \
    \   words = words[2:end]\n                                        \n         \
    \                               if all(islower(word))\n                      \
    \                      return words\n                                        else\n\
    \                                            \n                              \
    \              words = words[2:end]\n                                        \
    \    \n                                            if all(islower(word))\n   \
    \                                             return words\n                 \
    \                           else\n                                           \
    \     \n                                                words = words[2:end]\n\
    \                                                \n                          \
    \                      if all(islower(word))\n                               \
    \                     return words\n                                         \
    \       else\n                                                    \n         \
    \                                           words = words[2:end]\n           \
    \                                         \n                                 \
    \                   if all(islower(word))\n                                  \
    \                      return words\n                                        \
    \            else\n                                                        \n\
    \                                                        words = words[2:end]\n\
    \                                                        \n                  \
    \                                      if all(islower(word))\n               \
    \                                             return words\n                 \
    \                                       else\n                               \
    \                             \n                                             \
    \               words = words[2:end]\n                                       \
    \                     \n                                                     \
    \           if all(islower(word))\n                                          \
    \                          return words\n                                    \
    \                            else\n                                          \
    \                          \n                                                \
    \                    words = words[2:end]\n                                  \
    \                                  \n                                        \
    \                                if all(islower(word))\n                     \
    \                                                       return words\n       \
    \                                                                 else\n     \
    \                                                                       \n   \
    \                                                                         words\
    \ = words[2:end]\n                                                           \
    \                 \n                                                         \
    \                       if all(islower(word))\n                              \
    \                                                      return words\n        \
    \                                                                        else\n\
    \                                                                            \
    \        \n                                                                  \
    \                  words = words[2:end]\n                                    \
    \                                                \n                          \
    \                                                          if all(islower(word))\n\
    \                                                                            \
    \            return words\n                                                  \
    \                                  else\n                                    \
    \                                                    \n                      \
    \                                                                  words = words[2:end]\n\
    \                                                                            \
    \            \n                                                              \
    \                          if all(islower(word))\n                           \
    \                                                                 return words\n\
    \                                                                            \
    \            else\n                                                          \
    \                                  \n                                        \
    \                                                    words = words[2:end]\n  \
    \                                                                            \
    \              \n                                                            \
    \                                    if all(islower(word", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"", "    \n    words = split(txt)\n\
    \    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \",\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \" \"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\n\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\r\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\t\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\n\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\t\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\n\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\t\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\n\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\t\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\r\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\n\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\t\"]\n    \n    if length(words) == 0\n        return\
    \ txt", "    words = split(txt, \" \")\n    words_split = Vector{String}()\n \
    \   for word in words\n        push!(words_split, word)\n    end\n    return words_split\n\
    end\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of words and returns the number of words in the vector that contain\
    \ an even number of letters.", "    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \".\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?", "    \n    words = split(txt)\n    \n    if length(words) == 0\n\
    \        return words\n    else\n        \n        words = words[2:end]\n    \
    \    \n        if all(islower(word))\n            return words\n        else\n\
    \            \n            words = words[2:end]\n            \n            words\
    \ = words[2:end]\n            \n            return words\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    words = split(txt, \" \")\n   \
    \ \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \",\")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = split(txt, \"-\")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words = split(txt, \";\")\n    \n  \
    \  if length(words) == 0\n        return words\n    end\n    \n    words = split(txt,\
    \ \":\")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words = split(txt, \"/\")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words = split(txt, \"\\\\\")\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = split(txt, \"'\")\n \
    \   \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \"\\\"\")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = split(txt, \"?\")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words = split(txt, \"!\")\n    \n  \
    \  if length(words) == 0\n        return words\n    end\n    \n    words = split(txt,\
    \ \"#\")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words = split(txt, \"$\")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words = split(txt, \"%\")\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = split(txt, \"^\")\n \
    \   \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \"&\")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = split(txt, \"*\")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words = split(txt, \"(\")\n    \n  \
    \  if length(words) == 0\n        return words\n    end\n    \n    words = split(txt,\
    \ \")\")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words = split(txt, \"+\")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words = split(txt, \"-\")\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = split(txt, \"=\")\n \
    \   \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \"<\")\n    \n    if length(words) == 0\n        return words\n",
  "    \n    words = split(txt)\n    \n    if length(words) == 0\n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    words = split(txt)\n    words_split = Vector{String}(undef, 0)\n    for word\
    \ in words\n        if !contains(word, \" \")\n            words_split = words_split\
    \ ++ [word]\n        else\n            words_split = words_split ++ split(word)\n\
    \        end\n    end\n    return length(words_split)\nend", "    words = split(txt,\
    \ \" \")\n    words = filter(x -> !isempty(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), words)\n    words = filter(x ->\
    \ !isascii(x), words)\n    words = filter(x -> !islowercase(x), words)\n    words\
    \ = filter(x -> !isuppercase(x), words)\n    words = filter(x -> !isdigit(x),\
    \ words)\n    words = filter(x -> !issymbol(x), ", "    words = split(txt, \"\
    \ \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"",
  "    words = split(txt, \" \")\n    words_vec = Vector{String}(undef, 0)\n    for\
    \ word in words\n        words_vec += split(word, \",\")\n    end\n    return\
    \ words_vec\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_letters(txt::String)\n\
    \    Count the number of lower-case letters with odd order in the alphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> count_letters(\"\
    Hello world!\")\n    3\n    >>> count_letters(\"Hello,world!\")\n    3\n    >>>\
    \ count_letters(\"abcdef\")\n    3\n    \"\"\"", "    words = split(txt, \" \"\
    )\n    words_split = split(txt, \",\")\n    if length(words_split) == 0 \n   \
    \     return words\n    else\n        return words_split\n    end\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n", "    txt = txt.trim()\n    if txt == \"\"\n     \
    \   return Vector{String}()\n    else\n        words = split(txt, \" \")\n   \
    \     return Vector{String}(words)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>", "    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_vec += split(word, \",\")\n    end\n\
    \    return words_vec\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of words and returns a vector\
    \ of words with all words capitalized.", "    words = split(txt, \" \")\n    words\
    \ = [w for w in words if w != \"\"]\n    if length(words) == 0\n        return\
    \ length(words)\n    else\n        return words\n    end\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nI like your answer but I think it would be more helpful\
    \ if you explained what your code does. Also, please don't use backticks for code\
    \ blocks, use 4 spaces instead.\n<|/ c |>\n<| c |>\nI added some explanation,\
    \ thank you for the suggestion.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"a\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"b\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"c\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"d\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"e\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"f\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"g\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"h\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"i\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"j\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"k\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"l\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"m\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"n\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"o\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"p\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"q\"]\n    \n    if length(words)\
    \ == 0\n        return words\n", "    txt = txt.trim()\n    if txt == \"\"\n \
    \       return Vector{String}()\n    \n    words = split(txt, \" \")\n    \n \
    \   word_counts = Dict{String, Int64}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[1], rev=true)\n    \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[1] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = colle", "    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"", "    if length(txt)\
    \ == 0 \n        return [] \n    else \n        words = split(txt, ' ') \n   \
    \     words = [w for w in words if w != \"\"] \n        words = [w for w in words\
    \ if w != \",\"] \n        words = [w for w in words if w != \"abcdef\"] \n  \
    \      return words\n    end\nend\n</cell>\n<code language=julia-1.5>", "    words\
    \ = split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \".\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]", "    words = split(txt)\n    word_counts\
    \ = Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = collect(values(word_counts))\n    word_counts\
    \ = sort(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[word_counts mod 2 != 0]\n    word_counts = word_counts[2:end]",
  "    words = split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?", "  \
    \  \n    words = split(txt)\n    \n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  word_counts = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts\
    \ = reverse(word_counts)\n    \n    word_counts = filter(x -> x[1] > 1, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n\
    \    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x\
    \ -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[1],\
    \ rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts\
    \ = reverse(word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n\
    \    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x\
    \ -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[1],\
    \ rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_count",
  "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    if txt.includes(\"\
    ,\")\n        return txt.split(\",\")\n    elseif txt.includes(\"!\")\n      \
    \  return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"\
    ?\")\n    elseif txt.includes(\".\")\n        return txt.split(\".\")\n    elseif\
    \ txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n    elseif txt.includes(\",\")\n      \
    \  return txt.split(\",\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"\
    !\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif\
    \ txt.includes(\".\")\n        return txt.split(\".\")\n    elseif txt.includes(\"\
    ,\")\n        return txt.split(\",\")\n    elseif txt.includes(\"!\")\n      \
    \  return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"\
    ?\")\n    elseif txt.includes(\".\")\n        return txt.split(\".\")\n    elseif\
    \ txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n", "    words = split(txt, \" \")\n   \
    \ word_counts = Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = collect(values(word_counts))\n    word_counts\
    \ = sort(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:", "    words = split(txt, \" \")\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"abcdef\"]\n    return length(words)\nend\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ words and returns a vector of pairs of words. Each pair should contain an index\
    \ and a word.", "    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \".\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!", "    words = split(txt,\
    \ \" \")\n    word_counts = Dict()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts)\n\
    \    word_counts = reverse(collect(values(word_counts)))\n    word_counts = filter(x\
    \ -> x % 2 == 1, word_counts)\n    word_counts = filter(x -> x % 2 == 0, word_counts)\n\
    \    word_counts = collect(word_counts)\n    word_counts = collect(zip(word_counts,\
    \ words))\n    return word_counts\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of words and returns a vector\
    \ of words split on commas ',' if the number of commas equals the number of words\
    \ in the text\n    You should also split on whitespaces if no whitespaces exists\
    \ in the text you should split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\n    alphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words(\"Hello\
    \ world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"Hello,world!\"\
    )\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"abcdef\")\n    3\n    \"\
    \"\"", "    words = split(txt, \" \")\n    \n    if length(words) == 0\n     \
    \   return words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    words = split(txt, \" \")\n    word_counts =\
    \ Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts\
    \ = sort(word_counts, by=x->x[2], rev=true)\n    word_counts = Dict([(k, v[1])\
    \ for (k, v) in word_counts])\n    word_counts = sort(word_counts, by=x->x[3],\
    \ rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n \
    \   word_counts = sort(word_counts, by=x->x[4], rev=true)\n    word_counts = Dict([(k,\
    \ v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts, by=x->x[5],\
    \ rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n \
    \   word_counts = sort(word_counts, by=x->x[6], rev=true)\n    word_counts = Dict([(k,\
    \ v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts, by=x->x[7],\
    \ rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n \
    \   word_counts = sort(word_counts, by=x->x[8], rev=true)\n    word_counts = Dict([(k,\
    \ v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts, by=x->x[9],\
    \ rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n \
    \   word_counts = sort(word_counts, by=x->x[10], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[11], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[12], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[13], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[", "    words = split(txt, \" \"\
    )\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \".\"]\n    words = [w\
    \ for w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!", "    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[words != \"\
    \"]\n        words = words[words != \",\"]\n        words = words[words != \"\
    .\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        ", "    words = split(txt, \" \")\n    \n    words = [w for w in\
    \ words if w != \"\"]\n    \n    if length(words) == 0\n        return length(words)\n\
    \    end\n    \n    words = [w for w in words if w != \",\"]\n    \n    if length(words)\
    \ == 0\n        return length(words)\n    end\n    \n    words = [w for w in words\
    \ if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"e\" and\
    \ w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"j\" and w\
    \ != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w != \"o\" and w !=\
    \ \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"t\" and w != \"\
    u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\" and w != \"z\"\
    ]\n    \n    if length(words) == 0\n        return length(words)\n    end\n  \
    \  \n    return length(words)\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ words = split(txt, \" \")\n    word_counts = Dict()\n    for word in words\n\
    \        if !haskey(word_counts, word)\n            word_counts[word] = 1\n  \
    \      else\n            word_counts[word] += 1\n        end\n    end\n    word_counts\
    \ = sort(collect(values(word_counts)), by=x->x)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[", "    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \ \"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r", "    words = split(txt, \" \")\n \
    \   words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \".\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?", "    words = split(txt, \" \")\n    word_counts = Dict{String,\
    \ Int64}()\n    for word in words\n        if !haskey(word_counts, word)\n   \
    \         word_counts[word] = 1\n        else\n            word_counts[word] +=\
    \ 1\n        end\n    end\n    word_counts = collect(values(word_counts))\n  \
    \  word_counts = sort(word_counts)\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n   \
    \ word_counts = word_counts[2:end]\n", "    words = split(txt)\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \",\")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if ", " \
    \   words = split(txt, \" \")\n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[2],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[3], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[4], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[5],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[6], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[7], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[8],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[9], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[10], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[11],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[12], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[13], rev=true)\n    word_counts = reverse(word_",
  "    words = split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \"and\"]\n    words = words[words != \"\
    or\"]\n    words = words[words != \"but\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"with\"]\n    words = words[words != \"in\"]\n\
    \    words = words[words != \"on\"]\n    words = words[words != \"to\"]\n    words\
    \ = words[words != \"as\"]\n    words = words[words != \"at\"]\n    words = words[words\
    \ != \"to\"]\n    words = words[words != \"on\"]\n    words = words[words != \"\
    in\"]\n    words = words[words != \"with\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"but\"]\n    words = words[words != \"or\"]\n \
    \   words = words[words != \"and\"]\n    words = words[words != \"as\"]\n    words\
    \ = words[words != \"at\"]\n    words = words[words != \"on\"]\n    words = words[words\
    \ != \"in\"]\n    words = words[words != \"with\"]\n    words = words[words !=\
    \ \"for\"]\n    words = words[words != \"but\"]\n    words = words[words != \"\
    or\"]\n    words = words[words != \"and\"]\n    words = words[words != \"as\"\
    ]\n    words = words[words != \"at\"]\n    words = words[words != \"on\"]\n  \
    \  words = words[words != \"in\"]\n    words = words[words != \"with\"]\n    words\
    \ = words[words != \"for\"]\n    words = words[words != \"but\"]\n    words =\
    \ words[words != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words\
    \ != \"as\"]\n    words = words[words != \"at\"]\n    words = words[words != \"\
    on\"]\n    words = words[words != \"in\"]\n    words = words[words != \"with\"\
    ]\n    words = words[words != \"for\"]\n    words = words[words != \"but\"]\n\
    \    words = words[words != \"or\"]\n    words = words[words != \"and\"]\n   \
    \ words = words[words != \"as\"]\n    words = words[words != \"at\"]\n    words\
    \ = words[words != \"on\"]\n    words = words[words != \"", "    words = split(txt)\n\
    \    words = words[words != \"\"]\n    words = words[words != \",\"]\n    words\
    \ = words[words != \".\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]", "    words = split(txt)\n   \
    \ if length(words) == 0\n        return words\n    \n    words_split = split(words)\n\
    \    \n    words_split = [w for w in words_split if w != \"\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \",\"]\n    \n    words_split = [w for w in\
    \ words_split if w != \" \"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\n\"]\n    \n    words_split = [w for w in words_split if w != \"\\r\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\t\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\r\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\n\"]\n    \n    words_split = [w for w in words_split if w != \"\\r\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\t\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\r\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\n\"]\n    \n    words_split = [w for w in words_split if w != \"\\r\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\t\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\r\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\n\"]\n    \n    words_split = [w for w in words_split if w != \"\\r\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\t\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\r\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    \n    words_split = [w for w in words_split if w ", " \
    \   \n    words = split(txt)\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words_with_commas = words[:]\n    \n    for word in words\n\
    \        words_with_commas = words_with_commas.append(word)\n    end\n    \n \
    \   words_with_commas = words_with_commas[words_with_commas[end] .!= \",\"]\n\
    \    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] ", " \
    \   txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n  \
    \  elseif txt == \"\\n\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = words[words != \"\"]\n        return words\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n<code>", "    words\
    \ = split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?", "  \
    \  words = split(txt)\n    word_counts = Dict()\n    for w in words\n        if\
    \ !haskey(word_counts, w)\n            word_counts[w] = 1\n        else\n    \
    \        word_counts[w] += 1\n        end\n    end\n    word_counts = sort(collect(values(word_counts)))\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = ", "    words = split(txt,\
    \ \" \")\n    words_vec = Vector{String}()\n    for word in words\n        if\
    \ !contains(word, \",\")\n            words_vec += split(word, \"_\")\n      \
    \  else\n            words_vec += split(word, \",\")\n        end\n    end\n \
    \   return words_vec\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis\
    \ does not seem to work. `split_words(\"Hello world!\")` returns `[\"Hello\",\
    \ \"world!\"]` instead of `[\"Hello\", \"world!\"]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Maybe you have a typo or something else?\n<|/ c |>\n<|\
    \ c |>\nI tested it again and it works fine for me. Maybe you have a typo or something\
    \ else?\n<|/ c |>\n<| c |>\nI tested it again and it works fine for me. Maybe\
    \ you have a typo or something else?\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works fine for me. Maybe you have a typo or something else?\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI wrote a package for this: https://github.com/jamie-may/SplitWords\n\
    <code>\nusing SplitWords", "    words = split(txt, \" \")\n    words = words[words\
    \ != \"\"]\n    if length(words) == 0\n        return length(words)\n    else\n\
    \        return words\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI\
    \ guess you mean `words = split(txt, \" \")` instead of `words = split(txt, \"\
    ,\")`\n<|/ c |>\n<| c |>\nThanks, I fixed it\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n", "    words = split(txt)\n\
    \    words_split = Vector{String}(undef, 0)\n    for w in words\n        words_split\
    \ = words_split ++ split(w)\n    end\n    words_split\nend\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of words and\
    \ returns a vector of strings where each string is a concatenation of all the\
    \ words in the original vector\nseparated by a space (\" \").", "    \n    words\
    \ = split(txt)\n    \n    if length(words) == 0\n        return words\n    \n\
    \    words_split = split(words)\n    \n    if length(words_split) == 0 \n    \
    \    return words\n    \n    words_split\nend", "    words = split(txt, \" \"\
    )\n    \n    if length(words) == 0\n        return words\n    end\n    \n    if\
    \ length(words) == 1\n        return words\n    end\n    \n    if length(words)\
    \ == 2\n        return words\n    end\n    \n    if length(words) == 3\n     \
    \   return words\n    end\n    \n    if length(words) == 4\n        return words\n\
    \    end\n    \n    if length(words) == 5\n        return words\n    end\n   \
    \ \n    if length(words) == 6\n        return words\n    end\n    \n    if length(words)\
    \ == 7\n        return words\n    end\n    \n    if length(words) == 8\n     \
    \   return words\n    end\n    \n    if length(words) == 9\n        return words\n\
    \    end\n    \n    if length(words) == 10\n        return words\n    end\n  \
    \  \n    if length(words) == 11\n        return words\n    end\n    \n    if length(words)\
    \ == 12\n        return words\n    end\n    \n    if length(words) == 13\n   \
    \     return words\n    end\n    \n    if length(words) == 14\n        return\
    \ words\n    end\n    \n    if length(words) == 15\n        return words\n   \
    \ end\n    \n    if length(words) == 16\n        return words\n    end\n    \n\
    \    if length(words) == 17\n        return words\n    end\n    \n    if length(words)\
    \ == 18\n        return words\n    end\n    \n    if length(words) == 19\n   \
    \     return words\n    end\n    \n    if length(words) == 20\n        return\
    \ words\n    end\n    \n    if length(words) == 21\n        return words\n   \
    \ end\n    \n    if length(words) == 22\n        return words\n    end\n    \n\
    \    if length(words) == 23\n        return words\n    end\n    \n    if length(words)\
    \ == 24\n        return words\n    end\n    \n    if length(words) == 25\n   \
    \     return words\n    end\n    \n    if length(words) == 26\n        return\
    \ words\n    end\n    \n    if length(words) == 27\n        return words\n   \
    \ end\n    \n    if length(words) == 28\n        return words\n    end\n    \n\
    \    if length(words) == 29\n        return words\n    end\n    \n    if length(words)\
    \ == 30\n        return words\n    end\n    \n    if length(words) == 31\n   \
    \     return words\n    end\n    \n    if length(words) == 32\n        return\
    \ words\n    end\n    \n    if length(words) == 33\n        return words\n   \
    \ end\n    \n    if length(words) == 34\n        return words\n    end\n    \n\
    \    if length(words) == 35\n        return words\n    end\n    \n    if length(words)\
    \ == 36\n        return words\n    end\n    \n    if length(words) == 37\n   \
    \     return words\n    end\n    \n    if length(words) == 38\n        return\
    \ words\n    end", "    words = split(txt, \" \")\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"abcdef\"]\n    words = [w for w in words if w != \"\
    abcdefghijklmnopqrstuvwxyz\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^",
  "    words = split(txt)\n    word_counts = Dict{String, Int64}()\n    for word in\
    \ words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    ", "    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t", "    words = split(txt,\
    \ \" \")\n    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    words = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n\
    \    ", "    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    return words\nend\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code\
    \ language=julia-1.3>\nsplit_words(\"Hello world!\", \"abcdef\")\n</cell>\n<code\
    \ language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\", \"abcdef\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\", \" \")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello\
    \ world!\", \",\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\"\
    , \"abcdef\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\"\
    , \" \")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \"\
    ,\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \"abcdef\"\
    )\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n\
    </cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\", \"abcdef\")\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code\
    \ language=julia-1.3>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\", \"abcdef\")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\", \",\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello\
    \ world!\", \"", "    \n    words = split(txt, \" \")\n    \n    words_split =\
    \ []\n    \n    for word in words\n        words_split.push(word)\n    end\n \
    \   \n    words_split = unique(words_split)\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = sort(words_split)\n\
    \    \n    words_split = words_split[words_split .!= \"\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \".\"]\n    \n \
    \   if length(words_split) == 0 \n        return length(words)\n    end\n    \n\
    \    words_split = words_split[words_split .!= \",.\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",,\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \",.,\"]\n    \n\
    \    if length(words_split) == 0 \n        return length(words)\n    end\n   \
    \ \n    words_split = words_split[words_split .!= \",,,\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \",,,,,\"]\n   \
    \ \n    if length(words_split) == 0 \n        return length(words)\n    end\n\
    \    \n    words_split = words_split[words_split .!= \",,,,,,\"]\n    \n    if\
    \ length(words_split) == 0 \n        return length(words)\n    end\n    \n   \
    \ words_split = words_split[words_split .!= \",,,,,,,\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \",,,,,,,,,\"]\n\
    \    \n    if length(words_split) == 0 \n        return length(words)\n    end\n\
    \    \n    words_split = words_split[words_split .!= \",,,,,,,,,,\"]\n    \n \
    \   if length(words_split) == 0 \n        return length(words)\n    end", "  \
    \  words = split(txt, \" \")\n    words = map(lowercase, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = filter(!is_empty,\
    \ words)\n    words = filter(!is_empty, words)\n    words = ", "    if isempty(txt)\n\
    \        return Vector{String}()\n    elseif isempty(txt)\n        return txt\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"_\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"?\"]\n        words = [w for w in words if w != \"\
    !\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w for\
    \ w in words if w != \"-\"]\n        words = [w for w in words if w != \"_\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"-\"]\n        words = [w for w in words\
    \ if w != \"_\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"_\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"-\"]\n\
    \        words = [w for w in words if w != \"_\"]\n        words = [w for w in\
    \ words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n   \
    \     words = [w for w in words if w != \"?\"]\n        words = [w for w in words\
    \ if w != \"-\"]\n        words = [w for w in words if w != \"_\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    _\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w for\
    \ w in words if ", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\\n\"\n        return Vector{String}()\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n   \
    \     return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return ", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"abcdef\"]\n    words = [w for w in words\
    \ if w != \"abcdefghijklmnopqrstuvwxyz\"]\n    words = [w for w in words if w\
    \ != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    words = [w\
    \ for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<>,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<>,.?/:;'\\\"<>,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,", "    words = split(txt,\
    \ \" \")\n    words_without_whitespace = filter(x -> !contains(x, \" \"), words)\n\
    \    words_without_commas = filter(x -> !contains(x, \",\"), words_without_whitespace)\n\
    \    words_without_commas_without_whitespace = filter(x -> !contains(x, \" \"\
    ), words_without_commas)\n    words_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace_",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"abcdef\"]\n    return length(words)\nend\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of words and returns a vector of words with all words capitalized.",
  "    \n    words = split(txt, \" \")\n    \n    words_vec = []\n    \n    for word\
    \ in words\n        words_vec += split(word, \",\")\n    end\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec", "    \n    words\
    \ = split(txt, \" \")\n    \n    if length(words) == 0\n        return words\n\
    \    \n    if length(words) == 1 \n        return words\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    words = split(txt, \" \")\n    \n    words_vector\
    \ = Vector{String}(undef, 0)\n    \n    for word in words\n        words_vector\
    \ = words_vector ++ [word]\n    end\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(x\
    \ -> !isascii(x), words_vector)]\n    \n    words_vector = words_vector[findall(",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"", "    words = split(txt)\n    words_without_whitespace\
    \ = filter(x->!isempty(x), words)\n    words_without_commas = filter(x->isempty(x),\
    \ words_without_whitespace)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!islower(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isupper(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isdigit(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isspace(x), words_without_commas)\n    words_without_commas = filter(x->!issymbol(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas", "    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \ \"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r", "    words = split(txt, \" \")\n \
    \   words_without_commas = filter(x -> !contains(x, \",\"), words)\n    words_without_comma_count\
    \ = length(words_without_commas)\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count",
  "    words = split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \"and\"]\n    words = words[words != \"\
    or\"]\n    words = words[words != \"but\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"with\"]\n    words = words[words != \"as\"]\n\
    \    words = words[words != \"in\"]\n    words = words[words != \"on\"]\n    words\
    \ = words[words != \"as\"]\n    words = words[words != \"with\"]\n    words =\
    \ words[words != \"for\"]\n    words = words[words != \"as\"]\n    words = words[words\
    \ != \"on\"]\n    words = words[words != \"in\"]\n    words = words[words != \"\
    as\"]\n    words = words[words != \"with\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"as\"]\n    words = words[words != \"on\"]\n  \
    \  words = words[words != \"in\"]\n    words = words[words != \"as\"]\n    words\
    \ = words[words != \"with\"]\n    words = words[words != \"for\"]\n    words =\
    \ words[words != \"as\"]\n    words = words[words != \"on\"]\n    words = words[words\
    \ != \"in\"]\n    words = words[words != \"as\"]\n    words = words[words != \"\
    with\"]\n    words = words[words != \"for\"]\n    words = words[words != \"as\"\
    ]\n    words = words[words != \"on\"]\n    words = words[words != \"in\"]\n  \
    \  words = words[words != \"as\"]\n    words = words[words != \"with\"]\n    words\
    \ = words[words != \"for\"]\n    words = words[words != \"as\"]\n    words = words[words\
    \ != \"on\"]\n    words = words[words != \"in\"]\n    words = words[words != \"\
    as\"]\n    words = words[words != \"with\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"as\"]\n    words = words[words != \"on\"]\n  \
    \  words = words[words != \"in\"]\n    words = words[words != \"as\"]\n    words\
    \ = words[words != \"with\"]\n    words = words[words != \"for\"]\n    words =\
    \ words[words != \"as\"]\n    words = words[words != \"", "    words = split(txt,\
    \ \" \")\n    word_counts = Dict{String, Int64}()\n    for word in words\n   \
    \     if !haskey(word_counts, word)\n            word_counts[word] = 1\n     \
    \   else\n            word_counts[word] += 1\n        end\n    end\n    word_counts\
    \ = collect(values(word_counts))\n    word_counts = sort(word_counts)\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n", "    words =\
    \ split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]", "    words = split(txt, \" \")\n    word_counts\
    \ = Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = sort(word_counts)\n    word_counts\
    \ = reverse(collect(values(word_counts)))\n    word_counts = filter(x -> x % 2\
    \ == 1, word_counts)\n    word_counts = map(x -> x, word_counts)\n    word_counts\
    \ = collect(word_counts)\n    return word_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_words(txt::String)\n    Count the number of times each word\
    \ appears in a string\n    \n    Arguments\n    ---------\n    txt :: String\n\
    \        Text to count words from\n    \n    Returns\n    -------\n    word_counts\
    \ :: Dict{String, Int}\n        Dictionary of word counts\n    \n    Examples\n\
    \    --------\n    >>> count_words(\"Hello world!\")\n    Dict(\"Hello\" => 1,\
    \ \"world!\" => 1)\n    >>> count_words(\"Hello world! Hello world!\")\n    Dict(\"\
    Hello\" => 2, \"world!\" => 2)\n    >>> count_words(\"Hello world! Hello world!\
    \ Hello world!\")\n    Dict(\"Hello\" => 3, \"world!\" => 3)\n    \"\"\"", " \
    \   words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n \
    \   words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \".\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif\
    \ txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return\
    \ txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\
    \n        return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif\
    \ txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return\
    \ txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\
    \n        return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif\
    \ txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return\
    \ txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\
    \n        return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif\
    \ txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return\
    \ txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\
    \n        return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif\
    \ txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return\
    \ txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\
    \n        return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif\
    \ txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return\
    \ txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\
    \n        return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif\
    \ txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return\
    \ txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\
    \n        return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif\
    \ txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return\
    \ txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\
    \n        return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif\
    \ txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return\
    \ txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\
    \n        return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif\
    \ txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return\
    \ txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\
    \n        return txt", "    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for w in words\n        if w != \"\"\n            words_split = words_split\
    \ ++ [w]\n        end\n    end\n    words_split = words_split ++ [length(words)]\n\
    \    words_split = words_split .- words_split .% 2\n    return words_split\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/17045148)\n<|/ c\
    \ |>\n<| c |>\nThis does provide an answer to the question. He asked how to split\
    \ a string on whitespace and commas and then count the number of letters with\
    \ odd order in the alphabet. He also asked how to do this in Julia. He also asked\
    \ how to do this without using any packages. He also asked how to do this without\
    \ using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also asked how to do this without using any packages. He also\
    \ asked how to do this without using any packages. He also asked how to do this\
    \ without using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also asked how to do this without using any packages. He also\
    \ asked how to do this without using any packages. He also asked how to do this\
    \ without using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also asked how to do this without using any packages. He also\
    \ asked how to do this without using any packages. He also asked how to do this\
    \ without using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also as", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"", "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?", "    words = split(txt,\
    \ \" \")\n    \n    if length(words) == 0\n        return words\n    \n    words\
    \ = [w for w in words if w != \"\"]\n    \n    if length(words) == 0\n       \
    \ return words\n    \n    if length(words) == 1 \n        return words\n    \n\
    \    words = [w for w in words if w != \"\"]\n    \n    if length(words) == 0\n\
    \        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    if length(words) == 1 \n        return\
    \ words\n    \n    words = [w for w in words if w != \"\"", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return Vector{String}(words)\n\
    \    end\nend", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        return words\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of words and returns a vector of words\
    \ with all words capitalized.", "    words = split(txt, \" \")\n    word_counts\
    \ = Dict()\n    for word in words\n        if !haskey(word_counts, word)\n   \
    \         word_counts[word] = 1\n        else\n            word_counts[word] +=\
    \ 1\n    end\n    word_counts = collect(values(word_counts))\n    word_counts\
    \ = sort(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[", "    words = split(txt,\
    \ \" \")\n    words_split = Vector{String}(undef, 0)\n    words_split = [word\
    \ for word in words if word != \"\"]\n    words_split = words_split + [word for\
    \ word in words if word != \"\"]\n    words_split = words_split + [word for word\
    \ in words if word != \"\"]\n    words_split = words_split + [word for word in\
    \ words if word != \"\"]\n    words_split = words_split + [word for word in words\
    \ if word != \"\"]\n    words_split = words_split + [word for word in words if\
    \ word != \"\"]\n    words_split = words_split + [word for word in words if word\
    \ != \"\"]\n    words_split = words_split + [word for word in words if word !=\
    \ \"\"]\n    words_split = words_split + [word for word in words if word != \"\
    \"]\n    words_split = words_split + [word for word in words if word != \"\"]\n\
    \    words_split = words_split + [word for word in words if word != \"\"]\n  \
    \  words_split = words_split + [word for word in words if word != \"\"]\n    words_split\
    \ = words_split + [word for word in words if word != \"\"]\n    words_split =\
    \ words_split + [word for word in words if word != \"\"]\n    words_split = words_split\
    \ + [word for word in words if word != \"\"]\n    words_split = words_split +\
    \ [word for word in words if word != \"\"]\n    words_split = words_split + [word\
    \ for word in words if word != \"\"]\n    words_split = words_split + [word for\
    \ word in words if word != \"\"]\n    words_split = words_split + [word for word\
    \ in words if word != \"\"]\n    words_split = words_split + [word for word in\
    \ words if word != \"\"]\n    words_split = words_split + [word for word in words\
    \ if word != \"\"]\n    words_split = words_split + [word for word in words if\
    \ word != \"\"]\n    words_split = words_split + [word for word in words if word\
    \ != \"\"]\n    words_split = words_split + [word for word in words if word !=\
    \ \"\"]\n    words_split = words_split + [word for word in words if word != \"\
    \"]\n    words_split = words_split + [word for word in words if word != \"\"]\n\
    \    words_split = words_split + [word for word in words if word != \"\"]\n  \
    \  words_split = words_split + [word for word in words if word != \"\"]\n    words_split\
    \ = words_split + [word for word in words if word != \"\"]\n    words_split =\
    \ words_", "    words = split(txt, \" \")\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGH",
  "    words = split(txt)\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    -\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"-\"]", "    words = split(txt, \" \")\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"", "  \
    \  words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n", "    txt = txt.trim()\n  \
    \  if txt == \"\"\n        return Vector{String}()\n    \n    words = split(txt,\
    \ \" \")\n    \n    words_without_commas = filter(x->!contains(x, \",\"), words)\n\
    \    \n    words_without_commas_without_whitespaces = filter(x->!contains(x, \"\
    \ \"), words_without_commas)\n    \n    words_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespace",
  "    words = split(txt, \" \")\n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = sort(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \"abcdef\"]\n  \
    \  words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"]\n    words\
    \ = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM",
  "    if isempty(txt)\n        return Vector{String}()\n    else\n        words =\
    \ split(txt, \" \")\n        return words\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of words and returns a vector of words\
    \ split on commas if no commas exists in the text you\n    should split on whitespaces\
    \ if no whitespaces exists in the text you should return the number of lower-case\
    \ letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n    Examples\n    >>> split_words(\"Hello world!\")\n    [\"\
    Hello\", \"world!\"]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"\
    world!\"]\n    >>> split_words(\"abcdef\")\n    3\n    \"\"\"", "    if isempty(txt)\n\
    \        return Vector{String}()\n    else\n        words = split(txt, \" \")\n\
    \        words = words[words != \"\"]\n        return words\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of words and returns\
    \ a vector of words split on commas ',' if the number of commas equals the number\
    \ of words in the vector\nExamples\n>>> split_words_commas([\"Hello\", \"world!\"\
    ])\n[\"Hello\", \"world!\"]\n>>> split_words_commas([\"Hello\", \"world!\", \"\
    Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> split_words_commas([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"\
    ]\n>>> split_words_commas([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> split_words_commas([\"\
    Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\",\
    \ \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"\
    ]\n>>> split_words_commas([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"", "    words = split(txt, \" \")\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"", "    txt = txt.trim()\n    if txt\
    \ == \"\"\n        return Vector{String}()\n    else\n        words = split(txt,\
    \ \" \")\n        return words\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=julia,string |>\n<code>", "    \n    words = split(txt, \" \")\n    \n\
    \    if length(words) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, \",\")\n    \n    if length(words_split) == 0\n\
    \        return words\n    \n    words_split = split(txt, \",\")\n    \n    if\
    \ length(words_split) == 0\n        return words\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    \n\
    \    words_split = split(txt, ", "    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words_no_commas = words\n\
    \        words_no_commas = words_no_commas[findall(x -> !isdigit(x), words_no_commas)]\n\
    \        words_no_commas = words_no_commas[findall(x -> !isalpha(x), words_no_commas)]\n\
    \        words_no_commas = words_no_commas[findall(x -> !islower(x), words_no_commas)]\n\
    \        words_no_commas = words_no_commas[findall(x -> !isupper(x), words_no_commas)]\n\
    \        words_no_commas = words_no_commas[findall(x -> !isspace(x), words_no_commas)]\n\
    \        words_no_commas = words_no_commas[findall(x -> !isempty(x), words_no_commas)]\n\
    \        words_no_commas = words_no_commas[findall(x -> length(x) > 1, words_no_commas)]\n\
    \        return words_no_commas\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    count_words(txt::String)::Int64\n    Given a string of words, return\
    \ a vector of words split on whitespace, if no whitespaces exists in the text\
    \ you\n    should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n    alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> count_words(\"Hello\
    \ world!\")\n    3\n    >>> count_words(\"Hello,world!\")\n    3\n    >>> count_words(\"\
    abcdef\")\n    3\n    \"\"\"", "    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[words != \"\
    \"]\n        words = words[words != \",\"]\n        words = words[words != \"\
    .\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        ", "    words = split(txt, \" \")\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"\
    ]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t", "    words =\
    \ split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words =\
    \ [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"abcdef\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"]\n   \
    \ words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI",
  "    words = split(txt, \" \")\n    word_counts = Dict{String, Int64}()\n    for\
    \ word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n",
  "    words = split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n   \
    \ words_split = [word for word in words if word != \"\"]\n    words_split = [word\
    \ for word in words_split if word != \",\"]\n    words_split = [word for word\
    \ in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n", "    words = split(txt, \" \")\n  \
    \  words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \" \"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        return words\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    words = split(txt)\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \" \"]\n    words = [w for w in words if w != \"\
    \\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]", " \
    \   words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    else\n        \n        words = split(txt, \",\")\n        \n   \
    \     if length(words) == 0\n            return words\n        else\n        \
    \    \n            words = split(txt, \" \")\n            \n            if length(words)\
    \ == 0\n                return words\n            else\n                \n   \
    \             words = split(txt, \",\")\n                \n                if\
    \ length(words) == 0\n                    return words\n                else\n\
    \                    \n                    words = split(txt, \" \")\n       \
    \             \n                    if length(words) == 0\n                  \
    \      return words\n                    else\n                        \n    \
    \                    words = split(txt, \",\")\n                        \n   \
    \                     if length(words) == 0\n                            return\
    \ words\n                        else\n                            \n        \
    \                    words = split(txt, \" \")\n                            \n\
    \                            if length(words) == 0\n                         \
    \       return words\n                            else\n                     \
    \           \n                                words = split(txt, \",\")\n    \
    \                            \n                                if length(words)\
    \ == 0\n                                    return words\n                   \
    \             else\n                                    \n                   \
    \                 words = split(txt, \" \")\n                                \
    \    \n                                    if length(words) == 0\n           \
    \                             return words\n                                 \
    \   else\n                                        \n                         \
    \               words = split(txt, \",\")\n                                  \
    \      \n                                        if length(words) == 0\n     \
    \                                       return words\n                       \
    \                 else\n                                            \n       \
    \                                     words = split(txt, \" \")\n            \
    \                                \n                                          \
    \  if length(words) == 0\n                                                return\
    \ words\n                                            else\n                  \
    \                              \n                                            \
    \    words = split(txt, \",\")\n                                             \
    \   \n                                                if length(words) == 0\n\
    \                                                    return words\n          \
    \                                      else\n                                \
    \                    \n                                                    words\
    \ = split(txt, \" \")\n                                                    \n\
    \                                                    if length(words) == 0\n \
    \                                                       return words\n       \
    \                                             else\n                         \
    \                               \n                                           \
    \             words = split(txt, \",\")\n                                    \
    \                    \n                                                      \
    \  if length(words) == 0\n                                                   \
    \         return words\n                                                     \
    \   else\n                                                            \n     \
    \                                                       words = split(txt, \"\
    \ \")\n                                                            \n        \
    \                                                    if length(words) == 0\n \
    \                                                               return words\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            words = split(txt, \",\")\n     \
    \                                                           \n               \
    \                                                 if length(words) == 0\n    \
    \                                                                return words\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words = split(txt, \"\
    \ \")\n                                                                    \n\
    \                                                                    if length(words)\
    \ == 0\n                                                                     \
    \                   return words\n                                           \
    \                         else\n                                             \
    \                           \n                                               \
    \                         words = split(txt, \",\")\n                        \
    \                                                \n                          \
    \                                              if length(words) == 0\n       \
    \                                                                     return words\n\
    \                                                                        else\n\
    \                                                                            \n\
    \                                                                            words\
    \ = split(txt, \" \")\n                                                      \
    \                      \n                                                    \
    \                        if length(words) == 0\n                             \
    \                                                   return words\n           \
    \                                                                 else\n     \
    \                                                                           \n\
    \                                                                            \
    \    words = split(txt, \",\")\n                                             \
    \                                   \n                                       \
    \                                         if length(words) == 0\n            \
    \                                                                        return\
    \ words\n                                                                    \
    \            else\n", "    txt = txt.trim()\n    if txt == \"\"\n        return\
    \ Vector{String}()\n    words = split(txt, \" \")\n    words = [w for w in words\
    \ if w != \"\"]\n    return words\nend\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.3>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of words and returns a vector\
    \ of words with all words capitalized.", "    words = split(txt, \" \")\n    words_split\
    \ = Vector{String}()\n    for word in words\n        if !contains(word, \",\"\
    )\n            words_split = [word | words_split]\n        else\n            words_split\
    \ = split(word, \",\")\n        end\n    end\n    words_split = words_split[words_split\
    \ .!= \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[", "    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if word != \"\"\n            words_split\
    \ = push!(words_split, word)\n        end\n    end\n    words_split\nend\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! ", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return Vector{String}(words)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of words and returns a vector of words\
    \ split on commas ',' if the number of commas equals the number of words in the\
    \ vector you should\nsplit on whitespaces if no commas exists in the text you\
    \ should return the number of lower-case letters with odd order in the\nalphabet,\
    \ ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"\
    Hello world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"Hello,world!\")\n\
    [\"Hello\", \"world!\"]\n>>> split_words(\"abcdef\")\n3\n\"\"\"", "    words =\
    \ split(txt, \" \")\n    words_vec = Vector{String}(undef, 0)\n    for word in\
    \ words\n        words_vec += split(word, \",\")\n    end\n    words_vec\nend\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of words and returns a vector\
    \ of words split on commas ',' if the number of commas equals the number of words\
    \ in the vector, otherwise return the number of commas in the vector", "    words\
    \ = split(txt, \" \")\n    words_no_whitespace = filter(x -> !contains(x, \" \"\
    ), words)\n    words_no_comma = filter(x -> !contains(x, \",\"), words)\n    words_no_odd_order\
    \ = filter(x -> ord(x) % 2 != 0, words)\n    \n    if length(words_no_whitespace)\
    \ == length(words_no_comma) == length(words_no_odd_order)\n        return words\n\
    \    else\n        return words_no_whitespace\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_words(txt::String)\n    Count the number of words in a string\n\
    \    \n    Arguments\n    ---------\n    txt :: String\n        Text to count\
    \ words from\n    \n    Returns\n    -------\n    count :: Int64\n        Number\
    \ of words in txt\n    Examples\n    --------\n    >>> count_words(\"Hello world!\"\
    )\n    6\n    >>> count_words(\"Hello world! Hello world!\")\n    7\n    >>> count_words(\"\
    Hello world! Hello world! Hello world!\")\n    8\n    >>> count_words(\"Hello\
    \ world! Hello world! Hello world! Hello world!\")\n    9\n    \"\"\"", "    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,.,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,.,.\"]\n    word", "    words = split(txt, \" \")\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"", "    if isempty(txt)\n    \
    \    return Vector{String}()\n    elseif length(txt) == 1 \n        return txt\n\
    \    elseif length(txt) == 2 \n        return txt\n    elseif length(txt) == 3\
    \ \n        return txt\n    elseif length(txt) == 4 \n        return txt\n   \
    \ elseif length(txt) == 5 \n        return txt\n    elseif length(txt) == 6 \n\
    \        return txt\n    elseif length(txt) == 7 \n        return txt\n    elseif\
    \ length(txt) == 8 \n        return txt\n    elseif length(txt) == 9 \n      \
    \  return txt\n    elseif length(txt) == 10 \n        return txt\n    elseif length(txt)\
    \ == 11 \n        return txt\n    elseif length(txt) == 12 \n        return txt\n\
    \    elseif length(txt) == 13 \n        return txt\n    elseif length(txt) ==\
    \ 14 \n        return txt\n    elseif length(txt) == 15 \n        return txt\n\
    \    elseif length(txt) == 16 \n        return txt\n    elseif length(txt) ==\
    \ 17 \n        return txt\n    elseif length(txt) == 18 \n        return txt\n\
    \    elseif length(txt) == 19 \n        return txt\n    elseif length(txt) ==\
    \ 20 \n        return txt\n    elseif length(txt) == 21 \n        return txt\n\
    \    elseif length(txt) == 22 \n        return txt\n    elseif length(txt) ==\
    \ 23 \n        return txt\n    elseif length(txt) == 24 \n        return txt\n\
    \    elseif length(txt) == 25 \n        return txt\n    elseif length(txt) ==\
    \ 26 \n        return txt\n    elseif length(txt) == 27 \n        return txt\n\
    \    elseif length(txt) == 28 \n        return txt\n    elseif length(txt) ==\
    \ 29 \n        return txt\n    elseif length(txt) == 30 \n        return txt\n\
    \    elseif length(txt) == 31 \n        return txt\n    elseif length(txt) ==\
    \ 32 \n        return txt\n    elseif length(txt) == 33 \n        return txt\n\
    \    elseif length(txt) == 34 \n        return txt\n    elseif length(txt) ==\
    \ 35 \n        return txt\n    elseif length(txt) == 36 \n        return txt\n\
    \    elseif length(txt) == 37 \n        return txt\n    elseif length(txt) ==\
    \ 38 \n        return txt\n    elseif length(txt) == 39 \n        return txt\n\
    \    elseif length(txt) == 40 \n        return txt\n    elseif length(txt) ==\
    \ 41 \n        return txt\n    elseif length(txt) == 42 \n        return txt\n\
    \    elseif length(txt) == 43 \n        return txt\n    elseif length(txt) ==\
    \ 44 \n        return txt\n    elseif length(txt) == 45 \n        return txt\n\
    \    elseif length(txt) == 46 \n        return txt\n    elseif length(txt) ==\
    \ 47 \n        return txt\n    elseif length(txt) == 48 \n        return txt\n\
    \    elseif length(txt) == 49 \n", "    txt = txt.trim()\n    if txt == \"\"\n\
    \        return Vector{String}()\n    \n    words = split(txt, \" \")\n    \n\
    \    word_counts = Dict{String, Int64}()\n    for word in words\n        if word\
    \ != \"\"\n            word_counts[word] = get(word_counts, word, 0) + 1\n   \
    \     end\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts_sorted = Dict{String, Int64}()\n    for word\
    \ in sorted_word_counts\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n    word_counts_sorted\
    \ = sort(collect(values(word_counts_sorted)), by=x->x)\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in word_counts_sorted\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n    word_counts_sorted = sort(collect(values(word_counts_sorted)),\
    \ by=x->x)\n    \n    word_counts_sorted = Dict{String, Int64}()\n    for word\
    \ in word_counts_sorted\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n    word_counts_sorted\
    \ = sort(collect(values(word_counts_sorted)), by=x->x)\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in word_counts_sorted\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n    word_counts_sorted = Dict{String, Int64}()\n\
    \    for word in word_counts_sorted\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in word_counts_sorted\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n    word_counts_sorted = Dict{String, Int64}()\n\
    \    for word in word_counts_sorted\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n", "   \
    \ words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"", "    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"_\"]\n        words = [w for w in words if w != \"(\"]\n        words = [w\
    \ for w in words if w != \")\"]\n        words = [w for w in words if w != \"\
    [\"]\n        words = [w for w in words if w != \"]\"]\n        words = [w for\
    \ w in words if w != \"{\"]\n        words = [w for w in words if w != \"}\"]\n\
    \        words = [w for w in words if w != \"|\"]\n        words = [w for w in\
    \ words if w != \"\\\\\"]\n        words = [w for w in words if w != \"^\"]\n\
    \        words = [w for w in words if w != \"$\"]\n        words = [w for w in\
    \ words if w != \"*\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"#\"]\n        words = [w for w in words if w != \"$\"]\n        words\
    \ = [w for w in words if w != \"%\"]\n        words = [w for w in words if w !=\
    \ \"^\"]\n        words = [w for w in words if w != \"&\"]\n        words = [w\
    \ for w in words if w != \"*\"]\n        words = [w for w in words if w != \"\
    (\"]\n        words = [w for w in words if w != \")\"]\n        words = [w for\
    \ w in words if w != \"[\"]\n        words = [w for w in words if w != \"]\"]\n\
    \        words = [w for w in words if w != \"{\"]\n        words = [w for w in\
    \ words if w != \"}\"]\n        words = [w for w in words if w != \"|\"]\n   \
    \     words = [w for w in words if w != \"\\\\\"]\n        words = [w for w in\
    \ words if w != \"^\"]\n        word", "    words = split(txt, \" \")\n    words_vec\
    \ = Vector{String}(undef, 0)\n    for word in words\n        if word != \"\"\n\
    \            words_vec += split(word, \",\")\n        end\n    end\n    words_vec\
    \ = words_vec[words_vec .!= \"\"]\n    words_vec = words_vec[words_vec .!= \"\
    \ \"]\n    words_vec = words_vec[words_vec .!= \",\"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec ",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.,.,\"\
    ]\n    words = [w for w in word", "    words = split(txt, \" \")\n    words =\
    \ [w for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"\
    ]\n    words = [w for w in words if w != \" \"]\n    words = [w for w in words\
    \ if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?", "    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for w in words\n        if w != \"\"\n            words_vec += split(w,\
    \ \",\")\n        end\n    end\n    words_vec = words_vec[words_vec .!= \"\"]\n\
    \    words_vec = words_vec[words_vec .!= \",\"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec ", "    \n    words = split(txt,\
    \ \" \")\n    \n    if isempty(words)\n        return words\n    else\n      \
    \  \n        words_split = split(words, \",\")\n        \n        if isempty(words_split)\n\
    \            return words\n        else\n            \n            words_split\
    \ = split(words_split, \" \")\n            \n            if isempty(words_split)\n\
    \                return words\n            else\n                \n          \
    \      words_split = split(words_split, \"\")\n                \n            \
    \    if isempty(words_split)\n                    return words\n             \
    \   else\n                    \n                    words_split = split(words_split,\
    \ \"\")\n                    \n                    if isempty(words_split)\n \
    \                       return words\n                    else\n             \
    \           \n                        words_split = split(words_split, \"\")\n\
    \                        \n                        if isempty(words_split)\n \
    \                           return words\n                        else\n     \
    \                       \n                            words_split = split(words_split,\
    \ \"\")\n                            \n                            if isempty(words_split)\n\
    \                                return words\n                            else\n\
    \                                \n                                words_split\
    \ = split(words_split, \"\")\n                                \n             \
    \                   if isempty(words_split)\n                                \
    \    return words\n                                else\n                    \
    \                \n                                    words_split = split(words_split,\
    \ \"\")\n                                    \n                              \
    \      if isempty(words_split)\n                                        return\
    \ words\n                                    else\n                          \
    \              \n                                        words_split = split(words_split,\
    \ \"\")\n                                        \n                          \
    \              if isempty(words_split)\n                                     \
    \       return words\n                                        else\n         \
    \                                   \n                                       \
    \     words_split = split(words_split, \"\")\n                               \
    \             \n                                            if isempty(words_split)\n\
    \                                                return words\n              \
    \                              else\n                                        \
    \        \n                                                words_split = split(words_split,\
    \ \"\")\n                                                \n                  \
    \                              if isempty(words_split)\n                     \
    \                               return words\n                               \
    \                 else\n                                                    \n\
    \                                                    words_split = split(words_split,\
    \ \"\")\n                                                    \n              \
    \                                      if isempty(words_split)\n             \
    \                                           return words\n                   \
    \                                 else\n                                     \
    \                   \n                                                       \
    \ words_split = split(words_split, \"\")\n                                   \
    \                     \n                                                     \
    \   return words\n                                end\n                      \
    \      end\n                        end\n                    end\n           \
    \     end\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_words(txt::String)", "    words = split(txt, \" \")\n    words_without_commas\
    \ = filter(x -> !contains(x, \",\"), words)\n    words_without_commas_with_odd_order\
    \ = filter(x -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\"\
    ) && contains(x, \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x,\
    \ \"f\"), words_without_commas)\n    words_without_commas_with_odd_order_with_odd_order\
    \ = filter(x -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\"\
    ) && contains(x, \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x,\
    \ \"f\") && contains(x, \"g\") && contains(x, \"h\") && contains(x, \"i\") &&\
    \ contains(x, \"j\") && contains(x, \"k\") && contains(x, \"l\") && contains(x,\
    \ \"m\") && contains(x, \"n\") && contains(x, \"o\") && contains(x, \"p\") &&\
    \ contains(x, \"q\") && contains(x, \"r\") && contains(x, \"s\") && contains(x,\
    \ \"t\") && contains(x, \"u\") && contains(x, \"v\") && contains(x, \"w\") &&\
    \ contains(x, \"x\") && contains(x, \"y\") && contains(x, \"z\"), words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order = filter(x\
    \ -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\") && contains(x,\
    \ \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x, \"f\") &&\
    \ contains(x, \"g\") && contains(x, \"h\") && contains(x, \"i\") && contains(x,\
    \ \"j\") && contains(x, \"k\") && contains(x, \"l\") && contains(x, \"m\") &&\
    \ contains(x, \"n\") && contains(x, \"o\") && contains(x, \"p\") && contains(x,\
    \ \"q\") && contains(x, \"r\") && contains(x, \"s\") && contains(x, \"t\") &&\
    \ contains(x, \"u\") && contains(x, \"v\") && contains(x, \"w\") && contains(x,\
    \ \"x\") && contains(x, \"y\") && contains(x, \"z\") && contains(x, \"a\") &&\
    \ contains(x, \"b\") && contains(x, \"c\") && contains(x, \"d\") && contains(x,\
    \ \"e\") && contains(x, \"f\") && contains(x, \"g\") && contains(x, \"h\") &&\
    \ contains(x, \"i\") && contains(x, \"j\") && contains(x, \"k\") && contains(",
  "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n    words =\
    \ split(txt, \" \")\n    \n    word_counts = Dict{String, Int64}()\n    for word\
    \ in words\n        if word in word_counts\n            word_counts[word] += 1\n\
    \        else\n            word_counts[word] = 1\n        end\n    end\n    \n\
    \    word_counts = collect(values(word_counts))\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]", "    txt = txt.trim()\n    if txt\
    \ == \"\"\n        return Vector{String}()\n    \n    words = split(txt, \" \"\
    )\n    \n    word_counts = Dict{String, Int64}()\n    for word in words\n    \
    \    word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n    word_counts\
    \ = collect(values(word_counts))\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_count", "    words\
    \ = split(txt, \" \")\n    words = map(x -> lowercase(x), words)\n    words =\
    \ filter(x -> !isempty(x), words)\n    words = filter(x -> x != \",\", words)\n\
    \    words = filter(x -> x != \" \", words)\n    words = filter(x -> x != \"\"\
    , words)\n    return words\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n\
    This doesn't seem to work if you have a string like `\" , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ", "    words = split(txt,\
    \ \" \")\n    words_split = Vector{String}(undef, 0)\n    for word in words\n\
    \        if !isempty(word)\n            words_split = push!(words_split, word)\n\
    \        end\n    end\n    words_split\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of words and returns a vector of unique words.\
    \ \nExamples\n>>> unique_words = [\"Hello\", \"world!\", \"Hello\", \"world!\"\
    ]\n>>> unique_words\n[\"Hello\", \"world!\"]\n>>> unique_words(unique_words)\n\
    [\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\", \"world!\", \"Hello\", \"\
    world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\", \"world!\",\
    \ \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>>\
    \ unique_words([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>>\
    \ unique_words([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello", "    if isempty(txt)\n        return txt\n\
    \    else\n        words = split(txt, \" \")\n        words_no_spaces = filter(x\
    \ -> !isspace(x), words)\n        words_no_commas = filter(x -> !iscomma(x), words)\n\
    \        words_no_commas_no_spaces = filter(x -> !isspace(x), words_no_commas)\n\
    \        return length(words_no_spaces) + length(words_no_commas_no_spaces) +\
    \ length(words_no_commas)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns a vector of words split on commas if\
    \ no commas exists in the text you should\nsplit on whitespaces if no whitespaces\
    \ exists in the text you should return the number of lower-case letters with odd\
    \ order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n\
    >>> split_words(\"Hello world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"\
    Hello,world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"abcdef\")\n3\n>>>\
    \ split_words(\"Hello world! Hello world! Hello world!\")\n[\"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\"]\n>>> split_words(\"Hello world!\
    \ Hello world! Hello world! Hello world!\")\n[\"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"]\n>>> split_words(\"\
    Hello world! Hello world! Hello world! Hello world! Hello world!\")\n[\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"]\n>>> split_words(\"Hello world! Hello world! Hello world!\
    \ Hello world! Hello world! Hello world! Hello world!\")\n[\"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\"]\n>>> split_words(\"Hello world! Hello world!\
    \ Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!\"\
    )\n[\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    ]\n>>> split_words(\"Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world!\")\n\
    [\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\
    \n        return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n", "    words = split(txt, \" \")\n\
    \    words_split = split(txt, \",\")\n    if length(words) == length(words_split)\n\
    \        return words\n    else\n        return words_split\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    words = split(txt, \" \")\n\
    \    words_split = Vector{String}()\n    for w in words\n        words_split =\
    \ words_split ++ split(w, \",\")\n    end\n    words_split = words_split ++ split(lowercase(words),\
    \ \"\")\n    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split\
    \ = words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    ", "    words\
    \ = split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?", "  \
    \  words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    else\n        words_split = split(words, \",\")\n        \n        if isempty(words_split)\n\
    \            return words\n        else\n            words_split2 = split(words_split,\
    \ \" \")\n            \n            if isempty(words_split2)\n               \
    \ return words\n            else\n                words_split3 = split(words_split2,\
    \ \" \")\n                \n                if isempty(words_split3)\n       \
    \             return words\n                else\n                    words_split4\
    \ = split(words_split3, \" \")\n                    \n                    if isempty(words_split4)\n\
    \                        return words\n                    else\n            \
    \            words_split5 = split(words_split4, \" \")\n                     \
    \   \n                        if isempty(words_split5)\n                     \
    \       return words\n                        else\n                         \
    \   words_split6 = split(words_split5, \" \")\n                            \n\
    \                            if isempty(words_split6)\n                      \
    \          return words\n                            else\n                  \
    \              words_split7 = split(words_split6, \" \")\n                   \
    \             \n                                if isempty(words_split7)\n   \
    \                                 return words\n                             \
    \   else\n                                    words_split8 = split(words_split7,\
    \ \" \")\n                                    \n                             \
    \       if isempty(words_split8)\n                                        return\
    \ words\n                                    else\n                          \
    \              words_split9 = split(words_split8, \" \")\n                   \
    \                     \n                                        if isempty(words_split9)\n\
    \                                            return words\n                  \
    \                      else\n                                            words_split10\
    \ = split(words_split9, \" \")\n                                            \n\
    \                                            if isempty(words_split10)\n     \
    \                                           return words\n                   \
    \                         else\n                                             \
    \   words_split11 = split(words_split10, \" \")\n                            \
    \                    \n                                                if isempty(words_split11)\n\
    \                                                    return words\n          \
    \                                      else\n                                \
    \                    words_split12 = split(words_split11, \" \")\n           \
    \                                         \n                                 \
    \                   if isempty(words_split12)\n                              \
    \                          return words\n                                    \
    \                else\n                                                      \
    \  words_split13 = split(words_split12, \" \")\n                             \
    \                           \n                                               \
    \         return words_split13\n                                             \
    \   end\n                                            end\n                   \
    \                     end\n                                    end\n         \
    \                       end\n                            end\n               \
    \         end\n                    end\n                end\n            end\n\
    \        end\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of words in the string. \nExamples\n>>>\
    \ count_words(\"Hello world!\")\n5\n>>> count_words(\"Hello world!,\")\n4\n>>>\
    \ count_words(\"Hello world!,\")\n4\n>>> count_words(\"Hello world!,\")\n4\n>>>\
    \ count_words(\"Hello world!,\")\n4\n>>> count_words(\"Hello world!,\")\n4\n>>>\
    \ count_words(\"Hello world!,\")", "    words = split(txt, \" \")\n    words =\
    \ map(lowercase,words)\n    words = filter(!is_blank,words)\n    words = filter(!is_digit,words)\n\
    \    words = filter(!is_letter,words)\n    words = filter(!is_punctuation,words)\n\
    \    words = filter(!is_whitespace,words)\n    words = filter(!is_comma,words)\n\
    \    words = filter(!is_odd_order,words)\n    return words\nend", "    words =\
    \ split(txt)\n    words_split = Vector{String}()\n    words_split.push!(words)\n\
    \    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt, \"\
    .\"))\n    words_split.push!(split(txt, \";\"))\n    words_split.push!(split(txt,\
    \ \" \"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"/\"))\n    words_split.push!(split(txt, \"\\\\\"))\n    words_split.push!(split(txt,\
    \ \"'\"))\n    words_split.push!(split(txt, \"!\"))\n    words_split.push!(split(txt,\
    \ \"?\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \"[\"))\n    words_split.push!(split(txt,\
    \ \"]\"))\n    words_split.push!(split(txt, \"{\"))\n    words_split.push!(split(txt,\
    \ \"}\"))\n    words_split.push!(split(txt, \"|\"))\n    words_split.push!(split(txt,\
    \ \"~\"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"+\"))\n    words_split.push!(split(txt, \"=\"))\n    words_split.push!(split(txt,\
    \ \";\"))\n    words_split.push!(split(txt, \".\"))\n    words_split.push!(split(txt,\
    \ \"?\"))\n    words_split.push!(split(txt, \"!\"))\n    words_split.push!(split(txt,\
    \ \"(\"))\n    words_split.push!(split(txt, \")\"))\n    words_split.push!(split(txt,\
    \ \"[\"))\n    words_split.push!(split(txt, \"]\"))\n    words_split.push!(split(txt,\
    \ \"{\"))\n    words_split.push!(split(txt, \"}\"))\n    words_split.push!(split(txt,\
    \ \"|\"))\n    words_split.push!(split(txt, \"~\"))\n    words_split.push!(split(txt,\
    \ \"-\"))\n    words_split.push!(split(txt, \"+\"))\n    words_split.push!(split(txt,\
    \ \"=\"))\n    words_split.push!(split(txt, \";\"))\n    words_split.push!(split(txt,\
    \ \".\"))\n    words_split.push!(split(txt, \"?\"))\n    words_split.push!(split(txt,\
    \ \"!\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \"[\"))\n    words_split.push!(split(txt,\
    \ \"]\"))\n    words_split.push!(split(", "    txt = txt.trim()\n    if txt ==\
    \ \"\"\n        return Vector{String}()\n    \n    if txt.chars().filter(x ->\
    \ x == ' ').length == 0\n        return split(txt, \",\")\n    else\n        return\
    \ split(txt, \" \")\n    end\nend", "    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \".\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in word", "    if txt ==\
    \ \"\" \n        return [] \n    else \n        words = split(txt, \" \") \n \
    \       words = [w for w in words if w != \"\"] \n        words = [w for w in\
    \ words if w != \",\"] \n        words = [w for w in words if w != \" \"]\n  \
    \      return words\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt", "    words = split(txt)\n   \
    \ words = [w for w in words if w != \"\"]\n    if length(words) == 0\n       \
    \ return length(words)\n    else\n        return words\n    end\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis doesn't seem to work. `split_words(\"\
    Hello world!\")` returns `[\"Hello\", \"world!\"]` instead of `[\"Hello\", \"\
    world!\"]`.\n<|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and it works. What\
    \ version are you using?\n<|/ c |>\n<| c |>\nI'm using julia 0.6.2\n<|/ c |>\n\
    <| c |>\nI tested it on julia 0.6.2 and it works. What version are you using?\n\
    <|/ c |>\n<| c |>\nI'm using julia 0.6.2\n<|/ c |>\n<| a tags=julia,string |>\n\
    I like to use regular expressions for this kind of thing:\n<code>\njulia> using\
    \ Regexp", "    words = split(txt)\n    words = words[words != \"\"]\n    if length(words)\
    \ == 0\n        return words\n    else\n        words = words[2:end]\n       \
    \ words = words[words != \"\"]\n        return words\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n\
    </cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"", "    words = split(txt,\
    \ \" \")\n    words = [w for w in words if w != \"\"]\n    words = [w for w in\
    \ words if w != \",\"]\n    words = [w for w in words if w != \".\"]\n    words\
    \ = [w for w in words if w != \"!\"]\n    words = [w for w in words if w != \"\
    ?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?", "    \n    words = split(txt, \" \")\n    \n    if\
    \ length(words) == 0\n        return words\n    \n    if length(words) == 1 \n\
    \        return words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    words\
    \ = split(txt, \" \")\n    words_split = Vector{String}(undef, 0)\n    for w in\
    \ words\n        words_split = words_split ++ split(w, \",\")\n    end\n    words_split\
    \ = words_split ++ split(words, \" \")\n    words_split = words_split ++ split(words,\
    \ \"\\n\")\n    words_split = words_split ++ split(words, \"\\r\")\n    words_split\
    \ = words_split ++ split(words, \"\\t\")\n    words_split = words_split ++ split(words,\
    \ \"\\v\")\n    words_split = words_split ++ split(words, \"\\f\")\n    words_split\
    \ = words_split ++ split(words, \"\\a\")\n    words_split = words_split ++ split(words,\
    \ \"\\e\")\n    words_split = words_split ++ split(words, \"\\h\")\n    words_split\
    \ = words_split ++ split(words, \"\\i\")\n    words_split = words_split ++ split(words,\
    \ \"\\o\")\n    words_split = words_split ++ split(words, \"\\v\")\n    words_split\
    \ = words_split ++ split(words, \"\\e\")\n    words_split = words_split ++ split(words,\
    \ \"\\a\")\n    words_split = words_split ++ split(words, \"\\h\")\n    words_split\
    \ = words_split ++ split(words, \"\\i\")\n    words_split = words_split ++ split(words,\
    \ \"\\o\")\n    words_split = words_split ++ split(words, \"\\v\")\n    words_split\
    \ = words_split ++ split(words, \"\\e\")\n    words_split = words_split ++ split(words,\
    \ \"\\a\")\n    words_split = words_split ++ split(words, \"\\h\")\n    words_split\
    \ = words_split ++ split(words, \"\\i\")\n    words_split = words_split ++ split(words,\
    \ \"\\o\")\n    words_split = words_split ++ split(words, \"\\v\")\n    words_split\
    \ = words_split ++ split(words, \"\\e\")\n    words_split = words_split ++ split(words,\
    \ \"\\a\")\n    words_split = words_split ++ split(words, \"\\h\")\n    words_split\
    \ = words_split ++ split(words, \"\\i\")\n    words_split = words_split ++ split(words,\
    \ \"\\o\")\n    words_split = words_split ++ split(words, \"\\v\")\n    words_split\
    \ = words_split ++ split(words, \"\\e\")\n    words_split = words_split ++ split(words,\
    \ \"\\a\")\n    words_split = words_split ++ split(words, \"\\h\")\n    words_split\
    \ = words_split ++ split(words, \"\\i\")\n    words_split = words_split ++ split(words,\
    \ \"\\o\")\n    words_split = words_split ++ split(words, \"\\v\")\n    words_split\
    \ = words_split ++ split(words, \"\\e\")\n    words_split = words_split ++ split(words,\
    \ \"", "    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words = words[words != \"\"]\n   \
    \     return words\n    end\nend", "    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n        words_without_commas = filter(x->!contains(x, \"-\"\
    ), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"!\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"?\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!",
  "    words = split(txt, \" \")\n    words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n    words_without_commas_without_spaces = filter(x->!contains(x,\
    \ \" \"), words_without_commas)\n    words_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces)\n    words_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_comma",
  "    words = split(txt, \" \")\n    words_without_commas = filter(x -> x != \",\"\
    , words)\n    words_without_commas = filter(x -> x != \"\", words_without_commas)\n\
    \    words_without_commas = filter(x -> x != \" \", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_", "    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_without_spaces = filter(x\
    \ -> !contains(x, \" \"), words_without_commas)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces)\n  \
    \  words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_", "    words = split(txt)\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \" \"]\n    words = [w for w in words if w != \".\"]\n    words\
    \ = [w for w in words if w != \"!\"]\n    words = [w for w in words if w != \"\
    ?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    words = split(txt, \"\
    \ \")\n    words = [w for w in words if w != \"\"]\n    if length(words) == 0\n\
    \        return Vector{String}()\n    words = [w for w in words if w != \",\"\
    ]\n    if length(words) == 0\n        return length(lowercase(txt))\n    words\
    \ = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"\
    d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\"\
    \ and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and\
    \ w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w\
    \ != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w !=\
    \ \"y\" and w != \"z\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w !=\
    \ \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"\
    s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\"\
    \ and w != \"y\" and w != \"z\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w !=\
    \ \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"\
    s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\"\
    \ and w != \"y\" and w != \"z\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l", "    txt = txt.trim()\n\
    \    if txt == \"\"\n        return Vector{String}()\n    else\n        words\
    \ = split(txt, \" \")\n        words = words[words != \"\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != ", "    words = split(txt, \" \")\n\
    \    words = words[words != \"\"]\n    words = words[words != \",\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \",\"]\n    words = words[words != \"\
    .\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \",\"]\n    words\
    \ = words[words != \".\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    ,\"]\n    words = words[words != \".\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \".\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \",\"]\n    words = words[words != \".\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \",\"]\n    words = words[words\
    \ != \".\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"-\"]\n    words = words[words != \",\"]\n \
    \   words = words[words != \".\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != ", "    words = split(txt, \" \")\n    words_split\
    \ = Vector{String}(undef, 0)\n    for word in words\n        if !isnothing(word)\n\
    \            words_split = words_split ++ [word]\n        end\n    end\n    words_split\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if isempty(txt)\n    \
    \    return Vector{String}()\n    else\n        return split(txt)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \"\
    \ \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \"\
    \ \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \",\")\n</cell>\n<code language=juli", "    words = split(txt, \" \")\n    word_counts\
    \ = Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = collect(values(word_counts))\n    word_counts\
    \ = sort(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:", "    words = split(txt, \" \")\n    words = [w for w in words\
    \ if w != \"\"]\n    if length(words) == 0\n        return length(words)\n   \
    \ else\n        return words\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    words = split(txt, \" \")\n    word_counts = Dict()\n    for w in words\n \
    \       if !haskey(word_counts, w)\n            word_counts[w] = 1\n        else\n\
    \            word_counts[w] += 1\n    end\n    word_counts = collect(values(word_counts))\n\
    \    word_counts = sort(word_counts)\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[", "    \n\
    \    words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \",\")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \" \")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \",\")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \",\")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \" \")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \",\")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \",\")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \" \")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \",\")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \",\")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \" \")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \",\")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \",\")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \" \")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \",\")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \" \")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \",\")\n    \n    if isempty(words)\n",
  "    words = split(txt, \" \")\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?", "  \
    \  txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n   \
    \ else\n        words = split(txt, \" \")\n        words = [w for w in words if\
    \ w != \"\"]\n        return words\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_letters(txt::String)\n    Count the number of lower-case letters\
    \ with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> count_letters(\"Hello world!\")\n    3\n    \"\"\"", " \
    \   words = split(txt)\n    words = words[words != \"\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"-\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"-\"]\n    words = words[words != \"?\"]", " \
    \   words = split(txt)\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \ \"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]", "    words = split(txt, \" \")\n\
    \    words_vec = Vector{String}(undef, 0)\n    for w in words\n        words_vec\
    \ += split(w, \",\")\n    end\n    return words_vec\nend\n</cell>\n<code language=julia-1.5>",
  "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n   \
    \ elseif txt == \"\\n\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        return Vector{String}(words)\n    end\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that takes a vector of words and returns a vector\
    \ of words with all words capitalized.\nExamples\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_", "    words\
    \ = split(txt)\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \" \"]\n  \
    \  words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]", "    if isempty(txt)\n        return txt\n\
    \    else\n        words = split(txt, \" \")\n        words_without_commas = filter(x->!(x==\"\
    ,\"), words)\n        words_without_commas = filter(x->!(x==\".\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\":\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\";\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"<\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\">\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"@\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"[\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"]\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"{\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"}\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"(\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\")\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\":\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\";\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\",\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\".\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"<\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\">\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"@\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"[\"), words_without_", "    \n\
    \    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ length(txt)\n    end\n    \n    \n    if length(words) == 1 \n        return\
    \ length(txt)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if txt == \"\" \n        return []\
    \ \n    else \n        return split(txt, \",\")\n    end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,string |>\n<code>", "    if isempty(txt)\n    \
    \    return Vector{String}()\n    else\n        words = split(txt, \" \")\n  \
    \      words = [w for w in words if w != \"\"]\n        words = [w for w in words\
    \ if w != \",\"]\n        words = [w for w in words if w != \"\"]\n        words\
    \ = [w for w in words if w != \",\"]\n        words = [w for w in words if w !=\
    \ \"\"]\n        words = [w for w in words if w != \",\"]\n        words = [w\
    \ for w in words if w != \"\"]\n        words = [w for w in words if w != \",\"\
    ]\n        words = [w for w in words if w != \"\"]\n        words = [w for w in\
    \ words if w != \",\"]\n        words = [w for w in words if w != \"\"]\n    \
    \    words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"\"]\n        words = [w for w in words if w !=\
    \ \",\"]\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\"\
    ]\n        words = [w for w in words if w != \",\"]\n        words = [w for w\
    \ in words if w != \"\"]\n        words = [w for w in words if w != \",\"]\n \
    \       words = [w for w in words if w != \"\"]\n        words = [w for w in words\
    \ if w != \",\"]\n        words = [w for w in words if w != \"\"]\n        words\
    \ = [w for w in words if w != \",\"]\n        words = [w for w in words if w !=\
    \ \"\"]\n        words = [w for w in words if w != \",\"]\n        words = [w\
    \ for w in words if w != \"\"]\n        words = [w for w in words if w != \",\"\
    ]\n        words = [w for w in words if w != \"\"]\n        words = [w for w in\
    \ words if w != \",\"]\n        words = [w for w in words if w != \"\"]\n    \
    \    words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"\"]\n        words = [w for w in word"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
