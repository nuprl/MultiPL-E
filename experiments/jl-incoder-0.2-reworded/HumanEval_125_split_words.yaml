name: HumanEval_125_split_words
language: jl
prompt: "\"\"\"\n    Given a string of words, return a vector of words split on whitespace,\
  \ if no whitespaces exists in the text you\n    should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n\
  \    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"\
  Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"abcdef\")\n\
  \    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String}, Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
  Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
  ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
  , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
  , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
  \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
completions: ["    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789",
  "    words = split(txt)\n    word_counts = Dict()\n    for word in words\n     \
    \   word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    word_counts =\
    \ map(x -> x[1], word_counts)\n    word_counts = sort(word_counts, by=x->x[2],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = filter(x\
    \ -> x[2] % 2 != 0, word_counts)\n    word_counts = map(x -> x[2], word_counts)\n\
    \    word_counts = sort(word_counts, by=x->x[3], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = filter(x -> x[3] % 2 != 0, word_counts)\n\
    \    word_counts = map(x -> x[3], word_counts)\n    word_counts = sort(word_counts,\
    \ by=x->x[4], rev=true)\n    word_counts = reverse(word_counts)\n    word_counts\
    \ = filter(x -> x[4] % 2 != 0, word_counts)\n    word_counts = map(x -> x[4],\
    \ word_counts)\n    word_counts = sort(word_counts, by=x->x[5], rev=true)\n  \
    \  word_counts = reverse(word_counts)\n    word_counts = filter(x -> x[5] % 2\
    \ != 0, word_counts)\n    word_counts = map(x -> x[5], word_counts)\n    word_counts\
    \ = sort(word_counts, by=x->x[6], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[6] % 2 != 0, word_counts)\n    word_counts =\
    \ map(x -> x[6], word_counts)\n    word_counts = sort(word_counts, by=x->x[7],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = filter(x\
    \ -> x[7] % 2 != 0, word_counts)\n    word_counts = map(x -> x[7], word_counts)\n\
    \    word_counts = sort(word_counts, by=x->x[8], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = filter(x -> x[8] % 2 != 0, word_counts)\n\
    \    word_counts = map(x -> x[8], word_counts)\n    word_counts = sort(word_counts,\
    \ by", "    words = split(txt)\n    \n    words_vec = Vector{String}(undef, 0)\n\
    \    words_vec_size = Vector{Int64}(undef, 0)\n    \n    for word in words\n \
    \       words_vec_size += length(word)\n        words_vec += word\n    end\n \
    \   \n    if words_vec_size == 0\n        return words_vec\n    else\n       \
    \ return words_vec\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    count_words(txt::String)\n    Count number of words in a string\n    \n \
    \   Arguments\n    ---------\n    txt :: String\n        Text to count words from\n\
    \    \n    Returns\n    -------\n    words_count :: Int64\n        Number of words\
    \ in txt\n    Examples\n    --------\n    >>> count_words(\"Hello world!\")\n\
    \    7\n    >>> count_words(\"Hello world! Hello world!\")\n    9\n    >>> count_words(\"\
    Hello world! Hello world! Hello world!\")\n    15\n    \"\"\"", "    words = split(txt,\
    \ \" \")\n    words_no_spaces = filter(x -> !contains(x, \" \"), words)\n    words_no_commas\
    \ = filter(x -> !contains(x, \",\"), words_no_spaces)\n    words_no_commas_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas)\n    words_no_commas_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces)\n    words_no_commas_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces)\n  \
    \  words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words_no_commas_no_spaces_no_spaces_no_spaces)\n    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_",
  "    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?", "    words = split(txt,\
    \ \" \")\n    words_no_spaces = filter(x -> !isspace(x), words)\n    words_no_commas\
    \ = filter(x -> !iscomma(x), words_no_spaces)\n    words_no_commas_no_spaces =\
    \ filter(x -> !isspace(x), words_no_commas)\n    words_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces)\n    words_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n \
    \   words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_",
  "    \n    words = split(txt)\n    \n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  word_counts = collect(values(word_counts))\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_", " \
    \   \n    words = split(txt, \" \")\n    \n    words_split = [split(word, \",\"\
    ) for word in words]\n    \n    words_split = [word for word in words_split if\
    \ !isempty(word)]\n    \n    words_split = [word for word in words_split if !islower(word)]\n\
    \    \n    words_split = [word for word in words_split if !isupper(word)]\n  \
    \  \n    words_split = [word for word in words_split if !isdigit(word)]\n    \n\
    \    words_split = [word for word in words_split if !isspace(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isempty(word)]\n    \n    words_split\
    \ = [word for word in words_split if !islower(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isupper(word)]\n    \n    words_split = [word\
    \ for word in words_split if !isdigit(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isspace(word)]\n    \n    words_split = [word for word\
    \ in words_split if !isempty(word)]\n    \n    words_split = [word for word in\
    \ words_split if !islower(word)]\n    \n    words_split = [word for word in words_split\
    \ if !isupper(word)]\n    \n    words_split = [word for word in words_split if\
    \ !isdigit(word)]\n    \n    words_split = [word for word in words_split if !isspace(word)]\n\
    \    \n    words_split = [word for word in words_split if !isempty(word)]\n  \
    \  \n    words_split = [word for word in words_split if !islower(word)]\n    \n\
    \    words_split = [word for word in words_split if !isupper(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isdigit(word)]\n    \n    words_split\
    \ = [word for word in words_split if !isspace(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isempty(word)]\n    \n    words_split = [word\
    \ for word in words_split if !islower(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isupper(word)]\n    \n    words_split = [word for word\
    \ in words_split if !isdigit(word)]\n    \n    words_split = [word for word in\
    \ words_split if !isspace(word)]\n    \n    words_split = [word for word in words_split\
    \ if !ise", "    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if word != \"\"\n            words_split\
    \ = push!(words_split, word)\n        end\n    end\n    words_split\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_words(txt::String)\n    Count the\
    \ number of words in a given text\n    \n    Arguments\n    ---------\n    txt\
    \ :: String\n        Text to count the words from\n    \n    Returns\n    -------\n\
    \    words_count :: Int64\n        Number of words in the given text\n    Examples\n\
    \    --------\n    >>> count_words(\"Hello world!\")\n    3\n    \"\"\"", "  \
    \  words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n  \
    \  words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"", "    words = split(txt, \" \")\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"abcdef\"]\n    words = [w for w in words\
    \ if w != \"abcdefghijklmnopqrstuvwxyz\"]\n    words = [w for w in words if w\
    \ != \"abcdefghijklmnopqrstuvwxyz0123456789\"]\n    words = [w for w in words\
    \ if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w !=\
    \ \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/:;'\\\"\
    \\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w\
    \ != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/:;'\\\
    \"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for\
    \ w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\\
    ,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!",
  "    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n   \
    \ \n    if txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\"-\")\n        return txt.split(\"-\")\n    elseif\
    \ txt.includes(\";\")\n        return txt.split(\";\")\n    elseif txt.includes(\"\
    :\")\n        return txt.split(\":\")\n    elseif txt.includes(\";\")\n      \
    \  return txt.split(\";\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n    elseif txt.includes(\"-\")\n      \
    \  return txt.split(\"-\")\n    elseif txt.includes(\";\")\n        return txt.split(\"\
    ;\")\n    elseif txt.includes(\":\")\n        return txt.split(\":\")\n    elseif\
    \ txt.includes(\";\")\n        return txt.split(\";\")\n    elseif txt.includes(\"\
    ,\")\n        return txt.split(\",\")\n    elseif txt.includes(\"!\")\n      \
    \  return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"\
    ?\")\n    elseif txt.includes(\".\")\n        return txt.split(\".\")\n    elseif\
    \ txt.includes(\"-\")\n        return txt.split(\"-\")\n    elseif txt.includes(\"\
    ;\")\n        return txt.split(\";\")\n    elseif txt.includes(\":\")\n      \
    \  return txt.split(\":\")\n    elseif txt.includes(\";\")\n        return txt.split(\"\
    ;\")\n    elseif txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\"-\")\n        return txt.split(\"\
    -\")\n    elseif txt.includes(\";\")\n        return txt.split(\";\")\n    elseif\
    \ txt.includes(\":\")\n        return txt.split(\":\")\n    elseif txt.includes(\"\
    ;\")\n        return txt.split(\";\")\n    elseif txt.includes(\",\")\n      \
    \  return txt.split(\",\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"\
    !\")\n    elseif txt", "    \n    words = split(txt, \" \")\n    \n    word_counts\
    \ = Dict()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[1] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[2],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[2] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[2] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[2], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[3],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[3] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[3] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[3], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[4],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[4] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[4] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[4], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[5],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[5] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[5] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[5], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[6],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[6] % 2 != 0, word_counts)\n\
    \    \n    word_counts = filter(x -> x[6] % 2 == 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[6], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[7],\
    \ rev=true)\n    \n    word_counts = filter(x -> x[7", "    words = split(txt,\
    \ \" \")\n    word_counts = Dict{String, Int64}()\n    for word in words\n   \
    \     word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = collect(values(word_counts))\n    word_counts = sort(word_counts)\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_count", "    words = split(txt, \" \")\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"", "    \n    if isempty(txt)\n\
    \        return Vector{String}()\n    end\n    \n    words = split(txt, \" \"\
    )\n    \n    words = [w for w in words if w != \"\"]\n    \n    if isempty(words)\n\
    \        return Vector{String}()\n    end\n    \n    words = [w for w in words\
    \ if w != \",\"]\n    \n    if isempty(words)\n        return length(unique(lowercase(txt)))\n\
    \    end\n    \n    return length(unique(lowercase(words)))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    split_words_with_delimiter(txt::String, delimiter::String)\n\
    \    \n    Split a text into words using given delimiter\n    \n    Arguments\n\
    \    ---------\n    txt :: String\n        Text to split\n    delimiter :: String\n\
    \        Delimiter used to split words\n    \n    Returns\n    -------\n    Vector{String}\n\
    \        Vector of words\n    \n    Examples\n    --------\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter",
  "    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ words\n    else\n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n", "    if isempty(txt)\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words_no_spaces = filter(x -> !isempty(x),\
    \ words)\n        words_no_commas = filter(x -> isempty(x), words)\n        words_no_commas\
    \ = map(x -> replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(",
  "    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n    words_split2\
    \ = split(txt, \",\")\n    if length(words) == length(words_split)\n        return\
    \ words\n    elseif length(words) == length(words_split2)\n        return words_split\n\
    \    else\n        return length(words)\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    words = split(txt, \" \")\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
