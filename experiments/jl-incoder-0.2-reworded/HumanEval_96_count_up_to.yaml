name: HumanEval_96_count_up_to
language: jl
prompt: "\"\"\"Implement a function that takes an non-negative integer and returns\
  \ a vector of the first n\n    integers that are prime numbers and less than n.\n\
  \    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
  \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n   \
  \ [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
  \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
  \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
  \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
  \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
  \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
  \ 73, 79, 83, 89, 97])\nend\n"
completions: ["    if n < 2 \n        return Vector{Int64}() \n    else \n       \
    \ primes = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = ", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = primes_up_to_n(n)\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= ", "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise: Implement a function that takes an non-negative integer\
    \ and returns a vector of the first n\n    integers that are prime numbers and\
    \ less than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>>\
    \ count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n\
    \    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n == 0 \n        Vector{Int64}() \n   \
    \ else \n        count_up_to(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a positive integer $n$ and returns the first $n$ prime numbers.\
    \ \n    You can use the count_up_to function you wrote earlier.", "    if n <\
    \ 0 \n        error(\"count_up_to: n must be non-negative\")\n    else if n ==\
    \ 0 \n        []\n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 2\n       \
    \ return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n    primes_less_than\
    \ = primes[2:end]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n", "    \n    if n < 2\n        return Vector{Int64}()\n    end\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    primes_less_than = primes[2:end]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than ", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [n isprime\
    \ ? 1 : 0] \n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(1)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ and returns the first n integers that are prime numbers and less than n.\n \
    \   for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nImplement a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$.\n    for example:\n \
    \   >>> count_primes(5)\n    3\n    >>> count_primes(11)\n    5\n    >>> count_primes(0)\n\
    \    0\n    >>> count_primes(20)\n    5\n    >>> count_primes(1)\n    1\n    >>>\
    \ count_primes(18)\n    5\n    \"\"\"", "    if n < 2\n        []\n    else\n\
    \        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the first $n$ prime numbers.\
    \ \nFor example count_primes(5) == [2, 3, 5, 7].", "    if n < 0\n        return\
    \ Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes ",
  "    if n < 0\n        error(\"count_up_to requires a non-negative integer\")\n\
    \    end\n    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p < n\n            push!(prime_numbers,\
    \ p)\n        end\n    end\n    \n    return prime_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) == 2.", "    if n <\
    \ 1 \n        return Vector{Int64}() \n    \n    primes = prime_numbers(n) \n\
    \    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes <=\
    \ n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[",
  "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer $n$ and returns the number of prime numbers less than or equal\
    \ to $n$. \nFor example count_primes(5) should return 3.", "    if n < 2 \n  \
    \      Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise\nImplement a function that takes an non-negative integer and\
    \ returns a vector of the first n\n    integers that are prime numbers and less\
    \ than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nImplement a function that takes an non-negative integer and\
    \ returns a vector of the first n\n    integers that are prime numbers and less\
    \ than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 2\n        Vector{Int64}()\n\
    \    else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]", "    if n < 0 \n        error(\"count_up_to requires a non-negative integer\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer $n$ and returns the first $n$ prime numbers.\
    \ \nHint: Use count_up_to.", "    if n < 0 \n        error(\"count_up_to only\
    \ accepts non-negative integers\") \n    else if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ first $n$ prime numbers.\nFor example count_primes(5) == [2, 3, 5, 7, 11]\n\
    Hint: use the count_up_to function you wrote earlier", "    if n < 2\n       \
    \ return Vector{Int64}()\n    \n    primes = primes_list(n)\n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n", "    if n < 2\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[0]\n \
    \   \n    return primes_less_than\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(", "    if n\
    \ == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n for n\
    \ in 1:n if isPrime(n)]\n    end\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.0>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(1)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Implement a function that takes an\
    \ non-negative integer and returns a vector of the first n\n    integers that\
    \ are prime numbers and less than n.\n    for example:\n    >>> count_up_to(5)\n\
    \    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n == 0\n        Vector{}\n    else\n        count_up_to(n-1) + [n for n\
    \ in 1:n if prime_number(n)]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$.", "    if n == 0\n        Vector{}\n    else\n\
    \        count_up_to(n-1)\n        push!(Vector{Int64}(), 2)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 0\n       \
    \ error(\"count_up_to only takes non-negative integers\")\n    end\n    \n   \
    \ primes = Vector{Int64}()\n    \n    for p in primes\n        if p == 0 || p\
    \ > n\n            push!(primes, p)\n        end\n    end\n    \n    primes =\
    \ primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n    return primes\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 2\n       \
    \ Vector{Int64}()\n    else\n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<text>\nExercise 3: Implement a function that takes an non-negative\
    \ integer and returns a vector of the integers that are prime numbers and less\
    \ than or equal to n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n\
    \    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n \
    \   >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = ", "    if n < 0\n   \
    \     error(\"count_up_to only accepts non-negative integers\")\n    end\n   \
    \ \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[", "    \n    if n == 0\n \
    \       Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n      \
    \  prime_numbers = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_", "    if n < 2\n\
    \        Vector{Int64}()\n    else\n        count_up_to(n-1) + [Int64(n)]\n  \
    \  end\nend\n</cell>\n<text>\nExercise 3\nImplement a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_up_to(5) should return [2, 3, 5, 7].", "    if n == 0\n      \
    \  Vector{Int64}()\n    else\n        count_up_to(n-1) + [n for n in 1:n if isPrime(n)]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n\
    \ for n in 1:n if is_prime(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\n    for example:\n    >>> square_sum([1,2,3])\n\
    \    6\n    >>> square_sum([1,4,9])\n    25\n    >>> square_sum([])\n    0\n \
    \   \"\"\"", "    \n    if n < 2\n        return Vector{Int64}()\n    end\n  \
    \  \n    primes = primes_up_to_n(n)\n    \n    counts = Vector{Int64}()\n    \n\
    \    for p in primes\n        if p > n\n            push!(counts, p)\n       \
    \ else\n            push!(counts, p + count_up_to(p))\n        end\n    end\n\
    \    \n    return counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nProblem 3\nImplement a function that takes an\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.",
  "    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= ", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 2 \n      \
    \  return [] \n    else \n        primes = primes_up_to_n(n) \n        prime_numbers\
    \ = primes[2:end] \n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ < n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_",
  "    if n == 0\n        Vector{}\n    else\n        count_up_to(n-1) + [n isprime\
    \ ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$.", "    if n < 2 \n\
    \        return [] \n    \n    primes = primes_up_to_n(n) \n    \n    primes =\
    \ primes[2:end] \n    \n    primes = primes[primes <= n] \n    \n    primes =\
    \ primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes\
    \ = primes[primes <= n] \n    \n    primes = primes[primes <= n] \n", "    if\
    \ n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the first $n$ prime numbers.\
    \ \nFor example count_primes(5) returns [2, 3]", "    if n <= 0\n        Vector{Int64}()\n\
    \    else\n        primes = primes_up_to_n(n)\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes ",
  "    if n < 2\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncount_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an integer $n$ and returns the first $n$ prime numbers.\
    \ \n    \n    Your function should return an Array{Int64}.\n    \n    You can\
    \ use the count_up_to function you wrote earlier.\n    \"\"\"", "    if n == 0\n\
    \        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n isprime ? 1\
    \ : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise\nWrite a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers.\nFor example count_primes(5) ==\
    \ [2, 3, 5, 7, 11]\nHint: use count_up_to and isprime", "    if n == 0\n     \
    \   Vector{}\n    else\n        count_up_to(n-1) + [n for n in 1:n if prime_number(n)]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = ", "    if n < 2\n   \
    \     []\n    else\n        count_up_to(n-1) + [n for n in 1:n if is_prime(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$.", "    if n < 0\n        error(\"\
    count_up_to: n must be non-negative\")\n    end\n    \n    primes = primes_list(n)\n\
    \    \n    vec = Vector{Int64}()\n    \n    for p in primes\n        if p > n\n\
    \            push!(vec, p)\n        else\n            break\n        end\n   \
    \ end\n    \n    return vec\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(1)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers. \nFor example count_up_to(5) should\
    \ return [2, 3]", "    if n < 2 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise 2\nImplement a function that takes an\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\
    \ \nFor example count_primes(5) returns 4.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n - 1) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$.", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0]\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.0>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(1)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$. \nFor example count_primes(5)\
    \ should return 3.", "    if n < 2\n        return Vector{Int64}()\n    end\n\
    \    primes = prime_numbers(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    ", "    if n == 0 \n        Vector{Int64}() \n  \
    \  else \n        count_up_to(n-1) + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n < 2 \n        return [] \n    else \n\
    \        primes = prime_numbers(n) \n        primes = primes[2:end] \n       \
    \ primes = primes[primes <= n] \n        return primes \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(3) should return 3.",
  "    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n    end\n\
    \    \n    vec = Vector{Int64}()\n    \n    if n == 0\n        push!(vec, 0)\n\
    \        return vec\n    end\n    \n    push!(vec, 1)\n    \n    for i = 2:n\n\
    \        if isPrime(i)\n            push!(vec, i)\n        end\n    end\n    \n\
    \    return vec\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer $n$ and returns the first\
    \ $n$ prime numbers. \nFor example count_up_to(5) should return [2, 3]", "   \
    \ if n < 0\n        error(\"count_up_to called with negative number\")\n    end\n\
    \    if n == 0\n        return Vector{Int64}()\n    end\n    primes = primes_up_to_n(n)\n\
    \    primes_less_than = primes[primes <= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ <= n]\n    return primes_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer $n$ and returns the number of prime numbers less\
    \ than or equal to $n$", "    if n < 0\n        error(\"count_up_to only accepts\
    \ non-negative integers\")\n    end\n    \n    primes = primes_up_to_n(n)\n  \
    \  \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes an integer $n$ and returns\
    \ the first $n$ prime numbers. \nFor example count_up_to(5) should return [2,\
    \ 3]", "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    prime_vec = []\n \
    \   for p in primes\n        if p < n\n            prime_vec = [p]\n        else\n\
    \            prime_vec = prime_vec ++ count_up_to(p-1)\n        end\n    end\n\
    \    \n    return prime_vec\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the number of prime numbers less than or equal to that integer.",
  "    if n < 2\n        Vector{}\n    else\n        count_up_to(n-1)\n        append!(Vector{Int64}(),\
    \ 2:2:n)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an integer $n$ and returns the number of prime numbers less than or equal to\
    \ $n$.", "    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than[primes_less_than .< n] \n        primes_less_than = primes_less_than[primes_less_than\
    \ .> n] \n        primes_less_than = primes_less_than - n \n        return primes_less_than\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(10) should return 5.", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = primes_up_to_n(n)\n        prime_numbers = primes[2:end]\n\
    \        prime_numbers_less_than = prime_numbers[prime_numbers < n]\n        prime_numbers_less_than\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$.", "    if n < 0\n\
    \        error(\"count_up_to called with negative number\")\n    end\n    \n \
    \   primes = prime_numbers(n)\n    \n    prime_numbers = prime_numbers(n)\n  \
    \  \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != n]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != n]\n    \n    prime_numbers = prime_numbers[prime", "    if n <= 0 \n   \
    \     Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of integers that are less than $n$ and that are divisible by $n$. For example:\n\
    >>> count_divisible(5)\n3\n>>> count_divisible(10)\n2\n>>> count_divisible(15)\n\
    1\n>>> count_divisible(20)\n0\n>>> count_divisible(25)\n1\n>>> count_divisible(30)\n\
    2\n>>> count_divisible(35)\n3\n>>> count_divisible(40)\n2\n>>> count_divisible(45)\n\
    3\n>>> count_divisible(50)\n2\n>>> count_divisible(55)\n3\n>>> count_divisible(60)\n\
    2\n>>> count_divisible(65)\n3\n>>> count_divisible(70)\n2\n>>> count_divisible(75)\n\
    3\n>>> count_divisible(80)\n2\n>>> count_divisible(85)\n3\n>>> count_divisible(90)\n\
    2\n>>> count_divisible(95)\n3\n>>> count_divisible(100)\n2\n>>> count_divisible(105)\n\
    3\n>>> count_divisible(110)\n2\n>>> count_divisible(115)\n3\n>>> count_divisible(120)\n\
    2\n>>> count_divisible(125)\n3\n>>> count_divisible(130)\n2\n>>> count_divisible(135)\n\
    3\n>>> count_divisible(140)\n2\n>>> count_divisible(145)\n3\n>>> count_divisible(150)\n\
    2\n>>> count_divisible(155)\n3\n>>> count_divisible(160)\n2\n>>> count_divisible(165)\n\
    3\n>>> count_divisible(170)\n2\n>>> count_divisible(175)\n3\n>>> count_divisible(180)\n\
    2\n>>> count_divisible(185)\n3\n>>> count_divisible(190)\n2\n>>> count_divisible(195)\n\
    3\n>>> count_divisible(200)\n2\n>>> count_divisible(205)\n3\n>>> count_divisible(210)\n\
    2\n>>> count_divisible(215)\n3\n>>> count_divisible(220)\n2\n>>> count_divisible(225)\n\
    3\n>>> count_divisible(230)\n2\n>>> count_divisible(235)\n3\n>>> count_divisible(240)\n\
    2\n>>> count_divisible(245)\n", "    \n    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n",
  "    if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer and returns the number\
    \ of prime numbers less than or equal to that integer.", "    if n < 2\n     \
    \   return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[prime", "    if n < 2\n        return Vector{Int64}()\n    \n    primes\
    \ = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes ", "    if n < 0 \n\
    \        error(\"count_up_to: n must be non-negative\")\n    end\n    \n    primes\
    \ = prime_list_generator(n)\n    primes = primes[2:end]\n    \n    prime_vec =\
    \ []\n    for p in primes\n        if p > n\n            push!(prime_vec, p)\n\
    \        else\n            break\n        end\n    end\n    \n    return prime_vec\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer $n$ and returns the first\
    \ $n$ prime numbers. \n    \n    Your function should raise an error if $n$ is\
    \ less than or equal to 0.\n    \n    Your function should raise an error if $n$\
    \ is negative.\n    \n    Your function should raise an error if $n$ is greater\
    \ than 20.\n    \n    Your function should raise an error if $n$ is greater than\
    \ or equal to 1.\n    \n    Your function should raise an error if $n$ is greater\
    \ than or equal to 18.\n    \n    Your function should raise an error if $n$ is\
    \ greater than or equal to 5.\n    \n    Your function should raise an error if\
    \ $n$ is greater than or equal to 3.\n    \n    Your function should raise an\
    \ error if $n$ is greater than or equal to 7.\n    \n    Your function should\
    \ raise an error if $n$ is greater than or equal to 11.\n    \n    Your function\
    \ should raise an error if $n$ is greater than or equal to 13.\n    \n    Your\
    \ function should raise an error if $n$ is greater than or equal to 17.\n    \n\
    \    Your function should raise an error if $n$ is greater than or equal to 19.\n\
    \    \n    Your function should raise an error if $n$ is greater than or equal\
    \ to 23.\n    \n    Your function should raise an error if $n$ is greater than\
    \ or equal to 29.\n    \n    Your function should raise an error if $n$ is greater\
    \ than or equal to 33.\n    \n    Your function should raise an error if $n$ is\
    \ greater than or equal to 37.\n    \n    Your function should raise an error\
    \ if $n$ is greater than or equal to 43.\n    \n    Your function should raise\
    \ an error if $n", "    if n == 0 \n        Vector{Int64}() \n    else \n    \
    \    count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an non-negative integer and returns a vector of the first\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = primes_up_to(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise\nImplement\
    \ a function that takes an non-negative integer and returns a vector of the first\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0] \n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$.", "    if n == 0 \n \
    \       Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ first $n$ prime numbers. \nFor example count_primes(10) should return [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29]\nHint: use the count_up_to function you wrote\
    \ earlier.", "    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1)\
    \ + [n for n in 1:n if is_prime(n)]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n == 0\n        Vector{}\n    else\n  \
    \      count_up_to(n-1) + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<text>\n\
    Exercise: Implement a function that takes an non-negative integer and returns\
    \ a vector of the squares of the integers\n    up to and including n.\n    for\
    \ example:\n    >>> count_square_up_to(5)\n    [4, 9, 16, 25]\n    >>> count_square_up_to(11)\n\
    \    [4, 9, 16, 25, 36, 49, 64, 81]\n    >>> count_square_up_to(0)\n    []\n \
    \   >>> count_square_up_to(20)\n    [4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144,\
    \ 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784,\
    \ 841, 900, 961, 1024, 1089, 1152, 1217, 1289, 1369, 1444, 1521, 1600, 1681, 1764,\
    \ 1849, 1936, 2025, 2116, 2209, 2288, 2371, 2464, 2549, 2636, 2725, 2817, 2909,\
    \ 3000, 3089, 3172, 3254, 3347, 3440, 3533, 3626, 3719, 3801, 3904, 4006, 4109,\
    \ 4219, 4332, 4447, 4552, 4665, 4777, 4880, 4989, 5102, 5211, 5324, 5437, 5550,\
    \ 5667, 5781, 5894, 6007, 6121, 6235, 6349, 6462, 6585, 6701, 6804, 6919, 7032,\
    \ 7147, 7252, 7356, 7459, 7669, 7781, 7884, 8007, 8111, 8223, 8336, 8449, 8549,\
    \ 8664, 8777, 8880, 8993, 9106, 9221, 9324, 9427, 9530, 9633, 9736, 9849, 9954,\
    \ 10061, 10174, 10281, 10394, 10507, 10611, 10713, 10817, 10920, 11023, 11225,\
    \ 11336, 11449, 11562, 11667, 11771, 11874, 11985, 12089, 12202, 12314, 12421,\
    \ 12544, 12658, 12768, 12871, 12973, 13085, 13289, 13402, 13512, 13623, 13732,\
    \ 13831, 13943, 14056, 14169, 14282, 14395, 14508, 14621, 14735, 14848, 14961,\
    \ 15064, 15177, 15287", "    primes = prime_numbers(n)\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = ", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$.", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p <= n\n            prime_numbers.push(p)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers .<= n]\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than $n$. \nFor example if $n=5$ then $n$ has 5\
    \ prime numbers, if $n=10$ then $n$ has 10 prime numbers, and so on.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nImplement a function that takes an\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\n\
    \    for example:\n    >>> count_primes(5)\n    3\n    >>> count_primes(11)\n\
    \    7\n    >>> count_primes(0)\n    0\n    >>> count_primes(20)\n    9\n    >>>\
    \ count_primes(1)\n    0\n    >>> count_primes(18)\n    8\n    \"\"\"", "    if\
    \ n < 0\n        error(\"count_up_to only accepts non-negative integers\")\n \
    \   end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = primes[2:end]\n    \n    prime_numbers_less_than = prime_numbers_less_than\
    \ .+ primes[1]\n    \n    prime_numbers_less_than = prime_numbers_less_than .+\
    \ primes[2]\n    \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[3]\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[4]\n  \
    \  \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[5]\n    \n\
    \    prime_numbers_less_than = prime_numbers_less_than .+ primes[6]\n    \n  \
    \  prime_numbers_less_than = prime_numbers_less_than .+ primes[7]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than .+ primes[8]\n    \n    prime_numbers_less_than =\
    \ prime_numbers_less_than .+ primes[9]\n    \n    prime_numbers_less_than = prime_numbers_less_than\
    \ .+ primes[10]\n    \n    prime_numbers_less_than = prime_numbers_less_than .+\
    \ primes[11]\n    \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[12]\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[13]\n \
    \   \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[14]\n  \
    \  \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[15]\n   \
    \ \n    prime_numbers_less_than = prime_numbers_less_than .+ primes[16]\n    \n\
    \    prime_numbers_less_than = prime_numbers_less_than .+ primes[17]\n    \n \
    \   prime_numbers_less_than = prime_numbers_less_than .+ primes[18]\n    \n  \
    \  prime_numbers_less_than = prime_numbers_less_than .+ primes[19]\n    \n   \
    \ prime_numbers_less_than = prime_numbers_less_than .+ primes[20]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than .+ primes[2", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        primes = prime_numbers(n)\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]\n        primes = primes[primes <= n]\n        primes = primes[primes <=\
    \ n]", "    if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        Vector{Int64}(primes[primes..end])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \n    For example, count_primes(5) == 2, since 2\
    \ is the only prime number less than or equal to 5.\n    count_primes(5) == 3,\
    \ since 3 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 4, since 4 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 5, since 5 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 6, since 6 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 7, since 7 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 8, since 8 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 9, since 9 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 10, since 10 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 11, since 11 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 12, since 12 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 13, since 13 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 14, since 14 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 15, since 15 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 16, since 16 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 17, since 17 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 18, since 18 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 19, since 19 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 20, since 20 is the only prime number less than or equal to 5.\n    count_primes(5)\
    \ == 21, since 21 is the ", "    if n < 2\n        []\n    else\n        primes\
    \ = prime_numbers(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = prime", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n - 1)\n \
    \       push!(count_up_to(n - 1), 1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nImplement a function that takes an integer $n$ and returns the number of\
    \ prime numbers less than or equal to $n$. \nFor example count_up_to(5) should\
    \ return [2, 3, 5, 7].\nHint: You may want to use the count_up_to function you\
    \ wrote in exercise 1.", "    if n == 0\n        Vector{}\n    else\n        Vector{Int64}[i\
    \ for i in 2:n-1 if isprime(i) and i <= n]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(0)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.0>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of the squares\
    \ of the integers in the vector.\n    for example:\n    >>> square_up_to(5)\n\
    \    [1, 4, 9, 16, 25]\n    >>> square_up_to(11)\n    [1, 4, 9, 16, 25, 36, 49,\
    \ 64, 81]\n    >>> square_up_to(0)\n    []\n    >>> square_up_to(20)\n    [1,\
    \ 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169]\n    >>> square_up_to(1)\n\
    \    []\n    >>> square_up_to(18)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81]\n   \
    \ \"\"\"", "    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1)\
    \ + [n | isprime(i) for i in prime_numbers(n)]\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$.", "    if n < 2 \n        return\
    \ Vector{Int64}() \n    else \n        primes = prime_numbers(n) \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = ", "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            push!(prime_numbers,\
    \ p)\n        else\n            break\n        end\n    end\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nProblem 7\nImplement a function that takes an\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\n\
    \    for example:\n    >>> count_primes(5)\n    3\n    >>> count_primes(11)\n\
    \    7\n    >>> count_primes(0)\n    0\n    >>> count_primes(20)\n    8\n    >>>\
    \ count_primes(1)\n    1\n    >>> count_primes(18)\n    9\n    \"\"\"", "    if\
    \ n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = ", "    \n    if n == 0\n\
    \        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes ", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers. \n    Use count_up_to to implement\
    \ the function.\n    \n    Your function should return an Array{Int64,1}.\n  \
    \  \n    You can use the function count_up_to to implement the function.\n   \
    \ \n    You can use the function primes to implement the function.\n    \n   \
    \ You can use the function primes to implement the function.\n    \n    You can\
    \ use the function primes to implement the function.\n    \n    You can use the\
    \ function primes to implement the function.\n    \n    You can use the function\
    \ primes to implement the function.\n    \n    You can use the function primes\
    \ to implement the function.\n    \n    You can use the function primes to implement\
    \ the function.\n    \n    You can use the function primes to implement the function.\n\
    \    \n    You can use the function primes to implement the function.\n    \n\
    \    You can use the function primes to implement the function.\n    \n    You\
    \ can use the function primes to implement the function.\n    \n    You can use\
    \ the function primes to implement the function.\n    \n    You can use the function\
    \ primes to implement the function.\n    \n    You can use the function primes\
    \ to implement the function.\n    \n    You can use the function primes to implement\
    \ the function.\n    \n    You can use the function primes to implement the function.\n\
    \    \n    You can use the function primes to implement the function.\n    \n\
    \    You can use the function primes to implement the function.\n    \n    You\
    \ can use the function primes to implement the function.\n    \n    You can use\
    \ the function primes to implement the function.\n    \n    You can use the function\
    \ primes to implement the function.\n    \n    You can use the function primes\
    \ to implement the function.\n    \n    You can use the function primes to implement\
    \ the function.\n    \n    You can use the function primes to implement the function.\n\
    \    \n    You can use the function primes to implement the function.\n    \n\
    \    You can use the function primes to implement the function.\n    \n    You\
    \ can use the function primes to implement the function.\n    \n    You can use\
    \ the function primes to implement the function.\n    \n    You can use the function\
    \ primes to implement the function.\n    \n    You can use the function primes\
    \ to implement the function.\n    \n    You can use the function primes to implement\
    \ the function.\n    \n    You can use the function primes to implement the function.\n\
    \    \n    You can use the function primes to implement the function.\n    \n",
  "    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_list_generator(n)\n    \n    prime_vec =\
    \ []\n    \n    for p in primes\n        if p > n\n            prime_vec = []\n\
    \            break\n        end\n        \n        if prime_vec != []\n      \
    \      if p > prime_vec[end]\n                prime_vec = []\n               \
    \ break\n            end\n        end\n        \n        if p <= n\n         \
    \   prime_vec = [p]\n        end\n    end\n    \n    return prime_vec\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0\n        Vector{Int64}()\n    else\n\
    \        primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= ", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(1)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\n\
    \    for example:\n    >>> square_sum([2, 3, 4])\n    25\n    >>> square_sum([1,\
    \ 2, 3])\n    6\n    >>> square_sum([])\n    0\n    \"\"\"", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer and returns the number\
    \ of prime numbers less than or equal to that integer.", "    \n    if n == 0\n\
    \        Vector{Int64}()\n    else\n        primes = primes_upto(n)\n        prime_numbers\
    \ = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an non-negative integer and returns a vector of the prime\
    \ numbers less than n.\n    for example:\n    >>> count_primes_less_than(5)\n\
    \    [2, 3, 5, 7]\n    >>> count_primes_less_than(11)\n    [2, 3, 5, 7]\n    >>>\
    \ count_primes_less_than(0)\n    []\n    >>> count_primes_less_than(20)\n    [2,\
    \ 3, 5, 7]\n    >>> count_primes_less_than(1)\n    []\n    >>> count_primes_less_than(18)\n\
    \    [2, 3, 5, 7]\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]",
  "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.0>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(1)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) == 3 because there are 3 prime numbers less than or\
    \ equal to 5.", "    count_up_to = []\n    for i = 2 to n\n        if prime_number(i)\n\
    \            count_up_to.append(i)\n        else\n            break\n    end\n\
    \    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$. \nFor example count_primes(10)\
    \ should return 5.", "    if n < 2 \n        return Vector{Int64}() \n    else\
    \ \n        primes = primes_up_to_n(n) \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        prime", "    \n    if n ==\
    \ 0\n        Vector{Int64}()\n    else\n        Vector{Int64}[i for i in 2:(n-1)]\
    \ ++ count_up_to(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers.\nHint: Use a for loop.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) + [n\
    \ isprime ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) should return 3.\nHint: Use a for loop to count the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 0\n       \
    \ error(\"count_up_to only accepts non-negative integers\")\n    end\n    \n \
    \   primes = prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n\
    \    primes = primes[primes > 1]\n    \n    primes = primes[primes <= n]\n   \
    \ \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    prime", "    if n < 2\n   \
    \     Vector{Int64}()\n    else\n        Vector{Int64}[x for x = 2:n if is_prime(x)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an non-negative integer and\
    \ returns a vector of the prime factors of n.\n    for example:\n    >>> count_prime_factors(5)\n\
    \    [2, 2, 3]\n    >>> count_prime_factors(11)\n    [2, 2, 3, 3]\n    >>> count_prime_factors(0)\n\
    \    []\n    >>> count_prime_factors(20)\n    [2, 2, 3, 3]\n    >>> count_prime_factors(1)\n\
    \    []\n    >>> count_prime_factors(18)\n    [2, 2, 3]\n    \"\"\"", "    if\
    \ n < 2\n        return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for prime in primes\n  \
    \      if prime < n\n            prime_numbers.push(prime)\n        end\n    end\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nProblem 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n < 2\n        return Vector{Int64}()\n    \n    primes = primes_up_to(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(", "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers. \n    You can use the count_up_to\
    \ function you wrote earlier.", "    if n < 0\n        error(\"count_up_to only\
    \ accepts non-negative integers\")\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_vec = []\n    \n    for p in primes\n        if p > n\n     \
    \       push!(prime_vec, p)\n        else\n            break\n        end\n  \
    \  end\n    \n    prime_vec\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an integer and returns the number of prime numbers less than or equal\
    \ to that integer.", "    if n < 2 \n        return Vector{Int64}() \n    else\
    \ \n        primes = prime_numbers(n) \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = ", "    if n < 2 \n \
    \       return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n    \n \
    \   prime_numbers = Vector{Int64}()\n    \n    for p in primes\n        if p <\
    \ n\n            prime_numbers.push(p)\n        end\n    end\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers < n]\n    \n    return prime_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nProblem 7\nImplement a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$. \nFor example count_primes(3)\
    \ should return 3.", "    if n == 0\n        Vector{}\n    else\n        primes\
    \ = primes_up_to_n(n)\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        primes =\
    \ primes[primes <= n]\n        primes = primes[primes <= n]\n        prime", " \
    \   if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_list_generator(n)\n    prime_numbers = prime_list_generator(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers[2:end]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .< n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .> n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than ", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer and returns the number\
    \ of prime numbers less than or equal to that integer.", "    if n == 0\n    \
    \    Vector{Int64}()\n    else\n        count_up_to(n-1) + [n for n in 1:n if\
    \ prime_number(n)]\n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(1)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n < 2 \n        return Vector{Int64}() \n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes ", "    if n < 0\n        error(\"count_up_to\
    \ only accepts non-negative integers\")\n    end\n    \n    primes = Vector{Int64}()\n\
    \    prime_numbers = Vector{Int64}()\n    \n    for i = 2:n\n        if prime_numbers[i]\
    \ == true\n            push!(primes, i)\n            push!(prime_numbers, false)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers == true]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != true]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != true]\n    \n    prime_numbers = prime_numbers[prime_numbers != true]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers != true]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != true]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != true]\n    \n    prime_numbers = prime_numbers[prime_numbers != true]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers != true]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != true]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != true]\n    \n    prime_numbers = prime_numbers[prime_numbers != true]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers != true]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != true]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != true]\n    \n    prime_numbers = prime_numbers[prime_numbers != true]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers != true]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != true]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != true]\n    \n    prime_numbers = prime_numbers[prime_numbers != true]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers != true]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != true]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != true]\n    \n    prime_number", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        count_up_to(n-1) + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than $n$.", "    if n < 2 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = ", "    if n\
    \ == 0\n        Vector{}\n    else\n        count_up_to(n-1) + [n isprime]\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise\nImplement a function that takes an non-negative integer and\
    \ returns a vector of the first n\n    integers that are prime numbers and less\
    \ than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = prime_numbers(n)\n    \n    primes_less_than = primes[2:end]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n",
  "    if n < 2 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(10) should return 5", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = Vector{Int64}()\n    prime_numbers = Vector{Int64}()\n\
    \    \n    for prime in prime_numbers(n)\n        if prime < n\n            push!(primes,\
    \ prime)\n            push!(prime_numbers, prime)\n        end\n    end\n    \n\
    \    prime_numbers = prime_numbers[2:end]\n    \n    push!(prime_numbers, n)\n\
    \    \n    prime_numbers = prime_numbers[2:end]\n    \n    push!(prime_numbers,\
    \ prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n    \n  \
    \  push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(prime_numbers, prime_numbers[1])\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    push!(", "    if n == 0\n        Vector{Int64}()\n    else\n      \
    \  count_up_to(n-1) + [n for n in 1:n if isPrime(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-1.5>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(43)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(44)\n</cell>\n<code language=julia-1.5>\ncount_up_to(45)\n</cell>\n\
    <code language=julia-", "    if n < 1 \n        Vector{Int64}() \n    else \n\
    \        count_up_to(n-1) + [n for n in 1:n if isPrime(n)]\n    end\nend\n</cell>\n\
    <text>\nExercise: Implement a function that takes an non-negative integer and\
    \ returns a vector of the prime factors of n.\n    for example:\n    >>> count_prime_factors(5)\n\
    \    [2, 2, 3]\n    >>> count_prime_factors(11)\n    [2, 2, 3, 3]\n    >>> count_prime_factors(0)\n\
    \    []\n    >>> count_prime_factors(20)\n    [2, 2, 3, 3]\n    >>> count_prime_factors(1)\n\
    \    []\n    >>> count_prime_factors(18)\n    [2, 2, 3, 3]\n    \"\"\"", "   \
    \ if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n\
    \ | isprime(i) for i in 1:n]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer and returns a vector of the integers up to and\
    \ including that integer.\n    For example, count_up_to(5) should return [2, 3,\
    \ 5, 7, 11, 13, 17].\n    Use a for loop to do this.\n    Use a while loop to\
    \ do this.\n    Use a recursive function to do this.\n    Use a while loop to\
    \ do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a recursive function to do this.\n    Use a recursive function\
    \ to do this.\n    Use a ", "    if n == 0\n        Vector{Int64}()\n    else\n\
    \        primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= ", "  \
    \  if n < 2\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    prime_numbers = Vector{Int64}()\n    \n    for i = 2 to n\n        if prime_numbers[i]\
    \ < i\n            prime_numbers[i] = i\n        end\n    end\n    \n    for i\
    \ = 2 to n\n        if prime_numbers[i] in primes\n            push!(primes, prime_numbers[i])\n\
    \        end\n    end\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than $n$ that are also factors of $n$.\nFor example $n = 7$ has factors\
    \ $2$ and $3$, so the function should return $2$.\nFor example $n = 10$ has factors\
    \ $2$ and $5$, so the function should return $3$.", "    if n < 2 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 2 \n      \
    \  Vector{Int64}() \n    else \n        count_up_to(n-1) + [n isprime ? 1 : 0]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\
    \ \nFor example count_primes(5) should return 3.", "    if n < 2\n        Vector{Int64}()\n\
    \    else\n        primes = primes_up_to_n(n)\n        prime_numbers = primes[2:end]\n\
    \        prime_numbers_less_than = prime_numbers[prime_numbers < n]\n        prime_numbers_less_than\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an integer $n$ and returns the\
    \ first $n$ prime numbers. \n    You can use the count_up_to function you wrote\
    \ earlier.\n    \n    You can use the primes_up_to_n function you wrote earlier.\n\
    \    \n    You can use the primes_up_to_n function you wrote earlier.\n    \n\
    \    You can use the primes_up_to_n function you wrote earlier.\n    \n    You\
    \ can use the primes_up_to_n function you wrote earlier.\n    \n    You can use\
    \ the primes_up_to_n function you wrote earlier.\n    \n    You can use the primes_up_to_n\
    \ function you wrote earlier.\n    \n    You can use the primes_up_to_n function\
    \ you wrote earlier.\n    \n    You can use the primes_up_to_n function you wrote\
    \ earlier.\n    \n    You can use the primes_up_to_n function you wrote earlier.\n\
    \    \n    You can use the primes_up_to_n function you wrote earlier.\n    \n\
    \    You can use the primes_up_to_n function you wrote earlier.\n    \n    You\
    \ can use the primes_up_to_n function you wrote earlier.\n    \n    You can use\
    \ the primes_up_to_n function you wrote earlier.\n    \n    You can use the primes_up_to_n\
    \ function you wrote earlier.\n    \n    You can use the primes_up_to_n function\
    \ you wrote earlier.\n    \n    You can use the primes_up_to_n function you wrote\
    \ earlier.\n    \n    You can use the primes_up_to_n function you wrote earlier.\n\
    \    \n    You can use the primes_up_to_n function you wrote earlier.\n    \n\
    \    You can use the primes_up_to_n function you wrote earlier.\n    \n    You\
    \ can use the primes_up_to_n function you wrote earli", "    if n == 0 \n    \
    \    Vector{Int64}() \n    else \n        count_up_to(n-1) + [n isprime]\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the first\
    \ n prime numbers.\nfor example:\n>>> primes(5)\n[2, 3, 5, 7]\n>>> primes(11)\n\
    [2, 3, 5, 7, 11, 13, 17, 19]\n>>> primes(0)\n[]\n>>> primes(20)\n[2, 3, 5, 7,\
    \ 11, 13, 17]\n>>> primes(1)\n[]\n>>> primes(18)\n[2, 3, 5, 7, 11, 13, 17]\n\"\
    \"\"", "    if n < 0\n        return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for p in primes\n      \
    \  if p > n\n            break\n        \n        prime_numbers.push(p)\n    end\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n < 2\n        return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n\
    \    prime_numbers = Vector{Int64}()\n    \n    for n in prime_numbers\n     \
    \   prime_numbers[n] = true\n    end\n    \n    for n in prime_numbers\n     \
    \   if n < n + 1\n            prime_numbers[n] = false\n        end\n    end\n\
    \    \n    prime_numbers[1] = true\n    \n    for n in prime_numbers\n       \
    \ if n < n + 1\n            push!(primes, n)\n        end\n    end\n    \n   \
    \ prime_numbers[1] = false\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the number of prime numbers less\
    \ than or equal to that integer.", "    if n < 2 \n        Vector{Int64}() \n\
    \    else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$.", "    if n < 0\n        error(\"\
    count_up_to requires non-negative integer\")\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    vec = Vector{Int64}()\n    \n    for p in primes\n        if p > n\n\
    \            push!(vec, p)\n        else\n            break\n        end\n   \
    \ end\n    \n    return vec\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of prime numbers less than\
    \ or equal to $n$.", "    if n < 0\n        error(\"count_up_to only accepts non-negative\
    \ integers\")\n    end\n    \n    primes = Vector{Int64}()\n    \n    for p in\
    \ primes\n        if p*p > n\n            break\n        end\n    end\n    \n\
    \    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n", "    if n < 2\n\
    \        return Vector{Int64}()\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[2]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[3]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[4]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[5]\n    \n    primes_less_than = primes_less_than .+ primes[6]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[7]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[8]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[9]\n    \n    primes_less_than = primes_less_than .+ primes[10]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[11]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[12]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[13]\n    \n    primes_less_than = primes_less_than .+ primes[14]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[15]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[16]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[17]\n    \n    primes_less_than = primes_less_than .+ primes[18]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[19]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[20]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[21]\n    \n    primes_less_than = primes_less_than .+ primes[22]\n\
    \    \n    primes_less_than = primes_less_than .+ primes[23]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[24]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[25]\n    \n    primes_less_than = primes_less_", "    if n < 2\n \
    \       Vector{}\n    else\n        Vector{Int64}[Int64]()\n        for n in 2:n\n\
    \            if n % n == 0\n                push!(count_up_to(n), n)\n       \
    \     else\n                break\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nImplement a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$.", "    if n == 0\n        Vector{}\n\
    \    else\n        primes = primes_up_to_n(n)\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        prime", "    if n < 2\n        return Vector{Int64}()\n    \n\
    \    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$.", "    if n < 0\n        return\
    \ Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes ",
  "    if n < 2\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]", "    if n < 2\n        Vector{}\n  \
    \  else\n        primes = primes_up_to_n(n)\n        primes = primes[2:end]\n\
    \        primes = primes[primes <= n]\n        primes\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than $n$ that are less than $n$. \nFor example\
    \ if $n$ is 5 then your function should return 3.", "    if n < 2\n        []\n\
    \    else\n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$. \nFor example count_primes(5) should\
    \ return 3.", "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the numbers in the vector.\n    for example:\n   \
    \ >>> square_of_vector([2, 3, 4])\n    25\n    >>> square_of_vector([-1, -2, -3])\n\
    \    9\n    >>> square_of_vector([0, 0])\n    0\n    >>> square_of_vector([0,\
    \ 0])\n    0\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n   \
    \ \n    primes = prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            break\n        if p\
    \ <= n\n            prime_numbers.push(p)\n        end\n    end\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers.length:end]\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of the squares of the integers in the vector.\n    for example:\n \
    \   >>> square_up_to(5)\n    [1, 4, 9, 16, 25]\n    >>> square_up_to(11)\n   \
    \ [1, 4, 9, 16, 25, 36, 49, 64, 81]\n    >>> square_up_to(0)\n    []\n    >>>\
    \ square_up_to(20)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169]\n\
    \    >>> square_up_to(1)\n    []\n    >>> square_up_to(18)\n    [1, 4, 9, 16,\
    \ 25, 36, 49, 64, 81]\n    \"\"\"", "    if n < 1 \n        Vector{Int64}() \n\
    \    else \n        count_up_to(n-1)\n        push!(Vector{Int64}(), n)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and\
    \ returns the number of integers less than $n$ that are prime numbers. \nFor example\
    \ count_up_to(5) should return 3.\nHint: use the function count_up_to that you\
    \ wrote earlier.", "    \n    primes = prime_numbers(n)\n    \n    prime_numbers\
    \ = Vector{Int64}()\n    \n    for p in primes\n        if p > n\n           \
    \ break\n        elseif p == n\n            prime_numbers.push(p)\n        else\n\
    \            prime_numbers.push(p)\n            \n            if p % 2 == 0\n\
    \                prime_numbers.push(p/2)\n            end\n        end\n    end\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers. \nFor example count_up_to(5) should\
    \ return [2, 3]", "    if n < 1 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns a vector where each element is the product of all the numbers in\
    \ the vector.\nFor example \n>>> product([1,2,3])\n[1,2,3]\n>>> product([1,2,3])\n\
    [1,2,3]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n[1,2]\n>>> product([1,2])\n\
    [1,2]\n>>> product([1,2])\n[1,2]", "    count_up_to = []\n    for n in count_up_to\n\
    \        if n <= 0\n            break\n        if n % 2 == 0\n            count_up_to\
    \ += [2]\n        else\n            count_up_to += [3]\n    end\n    return count_up_to\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 2 \n      \
    \  Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the number of prime numbers less than or equal to that integer.", "    if n\
    \ < 2\n        return Vector{Int64}()\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000000)\n</cell", "    \n    if n < 2\n        return\
    \ Vector{Int64}()\n    end\n    \n    primes = primes_up_to(n)\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a vector\
    \ of the squares of the numbers in the vector.\n    for example:\n    >>> square_up_to(5)\n\
    \    [1, 4, 9, 16, 25]\n    >>> square_up_to(11)\n    [1, 4, 9, 16, 25, 36, 49,\
    \ 64, 81]\n    >>> square_up_to(0)\n    []\n    >>> square_up_to(20)\n    [1,\
    \ 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361,\
    \ 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156,\
    \ 1225, 1296, 1369, 1444, 1501, 1568, 1625, 1696, 1761, 1828, 1891, 1956, 2025,\
    \ 2096, 2169, 2264, 2359, 2464, 2559, 2646, 2749, 2836, 2921, 3001, 3080, 3181,\
    \ 3264, 3359, 3464, 3559, 3658, 3761, 3861, 3961, 4064, 4159, 4264, 4359, 4464,\
    \ 4559, 4657, 4666, 4771, 4861, 4961, 5064, 5159, 5264, 5359, 5464, 5559, 5666,\
    \ 5771, 5871, 5971, 6064, 6159, 6264, 6350, 6457, 6557, 6662, 6767, 6871, 6971,\
    \ 7064, 7159, 7264, 7350, 7457, 7566, 7769, 7871, 7971, 8074, 8179, 8284, 8389,\
    \ 8490, 8599, 8699, 8799, 8899, 8999, 9099, 9199, 9298, 9398, 9498, 9598, 9698,\
    \ 9798, 9898, 999", "    if n < 2\n        Vector{Int64}()\n    else\n       \
    \ primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= ", "    if n == 0\n\
    \        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n isprime ? 1\
    \ : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Implement a function that takes an\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\
    \ \n    For example, count_primes(3) should return 3.", "    if n == 0 \n    \
    \    Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise\
    \ 3\nImplement a function that takes an integer $n$ and returns the first $n$\
    \ prime numbers. \n    for example:\n    >>> count_primes(5)\n    [2, 3, 5, 7]\n\
    \    >>> count_primes(11)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_primes(0)\n\
    \    []\n    >>> count_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_primes(1)\n\
    \    []\n    >>> count_primes(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"",
  "    if n < 0\n        error(\"count_up_to called with negative number\")\n    end\n\
    \    \n    primes = Vector{Int64}()\n    \n    for p in primes\n        if p*p\
    \ > n\n            return primes\n        end\n    end\n    \n    for p in primes\n\
    \        if n % p == 0\n            return primes\n        end\n    end\n    \n\
    \    primes = primes[end] + 1\n    \n    for p in primes\n        if n % p ==\
    \ 0\n            return primes\n        end\n    end\n    \n    return primes\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)", "    if n < 2 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise\nImplement\
    \ a function that takes an non-negative integer and returns a vector of the first\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_up_to(n)\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = primes[primes <= n]\n        primes = primes[primes <= n]\n    \
    \    primes = ", "    if n == 0 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Implement\
    \ a function that takes an integer $n$ and returns the first $n$ prime numbers.\
    \ \n    for example:\n    >>> primes(5)\n    [2, 3, 5, 7]\n    >>> primes(11)\n\
    \    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> primes(0)\n    []\n    >>> primes(20)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    >>> primes(1)\n    []\n    >>> primes(18)\n\
    \    [2, 3, 5, 7, 11, 13]\n    \"\"\"", "    if n < 0\n        error(\"count_up_to\
    \ called with negative number\")\n    end\n    \n    primes = prime_list_generator(n)\n\
    \    \n    prime_numbers = Vector{Int64}()\n    \n    for p in primes\n      \
    \  if p > n\n            push!(prime_numbers, p)\n        end\n    end\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(3)\
    \ should return 3.", "    if n < 0\n        error(\"count_up_to only accepts non-negative\
    \ integers\")\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    ",
  "    if n < 0\n        error(\"count_up_to called with negative number\")\n    end\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    vec = Vector{Int64}()\n    \n\
    \    for p in primes\n        if p < n\n            push!(vec, p)\n        end\n\
    \    end\n    \n    return vec\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns a vector of the squares of the numbers in the vector.\n    for example:\n\
    \    >>> square_up_to(5)\n    [1, 4, 9, 16, 25]\n    >>> square_up_to(11)\n  \
    \  [1, 4, 9, 16, 25, 36, 49, 64, 81]\n    >>> square_up_to(0)\n    []\n    >>>\
    \ square_up_to(20)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169,\
    \ 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841,\
    \ 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1501, 1568, 1625, 1696,\
    \ 1761, 1828, 1891, 1956, 2025, 2096, 2161]\n    >>> square_up_to(1)\n    []\n\
    \    >>> square_up_to(18)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144,\
    \ 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784,\
    \ 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1501, 1568, 1625, 1696,\
    \ 1761, 1828, 1891, 1956, 2025, 2096, 2161]\n    \"\"\"", "    if n < 2\n    \
    \    return Vector{Int64}()\n    \n    primes = Vector{Int64}()\n    \n    for\
    \ p in primes\n        if p*p > n\n            break\n        end\n    end\n \
    \   \n    primes = primes[2:end]\n    \n    count = 0\n    for p in primes\n \
    \       if n % p == 0\n            count += 1\n        end\n    end\n    \n  \
    \  primes = primes[2:end]\n    \n    count = 0\n    for p in primes\n        if\
    \ n % p == 0\n            count += 1\n        end\n    end\n    \n    primes =\
    \ primes[2:end]\n    \n    count = 0\n    for p in primes\n        if n % p ==\
    \ 0\n            count += 1\n        end\n    end\n    \n    primes = primes[2:end]\n\
    \    \n    count = 0\n    for p in primes\n        if n % p == 0\n           \
    \ count += 1\n        end\n    end\n    \n    primes = primes[2:end]\n    \n \
    \   count = 0\n    for p in primes\n        if n % p == 0\n            count +=\
    \ 1\n        end\n    end\n    \n    primes = primes[2:end]\n    \n    count =\
    \ 0\n    for p in primes\n        if n % p == 0\n            count += 1\n    \
    \    end\n    end\n    \n    primes = primes[2:end]\n    \n    count = 0\n   \
    \ for p in primes\n        if n % p == 0\n            count += 1\n        end\n\
    \    end\n    \n    primes = primes[2:end]\n    \n    count = 0\n    for p in\
    \ primes\n        if n % p == 0\n            count += 1\n        end\n    end\n\
    \    \n    primes = primes[2:end]\n    \n    count = 0\n    for p in primes\n\
    \        if n % p == 0\n            count += 1\n        end\n    end\n    \n \
    \   primes = primes[2:end]\n    \n    count = 0\n    for p in primes\n       \
    \ if n % p == 0\n            count += 1\n        end\n    end\n    \n    primes\
    \ = primes[2:end]\n    \n    count = 0\n    for p in primes\n        if n % p\
    \ == 0\n            count += 1\n        end\n    end\n    \n    primes = primes[2:end]\n\
    \    \n    count = 0\n    for p in primes\n        if n % p == 0\n           \
    \ count += 1\n        end\n    end\n    \n    primes = primes[2:end]\n    \n \
    \   count = 0\n    for p in primes\n        if n % p == 0\n            count +=\
    \ 1\n        end\n    end\n    \n    primes = primes[2:end]\n    \n    count =\
    \ 0\n    for p in primes\n        if n % p == 0\n            count += 1\n    \
    \    end\n    end\n    \n    primes = primes[2:end]\n    \n    count = 0\n   \
    \ for p in primes\n", "    \n    if n == 0\n        Vector{Int64}()\n    else\n\
    \        count_up_to(n-1) + [n for n in 1:n if isPrime(n)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.", "    if n < 2\n       \
    \ return Vector{Int64}()\n    \n    primes = prime_list_generator(n)\n    \n \
    \   primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n   \
    \ primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]", "    if n < 0\n        return Vector{Int64}()\n\
    \    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for prime in primes\n        if prime < n\n            prime_numbers.push(prime)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers <\
    \ n]\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n", "    if n == 0\n     \
    \   Vector{}\n    else\n        primes = prime_numbers(n)\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        primes = ", "    \n    if n < 0\n        error(\"count_up_to:\
    \ n must be non-negative\")\n    end\n    \n    primes = prime_list_generator(n)\n\
    \    \n    vector = Vector{Int64}()\n    \n    for p in primes\n        if p >\
    \ n\n            push!(vector, n)\n            break\n        end\n        \n\
    \        if p > n\n            push!(vector, n)\n            break\n        end\n\
    \        \n        for i = 2 to p\n            if p % i == 0\n               \
    \ push!(vector, i)\n                break\n            end\n        end\n    end\n\
    \    \n    return vector\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(1)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example if $n=5$ then $n$ has five prime numbers, namely $2,3,5,7,11$. \nIf\
    \ $n=10$ then $n$ has ten prime numbers, namely $2,3,5,7,11,13,17,19,23$. \nIf\
    \ $n=20$ then $n$ has twenty prime numbers, namely $2,3,5,7,11,13,17,19,23,29,31$.\
    \ \nIf $n=0$ then $n$ has no prime numbers. \nIf $n<0$ then $n$ has no prime numbers.\
    \ \nIf $n$ is less than or equal to 0 then $n$ has no prime numbers. \nIf $n$\
    \ is greater than or equal to 20 then $n$ has twenty prime numbers. \nIf $n$ is\
    \ greater than or equal to 10 then $n$ has ten prime numbers. \nIf $n$ is greater\
    \ than or equal to 5 then $n$ has five prime numbers. \nIf $n$ is greater than\
    \ or equal to 1 then $n$ has no prime numbers. \nIf $n$ is less than or equal\
    \ to 1 then $n$ has no prime numbers. \nIf $n$ is less than or equal to 0 then\
    \ $n$ has no prime numbers. \nIf $n$ is less than or equal to 20 then $n$ has\
    \ twenty prime numbers. \nIf $n$ is less than or equal to 10 then $n$ has ten\
    \ prime numbers. \nIf $n$ is less than or equal to 5 then $n$ has five prime numbers.\
    \ \nIf $n$ is less than or equal to 1 then $n$ has no prime numbers. \nIf $n$\
    \ is less than or equal to 0 then $n$ has no prime numbers. \nIf $n$ is less than\
    \ or equal to ", "    if n == 0 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Implement a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$.", "    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      prime", "    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise\nImplement a function that takes an\
    \ non-negative integer and returns a vector of the first n\n    integers that\
    \ are prime numbers and less than n.\n    for example:\n    >>> count_up_to(5)\n\
    \    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n < 0\n        error(\"count_up_to called with negative number\")\n   \
    \ end\n    \n    primes = Vector{Int64}()\n    \n    for i = 2:n\n        push!(primes,\
    \ i)\n    end\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise\nWrite a function that takes an integer\
    \ $n$ and returns the first $n$ prime numbers. \nFor example count_up_to(5) should\
    \ return [2, 3]", "    if n < 2 \n        Vector{Int64}() \n    else \n      \
    \  count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer and returns the number of prime numbers less\
    \ than or equal to that integer.", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = Vector{Int64}()\n    \n    for p in primes\n        if p*p\
    \ > n\n            break\n        end\n    end\n    \n    primes = primes + [2,3]\n\
    \    \n    for p in primes\n        if n % p == 0\n            break\n       \
    \ end\n    end\n    \n    primes = primes[2:end]\n    \n    return primes\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell",
  "    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= ", "    if n < 2\n        []\n    else\n  \
    \      primes = prime_numbers(n)\n        prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n        prime_", "    if n < 0\n        error(\"count_up_to called with\
    \ negative number\")\n    end\n    \n    primes = prime_numbers(n)\n    \n   \
    \ primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    if n < 2\n        return Vector{Int64}()\n\
    \    end\n    \n    primes = primes_up_to(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ should return 3.", "    if n == 0 \n        Vector{Int64}() \n    else \n  \
    \      count_up_to(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) should return 3.\nHint: you can use the function count_up_to\
    \ that you wrote earlier.", "    if n == 0\n        Vector{}\n    else\n     \
    \   count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$. \nFor example count_primes(5)\
    \ == 3.", "    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1)\
    \ + [n isprime ? 1 : 0]\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes an integer $n$ and returns the number of prime numbers less than\
    \ or equal to $n$.", "    if n < 0\n        error(\"count_up_to: n must be non-negative\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    ", "    if n == 0\n\
    \        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= n]\n        primes = primes[primes <= n]\n     \
    \   primes = primes[primes <= ", "    if n < 2 \n        Vector{Int64}() \n  \
    \  else \n        count_up_to(n-1) + [Int64(n)]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncount_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the number of elements that are not\
    \ equal to zero.", "    if n < 2\n        []\n    else\n        count_up_to(n-1)\
    \ + [n for n in 1:n if prime_number(n)]\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.", "    \n    if n == 0\n        Vector{}\n    else\n\
    \        primes = primes_up_to_n(n)\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n  \
    \      primes = primes[primes <= n]\n        primes = primes[primes <= n]\n",
  "    if n < 1 \n        Vector{Int64}() \n    else \n        count_up_to(n-1) +\
    \ [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(1)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes a positive\
    \ integer $n$ and returns the first $n$ prime numbers. \nHint: use the count_up_to\
    \ function you wrote earlier.", "    if n < 0\n        return Vector{}\n    \n\
    \    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    ",
  "    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1) + [n\
    \ isprime ? 1 : 0]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns a vector of the integers from 1 to that integer.\n\
    \    for example:\n    >>> count_up_to(5)\n    [1, 2, 3, 4]\n    >>> count_up_to(11)\n\
    \    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> count_up_to(0)\n    []\n    >>>\
    \ count_up_to(20)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    \"\"\"", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer $n$ and returns\
    \ the number of prime numbers less than or equal to $n$.", "    if n < 2\n   \
    \     return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        count_up_to(n-1) + [Int64(n)]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an non-negative integer and\
    \ returns a vector of the first n\n    integers that are prime numbers and less\
    \ than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 2\n        return Vector{Int64}()\n\
    \    \n    primes = Vector{Int64}()\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + primes\n    \n    primes = primes + primes\n    \n    primes = primes\
    \ + primes\n    \n    primes = primes + primes\n    \n    primes = primes + primes\n\
    \    \n    primes = primes + primes\n    \n    primes = primes + primes\n    \n\
    \    primes = primes + primes\n    \n    primes = primes + primes\n    \n    primes\
    \ = primes + prime", "    if n <= 0\n        Vector{Int64}()\n    else\n     \
    \   count_up_to(n-1) + [n for n in 1:n if is_prime(n)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ should return 3.", "    if n == 0 \n        Vector{Int64}() \n    else \n  \
    \      count_up_to(n - 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes an integer $n$ and returns the number of prime numbers less\
    \ than or equal to $n$. \nFor example count_primes(5) should return 3 because\
    \ there are 3 prime numbers less than or equal to 5.", "    if n == 0\n      \
    \  Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
