language: jl
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfc5kb84t.jl:15\nin expression starting at /tmp/tmpfc5kb84t.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6uli0si5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6uli0si5.jl:1\n\
    in expression starting at /tmp/tmp6uli0si5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptb7gs4du.jl:17\nin expression starting at /tmp/tmptb7gs4du.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should return true or\
    \ false depending on whether the number is prime or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr9b8i6dr.jl:17\nin expression starting at /tmp/tmpr9b8i6dr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgukme7np.jl:17\nin expression starting at /tmp/tmpgukme7np.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpget00thb.jl:17\nin expression starting at /tmp/tmpget00thb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7: Unique Digits II\nGiven a vector of\
    \ positive integers x. return a sorted vector of all \n    elements that hasn't\
    \ any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwu1faavl.jl:17\nin expression starting at /tmp/tmpwu1faavl.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a sorted vector of all \n    elements that hasn't any\
    \ even digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3o7syl1b.jl:17\nin expression starting at /tmp/tmp3o7syl1b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcf3ov1sk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcf3ov1sk.jl:1\n\
    in expression starting at /tmp/tmpcf3ov1sk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpak6ljjk3.jl:17\nin expression starting at /tmp/tmpak6ljjk3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that given a vector of integers x, return a new vector where each element is\
    \ the sum of the first x elements of the original vector. For example, given x\
    \ = [1, 2, 3], the output should be [3, 6, 9].\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9x26b67m.jl:17\nin expression starting at /tmp/tmp9x26b67m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector of positive\
    \ integers x, returns a sorted vector of all elements that has any even digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmparq_exea.jl:17\nin expression starting at /tmp/tmparq_exea.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of positive\
    \ integers and returns a sorted vector of all elements that has at least two unique\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3n6f723t.jl:15\nin expression starting at /tmp/tmp3n6f723t.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that given a vector\
    \ of integers x, returns its sum.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jxzsjjf.jl:17\nin expression starting at /tmp/tmp1jxzsjjf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmms0ib0.jl:24\nin expression starting at\
    \ /tmp/tmprmms0ib0.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkhy8298m.jl:17\nin expression starting at /tmp/tmpkhy8298m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn5hnwzzm.jl:17\nin expression starting at /tmp/tmpn5hnwzzm.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that given a vector of integers\
    \ x, returns a sorted vector of all elements that hasn't any even digit and that\
    \ hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2gg6gzc_.jl:17\nin expression starting at /tmp/tmp2gg6gzc_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector\
    \ of integers x, it returns the number of integers in x that have no even digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt38rdzd0.jl:17\nin expression starting at /tmp/tmpt38rdzd0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqy6kgysf.jl:17\nin expression starting at /tmp/tmpqy6kgysf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfir20nrd.jl:17\nin expression starting at /tmp/tmpfir20nrd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7: Sum square difference\nGiven a vector of positive integers\
    \ x, and a target value t, \nfind the sum of the squared differences between each\
    \ pair of consecutive numbers in x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_j11hxy3.jl:15\nin expression starting at /tmp/tmp_j11hxy3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of positive integers and returns a sorted vector of all elements that has any\
    \ even digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpit0o0_kc.jl:17\nin expression starting at /tmp/tmpit0o0_kc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one integer as input and return true\
    \ or false accordingly.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmrfamg66.jl:17\nin expression starting at /tmp/tmpmrfamg66.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7: Find all elements that has odd number\
    \ of digits\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpygn9m_kr.jl:17\nin expression starting at /tmp/tmpygn9m_kr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_result = []\n    for x in x\n        if x % 2 == 0\n\
    \            unique_digits_result .= x\n        end\n    end\n    unique_digits_result\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7: Sum square difference\nGiven a vector of positive integers\
    \ x, and a target value t, \nfind the sum of the squared differences between each\
    \ pair of consecutive elements in the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy121vdrm.jl:22\nin expression starting at\
    \ /tmp/tmpy121vdrm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of positive integers and returns a sorted vector of all\
    \ elements that has any even digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2s0w4ikc.jl:17\nin expression starting at /tmp/tmp2s0w4ikc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv5yybha4.jl:17\nin expression starting at /tmp/tmpv5yybha4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime or not. \nA number is prime if its only prime\
    \ factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \n\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph6chmvx3.jl:17\nin expression starting at /tmp/tmph6chmvx3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_array = []\n    for i in x\n        if i mod 2 != 0\n     \
    \       unique_digits_array.append(i)\n        end\n    end\n    unique_digits_array\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8gxxg_vb.jl:15\nin expression starting at /tmp/tmp8gxxg_vb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Sum all odd digits in a number\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg14kvf93.jl:17\nin expression starting at /tmp/tmpg14kvf93.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ mod 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that given a vector\
    \ of positive integers x, returns a sorted vector of all elements that hasn't\
    \ any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm9w_lgx6.jl:17\nin expression starting at /tmp/tmpm9w_lgx6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb7wowfn7.jl:17\nin expression starting at /tmp/tmpb7wowfn7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a sorted vector of all elements that hasn't any even\
    \ digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxrftr5ot.jl:17\nin expression starting at /tmp/tmpxrftr5ot.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@test unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@test unique_digits([152, 323, 1422, 10]) == []\n\
    </cell>\n<text>\nProblem 7: Find all unique permutations of an input vector\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3626yy1l.jl:17\nin expression starting at /tmp/tmp3626yy1l.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4_qliga1.jl:17\nin expression starting at /tmp/tmp4_qliga1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nA number is prime if and only if it has only 1 and itself.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplg_yu2a9.jl:17\nin expression starting at /tmp/tmplg_yu2a9.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one integer as input, and return a\
    \ boolean value.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4yj7vfdh.jl:17\nin expression starting at /tmp/tmp4yj7vfdh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that returns a sorted vector\
    \ of all elements that hasn't any \n    odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1llvjy_x.jl:17\nin expression starting at /tmp/tmp1llvjy_x.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpffgoh6lw.jl:17\nin expression starting at /tmp/tmpffgoh6lw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Set{Int64}()\n    for i in x\n        if !contains(unique_digits,\
    \ i)\n            unique_digits += i\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7a_cgvs6.jl:21\nin expression starting at\
    \ /tmp/tmp7a_cgvs6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:100000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns all elements of a vector\
    \ that doesn't have any even digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfrdhpwm6.jl:17\nin expression starting at /tmp/tmpfrdhpwm6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector\
    \ of integers returns a sorted vector of all elements that hasn't any even digit\
    \ and that hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4si7qt13.jl:17\nin expression starting at /tmp/tmp4si7qt13.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Sum square difference\nGiven a vector of positive\
    \ integers x, and a target value t, \nfind the sum of square difference between\
    \ each pair of consecutive elements \nin x whose value is less than or equal to\
    \ t.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2pebfvx9.jl:17\nin expression starting at /tmp/tmp2pebfvx9.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that given\
    \ a vector of positive integers x, returns a sorted vector of all elements that\
    \ hasn't any even digit and that hasn't any odd digit.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmperurv9wi.jl:17\nin expression starting at /tmp/tmperurv9wi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpren7ogyo.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpren7ogyo.jl:29\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpren7ogyo.jl:30\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpren7ogyo.jl:31\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpren7ogyo.jl:32\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkhy8298m.jl:17\nin expression starting at /tmp/tmpkhy8298m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptb7gs4du.jl:17\nin expression starting at /tmp/tmptb7gs4du.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_result = []\n    for x in x\n        if x % 2 == 0\n      \
    \      unique_digits_result.append(x)\n        end\n    end\n    unique_digits_result\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7: unique_digits\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zf9wmjx.jl:21\nin expression starting at\
    \ /tmp/tmp4zf9wmjx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkhy8298m.jl:17\nin expression starting at /tmp/tmpkhy8298m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_set = Set{Int64}()\n    unique_digits_set = unique_digits_set\
    \ + x\n    unique_digits_set = unique_digits_set - Set{Int64}([i for i in x if\
    \ i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i for\
    \ i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set - Set\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpiupdo75j.jl:16\nin expression starting at /tmp/tmpiupdo75j.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpps5zmzeh.jl:15\nin expression starting at /tmp/tmpps5zmzeh.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_vector = Vector{Int64}()\n    \n    for i in x\n    \
    \    if i mod 2 != 0\n            push!(unique_digits_vector, i)\n        end\n\
    \    end\n    \n    unique_digits_vector\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of integers\
    \ \n    that has all even digits in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7r1b_5fi.jl:17\nin expression starting at /tmp/tmp7r1b_5fi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_ = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 == 0\n            push!(unique_digits_, i)\n        end\n    end\n \
    \   \n    return unique_digits_\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4_yjzvtk.jl:17\nin expression starting at /tmp/tmp4_yjzvtk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that given a vector of positive\
    \ integers x, returns a sorted vector of all elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfhgyl4n3.jl:17\nin expression starting at /tmp/tmpfhgyl4n3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of positive integers and returns a sorted vector of all elements that hasn't\
    \ any even digit and that hasn't any odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6va7g66.jl:24\nin expression starting at\
    \ /tmp/tmpp6va7g66.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhi8hy7d.jl:24\nin expression starting at\
    \ /tmp/tmpvhi8hy7d.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ all elements that has any even digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyyy9t14r.jl:17\nin expression starting at /tmp/tmpyyy9t14r.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn5hnwzzm.jl:17\nin expression starting at /tmp/tmpn5hnwzzm.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn31y1alb.jl:24\nin expression starting at\
    \ /tmp/tmpn31y1alb.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_ = Set()\n    unique_digits_.add(x)\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 2 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 3 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 5 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 7 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 11 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 13 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 17 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 19 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 23 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 29 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 31 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 37 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 41 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 43 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 47 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 53 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 59 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 61 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 67 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 71 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 73 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_digits_ if i mod 79 == 0])\n    unique_digits_\
    \ = unique_digits_ - Set([i for i in unique_\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmploeoxvm_.jl:16\nin expression starting at /tmp/tmploeoxvm_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.3>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a vector of positive integers and returns\
    \ a sorted vector of all elements that has at least two unique digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxa4gxn3k.jl:15\nin expression starting at /tmp/tmpxa4gxn3k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1195_811.jl:17\nin expression starting at /tmp/tmp1195_811.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpren7ogyo.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpren7ogyo.jl:29\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpren7ogyo.jl:30\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpren7ogyo.jl:31\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpren7ogyo.jl:32\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpren7ogyo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpren7ogyo.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for x in x\n        if x % 2 == 0\n\
    \            push!(unique_digits, x)\n        end\n    end\n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6lvr5bx4.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp6lvr5bx4.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6lvr5bx4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lvr5bx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6lvr5bx4.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6lvr5bx4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lvr5bx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6lvr5bx4.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6lvr5bx4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lvr5bx4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6lvr5bx4.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6lvr5bx4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lvr5bx4.jl:25\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_ = Set()\n    for i in x\n        if i mod 2 != 0\n       \
    \     unique_digits_.add(i)\n        end\n    end\n    unique_digits_\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplz1ro2aw.jl:15\nin expression starting at /tmp/tmplz1ro2aw.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that given an integer\
    \ x returns its factorial. \n    \n    For example:\n    >>> factorial(5)\n  \
    \  120\n    >>> factorial(10)\n    3628800\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprzb33z0s.jl:17\nin expression starting at /tmp/tmprzb33z0s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that given a vector of integers\
    \ returns a sorted vector of all \n    elements that hasn't any even digit and\
    \ all elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecrd074c.jl:24\nin expression starting at\
    \ /tmp/tmpecrd074c.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Unique digits\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7cv4an93.jl:17\nin expression starting at /tmp/tmp7cv4an93.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one integer as input and return true\
    \ or false as output.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6nwhi5cj.jl:17\nin expression starting at /tmp/tmp6nwhi5cj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_oome9og.jl:17\nin expression starting at /tmp/tmp_oome9og.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_helper(x, [], 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpq8t92458.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpq8t92458.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stac"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_helper(x, [], 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpq8t92458.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpq8t92458.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stac"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkhy8298m.jl:17\nin expression starting at /tmp/tmpkhy8298m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise\nWrite a function that given a vector\
    \ of integers x, returns a sorted vector of all elements that hasn't any even\
    \ digit and all elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgsdyjdhn.jl:17\nin expression starting at /tmp/tmpgsdyjdhn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take in a single integer and return a boolean.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9k6jqcum.jl:17\nin expression starting at /tmp/tmp9k6jqcum.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of integers and returns a vector where each element is the sum of the integers\
    \ in the original vector, except for those that have no even digit.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f7w93zu.jl:24\nin expression starting at\
    \ /tmp/tmp3f7w93zu.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_ = Vector{Int64}()\n    \n    for i in x\n        if\
    \ i mod 2 == 0\n            push!(unique_digits_, i)\n        end\n    end\n \
    \   \n    unique_digits_\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector of positive\
    \ integers x, return a sorted vector of all elements that has any even digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphptsxfzd.jl:17\nin expression starting at /tmp/tmphptsxfzd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy9gc1lho.jl:17\nin expression starting at /tmp/tmpy9gc1lho.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector of integers\
    \ x, returns a sorted vector of all \n    elements that has at least one even\
    \ digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3xftjesx.jl:17\nin expression starting at /tmp/tmp3xftjesx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp825j4g2b.jl:15\nin expression starting at /tmp/tmp825j4g2b.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function that takes a vector\
    \ of integers and returns a vector of all \n    elements that has even number\
    \ of digits.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqzxaq4m7.jl:17\nin expression starting at /tmp/tmpqzxaq4m7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7: Unique Digits II\nGiven a vector of\
    \ positive integers x. return a sorted vector of all \n    elements that hasn't\
    \ any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphxetorwh.jl:17\nin expression starting at /tmp/tmphxetorwh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_vector = Vector{Int64}()\n    \n    for i in x\n    \
    \    if i mod 2 == 0\n            push!(unique_digits_vector, i)\n        end\n\
    \    end\n    \n    unique_digits_vector\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm9v1588b.jl:17\nin expression starting at /tmp/tmpm9v1588b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of unique elements in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp983ddekq.jl:17\nin expression starting at /tmp/tmp983ddekq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn5hnwzzm.jl:17\nin expression starting at /tmp/tmpn5hnwzzm.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take one integer as input, and return\
    \ true or false accordingly.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpycyq8y8v.jl:17\nin expression starting at /tmp/tmpycyq8y8v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxp61tkpx.jl:17\nin expression starting at /tmp/tmpxp61tkpx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite a function that returns a sorted\
    \ vector of all elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe8wnl1uu.jl:17\nin expression starting at /tmp/tmpe8wnl1uu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_result = []\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits_result, i)\n        end\n    end\n   \
    \ \n    unique_digits_result\nend\n</cell>\n<code language=julia-1.3>\n@assert\
    \ unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is prime or not. \nThe function should take one integer as input,\
    \ and return true or false.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5aj9cbmk.jl:17\nin expression starting at /tmp/tmp5aj9cbmk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkhy8298m.jl:17\nin expression starting at /tmp/tmpkhy8298m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ prime (has only 1 and itself as factors). \nThe function should return true\
    \ or false as output.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw3d1l0sb.jl:17\nin expression starting at /tmp/tmpw3d1l0sb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that given a vector of integers\
    \ x, returns its sum.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj7jy4k7n.jl:17\nin expression starting at /tmp/tmpj7jy4k7n.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.3>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of integers in a given vector that are\ndivisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz21z2gf1.jl:17\nin expression starting at /tmp/tmpz21z2gf1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz053c9q2.jl:17\nin expression starting at /tmp/tmpz053c9q2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyb2mg35v.jl:17\nin expression starting at /tmp/tmpyb2mg35v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb50aca2k.jl:16\nin expression starting at /tmp/tmpb50aca2k.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for el in x\n        if\
    \ el % 2 == 0\n            push!(unique_digits, el)\n        end\n    end\n  \
    \  \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 9\nWrite a function that returns a sorted vector\
    \ of all elements that hasn't any \neven digit and that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqo4tv2x.jl:24\nin expression starting at\
    \ /tmp/tmptqo4tv2x.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_ = Vector{Int64}(undef, 0)\n    \n    for x in x\n  \
    \      if x % 2 == 0\n            push!(unique_digits_, x)\n        end\n    end\n\
    \    \n    unique_digits_\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1h91okrd.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp1h91okrd.jl:29\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h91okrd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h91okrd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1h91okrd.jl:30\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h91okrd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h91okrd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1h91okrd.jl:31\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h91okrd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h91okrd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1h91okrd.jl:32\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h91okrd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h91okrd.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector of positive\
    \ integers x. return a sorted vector of all \n    elements that hasn't any odd\
    \ digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl1x1owhy.jl:17\nin expression starting at /tmp/tmpl1x1owhy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take in a single integer and return a\
    \ boolean.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_eb9v5g.jl:17\nin expression starting at /tmp/tmpq_eb9v5g.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkhy8298m.jl:17\nin expression starting at /tmp/tmpkhy8298m.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns all\
    \ elements that hasn't any even digit in a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpml_pypcp.jl:17\nin expression starting at /tmp/tmpml_pypcp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 9\nWrite a function that checks if a number is\
    \ prime or not. \nA prime number is a natural number greater than 1 that has no\
    \ positive divisors other than 1 and itself.\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp55deiszh.jl:17\nin expression starting at /tmp/tmp55deiszh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfdmrk4ew.jl:15\nin expression starting at /tmp/tmpfdmrk4ew.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that given a vector of positive\
    \ integers x, it returns the number of elements that has any even digit.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdul_6up8.jl:17\nin expression starting at /tmp/tmpdul_6up8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000));\n\
    </cell>\n<text>\nProblem 7: Unique Digits II\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfy9njio_.jl:17\nin expression starting at /tmp/tmpfy9njio_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Find all unique words in a given text file\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx4ghd3nz.jl:17\nin expression starting at /tmp/tmpx4ghd3nz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of positive integers and returns a sorted vector of all elements that has any\
    \ even digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpit0o0_kc.jl:17\nin expression starting at /tmp/tmpit0o0_kc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for x in x\n        if x mod 2 == 0\n\
    \            push!(unique_digits, x)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nExercise 3\nWrite a function that given a vector of integers x, it returns\
    \ the number of integers that has \nno even digit in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmbaonukm.jl:15\nin expression starting at /tmp/tmpmbaonukm.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeuj13_6v.jl:17\nin expression starting at /tmp/tmpeuj13_6v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7\nWrite a function that checks if a number is prime or not. \n\
    The function should take in a single integer and output a boolean.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpix35f24g.jl:15\nin expression starting at /tmp/tmpix35f24g.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_helper(x, [], 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpq8t92458.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpq8t92458.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stac"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 4\nWrite a function that given a vector of positive\
    \ integers x, returns a sorted vector of all elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp88amxvpn.jl:17\nin expression starting at /tmp/tmp88amxvpn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7g232ld.jl:17\nin expression starting at /tmp/tmpt7g232ld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Sum square difference\nGiven a vector of positive\
    \ integers x. return a sorted vector of all elements that hasn't any even digit\
    \ and sum of square of difference between each two consecutive elements.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg2wcr9uc.jl:17\nin expression starting at /tmp/tmpg2wcr9uc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x\
    \ % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Unique digits\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0w_gkhf.jl:24\nin expression starting at\
    \ /tmp/tmpa0w_gkhf.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should take one integer\
    \ as input. \nThe function should return true if the number is prime and false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc953cdb4.jl:17\nin expression starting at /tmp/tmpc953cdb4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ prime or not. \nA number is prime if all its digits except one are prime.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprkja4aiz.jl:17\nin expression starting at /tmp/tmprkja4aiz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpps5zmzeh.jl:15\nin expression starting at /tmp/tmpps5zmzeh.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that given a vector of integers\
    \ x, returns a sorted vector of all elements that hasn't any even digit and that\
    \ hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2gg6gzc_.jl:17\nin expression starting at /tmp/tmp2gg6gzc_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns all elements of a vector that satisfy a given condition. For example,\
    \ given [1,2,3,4,5,6,7,8,9,10], return [2,4,6,8,10].\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu5uap6i9.jl:17\nin expression starting at /tmp/tmpu5uap6i9.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is prime or not. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7_anpv0l.jl:17\nin expression starting at /tmp/tmp7_anpv0l.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_helper(x)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpn71bevym.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpn71bevym.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn71bevym.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn71bevym.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn71bevym.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpn71bevym.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn71bevym.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn71bevym.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn71bevym.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpn71bevym.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpn71bevym.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn71bevym.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn71bevym.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpn71bevym.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stac"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_vector = Vector{Int64}()\n    \n    for i in x\n    \
    \    if i mod 2 != 0\n            push!(unique_digits_vector, i)\n        end\n\
    \    end\n    \n    return unique_digits_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwbv9izgs.jl:17\nin expression starting at /tmp/tmpwbv9izgs.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for el in x\n        if\
    \ el % 2 == 0\n            push!(unique_digits, el)\n        end\n    end\n  \
    \  \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98jfgdds.jl:24\nin expression starting at\
    \ /tmp/tmp98jfgdds.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x % 2 ==\
    \ 0\n            push!(unique_digits, x)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmper5tn7_9.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmper5tn7_9.jl:28\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper5tn7_9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper5tn7_9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmper5tn7_9.jl:29\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper5tn7_9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper5tn7_9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmper5tn7_9.jl:30\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper5tn7_9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper5tn7_9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmper5tn7_9.jl:31\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper5tn7_9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper5tn7_9.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyb2mg35v.jl:17\nin expression starting at /tmp/tmpyb2mg35v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcymzlw0_.jl:15\nin expression starting at /tmp/tmpcymzlw0_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_set = Set{Int64}()\n    unique_digits_set = unique_digits_set\
    \ + x\n    unique_digits_set = unique_digits_set - Set{Int64}([i for i in x if\
    \ i%2 == 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i for i\
    \ in x if i%2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i%2 == 0 and i%2 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i%2 != 0 and i%2 == 0])\n    unique_digits_set\
    \ = unique_digits_set - Set{Int64}([i for i in x if i%2 != 0 and i%2 != 0])\n\
    \    unique_digits_set = unique_digits_set - Set{Int64}([i for i in x if i%2 !=\
    \ 0 and i%2 != 0 and i%2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0])\n    unique_digits_set\
    \ = unique_digits_set - Set{Int64}([i for i in x if i%2 != 0 and i%2 != 0 and\
    \ i%2 != 0 and i%2 != 0 and i%2 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 !=\
    \ 0 and i%2 != 0 and i%2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0 and\
    \ i%2 != 0 and i%2 != 0])\n    unique_digits_set = unique_digits_set - Set{Int64}([i\
    \ for i in x if i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0 and\
    \ i%2 != 0 and i%2 != 0 and i%2 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 !=\
    \ 0 and i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0 and i%2 != 0])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmppqmqwlo1.jl:18\nin expression starting at /tmp/tmppqmqwlo1.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@test unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@test unique_digits([152, 323, 1422, 10]) == []\n\
    </cell>\n<text>\nExercise 2\nWrite a function that given a vector of integers\
    \ x, return a sorted vector of all \n    elements that hasn't any even digit and\
    \ all elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgderrrda.jl:17\nin expression starting at /tmp/tmpgderrrda.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn5hnwzzm.jl:17\nin expression starting at /tmp/tmpn5hnwzzm.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76avgn7b.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76avgn7b.jl:1\n\
    in expression starting at /tmp/tmp76avgn7b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that given a vector of integers\
    \ x, return a new vector where each element is the product of all the numbers\
    \ in the original vector. \nFor example, given [1,2,3], return [1,2,6].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxb4q69ds.jl:17\nin expression starting at /tmp/tmpxb4q69ds.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_helper(x, [], 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpq8t92458.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpq8t92458.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpq8t92458.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8t92458.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8t92458.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq8t92458.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stac"
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphedar4o3.jl:17\nin expression starting at /tmp/tmphedar4o3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuovnbxet.jl:17\nin expression starting at /tmp/tmpuovnbxet.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxvyk2dx.jl:17\nin expression starting at /tmp/tmpmxvyk2dx.jl:17\n"
  stdout: ''
