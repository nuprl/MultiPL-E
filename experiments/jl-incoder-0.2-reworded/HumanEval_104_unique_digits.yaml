name: HumanEval_104_unique_digits
language: jl
prompt: "\"\"\"Given a vector of positive integers x. return a sorted vector of all\
  \ \n    elements that hasn't any even digit.\n\n    Note: Returned vector should\
  \ be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
  \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
  \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
  \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
  \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
  \ 103, 31]) == [31, 135])\nend\n"
completions: ["    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. \nThe function should return true or false\
    \ depending on whether the number is prime or not.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nA prime number is a natural number greater than 1 that has no\
    \ positive divisors other than 1 and itself.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n     \
    \   if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7: Unique Digits II\nGiven a vector of\
    \ positive integers x. return a sorted vector of all \n    elements that hasn't\
    \ any odd digit.", "    \n    unique_digits = Vector{Int64}()\n    \n    for i\
    \ in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a sorted vector of all \n    elements that hasn't\
    \ any even digit.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n  \
    \  \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=juli", "    \n    unique_digits = Vector{Int64}()\n    \n    for i\
    \ in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ given a vector of integers x, return a new vector where each element is the\
    \ sum of the first x elements of the original vector. For example, given x = [1,\
    \ 2, 3], the output should be [3, 6, 9].", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n\
    @assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 2\n\
    Write a function that given a vector of positive integers x, returns a sorted\
    \ vector of all elements that has any even digit.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    unique_digits = Vector{Int64}()\n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    return unique_digits\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of positive integers and returns a sorted\
    \ vector of all elements that has at least two unique digits.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that given a vector of integers x, returns its sum.",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x %\
    \ 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 ==\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n\
    @assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3\n\
    Write a function that given a vector of integers x, returns a sorted vector of\
    \ all elements that hasn't any even digit and that hasn't any odd digit.", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that given a vector\
    \ of integers x, it returns the number of integers in x that have no even digit.",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n  \
    \  \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nGiven a vector of positive integers x. return a sorted vector of all\
    \ \n    elements that hasn't any odd digit.", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 7: Sum square difference\nGiven\
    \ a vector of positive integers x, and a target value t, \nfind the sum of the\
    \ squared differences between each pair of consecutive numbers in x.", "    \n\
    \    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of positive integers and returns\
    \ a sorted vector of all elements that has any even digit.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime or not.\
    \ \nThe function should take one integer as input and return true or false accordingly.",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7: Find all elements that has odd number\
    \ of digits", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    unique_digits_result = []\n    for x in x\n        if x % 2 == 0\n \
    \           unique_digits_result .= x\n        end\n    end\n    unique_digits_result\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7: Sum square difference\nGiven a vector of positive integers\
    \ x, and a target value t, \nfind the sum of the squared differences between each\
    \ pair of consecutive elements in the vector.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of positive integers and returns\
    \ a sorted vector of all elements that has any even digit.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n\
    \        if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    \n    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if its\
    \ only prime factors are 1 and itself. \nA number is not prime if its only prime\
    \ factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \nA number is not prime if its only prime factors are 1 and itself.\
    \ \nA number is not prime if its only prime factors are 1 and itself. \nA number\
    \ is not prime if its only prime factors are 1 and itself. \nA number is not prime\
    \ if its only prime factors are 1 and itself. \nA number is not prime if its only\
    \ prime factors are 1 and itself. \nA number is not prime if its only prime factors\
    \ are 1 and itself. \nA number is not prime if its only prime factors are 1 and\
    \ itself. \n", "    unique_digits_array = []\n    for i in x\n        if i mod\
    \ 2 != 0\n            unique_digits_array.append(i)\n        end\n    end\n  \
    \  unique_digits_array\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Problem 7: Sum all odd digits in a number", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that given a vector of positive integers x, returns a sorted vector of all elements\
    \ that hasn't any odd digit.", "    \n    unique_digits = Vector{Int64}()\n  \
    \  \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a sorted vector of all elements that hasn't any even\
    \ digit.", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n\
    \        if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@test unique_digits([152, 323,\
    \ 1422, 10]) == []\n</cell>\n<text>\nProblem 7: Find all unique permutations of\
    \ an input vector", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
