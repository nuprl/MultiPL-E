language: jl
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n/2)*3\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n\
    </cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0spwttgn.jl:14\nin expression starting at\
    \ /tmp/tmp0spwttgn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*10 + digits(n%2) \nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeteki74v.jl:14\nin expression starting at\
    \ /tmp/tmpeteki74v.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*10 + digits(n%2) \nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the product\
    \ of the even digits in a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvnll7g2.jl:14\nin expression starting at\
    \ /tmp/tmpwvnll7g2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*10 + digits(n%2) \nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the even digits in a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5vf3_wv.jl:14\nin expression starting at\
    \ /tmp/tmpo5vf3_wv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0 \n    if n==1 then return\
    \ 1 \n    if n%2==0 then return n*digits(n/2) \n    else return n*digits(n/2)\
    \ \nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use the function digits\
    \ to do this.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqgbjqi44.jl:12\nin expression starting at /tmp/tmpqgbjqi44.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n==1\
    \ \n        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*10 + digits(n%2) \nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function digits_sum(n::Int64)::Int64\
    \ which returns the sum of the odd digits of n.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuq2rhco7.jl:14\nin expression starting at\
    \ /tmp/tmpuq2rhco7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else \n      \
    \  return n % 10 * digits(n / 10)\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n\
    </cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the even digits in a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpib5qxs.jl:17\nin expression starting at\
    \ /tmp/tmphpib5qxs.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else \n    \
    \    return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ Use a recursive function.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovehloj_.jl:17\nin expression starting at\
    \ /tmp/tmpovehloj_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 1 \n        0\n    else\
    \ \n        digits(n / 2)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of all the integers from 1 to n.\nFor example,\
    \ sum_range(1, 10) should return 55.\nHint: Use sum_range()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1i7ynhe.jl:14\nin expression starting at\
    \ /tmp/tmpr1i7ynhe.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n/2)*3\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n\
    </cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5t2uqhs.jl:14\nin expression starting at\
    \ /tmp/tmp_5t2uqhs.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 = 10.\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(12345) = 1 + 2 + 3 + 4 = 10.\nWrite a function that returns the sum of\
    \ the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 = 10.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qvgpv8y.jl:14\nin expression starting at\
    \ /tmp/tmp6qvgpv8y.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2)\n    else \n        return digits(n / 2) * 3 + 1\nend\n</cell>\n\
    <code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function named digits_sum that takes a positive integer n and returns\
    \ the sum of the odd digits of n.\nFor example:\n>>> digits_sum(123)\n6\n>>> digits_sum(1234)\n\
    9\n>>> digits_sum(1235)\n10\n>>> digits_sum(1236)\n11\n>>> digits_sum(1237)\n\
    12\n>>> digits_sum(1238)\n13\n>>> digits_sum(1239)\n14\n>>> digits_sum(1240)\n\
    15\n>>> digits_sum(1241)\n16\n>>> digits_sum(1242)\n17\n>>> digits_sum(1243)\n\
    18\n>>> digits_sum(1244)\n19\n>>> digits_sum(1245)\n20\n>>> digits_sum(1246)\n\
    21\n>>> digits_sum(1247)\n22\n>>> digits_sum(1248)\n23\n>>> digits_sum(1249)\n\
    24\n>>> digits_sum(1250)\n25\n>>> digits_sum(1251)\n26\n>>> digits_sum(1252)\n\
    27\n>>> digits_sum(1253)\n28\n>>> digits_sum(1254)\n29\n>>> digits_sum(1255)\n\
    30\n>>> digits_sum(1256)\n31\n>>> digits_sum(1257)\n32\n>>> digits_sum(1258)\n\
    33\n>>> digits_sum(1259)\n34\n>>> digits_sum(1260)\n35\n>>> digits_sum(1261)\n\
    36\n>>> digits_sum(1262)\n37\n>>> digits_sum(1263)\n38\n>>> digits_sum(1264)\n\
    39\n>>> digits_sum(1265)\n40\n>>> digits_sum(1266)\n41\n>>> digits_sum(1267)\n\
    42\n>>> digits_sum(1268)\n43\n>>> digits_sum(1269)\n44\n>>> digits_sum(1270)\n\
    45\n>>> digits_sum(1271)\n46\n>>> digits_sum(1272)\n47\n>>> digits_sum(1273)\n\
    48\n\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg77fa_vg.jl:14\nin expression starting at\
    \ /tmp/tmpg77fa_vg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2) * digits(n / 2)\n    else \n        return digits(n / 2) * digits(n\
    \ / 2) + digits(n / 2)\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygv5l8lo.jl:14\nin expression starting at\
    \ /tmp/tmpygv5l8lo.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else \n      \
    \  return prod(digits(n//10), digits(n%10)) \nend \n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function is_palindrome(n) that\
    \ returns true if n is a palindrome and false if n is not a palindrome.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp2vx_4l.jl:17\nin expression starting at\
    \ /tmp/tmpnp2vx_4l.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then 0 else n % 10 * digits(n / 10)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the product of the even digits in a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpijmwjb28.jl:12\nin expression starting at /tmp/tmpijmwjb28.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z9brc2w.jl:17\nin expression starting at\
    \ /tmp/tmp_z9brc2w.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1) * 3\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the function digits()\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_0w0ylg.jl:14\nin expression starting at\
    \ /tmp/tmpw_0w0ylg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2)\n    else \n        return digits(n / 2) * 3 + 1\nend\n</cell>\n\
    <code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the digits of an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hk_dc6f.jl:14\nin expression starting at\
    \ /tmp/tmp1hk_dc6f.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        return 0 \n    else \n   \
    \     return n % 10 * digits(n / 10)\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 10.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_76wkgr0.jl:17\nin expression starting at\
    \ /tmp/tmp_76wkgr0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)+digits(n%1000000000)\n\
    \    else if n<100000000000 \n        digits(n/10)*10+digits(n%10)+digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhz9s38.jl:14\nin expression starting at\
    \ /tmp/tmpqbhz9s38.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n\
    <code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(1234) = 1 + 2 + 3 + 4 = 10.\nWrite a function\
    \ that returns the sum of the digits of an integer.\nFor example, digits(1234)\
    \ = 1 + 2 + 3 + 4 = 10.\nWrite a function that returns the sum of the digits of\
    \ an integer.\nFor example, digits(1234) = 1 + 2 + 3 + 4 = 10.\nWrite a function\
    \ that returns the sum of the digits of an integer.\nFor example, digits(1234)\
    \ = 1 + 2 + 3 + 4 = 10.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzglwya10.jl:12\nin expression starting at /tmp/tmpzglwya10.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else if n % 2 == 0\
    \ \n        digits(n / 2)\n    else \n        digits(n / 2) * 3\nend\n</cell>\n\
    <code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(123) = 1 + 2 + 3 = 6\nHint: use the function digits(n) to get the digits\
    \ of n.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qlmnouh.jl:14\nin expression starting at\
    \ /tmp/tmp4qlmnouh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 \n        return n\n    else \n      \
    \  return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the function digits(n) to get the digits of n.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrl7rb4v.jl:17\nin expression starting at\
    \ /tmp/tmpcrl7rb4v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n\
    <code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 15.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6paopb0n.jl:12\nin expression starting at /tmp/tmp6paopb0n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n//2)\n    else if n<100 \n \
    \       digits(n//10)*10\n    else if n<1000 \n        digits(n//100)*100\n  \
    \  else if n<10000 \n        digits(n//1000)*1000\n    else if n<100000 \n   \
    \     digits(n//10000)*10000\n    else if n<1000000 \n        digits(n//100000)*100000\n\
    \    else if n<10000000 \n        digits(n//1000000)*1000000\n    else if n<100000000\
    \ \n        digits(n//10000000)*10000000\n    else if n<1000000000 \n        digits(n//100000000)*100000000\n\
    \    else if n<10000000000 \n        digits(n//1000000000)*1000000000\n    else\
    \ if n<100000000000 \n        digits(n//10000000000)*10000000000\n    else if\
    \ n<1000000000000 \n        digits(n//100000000000)*100000000000\n    else if\
    \ n<10000000000000 \n        digits(n//1000000000000)*1000000000000\n    else\
    \ if n<100000000000000 \n        digits(n//10000000000000)*10000000000000\n  \
    \  else if n<1000000000000000 \n        digits(n//100000000000000)*100000000000000\n\
    \    else if n<10000000000000000 \n        digits(n//1000000000000000)*1000000000000000\n\
    \    else if n<100000000000000000 \n        digits(n//10000000000000000)*10000000000000000\n\
    \    else if n<1000000000000000000 \n        digits(n//100000000000000000)*100000000000000000\n\
    \    else if n<10000000000000000000 \n        digits(n//1000000000000000000)*1000000000000000000\n\
    \    else if n<100000000000000000000 \n        digits(n//10000000000000000000)*10000000000000000000\n\
    \    else if n<1000000000000000000000 \n        digits(n//100000000000000000000)*100000000000000000000\n\
    \    else if n<10000000000000000000000 \n        digits(n//1000000000000000000000)*1000000000000000000000\n\
    \    else if n<100000000000000000000000 \n        digits(n//10000000000000000000000)*10000000000000000000000\n\
    \    else if n\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixsloc2p.jl:14\nin expression starting at\
    \ /tmp/tmpixsloc2p.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*(n%2)*(n%2)\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the product of the even digits in a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplgd7_xsc.jl:17\nin expression starting at\
    \ /tmp/tmplgd7_xsc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else \n        digits(n\
    \ / 10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.4>\ndigits(1)\n</cell>\n\
    <code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\ndigits(235)\n\
    </cell>\n<text>\nExercise\nWrite a function digits_sum(n::Int64)::Int64 which\
    \ returns the sum of the digits of the number n.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20gj0dp6.jl:17\nin expression starting at\
    \ /tmp/tmp20gj0dp6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        return 1\n    else if n==2 \n        return 2\n    else if n==3 \n\
    \        return 3\n    else if n==4 \n        return 6\n    else if n==5 \n  \
    \      return 10\n    else if n==6 \n        return 15\n    else if n==7 \n  \
    \      return 21\n    else if n==8 \n        return 28\n    else if n==9 \n  \
    \      return 36\n    else \n        error(\"n must be positive\")\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise\nWrite\
    \ a function digits(n::Int64) which returns the product of the odd digits of n.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe63pixud.jl:14\nin expression starting at\
    \ /tmp/tmpe63pixud.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*(n%2)*(n%2)\n\
    end\n</code>\n<|/ a tags=recursion,julia,algorithm |>\n<| c |>\nThis does not\
    \ work. `digits(1)` returns `1`, but `digits(4)` returns `0`.\n<|/ c |>\n<| c\
    \ |>\nYes, I missed that case. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=recursion,julia,algorithm |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprptlyojw.jl:17\nin expression starting at\
    \ /tmp/tmprptlyojw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer n.\nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\n\
    Hint: use the factorial function from the predefined library Math\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5kn4_r17.jl:12\nin expression starting at /tmp/tmp5kn4_r17.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else if n % 2 == 0\
    \ \n        digits(n / 2)\n    else \n        digits(n / 2) * 3\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(123) = 1 + 2 + 3 = 6\nHint: You can use the function digits to solve\
    \ this problem.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobzc2v7x.jl:14\nin expression starting at\
    \ /tmp/tmpobzc2v7x.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*10 + digits(n%2)\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function digits_sum(n::Int64)::Int64\
    \ which returns the sum of the digits of n.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmhzokrr.jl:14\nin expression starting at\
    \ /tmp/tmppmhzokrr.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2) * digits(n / 2)\n    else \n        return digits(n / 2) * digits(n\
    \ / 2) + digits(n / 2)\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ digits in a number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t\
    @test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp090nw3p0.jl:14\nin expression starting at\
    \ /tmp/tmp090nw3p0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else \n        if n\
    \ % 2 == 0 \n            digits(n / 2)\n        else \n            digits(n /\
    \ 2) * 3\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the product of the even digits in a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfh2jlf6.jl:20\nin expression starting at\
    \ /tmp/tmpnfh2jlf6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0 \n    else if n%2==0 then\
    \ return n*digits(n/2) \n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to do this.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp17ehgwg5.jl:12\nin expression starting at /tmp/tmp17ehgwg5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n\
    <code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwgenah66.jl:12\nin expression starting at /tmp/tmpwgenah66.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)*10\
    \ + digits(n%10)\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n\
    <code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 10.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp82kjgtm1.jl:12\nin expression starting at /tmp/tmp82kjgtm1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000+digits(n%10000000)/1000000\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000+digits(n%10000000)/1000000+digits(n%100000000)/10000000\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze4vsqlb.jl:14\nin expression starting at\
    \ /tmp/tmpze4vsqlb.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * 3\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(12) should return 3 + 4 = 6.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yafw5qf.jl:14\nin expression starting at\
    \ /tmp/tmp9yafw5qf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else \n      \
    \  return n % 10 * digits(n / 10)\nend\n</cell>\n<code language=julia-1.4>\ndigits(1)\n\
    </cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to get the individual digits of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6robduu.jl:17\nin expression starting at\
    \ /tmp/tmpf6robduu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10+(n%10)\n    else \n\
    \        digits(n/10)*10+(n%10)*10+(n%10)/10\nend\n</cell>\n<code language=julia-1.1>\n\
    digits(1)\n</cell>\n<code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the digits() function you wrote earlier.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7s_uw1zf.jl:14\nin expression starting at\
    \ /tmp/tmp7s_uw1zf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else\n        n % 2\
    \ == 0 ? n * digits(n / 2) : digits(n / 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    digits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjsppyww.jl:17\nin expression starting at\
    \ /tmp/tmptjsppyww.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 \n        return n\n    else \n      \
    \  return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of all even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhl44d05.jl:17\nin expression starting at\
    \ /tmp/tmpwhl44d05.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*3+1\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to get the individual digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqv158nb.jl:14\nin expression starting at\
    \ /tmp/tmpuqv158nb.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n%2==0 \n        digits(n/2)\n  \
    \  else \n        digits(n/2)*3\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n\
    </cell>\n<code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of the number n.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to do this.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_w03xx9r.jl:14\nin expression starting at\
    \ /tmp/tmp_w03xx9r.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the function digits(n) to get the digits of n.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputv2hr5i.jl:14\nin expression starting at\
    \ /tmp/tmputv2hr5i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n==3 \n        3\n    else if n==4 \n        4\n  \
    \  else if n==5 \n        5\n    else if n==6 \n        6\n    else if n==7 \n\
    \        7\n    else if n==8 \n        8\n    else if n==9 \n        9\n    else\
    \ if n==10 \n        10\n    else if n==11 \n        11\n    else if n==12 \n\
    \        12\n    else if n==13 \n        13\n    else if n==14 \n        14\n\
    \    else if n==15 \n        15\n    else if n==16 \n        16\n    else if n==17\
    \ \n        17\n    else if n==18 \n        18\n    else if n==19 \n        19\n\
    \    else if n==20 \n        20\n    else if n==21 \n        21\n    else if n==22\
    \ \n        22\n    else if n==23 \n        23\n    else if n==24 \n        24\n\
    \    else if n==25 \n        25\n    else if n==26 \n        26\n    else if n==27\
    \ \n        27\n    else if n==28 \n        28\n    else if n==29 \n        29\n\
    \    else if n==30 \n        30\n    else if n==31 \n        31\n    else if n==32\
    \ \n        32\n    else if n==33 \n        33\n    else if n==34 \n        34\n\
    \    else if n==35 \n        35\n    else if n==36 \n        36\n    else if n==37\
    \ \n        37\n    else if n==38 \n        38\n    else if n==39 \n        39\n\
    \    else if n==40 \n        40\n    else if n==41 \n        41\n    else if n==42\
    \ \n        42\n    else if n==43 \n        43\n    else if n==44 \n        44\n\
    \    else if n==45 \n        45\n    else if n==46 \n        46\n    else if n==47\
    \ \n        47\n    else if n==48 \n        48\n    else \nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vxp8vja.jl:14\nin expression starting at\
    \ /tmp/tmp4vxp8vja.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n//2)*(n\
    \ % 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function named digits_sum that takes a positive\
    \ integer n and returns the sum of the odd digits. For example:\n>>> digits_sum(123)\n\
    6\n>>> digits_sum(1234)\n10\n>>> digits_sum(12345)\n15\n>>> digits_sum(123456789)\n\
    15\n>>> digits_sum(1234567890)\n15\n>>> digits_sum(12345678901)\n15\n>>> digits_sum(123456789012)\n\
    15\n>>> digits_sum(1234567890123)\n15\n>>> digits_sum(12345678901234)\n15\n>>>\
    \ digits_sum(123456789012345)\n15\n>>> digits_sum(12345678901234567)\n15\n>>>\
    \ digits_sum(123456789012345678)\n15\n>>> digits_sum(1234567890123456788)\n15\n\
    >>> digits_sum(12345678901234567889)\n15\n>>> digits_sum(123456789012345678899)\n\
    15\n>>> digits_sum(1234567890123456788999)\n15\n>>> digits_sum(12345678901234567889999)\n\
    15\n>>> digits_sum(123456789012345678899999)\n15\n>>> digits_sum(1234567890123456788999999)\n\
    15\n>>> digits_sum(12345678901234567889999999)\n15\n>>> digits_sum(1234567890123456788999999999)\n\
    15\n>>> digits_sum(12345678901234567889999999999)\n15\n>>> digits_sum(12345678901234567889999999999999)\n\
    15\n>>> digits_sum(123456789012345678899999999999998)\n15\n>>> digits_sum(1234567890123456788999999999999987)\n\
    15\n>>> digits_sum(12345678901234567889999999999999876)\n15\n>>> digits_sum(123456789012345678899999999999998765)\n\
    15\n>>> digits_sum(1234567890123456788999999999999987654)\n15\n>>> digits_sum(12345678901234567889999999999999876543)\n\
    15\n>>> digits_sum(123456789012345678899999999999998765432)\n15\n>>> digits_sum(1234567890123456788999999999999987654321)\n\
    15\n>>> digits_sum(\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumtnfylg.jl:18\nin expression starting at\
    \ /tmp/tmpumtnfylg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else \n    \
    \    return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of the number n.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvf0ng2o.jl:17\nin expression starting at\
    \ /tmp/tmpdvf0ng2o.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0 \n    else if n%2==1 then\
    \ return n*digits(n/2) \n    else return digits(n/2)*digits(n/2)\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the product of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppuxmgm8j.jl:12\nin expression starting at /tmp/tmppuxmgm8j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n*digits(n/2)\n    else return n*digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the digits of the number n.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbkx5ukz3.jl:12\nin expression starting at /tmp/tmpbkx5ukz3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n*digits(n/2)\n    return n*digits(n/2)+digits(n%2)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv2k6pf5m.jl:12\nin expression starting at /tmp/tmpv2k6pf5m.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)+digits(n%1000000000)\n\
    \    else if n<100000000000 \n        digits(n/10)*10+digits(n%10)+digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhz9s38.jl:14\nin expression starting at\
    \ /tmp/tmpqbhz9s38.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n==1 \n     \
    \   1\n    else if n%2==0 \n        digits(n/2)\n    else \n        digits(n-1)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite a function\
    \ that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + \nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74i85vva.jl:14\nin expression starting at\
    \ /tmp/tmp74i85vva.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n%2==0\
    \ \n        return n*digits(n/2) \n    else \n        return n*digits(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7r44mrx.jl:14\nin expression starting at\
    \ /tmp/tmpg7r44mrx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.1>\n\
    digits(1)\n</cell>\n<code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a given number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t\
    @test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn6pimzz.jl:14\nin expression starting at\
    \ /tmp/tmpdn6pimzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return n % 10 * digits(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 9.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9iyam1gg.jl:17\nin expression starting at\
    \ /tmp/tmp9iyam1gg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n==1 \n     \
    \   1\n    else if n%2==0 \n        digits(n/2)\n    else \n        digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n<code language=julia-1.1>\n\
    digits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even digits in a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7h4ukgl.jl:14\nin expression starting at\
    \ /tmp/tmpa7h4ukgl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else \n        digits(n / 10) * 10 + n\
    \ % 10\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the even digits in a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqd7afaga.jl:14\nin expression starting at\
    \ /tmp/tmpqd7afaga.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n\
    <code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: use the digits()\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxhcgbqg.jl:12\nin expression starting at /tmp/tmpmxhcgbqg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use\
    \ the function digits to solve this problem\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0i8i_k5d.jl:12\nin expression starting at /tmp/tmp0i8i_k5d.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n/2)*3\nend\n</cell>\n<code language=julia-1.4>\ndigits(1)\n\
    </cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(1234) = 1 + 2 + 3 + 4 = 10.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7mqlq3d.jl:14\nin expression starting at\
    \ /tmp/tmpf7mqlq3d.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000+digits(n%10000000)/1000000\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000+digits(n%10000000)/1000000+digits(n%100000000)/10000000\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze4vsqlb.jl:14\nin expression starting at\
    \ /tmp/tmpze4vsqlb.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n%3==0 \n        digits(n/3)*3\n    else \n       \
    \ digits(n/3)*3+digits(n%3)\nend\n</cell>\n<code language=julia-1.4>\ndigits(1)\n\
    </cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ Use a while loop!\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphn18w6wp.jl:14\nin expression starting at\
    \ /tmp/tmphn18w6wp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n*digits(n/2)\n    return n*digits(n/2)\nend\n\
    </cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use the function digits\
    \ to solve this problem.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6mp22g_k.jl:12\nin expression starting at /tmp/tmp6mp22g_k.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else \n      \
    \  return prod(digits(n//10), n%10) \nend\n</cell>\n<code language=julia-1.1>\n\
    digits(1)\n</cell>\n<code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the function digits().\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp432kxxqt.jl:17\nin expression starting at\
    \ /tmp/tmp432kxxqt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n//10)*10 + digits(n%10)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to get the individual digits of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz77a10gu.jl:17\nin expression starting at\
    \ /tmp/tmpz77a10gu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)\n    else \n        digits(n/10)\
    \ * digits(n%10)\nend\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example, digits(235) returns 1 + 5 + 3 = 8.\nWrite a function\
    \ that returns the product of the digits of an integer.\nFor example, digits(235)\
    \ returns 3 * 3 * 5 = 72.\nWrite a function that returns the sum of the digits\
    \ of an integer, multiplied by 2.\nFor example, digits(235) returns 3 + 5 + 3\
    \ = 8.\nWrite a function that returns the product of the digits of an integer,\
    \ multiplied by 2.\nFor example, digits(235) returns 3 * 3 * 5 = 72.\nWrite a\
    \ function that returns the sum of the digits of an integer, multiplied by 3.\n\
    For example, digits(235) returns 3 + 3 + 5 = 9.\nWrite a function that returns\
    \ the product of the digits of an integer, multiplied by 3.\nFor example, digits(235)\
    \ returns 3 * 3 * 5 = 72.\nWrite a function that returns the sum of the digits\
    \ of an integer, multiplied by 4.\nFor example, digits(235) returns 3 + 3 + 3\
    \ + 5 = 9.\nWrite a function that returns the product of the digits of an integer,\
    \ multiplied by 4.\nFor example, digits(235) returns 3 * 3 * 3 + 3 * 3 * 5 = 125.\n\
    Write a function that returns the sum of the digits of an integer, multiplied\
    \ by 5.\nFor example, digits(235) returns 3 + 3 + 3 + 3 + 3 + 5 = 18.\nWrite a\
    \ function that returns the product of the digits of an integer, multiplied by\
    \ 5.\nFor example, digits(235) returns 3 * 3 * 3 + 3 * 3 * 3 + 3 * 3 * 5 = 125.\n\
    Write a function that returns the sum of the digits of an integer, multiplied\
    \ by 6.\nFor example, digits(235) returns 3 + 3 + 3 + 3 + 3 + 3 + 3 + 5 = 21.\n\
    Write a function that returns the product of the digits of an integer, multiplied\
    \ by 6.\nFor example, digits(235) returns 3 * 3 * 3 + 3 * 3 * 3 + 3 * 3 * 3 +\
    \ 3 * 3 * 5 = 125.\nWrite a function that returns the sum of the digits of an\
    \ integer, multiplied by 7.\nFor example, digits(235) returns 3 + 3 + 3 + 3 +\
    \ 3 + 3 + 3 + 3 + 5 = 25.\nWrite a function that returns the product of the digits\
    \ of an integer, multiplied by 7.\nFor example, digits(235) returns 3 * 3 * 3\
    \ + 3 * 3 * 3 + 3 * 3 * 3 + 3 * 3 * 3 + 3 * 3 * 5 = 125.\nWrite a function that\
    \ returns the sum of the digits of an integer, multiplied by 8.\nFor example,\
    \ digits(\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzczv999.jl:14\nin expression starting at\
    \ /tmp/tmpnzczv999.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n==1 \n     \
    \   1\n    else if n%2==0 \n        digits(n/2)\n    else \n        digits(n/2)*3\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 15.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxihmn05h.jl:14\nin expression starting at\
    \ /tmp/tmpxihmn05h.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n<0 then return\
    \ 0\n    if n<10 then return n\n    if n<100 then return n*10\n    if n<1000 then\
    \ return n*100\n    if n<10000 then return n*1000\n    if n<100000 then return\
    \ n*10000\n    if n<1000000 then return n*100000\n    if n<10000000 then return\
    \ n*1000000\n    if n<100000000 then return n*10000000\n    if n<1000000000 then\
    \ return n*100000000\n    if n<10000000000 then return n*1000000000\n    if n<100000000000\
    \ then return n*10000000000\n    if n<1000000000000 then return n*100000000000\n\
    \    if n<10000000000000 then return n*1000000000000\n    if n<100000000000000\
    \ then return n*10000000000000\n    if n<1000000000000000 then return n*100000000000000\n\
    \    if n<10000000000000000 then return n*1000000000000000\n    if n<100000000000000000\
    \ then return n*10000000000000000\n    if n<1000000000000000000 then return n*100000000000000000\n\
    \    if n<10000000000000000000 then return n*1000000000000000000\n    if n<100000000000000000000\
    \ then return n*10000000000000000000\n    if n<1000000000000000000000 then return\
    \ n*100000000000000000000\n    if n<10000000000000000000000 then return n*1000000000000000000000\n\
    \    if n<100000000000000000000000 then return n*10000000000000000000000\n   \
    \ if n<1000000000000000000000000 then return n*100000000000000000000000\n    if\
    \ n<10000000000000000000000000 then return n*1000000000000000000000000\n    if\
    \ n<100000000000000000000000000 then return n*100000000000000000000000000\n  \
    \  if n<1000000000000000000000000000 then return n*1000000000000000000000000000\n\
    \    if n<10000000000000000000000000000 then return n*10000000000000000000000000000\n\
    \    if n<100000000000000000000000000000 then return n*100000000000000000000000000000\n\
    \    if n<1000000000000000000000000000000 then return n*1000000000000000000000000000000\n\
    \    if n<10000000000000000000000000000000 then return n*10000000000000000000000000000000\n\
    \    if n<100000000000000000000000000000000 then return n*100000000000000000000000000000000\n\
    \    if n<1000000000000000000000000000000000 then return n*1000000000000000000000000000000000\n\
    \    if n<10000000000000000000000000000000000 then return n*10000000000000000000000000000000000\n\
    \    if n<100000000000000000000000000000000000 then return n*100000000000000000000000000000000000\n\
    \    if n<1000000000000000000000000000000000000 then return n*1000000000000000000000000000000000000\n\
    \    if n<10000000000000000000000000000000000000 then return n*10000000000000000000000000000000000000\n\
    \    if n<100000000000000000000000000\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd_owjk4p.jl:12\nin expression starting at /tmp/tmpd_owjk4p.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp211y_j0u.jl:14\nin expression starting at\
    \ /tmp/tmp211y_j0u.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to do this.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktpzchtd.jl:14\nin expression starting at\
    \ /tmp/tmpktpzchtd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    elseif n % 2 == 0 \n\
    \        digits(n / 2)\n    else\n        digits(n / 2) * 3\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(12345)\
    \ = 1 + 2 + 3 + 4 + 5 = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kwzud94.jl:20\nin expression starting at\
    \ /tmp/tmp1kwzud94.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n<0 then return\
    \ 0\n    if n%2==0 then return n*digits(n/2)\n    else return n*digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function digits_sum(n::Int64) which returns the sum of the\
    \ digits in the number n.\nFor example:\n>>> digits_sum(123)\n6\n>>> digits_sum(1234)\n\
    10\n>>> digits_sum(12345)\n15\n>>> digits_sum(123456789)\n15\n>>> digits_sum(1234567890)\n\
    15\n>>> digits_sum(12345678901)\n15\n>>> digits_sum(123456789012)\n15\n>>> digits_sum(1234567890123)\n\
    15\n>>> digits_sum(12345678901234)\n15\n>>> digits_sum(123456789012345)\n15\n\
    >>> digits_sum(12345678901234567)\n15\n>>> digits_sum(123456789012345678)\n15\n\
    >>> digits_sum(1234567890123456788)\n15\n>>> digits_sum(12345678901234567889)\n\
    15\n>>> digits_sum(123456789012345678899)\n15\n>>> digits_sum(1234567890123456788999)\n\
    15\n>>> digits_sum(12345678901234567889999)\n15\n>>> digits_sum(123456789012345678899999)\n\
    15\n>>> digits_sum(1234567890123456788999999)\n15\n>>> digits_sum(12345678901234567889999999)\n\
    15\n>>> digits_sum(1234567890123456788999999999)\n15\n>>> digits_sum(12345678901234567889999999999)\n\
    15\n>>> digits_sum(123456789012345678899999999999)\n15\n>>> digits_sum(12345678901234567889999999999999)\n\
    15\n>>> digits_sum(123456789012345678899999999999998)\n15\n>>> digits_sum(1234567890123456788999999999999987)\n\
    15\n>>> digits_sum(12345678901234567889999999999999876)\n15\n>>> digits_sum(123456789012345678899999999999998765)\n\
    15\n>>> digits_sum(1234567890123456788999999999999987654)\n15\n>>> digits_sum(12345678901234567889999999999999876543)\n\
    15\n>>> digits_sum(123456789\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo_iyqo65.jl:12\nin expression starting at /tmp/tmpo_iyqo65.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n < 100\n        return\
    \ n * 2\n    else if n < 1000\n        return n * 3\n    else if n < 10000\n \
    \       return n * 4\n    else if n < 100000\n        return n * 5\n    else if\
    \ n < 1000000\n        return n * 6\n    else if n < 10000000\n        return\
    \ n * 7\n    else if n < 100000000\n        return n * 8\n    else if n < 1000000000\n\
    \        return n * 9\n    else if n < 10000000000\n        return n * 10\n  \
    \  else if n < 100000000000\n        return n * 11\n    else if n < 1000000000000\n\
    \        return n * 12\n    else if n < 10000000000000\n        return n * 13\n\
    \    else if n < 100000000000000\n        return n * 14\n    else if n < 1000000000000000\n\
    \        return n * 15\n    else if n < 10000000000000000\n        return n *\
    \ 16\n    else if n < 100000000000000000\n        return n * 17\n    else if n\
    \ < 1000000000000000000\n        return n * 18\n    else if n < 10000000000000000000\n\
    \        return n * 19\n    else if n < 100000000000000000000\n        return\
    \ n * 20\n    else if n < 1000000000000000000000\n        return n * 21\n    else\
    \ if n < 10000000000000000000000\n        return n * 22\n    else if n < 100000000000000000000000\n\
    \        return n * 23\n    else if n < 1000000000000000000000000\n        return\
    \ n * 24\n    else if n < 10000000000000000000000000\n        return n * 25\n\
    \    else if n < 100000000000000000000000000\n        return n * 26\n    else\
    \ if n < 1000000000000000000000000000\n        return n * 27\n    else if n <\
    \ 10000000000000000000000000000\n        return n * 28\n    else if n < 100000000000000000000000000000\n\
    \        return n * 29\n    else if n < 1000000000000000000000000000000\n    \
    \    return n * 30\n    else if n < 10000000000000000000000000000000\n       \
    \ return n * 31\n    else if n < 100000000000000000000000000000000\n        return\
    \ n * 32\n    else if n < 1000000000000000000000000000000000\n        return n\
    \ * 33\n    else if n < 10000000000000000000000000000000000\n        return n\
    \ * 34\n    else if n < 100000000000000000000000000000000000\n        return n\
    \ * 35\n    else if n < 1000000000000000000000000000000000000\n        return\
    \ n * 36\n    else if n < 10000000000000000000000000000000000000\n        return\
    \ n * 37\n    else if n < 100000000000000000000000000000000000000\n        return\
    \ n * 38\n    else if n < 1000000000000000000000000000000000000000\n        return\
    \ n * 39\n    else if n < 10000000000000000000000000000000000000000\n        return\
    \ n * 40\n    else if n < 100000000000000000000000000000000000000000\n       \
    \ return n * 41\n    else if n < 100\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8b3n0ipr.jl:14\nin expression starting at\
    \ /tmp/tmp8b3n0ipr.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)\
    \ * 10 + n % 10\n    end\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n\
    </cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 10.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk21r6a41.jl:18\nin expression starting at\
    \ /tmp/tmpk21r6a41.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * 3 + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfd9kqup.jl:14\nin expression starting at\
    \ /tmp/tmpnfd9kqup.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use the function digits\
    \ to do this.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuphe3erb.jl:17\nin expression starting at\
    \ /tmp/tmpuphe3erb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    elseif n % 2 == 1 \n\
    \        digits(n / 2)\n    else\n        digits(n / 2) * 3\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n\
    </cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(123) = 1 + 2 + 3 = 6\nHint: use the function digits(n) to get the digits\
    \ of n.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzgttg64.jl:20\nin expression starting at\
    \ /tmp/tmptzgttg64.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0 \n    else if n%2==1 then\
    \ return n*digits(n/2)\n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm_f8tflm.jl:12\nin expression starting at /tmp/tmpm_f8tflm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2) * digits(n / 2)\n    else \n        return digits(n / 2) * digits(n\
    \ / 2) + digits(n / 2)\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n\
    <code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the product of the even\
    \ digits in a number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t\
    @test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnc4x6n51.jl:14\nin expression starting at\
    \ /tmp/tmpnc4x6n51.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        return 1\n    else if n==2 \n        return 2\n    else if n==3 \n\
    \        return 3\n    else if n==4 \n        return 6\n    else if n==5 \n  \
    \      return 10\n    else if n==6 \n        return 15\n    else if n==7 \n  \
    \      return 21\n    else if n==8 \n        return 28\n    else if n==9 \n  \
    \      return 36\n    else if n==10 \n        return 45\n    else if n==11 \n\
    \        return 55\n    else if n==12 \n        return 66\n    else if n==13 \n\
    \        return 77\n    else if n==14 \n        return 88\n    else if n==15 \n\
    \        return 99\n    else if n==16 \n        return 110\n    else if n==17\
    \ \n        return 121\n    else if n==18 \n        return 132\n    else if n==19\
    \ \n        return 144\n    else if n==20 \n        return 156\n    else if n==21\
    \ \n        return 177\n    else if n==22 \n        return 198\n    else if n==23\
    \ \n        return 210\n    else if n==24 \n        return 221\n    else if n==25\
    \ \n        return 234\n    else if n==26 \n        return 246\n    else if n==27\
    \ \n        return 256\n    else if n==28 \n        return 268\n    else if n==29\
    \ \n        return 280\n    else if n==30 \n        return 292\n    else if n==31\
    \ \n        return 304\n    else if n==32 \n        return 316\n    else if n==33\
    \ \n        return 327\n    else if n==34 \n        return 330\n    else if n==35\
    \ \n        return 333\n    else if n==36 \n        return 336\n    else if n==37\
    \ \n        return 339\n    else if n==38 \n        return 342\n    else if n==39\
    \ \n        return 344\n    else if n==40 \n        return 346\n    else if n==41\
    \ \n        return 348\n    else if n==42 \n        return 350\n    else if n==43\
    \ \n        return 353\n    else if n==44 \n        return 356\n    else if n==45\
    \ \n        return 359\n    else if n==46 \n        return 362\n    else if n==47\
    \ \n        return 364\n\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpya9j4ybv.jl:14\nin expression starting at\
    \ /tmp/tmpya9j4ybv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*(n%2)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of the even digits in a given number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprl3mew9p.jl:17\nin expression starting at\
    \ /tmp/tmprl3mew9p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a given number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t\
    @test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdg8n8wp3.jl:14\nin expression starting at\
    \ /tmp/tmpdg8n8wp3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)+digits(n%1000000000)\n\
    \    else if n<100000000000 \n        digits(n/10)*10+digits(n%10)+digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhz9s38.jl:14\nin expression starting at\
    \ /tmp/tmpqbhz9s38.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else \n        digits(n / 10) * 10 + n\
    \ % 10\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the digits of an integer.\n\
    For example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 15.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkm3tt11.jl:14\nin expression starting at\
    \ /tmp/tmpkkm3tt11.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        return 1\n    else if n==2 \n        return 2\n    else if n==3 \n\
    \        return 3\n    else if n==4 \n        return 6\n    else if n==5 \n  \
    \      return 10\n    else if n==6 \n        return 15\n    else if n==7 \n  \
    \      return 21\n    else if n==8 \n        return 28\n    else if n==9 \n  \
    \      return 36\n    else if n==10 \n        return 45\n    else if n==11 \n\
    \        return 55\n    else if n==12 \n        return 66\n    else if n==13 \n\
    \        return 78\n    else if n==14 \n        return 90\n    else if n==15 \n\
    \        return 110\n    else if n==16 \n        return 130\n    else if n==17\
    \ \n        return 150\n    else if n==18 \n        return 180\n    else if n==19\
    \ \n        return 210\n    else if n==20 \n        return 240\n    else if n==21\
    \ \n        return 270\n    else if n==22 \n        return 300\n    else if n==23\
    \ \n        return 330\n    else if n==24 \n        return 360\n    else if n==25\
    \ \n        return 390\n    else if n==26 \n        return 420\n    else if n==27\
    \ \n        return 450\n    else if n==28 \n        return 480\n    else if n==29\
    \ \n        return 510\n    else if n==30 \n        return 540\n    else if n==31\
    \ \n        return 570\n    else if n==32 \n        return 600\n    else if n==33\
    \ \n        return 630\n    else if n==34 \n        return 660\n    else if n==35\
    \ \n        return 690\n    else if n==36 \n        return 720\n    else if n==37\
    \ \n        return 750\n    else if n==38 \n        return 780\n    else if n==39\
    \ \n        return 810\n    else if n==40 \n        return 840\n    else if n==41\
    \ \n        return 870\n    else if n==42 \n        return 900\n    else if n==43\
    \ \n        return 930\n    else if n==44 \n        return 960\n    else if n==45\
    \ \n        return 990\n    else if n==46 \n        return 1020\n    else if n==47\
    \ \n        return 1040\n    else \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_fohwhg.jl:14\nin expression starting at\
    \ /tmp/tmpv_fohwhg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n//10)*10 + n % 10\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzuvx30be.jl:17\nin expression starting at\
    \ /tmp/tmpzuvx30be.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: use the function\
    \ digits()\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnikqs8ev.jl:17\nin expression starting at\
    \ /tmp/tmpnikqs8ev.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n==1 \n     \
    \   1\n    else if n%2==0 \n        digits(n/2)\n    else \n        digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the product of the even digits in a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk422b7sf.jl:14\nin expression starting at\
    \ /tmp/tmpk422b7sf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else\n        n % 2\
    \ == 0 ? n * digits(n / 2) : digits(n / 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    digits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example:\n>>> digits(123)\n6\n>>> digits(1234)\n\
    10\n>>> digits(12345)\n15\n>>> digits(1234567890)\n90\n>>> digits(123456789012345)\n\
    123456789012345\n>>> digits(1234567890123456789)\n1234567890123456789\n>>> digits(12345678901234567890)\n\
    12345678901234567890\n>>> digits(1234567890123456789012345)\n1234567890123456789012345\n\
    >>> digits(12345678901234567890123456789)\n12345678901234567890123456789\n>>>\
    \ digits(123456789012345678901234567890)\n123456789012345678901234567890\n>>>\
    \ digits(12345678901234567890123456789012345)\n12345678901234567890123456789012345\n\
    >>> digits(123456789012345678901234567890123456789)\n123456789012345678901234567890123456789\n\
    >>> digits(1234567890123456789012345678901234567890)\n1234567890123456789012345678901234567890\n\
    >>> digits(123456789012345678901234567890123456789012345)\n123456789012345678901234567890123456789012345\n\
    >>> digits(1234567890123456789012345678901234567890123456789)\n1234567890123456789012345678901234567890123456789\n\
    >>> digits(12345678901234567890123456789012345678901234567890)\n12345678901234567890123456789012345678901234567890\n\
    >>> digits(1234567890123456789012345678901234567890123456789012345)\n1234567890123456789012345678901234567890123456789012345\n\
    >>> digits(12345678901234567890123456789012345678901234567890123456789)\n12345678901234567890123456789012345678901234567890123456789\n\
    >>> digits(123456789012345678901234567890123456789012345678901234567890)\n123456789012345678901234567890123456789012345678901234567890\n\
    >>> digits(12345678901234567890123456789012345678901234567890123456789012345)\n\
    12345678901234567890123456789012345678901234567890123456789012345\n>>> digits(123456789012345678901234567890123456789012345678901234567890123456789)\n\
    123456789012345678901234567890123456789012345678901234567890123456789\n>>> digits(1234567890123456789012345678901234567890123456789012345678901234567890)\n\
    1234567890123456789012345678901234567890123456789012345678901234567890\n>>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    123456789012345678901234567890123456789012345678901234567890123456789012345\n\
    >>> digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    1234567890123456789012345678901234567890123456789012345678901234567890123456789\n\
    >>> digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890)\n\
    12345678901234567890123456789012345678901234567890123456789012345678901234567890\n\
    >>> digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    1234567890123456789012345678901234567890123456789012345678901234567890123456789012345\n\
    >>> digits(\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgrwsggi.jl:17\nin expression starting at\
    \ /tmp/tmpxgrwsggi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then 0 else if n%2==0 then n*digits(n/2)\
    \ else digits(n/2)\nend\n</code>\n<|/ a tags=recursion,julia |>\n<| a tags=recursion,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptmf5fljz.jl:12\nin expression starting at /tmp/tmptmf5fljz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n\
    <code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplwb4tl8i.jl:12\nin expression starting at /tmp/tmplwb4tl8i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*10+n\
    \ % 10\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the digits of an integer.\n\
    For example, digits(235) returns 1 + 5 + 3 + 2 = 9.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxdwfv0c.jl:17\nin expression starting at\
    \ /tmp/tmpcxdwfv0c.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return n % 10 * digits(n / 10)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ Use a recursive function.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ah_mt8k.jl:17\nin expression starting at\
    \ /tmp/tmp1ah_mt8k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 \n        return n\n    else \n      \
    \  return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2eypdc5.jl:17\nin expression starting at\
    \ /tmp/tmpe2eypdc5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*3+1\nend\n</cell>\n<code language=julia-1.0>\n\
    digits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the factorial\
    \ of a given positive integer n.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27y_dhz_.jl:14\nin expression starting at\
    \ /tmp/tmp27y_dhz_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    elseif n % 2 == 0 \n\
    \        digits(n / 2)\n    else\n        digits(n / 2) * 3\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the product of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ezkbdzb.jl:20\nin expression starting at\
    \ /tmp/tmp5ezkbdzb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n%2==0\
    \ \n        return digits(n/2) \n    else \n        return digits(n/2)*3\nend\n\
    </cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: Use a recursive function.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqehs1sdm.jl:14\nin expression starting at\
    \ /tmp/tmpqehs1sdm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * 3 + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1o3k3kf.jl:14\nin expression starting at\
    \ /tmp/tmpc1o3k3kf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)+digits(n%1000000000)\n\
    \    else if n<100000000000 \n        digits(n/10)*10+digits(n%10)+digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhz9s38.jl:14\nin expression starting at\
    \ /tmp/tmpqbhz9s38.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n%3==0 \n        digits(n/3)*3\n    else \n       \
    \ digits(n/3)*3+digits(n%3)\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n\
    </cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52b6ki_s.jl:14\nin expression starting at\
    \ /tmp/tmp52b6ki_s.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        if n%2==0\
    \ \n            digits(n/2)\n        else\n            digits(n-1)\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function named digits that returns\
    \ the product of the even digits in a given number.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sk17xt4.jl:22\nin expression starting at\
    \ /tmp/tmp9sk17xt4.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n%2==0\
    \ \n        return n*digits(n/2) \n    else \n        return n*digits(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example:\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n\
    >>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n\
    15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n\
    -4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n\
    0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n\
    15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n\
    -4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n\
    0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n\
    15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n\
    -4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n\
    0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n\
    15\n>>> digits(-12345)\n-4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n\
    -4\n>>> digits(0)\n0\n>>> digits(12345)\n15\n>>> digits(-12345)\n-4\n>>> digits(0)\n\
    0\n>>> digit\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0locq7t.jl:14\nin expression starting at\
    \ /tmp/tmpp0locq7t.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n%2==0\
    \ \n        digits(n/2)*2\n    else \n        digits(n/2)*10\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as:\n$$\n\\begin{align}\n\\text{Factorial}(n)\
    \ &= n!\\\n\\text{Factorial}(n) &= n\\times n-1\\times n-2\\times n-3\\times n-4\\\
    times n-5\\times n-6\\times n-7\\times n-8\\times n-9\\times n-10\\times n-11\\\
    times n-12\\times n-13\\times n-14\\times n-15\\times n-16\\times n-17\\times\
    \ n-18\\times n-19\\times n-20\\times n-21\\times n-22\\times n-23\\times n-24\\\
    times n-25\\times n-26\\times n-27\\times n-28\\times n-29\\times n-30\\times\
    \ n-31\\times n-32\\times n-33\\times n-34\\times n-35\\times n-36\\times n-37\\\
    times n-38\\times n-39\\times n-40 \\\n\\end{align}\n$$\nFor example, \n$$\n\\\
    begin{align}\n\\text{Factorial}(n) &= 1!\\\n\\text{Factorial}(n) &= 1\\times 2-1\\\
    times 3-2\\times 4-3\\times 5-4\\times 6-5\\times 7-6\\times 8-6\\times 9-7\\\
    times 10-7\\times 11-7\\times 12-7\\times 13-7\\times 14-7\\times 15-7\\times\
    \ 16-7\\times 17-7\\times 18-7\\times 19-7\\times 20-7\\times 21-7\\times 22-7\\\
    times 23-7\\times 24-7\\times 25-7\\times 26-7\\times 27-7\\times 28-7\\times\
    \ 29-7\\times 30-7\\times 31-7\\times 32-7\\times 33-7\\times 34-7\\times 35-7\\\
    times 36-7\\times 37-7\\times 38-7\\times 39-7\\times 40-7\\times 41-7\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxe91dc79.jl:14\nin expression starting at\
    \ /tmp/tmpxe91dc79.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2)\n    else \n        return digits(n / 2) * 3 + 1\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of all the digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmxxki4v.jl:14\nin expression starting at\
    \ /tmp/tmpjmxxki4v.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    elseif n==1 \n      \
    \  1\n    elseif n==2 \n        2\n    elseif n==3 \n        3\n    elseif n==4\
    \ \n        4\n    elseif n==5 \n        5\n    elseif n==6 \n        6\n    elseif\
    \ n==7 \n        7\n    elseif n==8 \n        8\n    elseif n==9 \n        9\n\
    \    elseif n==10 \n        10\n    elseif n==11 \n        11\n    elseif n==12\
    \ \n        12\n    elseif n==13 \n        13\n    elseif n==14 \n        14\n\
    \    elseif n==15 \n        15\n    elseif n==16 \n        16\n    elseif n==17\
    \ \n        17\n    elseif n==18 \n        18\n    elseif n==19 \n        19\n\
    \    elseif n==20 \n        20\n    elseif n==21 \n        21\n    elseif n==22\
    \ \n        22\n    elseif n==23 \n        23\n    elseif n==24 \n        24\n\
    \    elseif n==25 \n        25\n    elseif n==26 \n        26\n    elseif n==27\
    \ \n        27\n    elseif n==28 \n        28\n    elseif n==29 \n        29\n\
    \    elseif n==30 \n        30\n    elseif n==31 \n        31\n    elseif n==32\
    \ \n        32\n    elseif n==33 \n        33\n    elseif n==34 \n        34\n\
    \    elseif n==35 \n        35\n    elseif n==36 \n        36\n    elseif n==37\
    \ \n        37\n    elseif n==38 \n        38\n    elseif n==39 \n        39\n\
    \    elseif n==40 \n        40\n    elseif n==41 \n        41\n    elseif n==42\
    \ \n        42\n    elseif n==43 \n        43\n    elseif n==44 \n        44\n\
    \    elseif n==45 \n        45\n    elseif n==46 \n        46\n    elseif n==47\
    \ \n        47\n    elseif n==48 \n        48\n    elseif n==49 \n        49\n\
    \    elseif n==50 \n        50\n    elseif n==51 \n        51\n    elseif n==52\
    \ \n        52\n    elseif n==53 \n        53\n    elseif n==54 \n        54\n\
    \    elseif n==55\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3h6q9wy.jl:1\nin expression starting at /tmp/tmpb3h6q9wy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n%2==0 then return\
    \ n*digits(n/2)\n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    digits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 10.\nAssume that the integer does not contain any leading zero, except the\
    \ number 0.\nFor example, digits(0) = 1.\nAssume that the integer does not contain\
    \ any leading zero, except the number 0.\nFor example, digits(0) = 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcayujm28.jl:12\nin expression starting at /tmp/tmpcayujm28.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n==3 \n        3\n    else if n==4 \n        4\n  \
    \  else if n==5 \n        5\n    else if n==6 \n        6\n    else if n==7 \n\
    \        7\n    else if n==8 \n        8\n    else if n==9 \n        9\n    else\
    \ if n==10 \n        10\n    else if n==11 \n        11\n    else if n==12 \n\
    \        12\n    else if n==13 \n        13\n    else if n==14 \n        14\n\
    \    else if n==15 \n        15\n    else if n==16 \n        16\n    else if n==17\
    \ \n        17\n    else if n==18 \n        18\n    else if n==19 \n        19\n\
    \    else if n==20 \n        20\n    else if n==21 \n        21\n    else if n==22\
    \ \n        22\n    else if n==23 \n        23\n    else if n==24 \n        24\n\
    \    else if n==25 \n        25\n    else if n==26 \n        26\n    else if n==27\
    \ \n        27\n    else if n==28 \n        28\n    else if n==29 \n        29\n\
    \    else if n==30 \n        30\n    else if n==31 \n        31\n    else if n==32\
    \ \n        32\n    else if n==33 \n        33\n    else if n==34 \n        34\n\
    \    else if n==35 \n        35\n    else if n==36 \n        36\n    else if n==37\
    \ \n        37\n    else if n==38 \n        38\n    else if n==39 \n        39\n\
    \    else if n==40 \n        40\n    else if n==41 \n        41\n    else if n==42\
    \ \n        42\n    else if n==43 \n        43\n    else if n==44 \n        44\n\
    \    else if n==45 \n        45\n    else if n==46 \n        46\n    else if n==47\
    \ \n        47\n    else if n==48 \n        48\n    else \nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vxp8vja.jl:14\nin expression starting at\
    \ /tmp/tmp4vxp8vja.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else if n % 2 == 0 \n        0\n    else\
    \ \n        digits(n / 2) * digits(n / 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function is_palindrome(n) that\
    \ returns true if the given number is a palindrome and false otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporlp3aw_.jl:14\nin expression starting at\
    \ /tmp/tmporlp3aw_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    else if n%2==0 then\
    \ return n*digits(n/2)\n    else return digits(n/2)*10+n%2\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3w9y5f2.jl:12\nin expression starting at /tmp/tmpg3w9y5f2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n==3 \n        6\n    else if n==4 \n        24\n \
    \   else if n==5 \n        120\n    else if n==6 \n        720\n    else if n==7\
    \ \n        5040\n    else if n==8 \n        40320\n    else if n==9 \n      \
    \  362880\n    else if n==10 \n        3628800\n    else if n==11 \n        39916800\n\
    \    else if n==12 \n        479001600\n    else if n==13 \n        6227020800\n\
    \    else if n==14 \n        87178291200\n    else if n==15 \n        1307674368000\n\
    \    else if n==16 \n        20922789888000\n    else if n==17 \n        355687428096000\n\
    \    else if n==18 \n        6402373705728000\n    else if n==19 \n        121645100408832000\n\
    \    else if n==20 \n        2432902008176640000\n    else if n==21 \n       \
    \ 51090942171709440000\n    else if n==22 \n        1124000727777607680000\n \
    \   else if n==23 \n        25852016738884976640000\n    else if n==24 \n    \
    \    620448401733239439360000\n    else if n==25 \n        15511210043330985984000000\n\
    \    else if n==26 \n        403291461126605635584000000\n    else if n==27 \n\
    \        10888869450418352160768000000\n    else if n==28 \n        3041830062626748978534400000000\n\
    \    else if n==29 \n        884176199373970195454361600000000\n    else if n==30\
    \ \n        265252859812191058636308480000000\n    else if n==31 \n        8222838654177922817725562880000000\n\
    \    else if n==32 \n        263130836933693530167218012160000000\n    else if\
    \ n\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo0manp5.jl:14\nin expression starting at\
    \ /tmp/tmpqo0manp5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 1\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n*digits(n/2)\n    return n*digits(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<code language=julia-1.5>\n\
    digits(235000)\n</cell>\n<text>\nExercise 2\nWrite a function digits_sum(n::Int64)::Int64\
    \ which returns the sum of the digits of the number n.\nFor example, digits_sum(1234)\
    \ should return 1 + 2 + 3 + 4 = 10.\nHint: Use a recursive function.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnc2a1gg3.jl:12\nin expression starting at /tmp/tmpnc2a1gg3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*10\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n\
    15\n>>> digits(-4)\n-1\n>>> digits(0)\n0\n>>> digits(10)\n10\n>>> digits(-10)\n\
    -10\n>>> digits(100)\n100\n>>> digits(-100)\n-100\n>>> digits(1000)\n1000\n>>>\
    \ digits(-1000)\n-1000\n>>> digits(10000)\n10000\n>>> digits(-10000)\n-10000\n\
    >>> digits(100000)\n100000\n>>> digits(-100000)\n-100000\n>>> digits(1000000)\n\
    1000000\n>>> digits(-1000000)\n-1000000\n>>> digits(10000000)\n10000000\n>>> digits(-10000000)\n\
    -10000000\n>>> digits(100000000)\n100000000\n>>> digits(-100000000)\n-100000000\n\
    >>> digits(1000000000)\n1000000000\n>>> digits(-1000000000)\n-1000000000\n>>>\
    \ digits(10000000000)\n10000000000\n>>> digits(-10000000000)\n-10000000000\n>>>\
    \ digits(100000000000)\n100000000000\n>>> digits(-100000000000)\n-100000000000\n\
    >>> digits(1000000000000)\n1000000000000\n>>> digits(-1000000000000)\n-1000000000000\n\
    >>> digits(10000000000000)\n10000000000000\n>>> digits(-10000000000000)\n-10000000000000\n\
    >>> digits(1000000000000000)\n1000000000000000\n>>> digits(-1000000000000000)\n\
    -1000000000000000\n>>> digits(10000000000000000)\n10000000000000000\n>>> digits(-10000000000000000)\n\
    -10000000000000000\n>>> digits(1000000000000000000)\n1000000000000000000\n>>>\
    \ digits(-1000000000000000000)\n-1000000000000000000\n>>> digits(10000000000000000000)\n\
    10000000000000000000\n>>> digits(-10000000000000000000)\n-10000000000000000000\n\
    >>> digits(100000000000000000000)\n100000000000000000000\n>>> digits(-100000000000000000000)\n\
    -100000000000000000000\n>>> digits(1000000000000000000000)\n1000000000000000000000\n\
    >>> digits(-1000000000000000000000)\n-1000000000000000000000\n>>> digits(100000000000000000000000)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) ==\
    \ 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqxrrdwn.jl:14\nin expression starting at\
    \ /tmp/tmphqxrrdwn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    else if n%2==1 then\
    \ return n*digits(n/2)\n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ You can use the function digits to solve this exercise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8i3u_6xg.jl:12\nin expression starting at /tmp/tmp8i3u_6xg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * 3 + 1\nend\n</cell>\n<code language=julia-1.0>\n\
    digits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the even digits in a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l7b05nj.jl:14\nin expression starting at\
    \ /tmp/tmp7l7b05nj.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*n\n</code>\n<|/ a tags=recursion,haskell,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digits(0)`.\n<|/ c |>\n<| c |>\n\
    : I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that doesn't require any multiplication. Thanks.\n<|/ c |>\n<| c |>\n: I added\
    \ a more efficient solution that doesn't require any multiplication. Thanks.\n\
    <|/ c |>\n<| a tags=recursion,haskell,algorithm |>\n<code>\ndigits :: Int -> Int\n\
    digits n = product [1..n]\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `digits(0)`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/\
    \ c |>\n<| c |>\n: I added a more efficient solution that doesn't require any\
    \ multiplication. Thanks.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that doesn't require any multiplication. Thanks.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\ndigits :: Int -> Int\ndigits n = product [1..n]\n</code>\n<|/ a tags=recursion,haskell,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>\ndigits :: Int -> Int\ndigits n = product [1..n]\n\
    </code>\n<|/ a tags=recursion,haskell,algorithm |>\n<| a dscore=2 |>\n<code>\n\
    digits :: Int -> Int\ndigits n = product [1..n]\n</code>\n<|/ a tags=recursion,haskell,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>\ndigits :: Int -> Int\ndigits n = product [1..n]\n\
    </code>\n<|/ a tags=recursion,haskell,algorithm |>\n<| a |>\n<code>\ndigits ::\
    \ Int -> Int\ndigits n = product [1..n]\n</code>\n<|/ a tags=recursion,haskell,algorithm\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits :: Int -> Int\ndigits n = product\
    \ [1..n]\n</code>\n<|/ a tags=\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0eaj4x5.jl:14\nin expression starting at\
    \ /tmp/tmpl0eaj4x5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbx_b3c57.jl:14\nin expression starting at\
    \ /tmp/tmpbx_b3c57.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)+digits(n%1000000000)\n\
    \    else if n<100000000000 \n        digits(n/10)*10+digits(n%10)+digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhz9s38.jl:14\nin expression starting at\
    \ /tmp/tmpqbhz9s38.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n==2 then return 0\n    if n%3==0 then return digits(n/3)*3\n    if\
    \ n%5==0 then return digits(n/5)*5\n    if n%7==0 then return digits(n/7)*7\n\
    \    return 0\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 15.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbyj09wwa.jl:12\nin expression starting at /tmp/tmpbyj09wwa.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ n * digits(n / 2)\n    else \n        return n * digits(n / 2) + digits(n /\
    \ 2)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the even digits in a number.\nFor example, digits(235) should return 3 *\
    \ 5 * 7 * 11 = 729.\nHint: Use digits(n) to get the digits of n.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtz0g_z9.jl:14\nin expression starting at\
    \ /tmp/tmpjtz0g_z9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 0 \n        return\
    \ digits(n / 2)\n    else \n        return digits(n / 2) * 3\nend\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the digits of an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzead1o7.jl:14\nin expression starting at\
    \ /tmp/tmpbzead1o7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n-1)*3+1\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of all the even digits in a given number.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyg0n6hm.jl:14\nin expression starting at\
    \ /tmp/tmpsyg0n6hm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else \n        digits(n\
    \ / 10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n\
    <code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of all even\
    \ digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzf0quoc.jl:17\nin expression starting at\
    \ /tmp/tmpfzf0quoc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else if n % 2 == 0\
    \ \n        digits(n / 2)\n    else\n        digits(n / 2) * 3\nend\n</cell>\n\
    <code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the product of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27ngdgk4.jl:14\nin expression starting at\
    \ /tmp/tmp27ngdgk4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n==1 then return\
    \ 1\n    if n%2==0 then return n*digits(n-1)\n    return digits(n-1)*n\nend\n\
    </cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of all the digits in a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxb54kdtg.jl:12\nin expression starting at /tmp/tmpxb54kdtg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then 0 else n % 10 * digits(n / 10)\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function digits_sum(n::Int64)::Int64 which returns the sum\
    \ of the digits in the number n.\nFor example, digits_sum(123) = 1 + 2 + 3 = 6\n\
    Hint: use digits(n) to get the digits of n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw3l4tl8w.jl:12\nin expression starting at /tmp/tmpw3l4tl8w.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n//10)*10 + n % 10\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<code language=julia-1.4>\ndigits(235000)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function named digits_sum that returns the sum of all the\
    \ odd digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmm8ve40.jl:18\nin expression starting at\
    \ /tmp/tmphmm8ve40.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 1\n    else if n%2==0 then\
    \ return n*digits(n/2)\n    else return n*digits(n-1)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8j7quj_6.jl:12\nin expression starting at /tmp/tmp8j7quj_6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else\n        n % 2\
    \ == 0 ? n * digits(n / 2) : digits(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpryz4x0f6.jl:17\nin expression starting at\
    \ /tmp/tmpryz4x0f6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*(n%2)*(n%2)\n\
    end\n</code>\n<|/ a tags=recursion,julia |>\n<| a tags=recursion,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3x1a10u.jl:17\nin expression starting at\
    \ /tmp/tmpv3x1a10u.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        return 0 \n    else if n %\
    \ 2 == 0 \n        return n * digits(n / 2) \n    else \n        return n * digits(n\
    \ / 2) + digits(n mod 2) \nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n\
    </cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example:\n>>> digits(12345)\n15\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n\
    4\n>>> digits(1234567890)\n45\n>>> digits(-1234567890)\n4\n>>> digits(1234567890)\n\
    45\n>>> digits(-123456789\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhtvpluo.jl:14\nin expression starting at\
    \ /tmp/tmpqhtvpluo.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    elseif n==1 \n      \
    \  1\n    elseif n%2==0 \n        digits(n/2)\n    else\n        digits(n/2)*3\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<code language=julia-1.5>\n\
    digits(23500)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp858ymohz.jl:22\nin expression starting at\
    \ /tmp/tmp858ymohz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else \n        digits(n\
    \ / 10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjebeilii.jl:17\nin expression starting at\
    \ /tmp/tmpjebeilii.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n < 100 \n        return\
    \ n * 10\n    else if n < 1000 \n        return n * 100\n    else if n < 10000\
    \ \n        return n * 1000\n    else if n < 100000 \n        return n * 10000\n\
    \    else if n < 1000000 \n        return n * 100000\n    else if n < 10000000\
    \ \n        return n * 1000000\n    else if n < 100000000 \n        return n *\
    \ 10000000\n    else if n < 1000000000 \n        return n * 100000000\n    else\
    \ if n < 10000000000 \n        return n * 1000000000\n    else if n < 100000000000\
    \ \n        return n * 10000000000\n    else if n < 1000000000000 \n        return\
    \ n * 100000000000\n    else if n < 10000000000000 \n        return n * 1000000000000\n\
    \    else if n < 100000000000000 \n        return n * 10000000000000\n    else\
    \ if n < 1000000000000000 \n        return n * 100000000000000\n    else if n\
    \ < 10000000000000000 \n        return n * 1000000000000000\n    else if n < 100000000000000000\
    \ \n        return n * 10000000000000000\n    else if n < 1000000000000000000\
    \ \n        return n * 100000000000000000\n    else \n        return n * 1000000000000000000\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<code language=julia-1.5>\n\
    digits(235000)\n</cell>\n<code language=julia-1.5>\ndigits(235001)\n</cell>\n\
    <code language=julia-1.5>\ndigits(235002)\n</cell>\n<code language=julia-1.5>\n\
    digits(235003)\n</cell>\n<code language=julia-1.5>\ndigits(235004)\n</cell>\n\
    <code language=julia-1.5>\ndigits(235005)\n</cell>\n<code language=julia-1.5>\n\
    digits(235006)\n</cell>\n<code language=julia-1.5>\ndigits(235007)\n</cell>\n\
    <code language=julia-1.5>\ndigits(235008)\n</cell>\n<code language=julia-1.5>\n\
    digits(235009)\n</cell>\n<code language=julia-1.5>\ndigits(235010)\n</cell>\n\
    <code language=julia-1.5>\ndigits(235011)\n</cell>\n<code language=julia-1.5>\n\
    digits(235012)\n</cell>\n<code language=julia-1.5>\ndigits(2350\nusing Test\n\n\
    @testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5t7nt5a_.jl:14\nin expression starting at\
    \ /tmp/tmp5t7nt5a_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    elseif n==1 \n      \
    \  1\n    elseif n%2==0 \n        digits(n/2)\n    else\n        digits(n/2)*(3*n+1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer.\n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nHint: use recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s9b3i3_.jl:22\nin expression starting at\
    \ /tmp/tmp8s9b3i3_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\n    end\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n\
    <code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the product of the even\
    \ digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmu6m7lw.jl:18\nin expression starting at\
    \ /tmp/tmpqmu6m7lw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\n    end\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n\
    <code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 15.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43sahdo4.jl:18\nin expression starting at\
    \ /tmp/tmp43sahdo4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        if n%2==1\
    \ \n            digits(n/2)\n        else\n            digits(n/2)*2\n       \
    \ end\n    end\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n\
    <code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: use the function\
    \ digits(n) to get the digits of n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5_nkj7v.jl:22\nin expression starting at\
    \ /tmp/tmpu5_nkj7v.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n//10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcnml8go.jl:17\nin expression starting at\
    \ /tmp/tmpzcnml8go.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*10\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\ndigits(1)\n</cell>\n<code language=julia-1.1>\ndigits(4)\n\
    </cell>\n<code language=julia-1.1>\ndigits(235)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the even digits of an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla5xzsop.jl:14\nin expression starting at\
    \ /tmp/tmpla5xzsop.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else \n      \
    \  return prod(digits(n//10)) * (n % 10) * prod(digits(n%10))\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise 3\n\
    Write a function named digits_sum that takes a positive integer n and returns\
    \ the sum of the digits in the number n.\nFor example, digits_sum(1234) should\
    \ return 1 + 2 + 3 + 4 = 10.\nHint: Use a recursive function.\nusing Test\n\n\
    @testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphug2w5bu.jl:17\nin expression starting at\
    \ /tmp/tmphug2w5bu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        0\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_r73rj9.jl:14\nin expression starting at\
    \ /tmp/tmpa_r73rj9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 1\n    if n<0 then return\
    \ 0\n    if n<10 then return n\n    if n<100 then return n*digits(n/10)\n    if\
    \ n<1000 then return n*digits(n/100)\n    if n<10000 then return n*digits(n/1000)\n\
    \    if n<100000 then return n*digits(n/10000)\n    if n<1000000 then return n*digits(n/100000)\n\
    \    if n<10000000 then return n*digits(n/1000000)\n    if n<100000000 then return\
    \ n*digits(n/10000000)\n    if n<1000000000 then return n*digits(n/100000000)\n\
    \    if n<10000000000 then return n*digits(n/1000000000)\n    if n<100000000000\
    \ then return n*digits(n/10000000000)\n    if n<1000000000000 then return n*digits(n/100000000000)\n\
    \    if n<10000000000000 then return n*digits(n/1000000000000)\n    if n<100000000000000\
    \ then return n*digits(n/10000000000000)\n    if n<1000000000000000 then return\
    \ n*digits(n/100000000000000)\n    if n<10000000000000000 then return n*digits(n/1000000000000000)\n\
    \    if n<100000000000000000 then return n*digits(n/10000000000000000)\n    if\
    \ n<1000000000000000000 then return n*digits(n/100000000000000000)\n    if n<10000000000000000000\
    \ then return n*digits(n/1000000000000000000)\n    if n<100000000000000000000\
    \ then return n*digits(n/10000000000000000000)\n    if n<1000000000000000000000\
    \ then return n*digits(n/100000000000000000000)\n    if n<10000000000000000000000\
    \ then return n*digits(n/1000000000000000000000)\n    if n<100000000000000000000000\
    \ then return n*digits(n/10000000000000000000000)\n    if n<1000000000000000000000000\
    \ then return n*digits(n/100000000000000000000000)\n    if n<10000000000000000000000000\
    \ then return n*digits(n/1000000000000000000000000)\n    if n<100000000000000000000000000\
    \ then return n*digits(n/10000000000000000000000000)\n    if n<1000000000000000000000000000\
    \ then return n*digits(n/100000000000000000000000000)\n    if n<10000000000000000000000000000\
    \ then return n*digits(n/1000000000000000000000000000)\n    if n<100000000000000000000000000000\
    \ then return n*digits(n/10000000000000000000000000000)\n    if n<1000000000000000000000000000000\
    \ then return n*digits(n/100000000000000000000000000000)\n    if n<10000000000000000000000000000000\
    \ then return n*digits(n/1000000000000000000000000000000)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdi5iz6uh.jl:12\nin expression starting at /tmp/tmpdi5iz6uh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*10\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n\
    </cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\nExercise\nWrite\
    \ a function digits(n::Int64) which returns the product of the digits of n. \n\
    For example, digits(235) should return 15 (3 * 5).\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3zdlfbw.jl:14\nin expression starting at\
    \ /tmp/tmpr3zdlfbw.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n<0 then return\
    \ 0\n    if n%2==0 then return n*digits(n-1)\n    else return digits(n-1)*n\n\
    end\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n<code language=julia-1.1>\n\
    digits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the product of the even digits in a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppjdpmb_o.jl:12\nin expression starting at /tmp/tmppjdpmb_o.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    else if n%2==0 then\
    \ return n*digits(n/2)\n    else return digits(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw12lrdnp.jl:12\nin expression starting at /tmp/tmpw12lrdnp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zdd24yj.jl:14\nin expression starting at\
    \ /tmp/tmp3zdd24yj.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n==3 \n        3\n    else if n==4 \n        6\n  \
    \  else if n==5 \n        10\n    else if n==6 \n        15\n    else if n==7\
    \ \n        21\n    else if n==8 \n        28\n    else if n==9 \n        36\n\
    \    else \n        error(\"n must be an integer greater than 0\")\nend\n</cell>\n\
    <code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of all even digits in a given number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zjbyaca.jl:14\nin expression starting at\
    \ /tmp/tmp8zjbyaca.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000+digits(n%10000000)/1000000\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+digits(n%100000)/10000+digits(n%1000000)/100000+digits(n%10000000)/1000000+digits(n%100000000)/10000000\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)/10+digits(n%1000)/100+digits(n%10000)/1000+\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hljddto.jl:14\nin expression starting at\
    \ /tmp/tmp1hljddto.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/2)\n    else if n<100 \n  \
    \      digits(n/10)\n    else if n<1000 \n        digits(n/100)\n    else if n<10000\
    \ \n        digits(n/1000)\n    else if n<100000 \n        digits(n/10000)\n \
    \   else if n<1000000 \n        digits(n/100000)\n    else if n<10000000 \n  \
    \      digits(n/1000000)\n    else if n<100000000 \n        digits(n/10000000)\n\
    \    else if n<1000000000 \n        digits(n/100000000)\n    else if n<10000000000\
    \ \n        digits(n/1000000000)\n    else if n<100000000000 \n        digits(n/10000000000)\n\
    \    else if n<1000000000000 \n        digits(n/100000000000)\n    else if n<10000000000000\
    \ \n        digits(n/1000000000000)\n    else if n<100000000000000 \n        digits(n/10000000000000)\n\
    \    else if n<1000000000000000 \n        digits(n/100000000000000)\n    else\
    \ if n<10000000000000000 \n        digits(n/1000000000000000)\n    else if n<100000000000000000\
    \ \n        digits(n/10000000000000000)\n    else if n<1000000000000000000 \n\
    \        digits(n/100000000000000000)\n    else if n<10000000000000000000 \n \
    \       digits(n/1000000000000000000)\n    else if n<100000000000000000000 \n\
    \        digits(n/10000000000000000000)\n    else if n<1000000000000000000000\
    \ \n        digits(n/100000000000000000000)\n    else if n<10000000000000000000000\
    \ \n        digits(n/1000000000000000000000)\n    else if n<100000000000000000000000\
    \ \n        digits(n/10000000000000000000000)\n    else if n<1000000000000000000000000\
    \ \n        digits(n/100000000000000000000000)\n    else if n<10000000000000000000000000\
    \ \n        digits(n/1000000000000000000000000)\n    else if n<100000000000000000000000000\
    \ \n        digits(n/10000000000000000000000000)\n    else if n<1000000000000000000000000000\
    \ \n        digits(n/100000000000000000000000000)\n    else if n<10000000000000000000000000000\
    \ \n        digits(n/1000000000000000000\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpno2yqkm9.jl:14\nin expression starting at\
    \ /tmp/tmpno2yqkm9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        return 0 \n    else \n   \
    \     return n % 10 * digits(n / 10) \nend \n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 10.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppuzl4dae.jl:17\nin expression starting at\
    \ /tmp/tmppuzl4dae.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n%3==0 \n        digits(n/3)*3\n    else \n       \
    \ digits(n/3)*3+digits(n%3)\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n\
    </cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<code language=julia-1.0>\ndigits(23500)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: use the function digits(n) to\
    \ get the digits of n.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t\
    @test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvnf8lyqy.jl:14\nin expression starting at\
    \ /tmp/tmpvnf8lyqy.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        1\n    else if n==2 \n        2\n    else if n==3 \n        3\n  \
    \  else if n==4 \n        4\n    else if n==5 \n        5\n    else if n==6 \n\
    \        6\n    else if n==7 \n        7\n    else if n==8 \n        8\n    else\
    \ if n==9 \n        9\n    else if n==10 \n        10\n    else if n==11 \n  \
    \      11\n    else if n==12 \n        12\n    else if n==13 \n        13\n  \
    \  else if n==14 \n        14\n    else if n==15 \n        15\n    else if n==16\
    \ \n        16\n    else if n==17 \n        17\n    else if n==18 \n        18\n\
    \    else if n==19 \n        19\n    else if n==20 \n        20\n    else if n==21\
    \ \n        21\n    else if n==22 \n        22\n    else if n==23 \n        23\n\
    \    else if n==24 \n        24\n    else if n==25 \n        25\n    else if n==26\
    \ \n        26\n    else if n==27 \n        27\n    else if n==28 \n        28\n\
    \    else if n==29 \n        29\n    else if n==30 \n        30\n    else if n==31\
    \ \n        31\n    else if n==32 \n        32\n    else if n==33 \n        33\n\
    \    else if n==34 \n        34\n    else if n==35 \n        35\n    else if n==36\
    \ \n        36\n    else if n==37 \n        37\n    else if n==38 \n        38\n\
    \    else if n==39 \n        39\n    else if n==40 \n        40\n    else if n==41\
    \ \n        41\n    else if n==42 \n        42\n    else if n==43 \n        43\n\
    \    else if n==44 \n        44\n    else if n==45 \n        45\n    else if n==46\
    \ \n        46\n    else if n==47 \n        47\n    else if n==48 \n        \n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp62l9xxf.jl:14\nin expression starting at\
    \ /tmp/tmpp62l9xxf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else \n        digits(n\
    \ / 10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 15\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dm5szlx.jl:17\nin expression starting at\
    \ /tmp/tmp6dm5szlx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        return 1\n    else if n<10 \n        return n\n    else if n<100 \n\
    \        return digits(n/10) * 10\n    else if n<1000 \n        return digits(n/100)\
    \ * 100 + digits(n/10)\n    else if n<10000 \n        return digits(n/1000) *\
    \ 1000 + digits(n/100) * 100 + digits(n/10)\n    else if n<100000 \n        return\
    \ digits(n/100000) * 100000 + digits(n/10000) * 10000 + digits(n/1000) * 1000\
    \ + digits(n/100) * 100 + digits(n/10)\n    else if n<1000000 \n        return\
    \ digits(n/1000000) * 1000000 + digits(n/100000) * 100000 + digits(n/10000) *\
    \ 10000 + digits(n/1000) * 1000 + digits(n/100) * 100 + digits(n/10)\n    else\
    \ if n<10000000 \n        return digits(n/10000000) * 10000000 + digits(n/1000000)\
    \ * 1000000 + digits(n/100000) * 100000 + digits(n/10000) * 10000 + digits(n/1000)\
    \ * 1000 + digits(n/100) * 100 + digits(n/10)\n    else if n<100000000 \n    \
    \    return digits(n/100000000) * 100000000 + digits(n/10000000) * 10000000 +\
    \ digits(n/1000000) * 1000000 + digits(n/100000) * 100000 + digits(n/10000) *\
    \ 10000 + digits(n/1000) * 1000 + digits(n/100) * 100 + digits(n/10)\n    else\
    \ if n<1000000000 \n        return digits(n/1000000000) * 1000000000 + digits(n/100000000)\
    \ * 100000000 + digits(n/10000000) * 10000000 + digits(n/1000000) * 1000000 +\
    \ digits(n/100000) * 100000 + digits(n/10000) * 10000 + digits(n/1000) * 1000\
    \ + digits(n/100) * 100 + digits(n/10)\n    else if n<10000000000 \n        return\
    \ digits(n/10000000000) * 10000000000 + digits(n/1000000000) * 1000000000 + digits(n/100000000)\
    \ * 100000000 + digits(n/10000000) * 10000000 + digits(n/1000000) * 1000000 +\
    \ digits(n/100000) * 100000 + digits(n/10000) * 10000 + digits(n/1000) * 1000\
    \ + digits(n/100) * 100 + digits(n/10)\n    else if n<100000000000 \n        return\
    \ digits(n/100000000000) * 100000000000 + digits(n/100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplgp9vcqn.jl:14\nin expression starting at\
    \ /tmp/tmplgp9vcqn.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vx_3lok.jl:14\nin expression starting at\
    \ /tmp/tmp7vx_3lok.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: use the function\
    \ digits to get the individual digits of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp96xfhfca.jl:12\nin expression starting at /tmp/tmp96xfhfca.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 10 then return n\n    if n % 2 == 0 then\
    \ return 0\n    return digits(n / 2) * digits(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise\nWrite a function that returns the product\
    \ of the even digits in a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpumz0p0p7.jl:12\nin expression starting at /tmp/tmpumz0p0p7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n==1 \n     \
    \   1\n    else if n%2==0 \n        digits(n/2)\n    else \n        digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of all even digits in a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduk41erl.jl:14\nin expression starting at\
    \ /tmp/tmpduk41erl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else\n        digits(n/2)*3\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even digits in a given\
    \ number. For example:\n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n\
    15\n>>> digits(-4)\n-4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(10)\n\
    10\n>>> digits(-10)\n-10\n>>> digits(100)\n100\n>>> digits(-100)\n-100\n>>> digits(1000)\n\
    1000\n>>> digits(-1000)\n-1000\n>>> digits(10000)\n10000\n>>> digits(-10000)\n\
    -10000\n>>> digits(100000)\n100000\n>>> digits(-100000)\n-100000\n>>> digits(1000000)\n\
    10000000\n>>> digits(-1000000)\n-10000000\n>>> digits(10000000)\n100000000\n>>>\
    \ digits(-10000000)\n-100000000\n>>> digits(1000000000)\n1000000000\n>>> digits(-1000000000)\n\
    -1000000000\n>>> digits(10000000000)\n10000000000\n>>> digits(-10000000000)\n\
    -10000000000\n>>> digits(100000000000)\n100000000000\n>>> digits(-100000000000)\n\
    -100000000000\n>>> digits(1000000000000)\n1000000000000\n>>> digits(-1000000000000)\n\
    -1000000000000\n>>> digits(10000000000000)\n10000000000000\n>>> digits(-10000000000000)\n\
    -10000000000000\n>>> digits(1000000000000000)\n1000000000000000\n>>> digits(-1000000000000000)\n\
    -1000000000000000\n>>> digits(10000000000000000)\n10000000000000000\n>>> digits(-10000000000000000)\n\
    -10000000000000000\n>>> digits(1000000000000000000)\n1000000000000000000\n>>>\
    \ digits(-1000000000000000000)\n-1000000000000000000\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1kq72e9.jl:14\nin expression starting at\
    \ /tmp/tmpj1kq72e9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n%2==0 \n        digits(n/2)\n  \
    \  else \n        digits(n/2)*10\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    digits(4)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum of\
    \ the even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei1ny2cp.jl:14\nin expression starting at\
    \ /tmp/tmpei1ny2cp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else \n        digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n\
    <code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtmnufev.jl:17\nin expression starting at\
    \ /tmp/tmpdtmnufev.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n % 2 == 1 \n        return\
    \ digits(n / 2)\n    else \n        return digits(n / 2) * 10 + n % 2\nend\n</cell>\n\
    <code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the product of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oy7lm3c.jl:14\nin expression starting at\
    \ /tmp/tmp4oy7lm3c.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of all even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7e76hk8.jl:14\nin expression starting at\
    \ /tmp/tmpd7e76hk8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n < 100 \n        return\
    \ n * 10\n    else if n < 1000 \n        return n * 100\n    else if n < 10000\
    \ \n        return n * 1000\n    else if n < 100000 \n        return n * 10000\n\
    \    else if n < 1000000 \n        return n * 100000\n    else if n < 10000000\
    \ \n        return n * 1000000\n    else if n < 100000000 \n        return n *\
    \ 10000000\n    else if n < 1000000000 \n        return n * 100000000\n    else\
    \ if n < 10000000000 \n        return n * 1000000000\n    else if n < 100000000000\
    \ \n        return n * 10000000000\n    else if n < 1000000000000 \n        return\
    \ n * 100000000000\n    else if n < 10000000000000 \n        return n * 1000000000000\n\
    \    else if n < 100000000000000 \n        return n * 10000000000000\n    else\
    \ if n < 1000000000000000 \n        return n * 100000000000000\n    else if n\
    \ < 10000000000000000 \n        return n * 1000000000000000\n    else if n < 100000000000000000\
    \ \n        return n * 10000000000000000\n    else if n < 1000000000000000000\
    \ \n        return n * 100000000000000000\n    else \n        return n * 1000000000000000000\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<code language=julia-1.3>\n\
    digits(235000)\n</cell>\n<code language=julia-1.3>\ndigits(23500000)\n</cell>\n\
    <code language=julia-1.3>\ndigits(23500000000)\n</cell>\n<code language=julia-1.3>\n\
    digits(235000000000)\n</cell>\n<code language=julia-1.3>\ndigits(2350000000000)\n\
    </cell>\n<code language=julia-1.3>\ndigits(23500000000000)\n</cell>\n<code language=julia-1.3>\n\
    digits(235000000000000)\n</cell>\n<code language=julia-1.3>\ndigits(2350000000000000)\n\
    </cell>\n<code language=julia-1.3>\ndigits(23500000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(235000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    digits(2350000000000000000)\n</cell>\n<code language=julia-1.3>\ndigits(23500000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54gcfm42.jl:14\nin expression starting at\
    \ /tmp/tmp54gcfm42.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n//2)\n    else \n        digits(n//2)*(2*n%2)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the digits of an integer.\n\
    For example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vrtafwq.jl:14\nin expression starting at\
    \ /tmp/tmp9vrtafwq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * digits(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the even digits in a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxp1fczq.jl:14\nin expression starting at\
    \ /tmp/tmpsxp1fczq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*10\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvqjjyzk.jl:14\nin expression starting at\
    \ /tmp/tmpkvqjjyzk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 \n        return n\n    else \n      \
    \  return digits(n/10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the function digits()\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugxe_lcp.jl:17\nin expression starting at\
    \ /tmp/tmpugxe_lcp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n==1 \n        return 1 \n    else if n%2==0 \n\
    \        return n*digits(n-1) \n    else \n        return n*digits(n-1)+digits(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of an integer.\n\
    For example:\n>>> digits(123)\n6\n>>> digits(1234)\n10\n>>> digits(12345)\n15\n\
    >>> digits(123456789)\n45\n>>> digits(1234567890)\n90\n>>> digits(1234567890123)\n\
    90\n>>> digits(12345678901234)\n90\n>>> digits(12345678901234567)\n90\n>>> digits(123456789012345678)\n\
    90\n>>> digits(1234567890123456789)\n90\n>>> digits(12345678901234567890)\n90\n\
    >>> digits(123456789012345678901)\n90\n>>> digits(1234567890123456789012)\n90\n\
    >>> digits(12345678901234567890123)\n90\n>>> digits(123456789012345678901234)\n\
    90\n>>> digits(123456789012345678901234567)\n90\n>>> digits(1234567890123456789012345678)\n\
    90\n>>> digits(12345678901234567890123456789)\n90\n>>> digits(123456789012345678901234567890)\n\
    90\n>>> digits(1234567890123456789012345678901)\n90\n>>> digits(12345678901234567890123456789012)\n\
    90\n>>> digits(123456789012345678901234567890123)\n90\n>>> digits(1234567890123456789012345678901234)\n\
    90\n>>> digits(1234567890123456789012345678901234567)\n90\n>>> digits(12345678901234567890123456789012345678)\n\
    90\n>>> digits(123456789012345678901234567890123456789)\n90\n>>> digits(1234567890123456789012345678901234567890)\n\
    90\n>>> digits(12345678901234567890123456789012345678901)\n90\n>>> digits(123456789012345678901234567890123456789012)\n\
    90\n>>> digits(1234567890123456789012345678901234567890123)\n90\n>>> digits(12345678901234567890123456789012345678901234)\n\
    90\n>>> digits(12345678901234567890123456789012345678901234567)\n90\n>>> digits(123456789012345678901234567890123456789012345678)\n\
    90\n>>> digits(1234567890123456789012345678901234567890123456789)\n90\n>>> digits(12345678901234567890123456789012345678901234567890)\n\
    90\n>>> digit\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jix7lzk.jl:14\nin expression starting at\
    \ /tmp/tmp8jix7lzk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n==1 \n     \
    \   1\n    else if n%2==0 \n        digits(n/2)\n    else \n        digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the sum of the digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lh48hah.jl:14\nin expression starting at\
    \ /tmp/tmp9lh48hah.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the product of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59d0v1c1.jl:14\nin expression starting at\
    \ /tmp/tmp59d0v1c1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10\n    else if n<100 \n\
    \        digits(n/10)*10+digits(n%10)\n    else if n<1000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)\n\
    \    else if n<10000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)\n\
    \    else if n<100000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)\n\
    \    else if n<1000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)\n\
    \    else if n<10000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)\n\
    \    else if n<100000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)\n\
    \    else if n<1000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)\n\
    \    else if n<10000000000 \n        digits(n/10)*10+digits(n%10)+digits(n%100)+digits(n%1000)+digits(n%10000)+digits(n%100000)+digits(n%1000000)+digits(n%10000000)+digits(n%100000000)+digits(n%1000000000)\n\
    \    else if n<100000000000 \n        digits(n/10)*10+digits(n%10)+digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbhz9s38.jl:14\nin expression starting at\
    \ /tmp/tmpqbhz9s38.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * 3 + 1\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(12) should return 3 + 4 = 7\nHint: You can use the digits() function\
    \ you wrote earlier.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t\
    @test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2usri1iw.jl:14\nin expression starting at\
    \ /tmp/tmp2usri1iw.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n==3 \n        3\n    else if n==4 \n        4\n  \
    \  else if n==5 \n        5\n    else if n==6 \n        6\n    else if n==7 \n\
    \        7\n    else if n==8 \n        8\n    else if n==9 \n        9\n    else\
    \ \n        digits(n-1)\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n\
    </cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<code language=julia-1.0>\ndigits(-2)\n</cell>\n<code language=julia-1.0>\n\
    digits(0)\n</cell>\n<code language=julia-1.0>\ndigits(-1)\n</cell>\n<code language=julia-1.0>\n\
    digits(-4)\n</cell>\n<code language=julia-1.0>\ndigits(-5)\n</cell>\n<code language=julia-1.0>\n\
    digits(-6)\n</cell>\n<code language=julia-1.0>\ndigits(-7)\n</cell>\n<code language=julia-1.0>\n\
    digits(-8)\n</cell>\n<code language=julia-1.0>\ndigits(-9)\n</cell>\n<code language=julia-1.0>\n\
    digits(10)\n</cell>\n<code language=julia-1.0>\ndigits(100)\n</cell>\n<code language=julia-1.0>\n\
    digits(1000)\n</cell>\n<code language=julia-1.0>\ndigits(10000)\n</cell>\n<code\
    \ language=julia-1.0>\ndigits(100000)\n</cell>\n<code language=julia-1.0>\ndigits(1000000)\n\
    </cell>\n<code language=julia-1.0>\ndigits(10000000)\n</cell>\n<code language=julia-1.0>\n\
    digits(100000000)\n</cell>\n<code language=julia-1.0>\ndigits(1000000000)\n</cell>\n\
    <code language=julia-1.0>\ndigits(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    digits(100000000000)\n</cell>\n<code language=julia-1.0>\ndigits(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\ndigits(10000000000000)\n</cell>\n<code language=julia-1.0>\n\
    digits(100000000000000)\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpfxwg_7.jl:14\nin expression starting at\
    \ /tmp/tmpdpfxwg_7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n<0 then return\
    \ 0\n    if n%2==1 then return 0\n    else return digits(n/2)*10+digits(n%2)\n\
    end\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the product of the even digits in a number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8_mykzvx.jl:12\nin expression starting at /tmp/tmp8_mykzvx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n < 10 \n        return n\n    else if n < 100 \n        return\
    \ n * 2\n    else if n < 1000 \n        return n * 3\n    else if n < 10000 \n\
    \        return n * 4\n    else if n < 100000 \n        return n * 5\n    else\
    \ if n < 1000000 \n        return n * 6\n    else if n < 10000000 \n        return\
    \ n * 7\n    else if n < 100000000 \n        return n * 8\n    else if n < 1000000000\
    \ \n        return n * 9\n    else if n < 10000000000 \n        return n * 10\n\
    \    else if n < 100000000000 \n        return n * 11\n    else if n < 1000000000000\
    \ \n        return n * 12\n    else if n < 10000000000000 \n        return n *\
    \ 13\n    else if n < 100000000000000 \n        return n * 14\n    else if n <\
    \ 1000000000000000 \n        return n * 15\n    else if n < 10000000000000000\
    \ \n        return n * 16\n    else if n < 100000000000000000 \n        return\
    \ n * 17\n    else if n < 1000000000000000000 \n        return n * 18\n    else\
    \ \n        return n * 19\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8t3fz80.jl:14\nin expression starting at\
    \ /tmp/tmpa8t3fz80.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)*10\
    \ + digits(n%10)\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: use the function\
    \ digits()\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgpi5ka9o.jl:12\nin expression starting at /tmp/tmpgpi5ka9o.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n/2)*10\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n\
    </cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcg6_x0hv.jl:14\nin expression starting at\
    \ /tmp/tmpcg6_x0hv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the product of the even\
    \ digits in a given number. For example, digits(235) should return 15 (3 * 5 +\
    \ 5). Hint: Use a while loop to keep dividing by 10 until you reach the number\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0e6rbi2h.jl:17\nin expression starting at\
    \ /tmp/tmp0e6rbi2h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: use the function\
    \ digits()\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_i4uzml.jl:17\nin expression starting at\
    \ /tmp/tmpp_i4uzml.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    digits(n/10)\n    digits(n%10)\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use the function digits\
    \ to get the digits of a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjyr8l81l.jl:12\nin expression starting at /tmp/tmpjyr8l81l.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n%2 ==\
    \ 1 \n        return n*digits(n-1) \n    else \n        return digits(n//2)*digits(n//2)\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that\
    \ returns the sum of the digits of an integer.\nFor example, digits(123) = 1 +\
    \ 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nWrite\
    \ a function that returns the sum of the digits of \nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i9v_e3b.jl:14\nin expression starting at\
    \ /tmp/tmp1i9v_e3b.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n<0 then return\
    \ 0\n    if n==1 then return 1\n    if n%2==0 then return n*digits(n/2)\n    return\
    \ n*digits(n/2)\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n\
    <code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpynz2uz2o.jl:12\nin expression starting at /tmp/tmpynz2uz2o.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n//10)*10 + digits(n%10)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprevcojtk.jl:18\nin expression starting at\
    \ /tmp/tmprevcojtk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 10 then return n\n    else return digits(n\
    \ / 10) * 10 + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n\
    <code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpallywqd0.jl:12\nin expression starting at /tmp/tmpallywqd0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    elseif n==1 \n      \
    \  1\n    elseif n==2 \n        1\n    elseif n==3 \n        2\n    elseif n==4\
    \ \n        2\n    elseif n==5 \n        3\n    elseif n==6 \n        3\n    elseif\
    \ n==7 \n        4\n    elseif n==8 \n        4\n    elseif n==9 \n        5\n\
    \    elseif n==10 \n        5\n    elseif n==11 \n        6\n    elseif n==12\
    \ \n        6\n    elseif n==13 \n        7\n    elseif n==14 \n        7\n  \
    \  elseif n==15 \n        8\n    elseif n==16 \n        8\n    elseif n==17 \n\
    \        9\n    elseif n==18 \n        9\n    elseif n==19 \n        10\n    elseif\
    \ n==20 \n        10\n    elseif n==21 \n        11\n    elseif n==22 \n     \
    \   11\n    elseif n==23 \n        12\n    elseif n==24 \n        12\n    elseif\
    \ n==25 \n        13\n    elseif n==26 \n        13\n    elseif n==27 \n     \
    \   14\n    elseif n==28 \n        14\n    elseif n==29 \n        15\n    elseif\
    \ n==30 \n        15\n    elseif n==31 \n        16\n    elseif n==32 \n     \
    \   16\n    elseif n==33 \n        17\n    elseif n==34 \n        17\n    elseif\
    \ n==35 \n        18\n    elseif n==36 \n        18\n    elseif n==37 \n     \
    \   19\n    elseif n==38 \n        19\n    elseif n==39 \n        20\n    elseif\
    \ n==40 \n        20\n    elseif n==41 \n        21\n    elseif n==42 \n     \
    \   21\n    elseif n==43 \n        22\n    elseif n==44 \n        22\n    elseif\
    \ n==45 \n        23\n    elseif n==46 \n        23\n    elseif n==47 \n     \
    \   24\n    elseif n==48 \n        24\n    elseif n==49 \n        25\n    elseif\
    \ n==50 \n        25\n    elseif n==51 \n        26\n    elseif n==52 \n     \
    \   26\n    elseif n==53 \n        27\n    elseif n==54 \n        27\n    elseif\
    \ n==55 \nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2dmb54v.jl:1\nin expression starting at /tmp/tmpn2dmb54v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use the function digits\
    \ to solve this problem\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4uwgc1t.jl:14\nin expression starting at\
    \ /tmp/tmpx4uwgc1t.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    else if n%2==0 then\
    \ return n*digits(n/2)\n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the function digits to get the individual digits of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyrm8gh2a.jl:12\nin expression starting at /tmp/tmpyrm8gh2a.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        0\n    else if n % 2 == 0 \n        digits(n /\
    \ 2)\n    else \n        digits(n / 2) * 3 + 1\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the product of the even digits in a given number.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsc7zpqc.jl:14\nin expression starting at\
    \ /tmp/tmpgsc7zpqc.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code\
    \ language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\ndigits(4)\n\
    </cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\nExercise\nWrite\
    \ a function digits_sum(n::Int64) that returns the sum of the digits of the number\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsovt3gqt.jl:14\nin expression starting at\
    \ /tmp/tmpsovt3gqt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else if n % 2 == 0\
    \ \n        digits(n / 2)\n    else \n        digits(n / 2) * 3\nend\n</cell>\n\
    <code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n\
    </cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the digits of an integer.\nFor example, digits(123)\
    \ = 1 + 2 + 3 = 6\nHint: Use a recursive function.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_k7d73v.jl:14\nin expression starting at\
    \ /tmp/tmpq_k7d73v.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*10\nend\n</cell>\n<code\
    \ language=julia-1.4>\ndigits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n\
    </cell>\n<code language=julia-1.4>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(12345) = 1 + 2 + 3 + 4 + 5 = 15.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67wvnpdm.jl:14\nin expression starting at\
    \ /tmp/tmp67wvnpdm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*(n%2)*(n%2)\n\
    end\n</cell>\n<code language=julia-1.0>\ndigits(1)\n</cell>\n<code language=julia-1.0>\n\
    digits(4)\n</cell>\n<code language=julia-1.0>\ndigits(235)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the sum of the even digits in a given\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppw_iij62.jl:17\nin expression starting at\
    \ /tmp/tmppw_iij62.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else if n%2==0 \n   \
    \     digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code language=julia-1.5>\n\
    digits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\n\
    digits(235)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7\
    \ 1\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppatzumj_.jl:14\nin expression starting at\
    \ /tmp/tmppatzumj_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n%3==0 \n        digits(n/3)*3\n    else if n%5==0\
    \ \n        digits(n/5)*5\n    else \n        digits(n/10)*10\n    end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7meo7rza.jl:14\nin expression starting at\
    \ /tmp/tmp7meo7rza.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use\
    \ the function digits to get the digits of an integer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply14v5m8.jl:17\nin expression starting at\
    \ /tmp/tmply14v5m8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n%2==0\
    \ \n        return digits(n/2) \n    else \n        return digits(n-1) * 3\nend\n\
    </cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcgm3y8a.jl:14\nin expression starting at\
    \ /tmp/tmpbcgm3y8a.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else \n        digits(n//2)*10\
    \ + n % 2\nend\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.5>\ndigits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(1234) should return 10.\nWrite a function\
    \ that returns the sum of the digits of an integer.\nFor example, digits(1234)\
    \ should return 10.\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example, digits(1234) should return 10.\nWrite a function that\
    \ returns the sum of the digits of an integer.\nFor example, digits(1234) should\
    \ return 10.\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(1234) should return 10.\nWrite a function that returns the\
    \ sum of the digits of an integer.\nFor example, digits(1234) should return 10.\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(1234) should return 10.\nWrite a function that returns the sum of the\
    \ digits of an integer.\nFor example, digits(1234) should return 10.\nWrite a\
    \ function that returns the sum of the digits of an integer.\nFor example, digits(1234)\
    \ should return 10.\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example, digits(1234) should return 10.\nWrite a function that\
    \ returns the sum of the digits of an integer.\nFor example, digits(1234) should\
    \ return 10.\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(1234) should return 10.\nWrite a function that returns the\
    \ sum of the digits of an integer.\nFor example, digits(1234) should return 10.\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(1234) should return 10.\nWrite a function that returns the sum of the\
    \ digits of an integer.\nFor example, digits(1234) should return 10.\nWrite a\
    \ function that returns the sum of the digits of an integer.\nFor example, digits(1234)\
    \ should return 10.\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example, digits(1234) should return 10.\nWrite a function that\
    \ returns the sum of the digits of an integer.\nFor example, digits(1234) should\
    \ return 10.\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(1234) should return 10.\nWrite a function that returns the\
    \ sum of the digits of an integer.\nFor example, digits(1234) should return 10.\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(1234) should return 10.\nWrite a function that returns the sum of the\
    \ digits of an integer.\nFor example, digits(\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3e7xvdll.jl:17\nin expression starting at\
    \ /tmp/tmp3e7xvdll.jl:17\n"
  stdout: ''
