name: HumanEval_155_even_odd_count
language: jl
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 1)\n    else\n        even::Int64 = 0\n        odd::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::Int64\
    \ = 0\n        digit::Int64 = 0\n        digit::Int64 = 0\n        digit::", " \
    \   if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    elseif num % 2 == 0\n        (1, num / 2)\n    else\n\
    \        (num / 2, num % 2)\n    end\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes an integer and returns the number of digits in that integer.",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if num <\
    \ 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while\
    \ num != 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ digit\n        else\n            odd += digit\n        end\n        num /= 10\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in an integer and returns the\
    \ number of digits in that integer.", "    if num < 0 \n        error(\"The given\
    \ number must be positive\")\n    else if num == 0\n        (1, 1)\n    else if\
    \ num % 2 == 0\n        even_odd_count(num / 2)\n    else\n        even_odd_count(num\
    \ / 2) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    elseif num == 1\n        return (1, 0)\n    else\n\
    \        even, odd = 0, 0\n        for n in num\n            if n % 2 == 0\n \
    \               even += 1\n            else\n                odd += 1\n      \
    \  return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>", "  \
    \  if num < 0\n        error(\"The input must be positive\")\n    end\n    even\
    \ = num % 2 == 0\n    odd = num % 2 != 0\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.4>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a number as input and returns the sum\
    \ of the digits of that number. \nThe input number will always be positive.",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n            num /= 2\n        else\n            odd += 1\n            num\
    \ /= 2\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The given number\
    \ must be positive.\")\n    end\n    even = 0\n    odd = 0\n    digits = num %\
    \ 10\n    while digits > 0\n        if digits % 2 == 0\n            even += digits\n\
    \        else\n            odd += digits\n        end\n        digits = digits\
    \ / 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n        if i%2 ==\
    \ 0\n            even += 1 \n        else\n            odd += 1 \n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    if\
    \ num == 0\n        return (0, 0)\n    end\n    even, odd = 0, 0\n    while num\
    \ > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ \nThe function should raise an error if the input is not a string.", "    if\
    \ num < 0 \n        error(\"The given number must be positive\")\n    else if\
    \ num == 0\n        (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 0)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of digits in $n$. \nThe function\
    \ should raise an error if the input is not an integer.", "    if num < 0\n  \
    \      error(\"The given number must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0 \n        error(\"The given number must be positive.\"\
    )\n    else if num == 0\n        (1, 1)\n    else\n        odd_count = sum(num\
    \ % 2 == 0 for num in num::Int64)\n        even_count = sum(num % 2 == 1 for num\
    \ in num::Int64)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer and returns the number\
    \ of digits in it.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        (1, 1)\n    else if num % 2 == 0\n        (1,\
    \ num / 2)\n    else\n        (num / 2, num % 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function named odd_even_count(num)\
    \ that returns the number of even and odd digits respectively. \nThe function\
    \ should take an input of type Int64 and return a tuple of two Int64 numbers.\
    \ \nThe first number in the tuple should contain the number of even digits in\
    \ the input and the second number should contain the number of odd digits in the\
    \ input.", "    if num < 0\n        error(\"The input must be positive\")\n  \
    \  end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n  \
    \      if digit % 2 == 0\n            even += digit\n        else\n          \
    \  odd += digit\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    for n in reverse(digits(num))\n\
    \        if n % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input number should be positive.\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        if num % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The\
    \ given number must be positive\")\n    else if num == 0\n        (1, 1)\n   \
    \ else if num % 2 == 0\n        (even_odd_count(num / 2), 1)\n    else\n     \
    \   (even_odd_count(num / 2) + 1, 0)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for _ in 1:num)\n\
    \        even_count = sum(num % 2 != 0 for _ in 1:num)\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer $n$ and returns the number\
    \ of digits in $n$. \nThe function should raise an error if the input is not positive.",
  "    if num < 0\n        error(\"The argument must be positive.\")\n    end\n  \
    \  even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if num < 0\n        error(\"Invalid input\")\n  \
    \  end\n    even = num % 2 == 0\n    odd = num % 2 != 0\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n            num /= 2\n      \
    \  else\n            odd += 1\n            num /= 2\n        end\n    end\n  \
    \  return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n\
    \        error(\"Invalid input\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        odd_count = 0\n        even_count = 0\n        digit = num % 10\n   \
    \     while digit > 0\n            if digit % 2 == 0\n                even_count\
    \ += 1\n            else\n                odd_count += 1\n            digit =\
    \ digit / 10\n        return (odd_count, even_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The given number\
    \ must be positive.\")\n    end\n    even, odd = 0, 0\n    while num > 0\n   \
    \     if num % 2 == 0\n            even += 1\n            num /= 2\n        else\n\
    \            odd += 1\n            num /= 2\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function named odd_even_count(num) that takes an integer and returns\
    \ two integers denoting the number of odd digits and the number of even digits\
    \ respectively.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = 0\n    \
    \    even_count = 0\n        while num > 0\n            odd_count += 1\n     \
    \       num = num / 10\n        end\n        while num > 0\n            even_count\
    \ += 1\n            num = num / 10\n        end\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The given number must be positive.\")\n    elseif num == 0\n        return (1,\
    \ 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n            num /= 10\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nProblem 7:\
    \ even_odd_count_recursive\nWrite a recursive function even_odd_count_recursive(num)\
    \ that takes an integer and returns two integers containing the number of even\
    \ and odd digits respectively.", "    if num < 0\n        error(\"The input must\
    \ be positive\")\n    end\n    if num == 0\n        return (1, 0)\n    even, odd\
    \ = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit % 2 ==\
    \ 0\n            even += digit\n        else\n            odd += digit\n     \
    \   end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    for x in num\n        if x % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ it.", "    if num < 0\n        error(\"The given number should be positive.\"\
    )\n    end\n    if num == 0\n        return (0, 0)\n    end\n    even, odd = 0,\
    \ 0\n    while num != 0\n        if num % 2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n        num /= 10\n    end\n   \
    \ return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    end\n    if num == 0\n\
    \        return (1, 0)\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n   \
    \ for x in reverse(digits(num))\n        if x % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    for n in reverse(split(string(num),\
    \ \"\"))\n        if n == \"0\"\n            even += 1\n        elseif n == \"\
    1\"\n            odd += 1\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0 \n        error(\"The argument must\
    \ be positive\")\n    else if num == 0\n        (1, 1)\n    else\n        even,\
    \ odd = divrem(num, 10)\n        (even_odd_count(even), even_odd_count(odd))\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ as input and returns the sum of the digits of that number. \nThe input number\
    \ will be a positive integer. \nThe output will be a positive integer.", "   \
    \ if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num > 0\n        if num % 2 == 0\n            even += 1\n         \
    \   num /= 2\n        else\n            odd += 1\n            num /= 2\n     \
    \   end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if num % i == 0\n     \
    \       even = even + 1\n        else\n            odd = odd + 1 \n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer and returns the sum\
    \ of the squares of the digits of that integer.", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += digit\n        else\n            odd += digit\n        end\n        num /=\
    \ 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number as input and\
    \ returns the number of digits in that number.", "    if num < 0\n        error(\"\
    The given number must be positive.\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += digit\n        else\n            odd += digit\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0 \n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ it.", "    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 0)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a number as input and returns the number of digits in that number.",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in\
    \ reverse(digits(num))\n        if x % 2 == 0\n            even += 1\n       \
    \ else\n            odd += 1\n        end\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ n in num\n        if n % 2 == 0\n            even += 1\n        else\n     \
    \       odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0 \n        error(\"The given number\
    \ must be positive\")\n    else if num == 0\n        (1, 1)\n    else\n      \
    \  odd_count = sum(num % 2 != 0 for num in num::Int64)\n        even_count = sum(num\
    \ % 2 == 0 for num in num::Int64)\n        return (even_count, odd_count)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The given number should be positive.\")\n    elseif num == 0\n        (1, 1)\n\
    \    else\n        odd_count = sum(num % 2 == 0 for num in num::Int64)\n     \
    \   even_count = sum(num % 2 != 0 for num in num::Int64)\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The input number must be positive.\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (odd_count, even_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the sum of the digits of that integer.", "    if num < 0\n     \
    \   error(\"The given number must be positive.\")\n    end\n    even = 0\n   \
    \ odd = 0\n    digits = num % 10\n    while digits > 0\n        if digits % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        digits = digits / 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels present in the string.", "    if num < 0\n        error(\"The input\
    \ number must be positive\")\n    end\n    even = num % 2 == 0\n    odd = num\
    \ % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>\n@assert\
    \ even_odd_count(-1) == (1, 1)\n@assert even_odd_count(1) == (1, 1)\n@assert even_odd_count(0)\
    \ == (0, 0)\n@assert even_odd_count(1) == (0, 0)\n@assert even_odd_count(2) ==\
    \ (0, 1)\n@assert even_odd_count(3) == (1, 1)\n@assert even_odd_count(4) == (1,\
    \ 0)\n@assert even_odd_count(5) == (0, 1)\n@assert even_odd_count(6) == (1, 0)\n\
    @assert even_odd_count(7) == (1, 0)\n@assert even_odd_count(8) == (1, 0)\n@assert\
    \ even_odd_count(9) == (1, 0)\n@assert even_odd_count(10) == (1, 0)\n@assert even_odd_count(11)\
    \ == (1, 0)\n@assert even_odd_count(12) == (1, 0)\n@assert even_odd_count(13)\
    \ == (1, 0)\n@assert even_odd_count(14) == (1, 0)\n@assert even_odd_count(15)\
    \ == (1, 0)\n@assert even_odd_count(16) == (1, 0)\n@assert even_odd_count(17)\
    \ == (1, 0)\n@assert even_odd_count(18) == (1, 0)\n@assert even_odd_count(19)\
    \ == (1, 0)\n@assert even_odd_count(20) == (1, 0)\n@assert even_odd_count(21)\
    \ == (1, 0)\n@assert even_odd_count(22) == (1, 0)\n@assert even_odd_count(23)\
    \ == (1, 0)\n@assert even_odd_count(24) == (1, 0)\n@assert even_odd_count(25)\
    \ == (1, 0)\n@assert even_odd_count(26) == (1, 0)\n@assert even_odd_count(27)\
    \ == (1, 0)\n@assert even_odd_count(28) == (1, 0)\n@assert even_odd_count(29)\
    \ == (1, 0)\n@assert even_odd_count(30) == (1, 0)\n@assert even_odd_count(31)\
    \ == (1, 0)\n@assert even_odd_count(32) == (1, 0)\n@assert even_odd_count(33)\
    \ == (1, 0)\n@assert even_odd_count(34) == (1, 0)\n@assert even_odd_count(35)\
    \ == (1, 0)\n@assert even_odd_count(36) == (1, 0)\n", "    if num < 0\n      \
    \  error(\"The input must be positive\")\n    elseif num == 0\n        (1, 1)\n\
    \    else\n        odd_count = num % 10\n        even_count = num - odd_count\n\
    \        return (odd_count, even_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num / 10 - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0 \n       \
    \ error(\"The input must be positive\")\n    else if num == 0\n        (1, 1)\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += digit\n \
    \           else\n                odd += digit\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer. \nFor example, \n    even_odd_count(-12) = (1, 1) because there\
    \ are 1 even digit, 1 odd digit, and -12 is even.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        even, odd = divrem(num, 10)\n        (even_odd_count(even), even_odd_count(odd))\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the sum of the digits of that integer. \nThe sum of the digits should\
    \ be less than or equal to 9. \nThe function should raise an error if the integer\
    \ is less than 0.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = sum(num\
    \ % 2 == 0 for num in nums)\n        even_count = sum(num % 2 == 1 for num in\
    \ nums)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0 \n        return (1, 0)\n    else if num < 10 \n     \
    \   return (1, 1)\n    else \n        odd_count = 0\n        even_count = 0\n\
    \        \n        for i in reverse(digits(num))\n            if i%2 == 1\n  \
    \              odd_count += 1\n            else \n                even_count +=\
    \ 1\n        return (odd_count, even_count)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n            num /= 2\n        else\n            odd += 1\n            num\
    \ /= 2\n        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0 \n        error(\"The given number should be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += digit\n        else\n\
    \            odd += digit\n        end\n        num /= 10\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that integer.", "    if num < 0\n        error(\"Invalid input\")\n\
    \    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n      \
    \  if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n            num /= 10\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    end\n    even, odd =\
    \ 0, 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n     \
    \   else\n            odd += 1\n        end\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ x in reverse(digits(num))\n        if x % 2 == 0\n            even += 1\n  \
    \      else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    while num != 0\n\
    \        digit = num % 10\n        if digit % 2 == 0\n            even += digit\n\
    \        else\n            odd += digit\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>", "    if num\
    \ < 0 \n        error(\"The input must be positive\")\n    end\n    even = num\
    \ % 2 == 0\n    odd = num % 2 != 0\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The given number\
    \ should be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n  \
    \      digit = num % 10\n        if digit % 2 == 0\n            even += digit\n\
    \        else\n            odd += digit\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0 \n        error(\"The input must be positive\")\n    else if num == 0\n\
    \        (1, 1)\n    else if num % 2 == 0\n        (2, 1)\n    else\n        (1,\
    \ num % 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(0)\
    \ == (1, 1)\n@assert even_odd_count(1) == (1, 2)\n@assert even_odd_count(2) ==\
    \ (1, 2)\n@assert even_odd_count(3) == (1, 2)\n@assert even_odd_count(4) == (1,\
    \ 2)\n@assert even_odd_count(5) == (1, 2)\n@assert even_odd_count(6) == (1, 2)\n\
    @assert even_odd_count(7) == (1, 2)\n@assert even_odd_count(8) == (1, 2)\n@assert\
    \ even_odd_count(9) == (1, 2)\n@assert even_odd_count(10) == (1, 2)\n@assert even_odd_count(11)\
    \ == (1, 2)\n@assert even_odd_count(12) == (1, 2)\n@assert even_odd_count(13)\
    \ == (1, 2)\n@assert even_odd_count(14) == (1, 2)\n@assert even_odd_count(15)\
    \ == (1, 2)\n@assert even_odd_count(16) == (1, 2)\n@assert even_odd_count(17)\
    \ == (1, 2)\n@assert even_odd_count(18) == (1, 2)\n@assert even_odd_count(19)\
    \ == (1, 2)\n@assert even_odd_count(20) == (1, 2)\n@assert even_odd_count(21)\
    \ == (1, 2)\n@assert even_odd_count(22) == (1, 2)\n@assert even_odd_count(23)\
    \ == (1, 2)\n@assert even_odd_count(24) == (1, 2)\n@assert even_odd_count(25)\
    \ == (1, 2)\n@assert even_odd_count(26) == (1, 2)\n@assert even_odd_count(27)\
    \ == (1, 2)\n@assert even_odd_count(28) == (1, 2)\n@assert even_odd_count(29)\
    \ == (1, 2)\n@assert even_odd_count(30) == (1, 2)\n@assert even_odd_count(31)\
    \ == (1, 2)\n@assert even_odd_count(32) == (1, 2)\n@assert even_odd_count(33)\
    \ == (1, 2)\n@assert even_odd_count(34) == (1, 2)\n@assert even_odd_count(35)\
    \ == (1, 2)\n@assert even_odd_count(36) == (1, 2)\n@assert even_odd_count(37)\
    \ == (1, 2)\n@assert even_odd_count(38) == (1, 2)\n@assert even_odd_count(39)\
    \ == (1, 2)\n@assert even_odd_count(40) == (1, 2)\n@assert even_", "    if num\
    \ < 0 \n        error(\"Invalid input\")\n    else if num == 0\n        return\
    \ (1, 0)\n    else if num % 2 == 0\n        return (num / 2, num / 2)\n    else\n\
    \        return (num / 2, num / 2 + 1)\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The argument must be positive\")\n    end\n   \
    \ even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n        if i%2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.",
  "    if num < 0 \n        error(\"The given number must be positive.\")\n    elseif\
    \ num == 0\n        return (1, 0)\n    else\n        even::Int64 = 0\n       \
    \ odd::Int64 = 0\n        \n        while num > 0\n            if num % 2 == 0\n\
    \                even += 1\n                num = (num / 2)\n            else\n\
    \                odd += 1\n                num = (num / 2)\n        end\n    \
    \    return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\
    \ \nThe function should take a single integer as an argument. \nThe function should\
    \ return the number of digits in the integer.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ digit\n        else\n            odd += digit\n        end\n        num /= 10\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that number.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in\
    \ num\n        if x % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if num < 0\n        error(\"The given number must\
    \ be positive\")\n    else\n        even = num % 2 == 0\n        odd = num % 2\
    \ != 0\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n            num /= 2\n        else\n            odd += 1\n            num\
    \ /= 2\n        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer and returns the sum\
    \ of the digits of that integer. \nFor example if the input is 123 the function\
    \ should return 1 + 2 + 3 = 6.", "    if num < 0\n        error(\"Invalid input\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += digit\n        else\n            odd += digit\n\
    \        end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.3>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += digit\n        else\n\
    \            odd += digit\n        end\n        num /= 10\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (odd_count, even_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"\
    Invalid input\")\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count\
    \ = num % 10\n        even_count = num - odd_count\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.3>", "    if num <\
    \ 0\n        error(\"The given number must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n     \
    \   else\n            odd += 1\n        end\n        num /= 10\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even = num % 2 == 0\n    odd = num % 2 != 0\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer and returns the number of digits in that\
    \ integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if num < 0 \n        error(\"The given number must\
    \ be positive\")\n    else if num == 0\n        (1, 1)\n    else\n        odd_count\
    \ = count(num::Int64)\n        even_count = count(num::Int64) - odd_count\n  \
    \      return (odd_count, even_count)\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of digits in an integer. \nThe function\
    \ should take an Int64 argument and return the number of digits in that integer.",
  "    if num < 0\n        error(\"The given number must be positive.\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        (1, 1)\n    else\n        odd_count = 0\n   \
    \     even_count = 0\n        digits = num\n        while digits > 0\n       \
    \     digit = digits % 10\n            if digit % 2 == 0\n                even_count\
    \ += 1\n            else\n                odd_count += 1\n            digits /=\
    \ 10\n        return (odd_count, even_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The argument must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if num % 2 == 0\n     \
    \       even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.4>", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    end\n    even = num %\
    \ 2 == 0\n    odd = num % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"\
    The given number must be positive.\")\n    end\n    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    for x in reverse(digits(num))\n        if x % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ digit\n        else\n            odd += digit\n        end\n        num /= 10\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n            num /= 2\n        else\n            odd += 1\n            num\
    \ /= 2\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n            num /= 2\n        else\n            odd +=\
    \ 1\n            num /= 2\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0 \n        error(\"The input must\
    \ be positive\")\n    else if num == 0\n        (1, 1)\n    else if num < 10\n\
    \        (1, 1)\n    else if num < 100\n        (2, 1)\n    else if num < 1000\n\
    \        (3, 1)\n    else if num < 10000\n        (4, 1)\n    else if num < 100000\n\
    \        (5, 1)\n    else if num < 1000000\n        (6, 1)\n    else if num <\
    \ 10000000\n        (7, 1)\n    else if num < 100000000\n        (8, 1)\n    else\
    \ if num < 1000000000\n        (9, 1)\n    else if num < 10000000000\n       \
    \ (10, 1)\n    else if num < 100000000000\n        (11, 1)\n    else if num <\
    \ 1000000000000\n        (12, 1)\n    else if num < 10000000000000\n        (13,\
    \ 1)\n    else if num < 100000000000000\n        (14, 1)\n    else if num < 1000000000000000\n\
    \        (15, 1)\n    else if num < 10000000000000000\n        (16, 1)\n    else\
    \ if num < 100000000000000000\n        (17, 1)\n    else if num < 1000000000000000000\n\
    \        (18, 1)\n    else if num < 10000000000000000000\n        (19, 1)\n  \
    \  else if num < 100000000000000000000\n        (20, 1)\n    else if num < 1000000000000000000000\n\
    \        (21, 1)\n    else if num < 10000000000000000000000\n        (22, 1)\n\
    \    else if num < 100000000000000000000000\n        (23, 1)\n    else if num\
    \ < 1000000000000000000000000\n        (24, 1)\n    else if num < 10000000000000000000000000\n\
    \        (25, 1)\n    else if num < 100000000000000000000000000\n        (26,\
    \ 1)\n    else if num < 1000000000000000000000000000\n        (27, 1)\n    else\
    \ if num < 10000000000000000000000000000\n        (28, 1)\n    else if num < 100000000000000000000000000000\n\
    \        (29, 1)\n    else if num < 1000000000000000000000000000000\n        (30,\
    \ 1)\n    else if num < 10000000000000000000000000000000\n        (31, 1)\n  \
    \  else if num < 100000000000000000000000000000000\n        (32, 1)\n    else\
    \ if num < 1000000000000000000000000000000000\n        (33, 1)\n    else if num\
    \ < 1000000000000000000000000000000000\n        (34, 1)\n    else if num < 1000000000000000000000000000000000\n\
    \        (35, 1)\n    else if num < 1000000000000000000000000000000000\n     \
    \   (36, 1)\n    else if num < 1000000000000000000000000000000000\n        (37,\
    \ 1)\n    else if num < 1000000000000000000000000000000000\n        (38, 1)\n",
  "    if num < 0 \n        error(\"The argument must be positive\")\n    else if\
    \ num == 0 \n        return (1, 0)\n    else \n        even, odd = 0, 0\n    \
    \    while num > 0 \n            digit = num % 10\n            if digit % 2 ==\
    \ 0 \n                even += 1 \n            else\n                odd += 1 \n\
    \            num /= 10 \n        return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += digit\n        else\n            odd += digit\n\
    \        end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer and returns the sum of the digits of that integer. For example, if the\
    \ input is 123, the function should return 3 + 2 = 5.", "    if num < 0\n    \
    \    error(\"The given number must be positive\")\n    end\n    even::Int64 =\
    \ 0\n    odd::Int64 = 0\n    digit::Int64 = 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit == 0\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    Invalid input\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += digit\n        else\n\
    \            odd += digit\n        end\n        num /= 10\n    end\n    return\
    \ even, odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer and returns the sum of the digits of that integer. \nFor example if\
    \ the input is 123, the output should be (1 + 2 + 3) = 6.", "    if num < 0\n\
    \        error(\"The given number should be positive\")\n    end", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for n in num\n        if n % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n   \
    \     error(\"The input number must be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    for i in 1:num\n        if i % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while num\
    \ != 0\n            if num % 2 == 0\n                even += 1\n             \
    \   num /= 2\n            else\n                odd += 1\n                num\
    \ /= 2\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The argument must\
    \ be positive\")\n    end\n    if num == 0\n        return (1, 0)\n    end\n \
    \   even::Int64 = 0\n    odd::Int64 = 0\n    while num > 0\n        if num % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ given number should be positive\")\n    elseif num == 0\n        return (0,\
    \ 0)\n    elseif num == 1\n        return (1, 0)\n    else\n        even = num\
    \ % 2 == 0\n        odd = num % 2 != 0\n        return (sum(even), sum(odd))\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. \nThe function should work for negative numbers as well.", "    if num\
    \ < 0\n        error(\"The given number should be positive.\")\n    end\n    even\
    \ = 0\n    odd = 0\n    while num > 0\n        if num % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0\n        error(\"The given number must be positive.\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as the product of all the numbers\
    \ from 1 to $n$, inclusive.", "    if num < 0\n        error(\"The input must\
    \ be positive\")\n    elseif num == 0\n        return (1, 1)\n    else\n     \
    \   odd_count = 0\n        even_count = 0\n        digits = num % 10\n       \
    \ while digits > 0\n            if digits % 2 == 0\n                even_count\
    \ += 1\n            else\n                odd_count += 1\n            digits /=\
    \ 10\n        return (odd_count, even_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive.\")\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n\
    \                even += 1\n                num -= 2\n            else\n     \
    \           odd += 1\n                num -= 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n \
    \       error(\"The input number should be positive\")\n    end\n    even, odd\
    \ = 0, 0\n    for i in reverse(range(num))\n        if i rem 2 == 0\n        \
    \    even += 1\n        else\n            odd += 1\n        end\n    end\n   \
    \ return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n\
    \        error(\"The input must be positive\")\n    end\n    even::Int64 = 0\n\
    \    odd::Int64 = 0\n    for i in reverse(digits(num))\n        if i%2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the sum of the\
    \ digits of that integer. \nFor example, if the input is 123, the function should\
    \ return 6. \nIf the input is -123, the function should return -6.", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    end\n    if num == 0\n\
    \        return (1, 0)\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n   \
    \ for x in reverse(digits(num))\n        if x % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    for n in num\n\
    \        if n % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called even_odd_count_iter that\
    \ takes an integer and returns the number of even and odd digits respectively.\
    \ Hint: use an iterator to solve this problem.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        odd_count = num % 2\n        even_count = num - odd_count\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0 \n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n   \
    \     error(\"The given number must be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n     \
    \   else\n            odd += 1\n        end\n        num /= 10\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n     \
    \   error(\"The given number must be positive.\")\n    elseif num == 0\n     \
    \   (1, 1)\n    else\n        odd_count = num % 10\n        even_count = num -\
    \ odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for digit in num\n        if digit % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    if\
    \ num < 0\n        error(\"The input must be positive\")\n    end\n    even =\
    \ 0\n    odd = 0\n    for x in num\n        if x % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer and returns the number of digits in that\
    \ integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n    \
    \    if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num != 0\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        if num % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        odd_count = sum(num % 2 == 0 for num in num::Int64)\n        even_count\
    \ = sum(num % 2 == 1 for num in num::Int64)\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a number\
    \ as input and returns the number of digits in that number.", "    if num < 0\
    \ \n        error(\"The given number must be positive\")\n    else if num == 0\n\
    \        (1, 1)\n    else if num % 2 == 0\n        (2, 1)\n    else\n        (1,\
    \ num % 2)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n      \
    \  error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nIf the string contains only digits, return 0.",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n    \
    \        even += digit\n        else\n            odd += digit\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = sum(x % 2 == 1 for x in nums)\n\
    \        even_count = sum(x % 2 == 0 for x in nums)\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The given number should be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ given number should be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The input number should be positive\")\n    end\n\
    \    even::Int64 = 0\n    odd::Int64 = 0\n    \n    for n in num\n        if n\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n        if\
    \ i%2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even = num % 2 ==\
    \ 0\n    odd = num % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.3>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"The\
    \ given number should be positive\")\n    end\n    even, odd = 0, 0\n    for i\
    \ in reverse(digits(num))\n        if i%2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even = num % 2 == 0\n    odd = num % 2 !=\
    \ 0\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(12) == (1, 1)\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0 \n      \
    \  error(\"The input must be positive\")\n    else if num == 0 \n        return\
    \ (1, 0)\n    else \n        even, odd = 0, 0\n        digits = num % 10\n   \
    \     while digits != 0\n            digits /= 10\n            even += digits\n\
    \            digits %= 10\n            digits /= 10\n            odd += digits\n\
    \        end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even = 0\n    odd\
    \ = 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n        num /= 10\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@time even_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\n@time even_odd_count(123)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer and returns the number\
    \ of digits in it.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n    \
    \    if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num != 0\n        digit = num % 10\n        if digit % 2 == 0\n   \
    \         even += digit\n        else\n            odd += digit\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the sum of the digits\
    \ of that integer. \nThe digits are stored as a string.", "    if num < 0\n  \
    \      error(\"The input must be positive\")\n    end\n    even::Int64 = 0\n \
    \   odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if num\
    \ < 0\n        error(\"The given number must be positive\")\n    end\n    even\
    \ = num % 2 == 0\n    odd = num % 2 != 0\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return even,\
    \ odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in a number. \nFor example the number 123 has 3 digits. \nThe number\
    \ 1234 has 4 digits.\nThe number 12345 has 5 digits.\nThe number 123456 has 6\
    \ digits.\nThe number 1234567 has 7 digits.\nThe number 123456789 has 8 digits.\n\
    The number 1234567890 has 9 digits.\nThe number 12345678901 has 10 digits.\nThe\
    \ number 123456789012 has 11 digits.\nThe number 1234567890123 has 12 digits.\n\
    The number 12345678901234 has 13 digits.\nThe number 123456789012345 has 14 digits.\n\
    The number 1234567890123456 has 15 digits.\nThe number 12345678901234567 has 16\
    \ digits.\nThe number 123456789012345678 has 17 digits.\nThe number 1234567890123456789\
    \ has 18 digits.\nThe number 12345678901234567890 has 19 digits.\nThe number 123456789012345678901\
    \ has 20 digits.\nThe number 1234567890123456789012 has 21 digits.\nThe number\
    \ 12345678901234567890123 has 22 digits.\nThe number 123456789012345678901234\
    \ has 23 digits.\nThe number 1234567890123456789012345 has 24 digits.\nThe number\
    \ 12345678901234567890123456 has 25 digits.\nThe number 123456789012345678901234567\
    \ has 26 digits.\nThe number 1234567890123456789012345678 has 27 digits.\nThe\
    \ number 12345678901234567890123456789 has 28 digits.\nThe number 123456789012345678901234567890\
    \ has 29 digits.\nThe number 1234567890123456789012345678901 has 30 digits.\n\
    The number 12345678901234567890123456789012 has 31 digits.\nThe number 123456789012345678901234567890123\
    \ has 32 digits.\nThe number 1234567890123456789012345678901234 has 33 digits.\n\
    The number 12345678901234567890123456789012345 has 34 digits.\nThe number 123456789012345678901234567890123456\
    \ has 35 digits.\nThe number 1234567890123456789012345678901234567 has 36 digits.\n\
    The number 12345678901234567890123456789012345678 has 37 digits.\nThe number 123456789012345678901234567890123456789\
    \ has 38 digits.\nThe number 1234567890123456789012345678901234567890 has 39 digits.\n\
    The number 12345678901234567890123456789012345678901 has 40 digits.\nThe number\
    \ 123456789012345678901234567890123456789012 has 41 digits.\nThe number 1234567890123456789012345678901234567890123\
    \ has 42 digits.\nThe number 1234567890123456789", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even = num % 2 == 0\n    odd = num\
    \ % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0 \n        (1, 1)\n    else \n        odd_count = num % 2 \n        even_count\
    \ = num - odd_count \n        return (odd_count, even_count)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if num < 0\n        error(\"The given number must\
    \ be positive.\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 =\
    \ 0\n    for n in reverse(digits(num))\n        if n % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 =\
    \ 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += digit\n        else\n\
    \            odd += digit\n        end\n        num /= 10\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.0>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.0>\neven_odd_count(123)\n</cell>\n<code language=julia-1.0>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while num > 0\n\
    \            digit = num % 10\n            if digit % 2 == 0\n               \
    \ even += digit\n            else\n                odd += digit\n            end\n\
    \            num /= 10\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The given\
    \ number must be positive\")\n    end\n    even = num % 2 == 0\n    odd = num\
    \ % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The given number\
    \ cannot be negative.\")\n    end", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ i in 1:num\n        if num % 2 == 0\n            even += 1\n        else\n \
    \           odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of digits in $n$. \nThe function should raise an\
    \ error if $n$ is negative.", "    if num < 0\n        error(\"The given number\
    \ must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n       \
    \ odd_count = num % 10\n        even_count = num - odd_count\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0 \n        error(\"The given number must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n   \
    \     error(\"The given number must be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    while num != 0\n        if num % 2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n        num /= 10\n    end\n   \
    \ return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    if num == 0\n        return (1, 0)\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in reverse(digits(num))\n        if x % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0 \n        error(\"The argument must be positive\")\n    else if\
    \ num == 0\n        (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 0)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if num < 0 \n        error(\"Invalid\
    \ input\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num %\
    \ 2 == 0\n            even += 1\n            num /= 2\n        else\n        \
    \    odd += 1\n            num /= 2\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.", " \
    \   if num < 0\n        error(\"The argument must be positive\")\n    end\n  \
    \  even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit\
    \ % 2 == 0\n            even += digit\n        else\n            odd += digit\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may want to use the sieve of Eratosthenes or the Sieve\
    \ of Atkin.", "    if num < 0\n        error(\"The input must be positive\")\n\
    \    end\n    even = 0\n    odd = 0\n    while num > 0\n        if num % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The input number must be positive\")\n    end\n\
    \    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer $n$ and returns\
    \ the number of digits in $n$. \nThe function should raise an error if $n$ is\
    \ negative.", "    if num < 0\n        error(\"The given number should be non-negative.\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in reverse(split(string(num),\
    \ \"\"))\n        if i == \"0\"\n            even += 1\n        elseif i == \"\
    1\"\n            odd += 1\n        end\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer and returns the number of digits in that integer.", "    if num <\
    \ 0\n        error(\"The given number must be positive.\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0 \n        error(\"The given number must be positive.\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in reverse(split(string(num), \"\"))\n  \
    \      if x % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even\
    \ = num % 2 == 0\n    odd = num % 2 != 0\n    return (even, odd)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nFor example,\
    \ \n    even_odd_count(\"hello\")\nshould return 5.", "    if num < 0\n      \
    \  error(\"The input number should be positive\")\n    end\n    even::Int64 =\
    \ 0\n    odd::Int64 = 0\n    for i in reverse(split(string(num), \"\"))\n    \
    \    if i == \"0\"\n            even += 1\n        elseif i == \"1\"\n       \
    \     odd += 1\n        else\n            error(\"The input number should be an\
    \ even number\")\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    if num == 0\n        return (1, 1)\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n\
    \        if i%2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The argument must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n    \
    \    if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the sum of the squares of the digits of that integer.", "    if num < 0\n  \
    \      error(\"The given number should be positive\")\n    end", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function called even_odd_count_with_if_statements\
    \ that takes an integer and returns the number of even and odd digits respectively.",
  "    if num < 0\n        error(\"The argument must be positive\")\n    end\n   \
    \ even::Int64 = 0\n    odd::Int64 = 0\n    for n in num\n        if n % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    elseif num == 0\n  \
    \      return (1, 0)\n    elseif num == 1\n        return (0, 1)\n    else\n \
    \       even, odd = 0, 0\n        while num > 0\n            digit = num % 10\n\
    \            if digit % 2 == 0\n                even += digit\n            else\n\
    \                odd += digit\n            end\n            num /= 10\n      \
    \  return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer and returns the number\
    \ of digits in that integer.", "    if num < 0\n        error(\"Invalid input\"\
    )\n    end\n    if num == 0\n        return (1, 0)\n    end\n    even::Int64 =\
    \ 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n           \
    \ even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return (num / 2,\
    \ num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of digits in $n$. \nFor example, if the input is\
    \ $n = 123$, the function should return 3.", "    if num < 0\n        error(\"\
    The given number must be positive.\")\n    end\n    even, odd = 0, 0\n    while\
    \ num != 0\n        if num % 2 == 0\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 =\
    \ 0\n    for i in reverse(digits(num))\n        if i%2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if num\
    \ < 0\n        error(\"The given number must be positive\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return (num / 2,\
    \ num / 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    for x in num\n        if x % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<code language=julia-1.3>",
  "    if num < 0 \n        error(\"Invalid input\")\n    end\n    even, odd = 0,\
    \ 0\n    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        if num % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ as input and returns the number of digits in that number.", "    if num < 0\
    \ \n        error(\"The input must be positive\")\n    else if num == 0\n    \
    \    (1, 1)\n    else if num % 2 == 0\n        (2, 1)\n    else\n        (even_odd_count(num/2),\
    \ even_odd_count(num/2))\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that takes a number as input and returns the number of digits in that number.",
  "    if num < 0 \n        error(\"The given number cannot be negative\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even = 0\n    odd = 0\n    for n in num\n\
    \        if n % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0\n        (1, 1)\n    else\n        even, odd = divrem(num, 10)\n      \
    \  (even_odd_count(even), even_odd_count(odd))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in reverse(range(num))\n\
    \        if i % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
