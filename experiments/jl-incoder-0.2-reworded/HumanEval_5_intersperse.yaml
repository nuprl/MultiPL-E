name: HumanEval_5_intersperse
language: jl
prompt: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
  \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
  \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
  \ delimeter::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
  \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3,\
  \ 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
completions: ["    if length(numbers) < delimeter \n        numbers = numbers[:]\n\
    \    end\n    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n", "    numbers = numbers[:]\n  \
    \  numbers[2:end] = numbers[2:end] .+ delimeter\n    numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert intersperse([1,2,3], 4) == [1, 4, 2, 4, 3]\n</cell>\n\
    <text>\nExercise 3.2\nWrite a function that returns the number of elements in\
    \ a vector that satisfy a predicate.", "    if length(numbers) < delimeter \n\
    \        return numbers \n    else \n        numbers[2:end] = numbers[2:end] +\
    \ delimeter\n        numbers[2:end] = numbers[2:end] + numbers[2:end]\n      \
    \  return numbers \nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=1 |>\n\
    <code>", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n   \
    \ \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    ", "    \n    numbers = numbers[:]\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ != 0\n            \n            numbers[i+1:i+2] = [numbers[i], delimeter]\n\
    \            \n            i += 2\n            \n        else\n            \n\
    \            numbers[i+1:i+1] = [delimeter]\n            \n            i += 1\n\
    \        end\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 0)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 1)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 2)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 3)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 5)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 6)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 7)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 8)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 9)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 10)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 11)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 12)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 13)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 14)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 15)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 16)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 17)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 18)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 19)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 20)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 21)\n</cell>\n\
    <code language=julia-1.5>\ninter", "    \n    if length(numbers) == 0\n      \
    \  return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ * delimeter + numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    return numbers + [delimeter] * (length(numbers)\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>", "    if length(numbers) < 2\n\
    \        return numbers\n    end\n    \n    numbers_copy = copy(numbers)\n   \
    \ numbers_copy[end] = delimeter\n    \n    return numbers_copy\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    if length(numbers) == 0\n        return numbers\n  \
    \  end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ * delimeter + numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. For example, intersperse([1,2,3], 4) should return\
    \ [4, 16, 25]. Make sure you use intersperse to solve this problem.", "    if\
    \ length(numbers) < 2\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:", "    if length(numbers)\
    \ < delimeter\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    number", "    if length(numbers) < 2\n  \
    \      return numbers\n    else\n        numbers[2:end] = numbers[2:end] + delimeter*ones(length(numbers[2:end])-2)\n\
    \        return numbers\n    end\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ intersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    ",
  "    if length(numbers) < delimeter \n        return numbers \n    else \n     \
    \   numbers[2:end] = numbers[2:end] + delimeter*ones(delimeter-length(numbers))\
    \ \n        return numbers \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    A simple and efficient solution is to use cat:\n<code>", "    numbers = numbers[:]\n\
    \    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nFor example,\
    \ \n$$\\begin{align}\n\\text{sum}(\\begin{bmatrix}1&2&3\\end{bmatrix}) = 1 + 2\
    \ + 3 = 6\n\\end{align}$$", "    if length(numbers) < delimeter\n        return\
    \ numbers\n    \n    numbers = numbers[1 : length(numbers)-delimeter]\n    numbers\
    \ = numbers[1 : length(numbers)-delimeter]\n    return numbers + intersperse(numbers[-delimeter+1\
    \ : end], delimeter)\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements of a\
    \ vector that satisfy a given condition. For example, suppose that we want to\
    \ count the number of elements of a vector that satisfy the condition $x > 5$.\
    \ Write a function that takes as input a vector $x$ and a condition $x > 5$, and\
    \ returns the number of elements that satisfy the condition. For example, suppose\
    \ that $x = [1, 2, 3, 4, 5]$ and $x > 5$. Then, the function should return 3.",
  "    if length(numbers) == 0\n        numbers\n    else\n        numbers[2:end-1]\
    \ .+ [delimeter] .+ numbers[2:end-1]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]", "    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers_copy = copy(numbers)\n\
    \    \n    numbers_copy[1::2] = delimeter\n    \n    return numbers_copy\nend",
  "    if length(numbers) < delimeter\n        numbers\n    else\n        numbers[1\
    \ : length(numbers) - (delimeter - length(numbers))] + delimeter * ones(delimeter\
    \ - length(numbers), 1)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an input vector of integers and returns the sum of the even numbers in\
    \ that vector. \nFor example, if the input vector is [4, 6, 8, 10, 12], the function\
    \ should return 24.", "    if length(numbers) == 0\n        return numbers\n \
    \   \n    numbers = numbers[2:end-1]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    return numbers + [numbers[1]]\
    \ + intersperse(numbers[2:end-1], delimeter)\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns a vector where each element is the sum of the previous\
    \ two elements.", "    if length(numbers) == 0\n        return numbers\n    else\n\
    \        numbers = numbers[2:end]\n        numbers = numbers[1:end-1] ++ delimeter\
    \ ++ numbers\n        return numbers\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nThe function intersperse is defined\
    \ in the file src/intersperse.jl.", "    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ * delimeter + numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of numbers and returns the vector with the\
    \ numbers reversed.", "    if length(numbers) == 0 \n        return numbers \n\
    \    else \n        numbers[2:end] = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\
    \ \n        return numbers \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first element of a vector, if it is not empty. Otherwise, return\
    \ 0.", "    if length(numbers) == 0\n        return numbers\n    else\n      \
    \  numbers[2:end] = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\n\
    \        return numbers\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    \n    if length(numbers) < 2\n        return numbers\n   \
    \ end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of elements in a vector that satisfy\
    \ a certain condition. For example, a vector with only positive numbers should\
    \ be counted. Write a function that returns the number of elements in a vector\
    \ that satisfy a certain condition. For example, a vector with only positive numbers\
    \ should be counted. Write a function that returns the number of elements in a\
    \ vector that satisfy a certain condition. For example, a vector with only positive\
    \ numbers should be counted. Write a function that returns the number of elements\
    \ in a vector that satisfy a certain condition. For example, a vector with only\
    \ positive numbers should be counted. Write a function that returns the number\
    \ of elements in a vector that satisfy a certain condition. For example, a vector\
    \ with only positive numbers should be counted. Write a function that returns\
    \ the number of elements in a vector that satisfy a certain condition. For example,\
    \ a vector with only positive numbers should be counted. Write a function that\
    \ returns the number of elements in a vector that satisfy a certain condition.\
    \ For example, a vector with only positive numbers should be counted. Write a\
    \ function that returns the number of elements in a vector that satisfy a certain\
    \ condition. For example, a vector with only positive numbers should be counted.\
    \ Write a function that returns the number of elements in a vector that satisfy\
    \ a certain condition. For example, a vector with only positive numbers should\
    \ be counted. Write a function that returns the number of elements in a vector\
    \ that satisfy a certain condition. For example, a vector with only positive numbers\
    \ should be counted. Write a function that returns the number of elements in a\
    \ vector that satisfy a certain condition. For example, a vector with only positive\
    \ numbers should be counted. Write a function that returns the number of elements\
    \ in a vector that satisfy a certain condition. For example, a vector with only\
    \ positive numbers should be counted. Write a function that returns the number\
    \ of elements in a vector that satisfy a certain condition. For example, a vector\
    \ with only positive numbers should be counted. Write a function that returns\
    \ the number of elements in a vector that satisfy a certain condition. For example,\
    \ a vector with only positive numbers should be counted. Write a function that\
    \ returns the number of elements in a vector that satisfy a certain condition.\
    \ For example, a vector with only positive numbers should be counted. Write a\
    \ function that returns the number of elements in a vector that satisfy a certain\
    \ condition. For example, a vector with only positive numbers should be counted.\
    \ Write a function that returns the number of elements in a vector that satisfy\
    \ a certain condition. For example, a ", "    \n    if length(numbers) < 2\n \
    \       return numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n    \n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. For example,\
    \ given [1,2,3], the function should return 9. Make sure your function works with\
    \ vectors of different lengths.", "    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    numbers\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=1\
    \ |>\n<code>", "    if length(numbers) == 0\n        return numbers\n    end\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = [delimeter, numbers...]\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n   \
    \ return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ elements in a vector that satisfy a given condition. For example, if the condition\
    \ is that the number of elements is greater than or equal to 3, then the function\
    \ should return 3.", "    if length(numbers) < 2\n        return numbers\n   \
    \ \n    numbers_copy = copy(numbers)\n    \n    numbers_copy[end-1:end] = numbers_copy[end-1:end][1:end-1]\n\
    \    \n    return numbers_copy\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 5)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 6)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 7)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 8)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 9)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 10)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 11)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 12)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 13)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 14)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 15)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 16)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 17)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 18)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 19)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 20)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 21)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 22)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 23)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 24)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 25)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 26)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 27)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 28)\n</cell>\n<code language=juli", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers_copy = copy(numbers)\n    \n    numbers_copy[end-1:end]\
    \ = numbers_copy[end-1:end][1:end-1]\n    \n    return numbers_copy\nend\n</cell>\n\
    <code language=julia-1.3>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    if length(numbers) < 2\n     \
    \   return numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[", "    if length(numbers) < delimeter \n        return\
    \ numbers \n    else \n        intersperse(numbers[2:end], delimeter - length(numbers))\
    \ + numbers[1:end-1] \n    end\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. For example,\
    \ sum([1,2,3]) should return 9. Hint: use map()", "    if length(numbers) < delimeter\n\
    \        return numbers\n    else\n        numbers[end+1:end+delimeter] = numbers[end+1:end+delimeter]\n\
    \        numbers[end+delimeter] = delimeter\n        return numbers\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(numbers) == 0\n     \
    \   return numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]", "    \n    numbers = numbers[:]\n    \n\
    \    if length(numbers) < 2\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns a new vector where each element is the sum of the previous two elements\
    \ in the vector. For example, intersperse([1, 2, 3, 4], 5) should return [6, 8,\
    \ 10, 12, 14].", "    if length(numbers) == 0\n        return numbers\n    end\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = [delimeter, numbers...]\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of all even numbers in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the sum of all\
    \ odd numbers in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the sum of all numbers in the vector that are divisible by 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of all numbers\
    \ in the vector that are divisible by 5\nWrite a function that takes a vector\
    \ of integers and returns the sum of all numbers in the vector that are divisible\
    \ by 7\nWrite a function that takes a vector of integers and returns the sum of\
    \ all numbers in the vector that are divisible by 11\nWrite a function that takes\
    \ a vector of integers and returns the sum of all numbers in the vector that are\
    \ divisible by 13\nWrite a function that takes a vector of integers and returns\
    \ the sum of all numbers in the vector that are divisible by 17\nWrite a function\
    \ that takes a vector of integers and returns the sum of all numbers in the vector\
    \ that are divisible by 19\nWrite a function that takes a vector of integers and\
    \ returns the sum of all numbers in the vector that are divisible by 23\nWrite\
    \ a function that takes a vector of integers and returns the sum of all numbers\
    \ in the vector that are divisible by 29\nWrite a function that takes a vector\
    \ of integers and returns the sum of all numbers in the vector that are divisible\
    \ by 31\nWrite a function that takes a vector of integers and returns the sum\
    \ of all numbers in the vector that are divisible by 37\nWrite a function that\
    \ takes a vector of integers and returns the sum of all numbers in the vector\
    \ that are divisible by 43\nWrite a function that takes a vector of integers and\
    \ returns the sum of all numbers in the vector that are divisible by 47\nWrite\
    \ a function that takes a vector of integers and returns the sum of all numbers\
    \ in the vector that are divisible by 53\nWrite a function that takes a vector\
    \ of integers and returns the sum of all numbers in the vector that are divisible\
    \ by 59\nWrite a function that takes a vector of integers and returns the sum\
    \ of all numbers in the vector that are divisible by 61\nWrite a function that\
    \ takes a vector of integers and returns the sum of all numbers in the vector\
    \ that are divisible by 67\nWrite a function that takes a vector of integers and\
    \ returns the sum of all numbers in the vector that are divisible by 73\nWrite\
    \ a function that takes a vector of integers and returns the sum of all numbers\
    \ in the vector that are divisible by 79\nWrite a function that takes a vector\
    \ of integers and returns the sum of all numbers in the vector that are divisible\
    \ by 83\nWrite a function that takes a vector of integers and returns the sum\
    \ of all numbers in the vector that are divisible by 89\nWrite a function that\
    \ takes a vector of integers and returns the sum of ", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers_copy = copy(numbers)\n    \n\
    \    numbers_copy[end-1:end] = numbers_copy[end-1:end] + delimeter\n    \n   \
    \ return numbers_copy\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an input vector of integers and returns the sum of the numbers in the\
    \ vector. \nWrite a second function that takes an input vector of integers and\
    \ returns the product of the numbers in the vector. \nWrite a third function that\
    \ takes an input vector of integers and returns the maximum of the numbers in\
    \ the vector. \nWrite a fourth function that takes an input vector of integers\
    \ and returns the minimum of the numbers in the vector. \nWrite a fifth function\
    \ that takes an input vector of integers and returns the number of elements in\
    \ the vector. \nWrite a sixth function that takes an input vector of integers\
    \ and returns the sum of the squares of the numbers in the vector. \nWrite a seventh\
    \ function that takes an input vector of integers and returns the sum of the cubes\
    \ of the numbers in the vector. \nWrite a eighth function that takes an input\
    \ vector of integers and returns the sum of the exponential of the numbers in\
    \ the vector. \nWrite a ninth function that takes an input vector of integers\
    \ and returns the sum of the natural logarithms of the numbers in the vector.\
    \ \nWrite a tenth function that takes an input vector of integers and returns\
    \ the sum of the trigonometric values of the numbers in the vector. \nWrite a\
    \ eleventh function that takes an input vector of integers and returns the sum\
    \ of the hyperbolic cosine of the numbers in the vector. \nWrite a twelfth function\
    \ that takes an input vector of integers and returns the sum of the hyperbolic\
    \ sine of the numbers in the vector. \nWrite a thirteenth function that takes\
    \ an input vector of integers and returns the sum of the hyperbolic tangent of\
    \ the numbers in the vector. \nWrite a fourteenth function that takes an input\
    \ vector of integers and returns the sum of the hyperbolic arctangent of the numbers\
    \ in the vector. \nWrite a fifteenth function that takes an input vector of integers\
    \ and returns the sum of the hyperbolic arctangent of the numbers in the vector.\
    \ \nWrite a sixteenth function that takes an input vector of integers and returns\
    \ the sum of the hyperbolic arctangent of the numbers in the vector. \nWrite a\
    \ seventeenth function that takes an input vector of integers and returns the\
    \ sum of the hyperbolic arctangent of the numbers in the vector. \nWrite a eighteenth\
    \ function that takes an input vector of integers and returns the sum of the hyperbolic\
    \ arctangent of the numbers in the vector. \nWrite a nineteenth function that\
    \ takes an input vector of integers and returns the sum of the hyperbolic arctangent\
    \ of the numbers in the vector. \n", "    if length(numbers) == 0 \n        return\
    \ numbers \n    else \n        numbers = numbers[2:end-1] \n        numbers =\
    \ [numbers[1], delimeter, numbers[end-1]] \n        numbers = intersperse(numbers,\
    \ delimeter+1) \n        numbers = [numbers[1], numbers[end-1]] \n        return\
    \ numbers \n    end\nend\n</cell>\n<code language=julia-1.3>", "    if length(numbers)\
    \ < delimeter \n        return numbers\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    ", "    \n    if length(numbers) == 0\n \
    \       return numbers\n    end\n    \n    numbers_copy = copy(numbers)\n    \n\
    \    numbers_copy[end] = numbers_copy[end] + delimeter\n    \n    return numbers_copy\n\
    end\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <code language=julia-1.5>", "    if length(numbers) == 0 \n        return numbers\
    \ \n    else \n        numbers = numbers[2:end-1] \n        numbers = [numbers[1],\
    \ delimeter, numbers...] \n        numbers = intersperse(numbers, delimeter) \n\
    \        return numbers \nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified a bit. `intersperse` can be defined as `intersperse(xs,\
    \ d) = intersperse(xs, d, 1)[1]` where `intersperse(xs, d, i) = intersperse(xs,\
    \ d, i-1)[end] + [d]` where `intersperse(xs, d, 1) = [xs]` and `intersperse(xs,\
    \ d, i) = [xs; d; xs]`\n<|/ c |>\n<| c |>\nI agree with you. Your solution is\
    \ much more elegant and efficient. Thanks for sharing!\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nI like solution, but I believe it can be simplified a bit. intersperse can\
    \ be defined as intersperse(xs, d) = intersperse(xs, d, 1)[1] where intersperse(xs,\
    \ d, i) = intersperse(xs, d, i-1)[end] + [d] where intersperse(xs, d, 1) = [xs]and\
    \ intersperse(xs, d, i) = [xs; d; xs]\n<code>", "    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(numbers) == 0\n   \
    \     return numbers\n    \n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n", "    if length(numbers) == 0 \n        return numbers\
    \ \n    else \n        interspersed_numbers = Vector{Int64}(undef, length(numbers))\
    \ \n        interspersed_numbers[1] = numbers[1] \n        interspersed_numbers[2]\
    \ = numbers[1] \n        interspersed_numbers[3] = numbers[2] \n        interspersed_numbers[4]\
    \ = numbers[3] \n        interspersed_numbers[5] = numbers[4] \n        interspersed_numbers[6]\
    \ = numbers[5] \n        interspersed_numbers[7] = numbers[6] \n        interspersed_numbers[8]\
    \ = numbers[7] \n        interspersed_numbers[9] = numbers[8] \n        interspersed_numbers[10]\
    \ = numbers[9] \n        interspersed_numbers[11] = numbers[10] \n        interspersed_numbers[12]\
    \ = numbers[11] \n        interspersed_numbers[13] = numbers[12] \n        interspersed_numbers[14]\
    \ = numbers[13] \n        interspersed_numbers[15] = numbers[14] \n        interspersed_numbers[16]\
    \ = numbers[15] \n        interspersed_numbers[17] = numbers[16] \n        interspersed_numbers[18]\
    \ = numbers[17] \n        interspersed_numbers[19] = numbers[18] \n        interspersed_numbers[20]\
    \ = numbers[19] \n        interspersed_numbers[21] = numbers[20] \n        interspersed_numbers[22]\
    \ = numbers[21] \n        interspersed_numbers[23] = numbers[22] \n        interspersed_numbers[24]\
    \ = numbers[23] \n        interspersed_numbers[25] = numbers[24] \n        interspersed_numbers[26]\
    \ = numbers[25] \n        interspersed_numbers[27] = numbers[26] \n        interspersed_numbers[28]\
    \ = numbers[27] \n        interspersed_numbers[29] = numbers[28] \n        interspersed_numbers[30]\
    \ = numbers[29] \n        interspersed_numbers[31] = numbers[30] \n        interspersed_numbers[32]\
    \ = numbers[31] \n        interspersed_numbers[33] = numbers[32] \n        interspersed_numbers[34]\
    \ = numbers[33] \n        interspersed_numbers[35] = numbers[34] \n        interspersed_numbers[36]\
    \ = numbers[35] \n        interspersed_numbers[37] = numbers[36] \n        interspersed_numbers[38]\
    \ = numbers[", "    if length(numbers) == 0\n        return numbers\n    \n  \
    \  numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1] * delimeter\
    \ + numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert intersperse([1,2,3], 4) == [1, 4, 2, 4, 3]\n@assert intersperse([1,2,3],\
    \ 2) == [1, 3, 2, 4, 3]\n@assert intersperse([1,2,3], 1) == [1, 3, 2, 4]\n@assert\
    \ intersperse([1,2,3], 0) == [1, 2, 3, 4]\n@assert intersperse([1,2,3], -1) ==\
    \ [1, 2, 3, 4]\n@assert intersperse([1,2,3], 2) == [1, 3, 2, 4, 3]\n@assert intersperse([1,2,3],\
    \ 3) == [1, 3, 2, 4, 3, 2]\n@assert intersperse([1,2,3], 4) == [1, 4, 2, 4, 3,\
    \ 2]\n@assert intersperse([1,2,3], 5) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3],\
    \ 6) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3], 7) == [1, 4, 2, 4,\
    \ 3, 2, 1]\n@assert intersperse([1,2,3], 8) == [1, 4, 2, 4, 3, 2, 1]\n@assert\
    \ intersperse([1,2,3], 9) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3],\
    \ 10) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3], 11) == [1, 4, 2,\
    \ 4, 3, 2, 1]\n@assert intersperse([1,2,3], 12) == [1, 4, 2, 4, 3, 2, 1]\n@assert\
    \ intersperse([1,2,3], 13) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3],\
    \ 14) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3], 15) == [1, 4, 2,\
    \ 4, 3, 2, 1]\n@assert intersperse([1,2,3], 16) == [1, 4, 2, 4, 3, 2, 1]\n@assert\
    \ intersperse([1,2,3], 17) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3],\
    \ 18) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3], 19) == [1, 4, 2,\
    \ 4, 3, 2, 1]\n@assert intersperse([1,2,3], 20) == [1, 4, 2, 4, 3, 2, 1]\n@assert\
    \ intersperse([1,2,3], 21) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3],\
    \ 22) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse([1,2,3], 23) == [1, 4, 2,\
    \ 4, 3, 2, 1]\n@assert intersperse([1,2,3], 24) == [1, 4, 2, 4, 3, 2, 1]\n@assert\
    \ intersperse([1,2,3], 25) == [1, 4, 2, 4, 3, 2, 1]\n@assert intersperse", " \
    \   if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]", "    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n    \n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    if length(numbers)\
    \ == 0\n        return numbers\n    elseif length(numbers) == 1\n        return\
    \ [numbers[1]]\n    else\n        numbers = intersperse(numbers[2:end-1], delimeter)\
    \ + [numbers[1]] + intersperse(numbers[2:end-1], delimeter)\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if `numbers` has length 1, or if\
    \ there are multiple consecutive delimiters.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with multiple delimiters.\n<|/ c |>\n<| a dscore=1 |>\nA simple recursive\
    \ function will do the trick:\n<code>", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers_copy = copy(numbers)\n    \n    numbers_copy[1..end]\
    \ = numbers_copy[1..end][1:end-1]\n    numbers_copy[1..end] = numbers_copy[1..end][2:end]\n\
    \    \n    return numbers_copy\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first element of a vector, if it is not empty, or the second\
    \ element otherwise.", "    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = ", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    return numbers\nend", "    if length(numbers) == 0\n      \
    \  return numbers\n    end\n    \n    numbers = numbers[2:end]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = ", "    if length(numbers) == 0\n\
    \        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.3>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an input vector of integers and returns\
    \ the sum of the squares of the input vector. \nThe input vector can be of any\
    \ length.", "    if length(numbers) == 0\n        return numbers\n    elseif length(numbers)\
    \ == 1\n        return [numbers[0]]\n    else\n        interspersed_numbers =\
    \ Vector{Int64}(undef, length(numbers)+1)\n        interspersed_numbers[1] = numbers[1]\n\
    \        interspersed_numbers[2] = numbers[1]\n        interspersed_numbers[3]\
    \ = numbers[2]\n        for i in 2:length(numbers)\n            interspersed_numbers[i]\
    \ = numbers[i]\n            interspersed_numbers[i+1] = delimeter\n        end\n\
    \        return interspersed_numbers\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector. \nFor example, \n$$ f([1,2,3]) = 12 + 16 + 9 + 25 = 78$$", "    if length(numbers)\
    \ < delimeter \n        return numbers \n    else \n        intersperse(numbers[2:end],\
    \ delimeter) + [numbers[1]] + intersperse(numbers[2:end], delimeter) \n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a new vector where\
    \ each element is the sum of the previous two elements.", "    if length(numbers)\
    \ < delimeter\n        return numbers\n    else\n        interspersed_numbers\
    \ = numbers[1 : length(numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ interspersed_numbers[1 : length(interspersed_numbers)]\n\
    \        interspersed_numbers = interspersed_numbers .+ interspersed_numbers[1\
    \ : length(interspersed_numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ interspersed_numbers[1 : length(interspersed_numbers)]\n\
    \        interspersed_numbers = interspersed_numbers .+ interspersed_numbers[1\
    \ : length(interspersed_numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ interspersed_numbers[1 : length(interspersed_numbers)]\n\
    \        interspersed_numbers = interspersed_numbers .+ interspersed_numbers[1\
    \ : length(interspersed_numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ interspersed_numbers[1 : length(interspersed_numbers)]\n\
    \        interspersed_numbers = interspersed_numbers .+ interspersed_numbers[1\
    \ : length(interspersed_numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ interspersed_numbers[1 : length(interspersed_numbers)]\n\
    \        interspersed_numbers = interspersed_numbers .+ interspersed_numbers[1\
    \ : length(interspersed_numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ interspersed_numbers[1 : length(interspersed_numbers)]\n\
    \        interspersed_numbers = interspersed_numbers .+ interspersed_numbers[1\
    \ : length(interspersed_numbers)]\n        interspersed_numbers = interspersed_numbers\
    \ .+ interspersed_numbers[1 : length(interspersed_numbers)]\n        interspersed_numbers\
    \ = interspersed_numbers .+ ", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    numbers_copy = copy(numbers)\n    \n    numbers_copy[1::2] = numbers_copy[1::2]\
    \ + delimeter\n    \n    return numbers_copy\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ where the integers are in descending order. For example, if the input vector\
    \ is [5, 3, 6, 1, 2], the output vector should be [6, 5, 4, 3, 2]. Make sure your\
    \ function works with vectors of different lengths.", "    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]", "    if length(numbers) == 0\n        numbers\n\
    \    elseif length(numbers) == 1\n        [numbers]\n    else\n        numbers[2:end-1]\
    \ .+ [delimeter, numbers[1]] .+ numbers[2:end]\n    end\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that returns the number of elements in a vector\
    \ that satisfy a given condition. For example, if the vector is [3, 1, 2, 0, 4,\
    \ 0, 2], then your function should return 3 because there are 3 elements in the\
    \ vector that satisfy the condition x>2.", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(1, end-2)\n    return numbers\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a |>\nI wrote a package for this: https://github.com/jrm/intersperse.jl\n\
    <code>\njulia> using Intersperse", "    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    number", "    if length(numbers) == 0\n        return numbers\n    \n   \
    \ numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]", "    \n    if length(numbers) < 2\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that takes a vector and returns a new vector with\
    \ all the elements multiplied by two. \nFor example, intersperse([1, 2, 3], 4)\
    \ should return [1, 4, 2, 4, 3].", "    if length(numbers) == 0\n        return\
    \ numbers\n    else\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns a new vector where each element is the product of\
    \ the corresponding elements of the input vectors.", "    if length(numbers) ==\
    \ 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = ", "    if length(numbers) < 2\n\
    \        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers_copy\
    \ = copy(numbers)\n    \n    numbers_copy[end] = numbers_copy[end] + delimeter\n\
    \    \n    return numbers_copy\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an input vector and returns the number of elements that are equal\
    \ to its first element. \nFor example, intersperse([1,2,3], 4) == 4", "    if\
    \ length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    if length(numbers) == 0\n        return numbers\n  \
    \  \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:", "    if length(numbers) <= 1\n        return numbers\n    end\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers .+ [delimeter]\n\
    \    \n    numbers = numbers .+ numbers[2:end]\n    \n    return numbers\nend\n\
    </cell>\n<code language=julia-1.3>\nintersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.3>",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]",
  "    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    ", "    if length(numbers) < delimeter \n        return numbers \n\
    \    else \n        numbers[2:end] = numbers[2:end] + delimeter * [numbers[1]]\n\
    \        numbers[1:end-1] = numbers[1:end-1] + delimeter * [numbers[2]]\n    \
    \    return numbers \nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>",
  "    if length(numbers) < delimeter\n        return numbers\n    else\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[", "    if length(numbers)\
    \ == 0\n        numbers\n    else\n        numbers[2:end-1] .+ [delimeter] .+\
    \ numbers[2:end-1]\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays\
    \ |>\nI came up with this solution:\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
