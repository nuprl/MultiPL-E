name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \ >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n \
  \   >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
  \ base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if base == 10 \n        then return toString(x)\n        else return\
    \ change_base(x / base, base) + toString(x%base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary numbers to decimal.\nThe function should take\
    \ in a binary string and return the decimal number.\nThe input string should only\
    \ contain 0s and 1s.\nThe function should return an error if the input string\
    \ contains anything else.\nThe function should return an error if the input string\
    \ contains only 0s.\nThe function should return an error if the input string contains\
    \ only 1s.\nThe function should return an error if the input string contains any\
    \ character other than 0s and 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        digits\
    \ = digits(x)\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits +\
    \ string(x)\n        digits = digits[digits.length - digits.length % base]\n \
    \       digits = digits[0 : digits.length % base]\n        return digits\nend\n\
    </cell>\n<code language=julia-1.4>", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that converts a number to a string in base 10. \nThe function should\
    \ throw an error if the input is not a number.\nThe function should throw an error\
    \ if the input is not in the range [2, 10].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw ", "  \
    \  if base < 10 \n        return \"\"\n    else if base == 10 \n        return\
    \ toString(x)\n    else \n        return toString(change_base(x % base, base))\n\
    end\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    if base < 10\n       \
    \ error(\"base must be greater than or equal to 10\")\n    elseif base > 64\n\
    \        error(\"base must be less than or equal to 64\")\n    elseif base ==\
    \ 10\n        return string(x)\n    else\n        return string(x/base^base, base*base)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary number\
    \ to a decimal number.\nThe function should take a single argument that is a binary\
    \ number.\nThe function should return the decimal number represented by the binary\
    \ number.\nThe function should raise an error if the binary number is not valid.\n\
    The function should raise an error if the binary number is not in binary form.\n\
    The function should raise an error if the binary number is not in decimal form.\n\
    The function should raise an error if the binary number is not in binary form\
    \ or decimal form.\nThe function should raise an error if the binary number is\
    \ not in binary form or decimal form and base is not 2.\nThe function should raise\
    \ an error if the binary number is not in binary form or decimal form and base\
    \ is not 10.\nThe function should raise an error if the binary number is not in\
    \ binary form or decimal form and base is not 16.\nThe function should raise an\
    \ error if the binary number is not in binary form or decimal form and base is\
    \ not 2.\nThe function should raise an error if the binary number is not in binary\
    \ form or decimal form and base is not 10.\nThe function should raise an error\
    \ if the binary number is not in binary form or decimal form and base is not 16.\n\
    The function should raise an error if the binary number is not in binary form\
    \ or decimal form and base is not 2.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 10.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 16.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 2.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 10.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 16.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 2.\nThe function should raise an error if the binary\
    \ number is not in binary form or decimal form and base is not 10.\nThe function\
    \ should raise an error if the binary number is not in binary form or decimal\
    \ form and base is not 16.\nThe function should raise an error if the binary number\
    \ is not in binary form or decimal form and base is not 2.\nThe function should\
    \ raise an error if the binary number is not in binary form or decimal form and\
    \ base is not 10.\nThe function should raise an error if the binary number is\
    \ not in binary form or decimal form and base is not 16.\n", "    if base == 10\
    \ \n        digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    return digits[base*(x-1)::Int64]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number.\nThe input is\
    \ a string containing only 0s and 1s.\nThe output is a string containing the decimal\
    \ number represented by the input.\nThe input string may contain leading zeroes.\n\
    The output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    \n    if base == 2\n        return string(x)\n    \n    digits = digits(x)\n\
    \    \n    if base == 10\n        return join(digits, \"\")\n    \n    digits\
    \ = digits(x)\n    \n    base = digits[end]\n    digits = digits[2:end]\n    \n\
    \    digits = reverse(digits)\n    \n    if base == 1\n        return join(digits,\
    \ \"\")\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    \n    if base == 10\n        return toString(x)\n    \n    if base ==\
    \ 2\n        return toBase10(x)\n    \n    if base == 3\n        return toBase3(x)\n\
    \    \n    if base == 4\n        return toBase4(x)\n    \n    if base == 5\n \
    \       return toBase5(x)\n    \n    if base == 6\n        return toBase6(x)\n\
    \    \n    if base == 7\n        return toBase7(x)\n    \n    if base == 8\n \
    \       return toBase8(x)\n    \n    if base == 9\n        return toBase9(x)\n\
    \    \n    if base == 10\n        return toBase10(x)\n    \n    if base == 11\n\
    \        return toBase11(x)\n    \n    if base == 12\n        return toBase12(x)\n\
    \    \n    if base == 13\n        return toBase13(x)\n    \n    if base == 14\n\
    \        return toBase14(x)\n    \n    if base == 15\n        return toBase15(x)\n\
    \    \n    if base == 16\n        return toBase16(x)\n    \n    if base == 17\n\
    \        return toBase17(x)\n    \n    if base == 18\n        return toBase18(x)\n\
    \    \n    if base == 19\n        return toBase19(x)\n    \n    if base == 20\n\
    \        return toBase20(x)\n    \n    if base == 21\n        return toBase21(x)\n\
    \    \n    if base == 22\n        return toBase22(x)\n    \n    if base == 23\n\
    \        return toBase23(x)\n    \n    if base == 24\n        return toBase24(x)\n\
    \    \n    if base == 25\n        return toBase25(x)\n    \n    if base == 26\n\
    \        return toBase26(x)\n    \n    if base == 27\n        return toBase27(x)\n\
    \    \n    if base == 28\n        return toBase28(x)\n    \n    if base == 29\n\
    \        return toBase29(x)\n    \n    if base == 30\n        return toBase30(x)\n\
    \    \n    if base == 31\n        return toBase31(x)\n    \n    if base == 32\n\
    \        return toBase32(x)\n    \n    if base == 33\n        return toBase33(x)\n\
    \    \n    if base == 34\n        return toBase34(x)\n    \n    if base == 35\n\
    \        return toBase35(x)\n    \n    if base == 36\n        return toBase36(x)\n\
    \    \n    if base == 37\n        return toBase37(x)\n    \n    if base == 38\n\
    \        return toBase38(x)", "    if base == 10\n        return toString(x)\n\
    \    else\n        return toString(x * base^2)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.4>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 10\n        return string(x*x)\n    else\n        return string(x*base^string(x%base))\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts binary numbers to decimal.\n\
    The function should take a string as input and return a string as output.\nThe\
    \ input string should consist of only 0s and 1s.\nThe output string should consist\
    \ of only decimal digits.\nThe function should throw an error if the input string\
    \ is not valid.\nThe function should throw an error if the input string contains\
    \ more than one leading 0\nor trailing 0s.\nThe function should throw an error\
    \ if the input string contains more than one trailing 0\nor leading 0s.\nThe function\
    \ should throw an error if the input string contains more than two leading 0s\n\
    or trailing 0s.\nThe function should throw an error if the input string contains\
    \ more than two trailing 0s\nor leading 0s.\nThe function should throw an error\
    \ if the input string contains more than three leading 0s\nor trailing 0s.\nThe\
    \ function should throw an error if the input string contains more than three\
    \ trailing 0s\nor leading 0s.\nThe function should throw an error if the input\
    \ string contains more than four leading 0s\nor trailing 0s.\nThe function should\
    \ throw an error if the input string contains more than four trailing 0s\nor leading\
    \ 0s.\nThe function should throw an error if the input string contains more than\
    \ five leading 0s\nor trailing 0s.\nThe function should throw an error if the\
    \ input string contains more than five trailing 0s\nor leading 0s.\nThe function\
    \ should throw an error if the input string contains more than six leading 0s\n\
    or trailing 0s.\nThe function should throw an error if the input string contains\
    \ more than six trailing 0s\nor leading 0s.\nThe function should throw an error\
    \ if the input string contains more than seven leading 0s\nor trailing 0s.\nThe\
    \ function should throw an error if the input string contains more than seven\
    \ trailing 0s\nor leading 0s.\nThe function should throw an error if the input\
    \ string contains more than eight leading 0s\nor trailing 0s.\nThe function should\
    \ throw an error if the input string contains more than eight trailing 0s\nor\
    \ leading 0s.\nThe function should throw an error if the input string contains\
    \ more than nine leading 0s\nor trailing 0", "    if base < 10 \n        error(\"\
    Base must be greater than 10\")\n    elseif base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(x * 10)\n    elseif base == 3\
    \ \n        return toString(x * 100)\n    elseif base == 4 \n        return toString(x\
    \ * 1000)\n    elseif base == 5 \n        return toString(x * 10000)\n    elseif\
    \ base == 6 \n        return toString(x * 100000)\n    elseif base == 7 \n   \
    \     return toString(x * 1000000)\n    elseif base == 8 \n        return toString(x\
    \ * 10000000)\n    elseif base == 9 \n        return toString(x * 100000000)\n\
    \    elseif base == 10 \n        return toString(x * 1000000000)\n    else\n \
    \       error(\"Base must be between 2 and 10\")\n    end\nend\n</code>\n<|/ a\
    \ tags=julia,type-conversion,string |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the if-else ladder. Maybe some kind of recursive\
    \ function?\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer.\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer.\n<|/ c |>\n<| a tags=julia,type-conversion,string\
    \ |>\nI came up with this solution:\n<code>", "    if base < 2 || base > 10 \n\
    \        error(\"Base must be between 2 and 10\")\n    elseif base == 2 \n   \
    \     return string(x)\n    elseif base == 10 \n        return string(x * 2)\n\
    \    elseif base == 3 \n        return string(x * 3)\n    elseif base == 4 \n\
    \        return string(x * 4)\n    elseif base == 5 \n        return string(x\
    \ * 5)\n    elseif base == 6 \n        return string(x * 6)\n    elseif base ==\
    \ 7 \n        return string(x * 7)\n    elseif base == 8 \n        return string(x\
    \ * 8)\n    elseif base == 9 \n        return string(x * 9)\n    else\n      \
    \  error(\"Base must be between 2 and 10\")\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return str(x)\n    \n    digits = digits(x)\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]", "    if base < 2 || base > 36\n        error(\"\
    Invalid base\")\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toBase(x, base))\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers.", "    if base\
    \ < 2 || base > 36\n        error(\"Base must be between 2 and 36\")\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        digits = string(x)\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digit", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        return toString(div(x, base))\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal number. \nThe input string may contain leading zeros, and the output\
    \ number will \nbe truncated to an integer value.\nThe input string may contain\
    \ leading spaces.\nThe input string may contain leading plus or minus signs.\n\
    The input string may contain leading zeros.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus sign", "    if base\
    \ < 2 || base > 10\n        throw(ArgumentError(\"base must be between 2 and 10\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string in base 10 and returns the string in reverse order.\nThe\
    \ function should throw an error if the input number is negative.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the ", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should throw an error if the\
    \ base is not between 2 and 16.\nThe function should throw an error if the input\
    \ is not a number.\nThe function should throw an error if the input number is\
    \ negative.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is zero.\nThe function should throw\
    \ an error if the input number is infinity.\nThe function should throw an error\
    \ if the input number is NaN.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a number from one base to another.\nThe function\
    \ should throw an error if the base is out of range.\nThe function should throw\
    \ an error if the number is out of range.\nThe function should throw an error\
    \ if the number is negative.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too ", "    if base < 10\n\
    \        return show(base * x)\n    else\n        return show(base * x / 10)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\n\
    Exercise\nWrite a function that converts a number from base 10 to base 16. \n\
    The function should take two arguments: the first is the number to be converted,\
    \ and the second is the base of the number.\nThe function should return the string\
    \ representation of the number in base 16.\nThe function should raise an error\
    \ if the base is not 10 or 16.\nThe function should raise an error if the number\
    \ is not an integer.\nThe function should raise an error if the number is not\
    \ in the range 0 to 255.\nThe function should raise an error if the number is\
    \ not in the range 0 to 65535.\nThe function should raise an error if the number\
    \ is negative.\nThe function should raise an error if the number is greater than\
    \ 255.\nThe function should raise an error if the number is greater than 65535.\n\
    The function should raise an error if the number is greater than 4294967295.\n\
    The function should raise an error if the number is greater than 18446744073709551615.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 18446744073709551615.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
