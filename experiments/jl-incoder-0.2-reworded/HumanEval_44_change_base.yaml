name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \ >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n \
  \   >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
  \ base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if base == 10 \n        then return toString(x)\n        else return\
    \ change_base(x / base, base) + toString(x%base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary numbers to decimal.\nThe function should take\
    \ in a binary string and return the decimal number.\nThe input string should only\
    \ contain 0s and 1s.\nThe function should return an error if the input string\
    \ contains anything else.\nThe function should return an error if the input string\
    \ contains only 0s.\nThe function should return an error if the input string contains\
    \ only 1s.\nThe function should return an error if the input string contains any\
    \ character other than 0s and 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function should return an error if the input string contains\
    \ any character other than 0s or 1s.\nThe function should return an error if the\
    \ input string contains any character other than 0s or 1s.\nThe function should\
    \ return an error if the input string contains any character other than 0s or\
    \ 1s.\nThe function should return an error if the input string contains any character\
    \ other than 0s or 1s.\nThe function should return an error if the input string\
    \ contains any character other than 0s or 1s.\nThe function should return an error\
    \ if the input string contains any character other than 0s or 1s.\nThe function\
    \ should return an error if the input string contains any character other than\
    \ 0s or 1s.\nThe function ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        digits\
    \ = digits(x)\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length % base]\n        digits = digits +\
    \ string(x)\n        digits = digits[digits.length - digits.length % base]\n \
    \       digits = digits[0 : digits.length % base]\n        return digits\nend\n\
    </cell>\n<code language=julia-1.4>", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that converts a number to a string in base 10. \nThe function should\
    \ throw an error if the input is not a number.\nThe function should throw an error\
    \ if the input is not in the range [2, 10].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw an error\
    \ if the input is not in the range [2, 36].\nThe function should throw ", "  \
    \  if base < 10 \n        return \"\"\n    else if base == 10 \n        return\
    \ toString(x)\n    else \n        return toString(change_base(x % base, base))\n\
    end\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    if base < 10\n       \
    \ error(\"base must be greater than or equal to 10\")\n    elseif base > 64\n\
    \        error(\"base must be less than or equal to 64\")\n    elseif base ==\
    \ 10\n        return string(x)\n    else\n        return string(x/base^base, base*base)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary number\
    \ to a decimal number.\nThe function should take a single argument that is a binary\
    \ number.\nThe function should return the decimal number represented by the binary\
    \ number.\nThe function should raise an error if the binary number is not valid.\n\
    The function should raise an error if the binary number is not in binary form.\n\
    The function should raise an error if the binary number is not in decimal form.\n\
    The function should raise an error if the binary number is not in binary form\
    \ or decimal form.\nThe function should raise an error if the binary number is\
    \ not in binary form or decimal form and base is not 2.\nThe function should raise\
    \ an error if the binary number is not in binary form or decimal form and base\
    \ is not 10.\nThe function should raise an error if the binary number is not in\
    \ binary form or decimal form and base is not 16.\nThe function should raise an\
    \ error if the binary number is not in binary form or decimal form and base is\
    \ not 2.\nThe function should raise an error if the binary number is not in binary\
    \ form or decimal form and base is not 10.\nThe function should raise an error\
    \ if the binary number is not in binary form or decimal form and base is not 16.\n\
    The function should raise an error if the binary number is not in binary form\
    \ or decimal form and base is not 2.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 10.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 16.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 2.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 10.\nThe function should raise an error if the\
    \ binary number is not in binary form or decimal form and base is not 16.\nThe\
    \ function should raise an error if the binary number is not in binary form or\
    \ decimal form and base is not 2.\nThe function should raise an error if the binary\
    \ number is not in binary form or decimal form and base is not 10.\nThe function\
    \ should raise an error if the binary number is not in binary form or decimal\
    \ form and base is not 16.\nThe function should raise an error if the binary number\
    \ is not in binary form or decimal form and base is not 2.\nThe function should\
    \ raise an error if the binary number is not in binary form or decimal form and\
    \ base is not 10.\nThe function should raise an error if the binary number is\
    \ not in binary form or decimal form and base is not 16.\n", "    if base == 10\
    \ \n        digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    return digits[base*(x-1)::Int64]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number.\nThe input is\
    \ a string containing only 0s and 1s.\nThe output is a string containing the decimal\
    \ number represented by the input.\nThe input string may contain leading zeroes.\n\
    The output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.\nThe input string may\
    \ contain leading zeros.\nThe output string should always have the same number\
    \ of characters as the input.\nThe input string may contain leading zeros.\nThe\
    \ output string should always have the same number of characters as the input.\n\
    The input string may contain leading zeros.\nThe output string should always have\
    \ the same number of characters as the input.\nThe input string may contain leading\
    \ zeros.\nThe output string should always have the same number of characters as\
    \ the input.\nThe input string may contain leading zeros.\nThe output string should\
    \ always have the same number of characters as the input.", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    \n    if base == 2\n        return string(x)\n    \n    digits = digits(x)\n\
    \    \n    if base == 10\n        return join(digits, \"\")\n    \n    digits\
    \ = digits(x)\n    \n    base = digits[end]\n    digits = digits[2:end]\n    \n\
    \    digits = reverse(digits)\n    \n    if base == 1\n        return join(digits,\
    \ \"\")\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    \n    if base == 10\n        return toString(x)\n    \n    if base ==\
    \ 2\n        return toBase10(x)\n    \n    if base == 3\n        return toBase3(x)\n\
    \    \n    if base == 4\n        return toBase4(x)\n    \n    if base == 5\n \
    \       return toBase5(x)\n    \n    if base == 6\n        return toBase6(x)\n\
    \    \n    if base == 7\n        return toBase7(x)\n    \n    if base == 8\n \
    \       return toBase8(x)\n    \n    if base == 9\n        return toBase9(x)\n\
    \    \n    if base == 10\n        return toBase10(x)\n    \n    if base == 11\n\
    \        return toBase11(x)\n    \n    if base == 12\n        return toBase12(x)\n\
    \    \n    if base == 13\n        return toBase13(x)\n    \n    if base == 14\n\
    \        return toBase14(x)\n    \n    if base == 15\n        return toBase15(x)\n\
    \    \n    if base == 16\n        return toBase16(x)\n    \n    if base == 17\n\
    \        return toBase17(x)\n    \n    if base == 18\n        return toBase18(x)\n\
    \    \n    if base == 19\n        return toBase19(x)\n    \n    if base == 20\n\
    \        return toBase20(x)\n    \n    if base == 21\n        return toBase21(x)\n\
    \    \n    if base == 22\n        return toBase22(x)\n    \n    if base == 23\n\
    \        return toBase23(x)\n    \n    if base == 24\n        return toBase24(x)\n\
    \    \n    if base == 25\n        return toBase25(x)\n    \n    if base == 26\n\
    \        return toBase26(x)\n    \n    if base == 27\n        return toBase27(x)\n\
    \    \n    if base == 28\n        return toBase28(x)\n    \n    if base == 29\n\
    \        return toBase29(x)\n    \n    if base == 30\n        return toBase30(x)\n\
    \    \n    if base == 31\n        return toBase31(x)\n    \n    if base == 32\n\
    \        return toBase32(x)\n    \n    if base == 33\n        return toBase33(x)\n\
    \    \n    if base == 34\n        return toBase34(x)\n    \n    if base == 35\n\
    \        return toBase35(x)\n    \n    if base == 36\n        return toBase36(x)\n\
    \    \n    if base == 37\n        return toBase37(x)\n    \n    if base == 38\n\
    \        return toBase38(x)", "    if base == 10\n        return toString(x)\n\
    \    else\n        return toString(x * base^2)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.4>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 10\n        return string(x*x)\n    else\n        return string(x*base^string(x%base))\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts binary numbers to decimal.\n\
    The function should take a string as input and return a string as output.\nThe\
    \ input string should consist of only 0s and 1s.\nThe output string should consist\
    \ of only decimal digits.\nThe function should throw an error if the input string\
    \ is not valid.\nThe function should throw an error if the input string contains\
    \ more than one leading 0\nor trailing 0s.\nThe function should throw an error\
    \ if the input string contains more than one trailing 0\nor leading 0s.\nThe function\
    \ should throw an error if the input string contains more than two leading 0s\n\
    or trailing 0s.\nThe function should throw an error if the input string contains\
    \ more than two trailing 0s\nor leading 0s.\nThe function should throw an error\
    \ if the input string contains more than three leading 0s\nor trailing 0s.\nThe\
    \ function should throw an error if the input string contains more than three\
    \ trailing 0s\nor leading 0s.\nThe function should throw an error if the input\
    \ string contains more than four leading 0s\nor trailing 0s.\nThe function should\
    \ throw an error if the input string contains more than four trailing 0s\nor leading\
    \ 0s.\nThe function should throw an error if the input string contains more than\
    \ five leading 0s\nor trailing 0s.\nThe function should throw an error if the\
    \ input string contains more than five trailing 0s\nor leading 0s.\nThe function\
    \ should throw an error if the input string contains more than six leading 0s\n\
    or trailing 0s.\nThe function should throw an error if the input string contains\
    \ more than six trailing 0s\nor leading 0s.\nThe function should throw an error\
    \ if the input string contains more than seven leading 0s\nor trailing 0s.\nThe\
    \ function should throw an error if the input string contains more than seven\
    \ trailing 0s\nor leading 0s.\nThe function should throw an error if the input\
    \ string contains more than eight leading 0s\nor trailing 0s.\nThe function should\
    \ throw an error if the input string contains more than eight trailing 0s\nor\
    \ leading 0s.\nThe function should throw an error if the input string contains\
    \ more than nine leading 0s\nor trailing 0", "    if base < 10 \n        error(\"\
    Base must be greater than 10\")\n    elseif base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(x * 10)\n    elseif base == 3\
    \ \n        return toString(x * 100)\n    elseif base == 4 \n        return toString(x\
    \ * 1000)\n    elseif base == 5 \n        return toString(x * 10000)\n    elseif\
    \ base == 6 \n        return toString(x * 100000)\n    elseif base == 7 \n   \
    \     return toString(x * 1000000)\n    elseif base == 8 \n        return toString(x\
    \ * 10000000)\n    elseif base == 9 \n        return toString(x * 100000000)\n\
    \    elseif base == 10 \n        return toString(x * 1000000000)\n    else\n \
    \       error(\"Base must be between 2 and 10\")\n    end\nend\n</code>\n<|/ a\
    \ tags=julia,type-conversion,string |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the if-else ladder. Maybe some kind of recursive\
    \ function?\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer.\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer.\n<|/ c |>\n<| a tags=julia,type-conversion,string\
    \ |>\nI came up with this solution:\n<code>", "    if base < 2 || base > 10 \n\
    \        error(\"Base must be between 2 and 10\")\n    elseif base == 2 \n   \
    \     return string(x)\n    elseif base == 10 \n        return string(x * 2)\n\
    \    elseif base == 3 \n        return string(x * 3)\n    elseif base == 4 \n\
    \        return string(x * 4)\n    elseif base == 5 \n        return string(x\
    \ * 5)\n    elseif base == 6 \n        return string(x * 6)\n    elseif base ==\
    \ 7 \n        return string(x * 7)\n    elseif base == 8 \n        return string(x\
    \ * 8)\n    elseif base == 9 \n        return string(x * 9)\n    else\n      \
    \  error(\"Base must be between 2 and 10\")\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return str(x)\n    \n    digits = digits(x)\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]\n    digits = digits[digits.length-1::]\n    digits\
    \ = digits[digits.length-1::]", "    if base < 2 || base > 36\n        error(\"\
    Invalid base\")\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toBase(x, base))\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers.", "    if base\
    \ < 2 || base > 36\n        error(\"Base must be between 2 and 36\")\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        digits = string(x)\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ / base]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length / base]\n   \
    \     digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length / base]\n        digits = digits[2:end]\n        digits\
    \ = digits[digit", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        return toString(div(x, base))\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal number. \nThe input string may contain leading zeros, and the output\
    \ number will \nbe truncated to an integer value.\nThe input string may contain\
    \ leading spaces.\nThe input string may contain leading plus or minus signs.\n\
    The input string may contain leading zeros.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus signs.\nThe input\
    \ string may contain leading plus signs.\nThe input string may contain leading\
    \ decimal points.\nThe input string may contain leading minus sign", "    if base\
    \ < 2 || base > 10\n        throw(ArgumentError(\"base must be between 2 and 10\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string in base 10 and returns the string in reverse order.\nThe\
    \ function should throw an error if the input number is negative.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the base 10.\nThe function\
    \ should throw an error if the input number is bigger than the ", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should throw an error if the\
    \ base is not between 2 and 16.\nThe function should throw an error if the input\
    \ is not a number.\nThe function should throw an error if the input number is\
    \ negative.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is zero.\nThe function should throw\
    \ an error if the input number is infinity.\nThe function should throw an error\
    \ if the input number is NaN.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex number.\nThe function should throw an error if the input\
    \ number is a complex ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a number from one base to another.\nThe function\
    \ should throw an error if the base is out of range.\nThe function should throw\
    \ an error if the number is out of range.\nThe function should throw an error\
    \ if the number is negative.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too ", "    if base < 10\n\
    \        return show(base * x)\n    else\n        return show(base * x / 10)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\n\
    Exercise\nWrite a function that converts a number from base 10 to base 16. \n\
    The function should take two arguments: the first is the number to be converted,\
    \ and the second is the base of the number.\nThe function should return the string\
    \ representation of the number in base 16.\nThe function should raise an error\
    \ if the base is not 10 or 16.\nThe function should raise an error if the number\
    \ is not an integer.\nThe function should raise an error if the number is not\
    \ in the range 0 to 255.\nThe function should raise an error if the number is\
    \ not in the range 0 to 65535.\nThe function should raise an error if the number\
    \ is negative.\nThe function should raise an error if the number is greater than\
    \ 255.\nThe function should raise an error if the number is greater than 65535.\n\
    The function should raise an error if the number is greater than 4294967295.\n\
    The function should raise an error if the number is greater than 18446744073709551615.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 18446744073709551615.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should raise an error if the number is greater than 9223372036854775807.\n\
    The function should ", "    if base < 10\n        return show(base * x)\n    else\n\
    \        return show(base * x % base)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a number to a binary string. For example, convert_base(2, 8) should\
    \ return \"1000\".", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another. \nFor example, convert from base 10 to base\
    \ 16 (hexadecimal).\nIf the base is out of range, throw an error.\nIf the number\
    \ is negative, throw an error.\nIf the number is zero, return zero.\nIf the number\
    \ is positive, return the number in base 10.\nHint: use the function change_base.",
  "    if base < 10\n        error(\"Base must be greater than or equal to 10\")\n\
    \    elseif base > 36\n        error(\"Base must be less than or equal to 36\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]", "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base\
    \ must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digit", "    if base < 10\n        return string(x)\n\
    \    else\n        return string(x/base)*base+string(x%base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert change_base(8, 3) == \"22\"\n@assert change_base(8,\
    \ 2) == \"1000\"\n@assert change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise:\
    \ Write a function that converts a number to a string with leading zeros. For\
    \ example, change_base(8, 3) should return \"0008\".", "    if base < 2 || base\
    \ > 10 \n        error(\"base must be between 2 and 10\")\n    elseif base ==\
    \ 2 \n        return string(x)\n    else\n        digits = string(x)\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    else\n        return string(x*base)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n    \
    \    throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = string(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        ", "    if base < 2 || base > 36\n  \
    \      throw(ArgumentError(\"Invalid base\"))\n    elseif base == 10\n       \
    \ return toString(x)\n    else\n        digits = digits(x)\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits + toString(base)\n        return digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>", "    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base^base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base*base",
  "    if base < 10\n        return toString(x)\n    else\n        return toString(change_base(x,\
    \ base-10))\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string of 0s and 1s.\nThe output\
    \ is the decimal equivalent of the input.\nThe function should work for any base\
    \ from 2 to 36.\nThe function should work for negative numbers as well.\nThe function\
    \ should work for any number of leading 0s.\nThe function should work for any\
    \ number of leading 1s.\nThe function should work for any number of leading 0s\
    \ and 1s.\nThe function should work for any number of leading 0s, 1s, and 2s.\n\
    The function should work for any number of leading 0s, 1s, 2s, and 3s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, and 4s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, and 5s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, and 6s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, and 7s.\n\
    The function should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s,\
    \ 7s, and 8s.\nThe function should work for any number of leading 0s, 1s, 2s,\
    \ 3s, 4s, 5s, 6s, 7s, 8s, and 9s.\nThe function should work for any number of\
    \ leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, and 10s.\nThe function should\
    \ work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s,\
    \ and 11s.\nThe function should work for any number of leading 0s, 1s, 2s, 3s,\
    \ 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s, and 12s.\nThe function should work for any\
    \ number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s, 12s, and\
    \ 13s.\nThe function should work for any number of leading 0s, 1s, 2s, 3s, 4s,\
    \ 5s, 6s, 7s, 8s, 9s, 10s, 11s, 12s, 13s, and 14s.\nThe function should work for\
    \ any number of leading 0s, 1s, 2s, 3s, 4s, ", "    if base < 2 || base > 10\n\
    \        throw(ArgumentError(\"base must be between 2 and 10\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x*base)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string containing only binary digits. \nThe output is a string\
    \ containing the decimal number in decimal base.\nThe binary number can have up\
    \ to 64 bits.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain trailing zeros.\nThe\
    \ output string may contain trailing zeros.\nThe input string may contain leading\
    \ spaces.\nThe output string may contain leading spaces.\nThe input string may\
    \ contain trailing spaces.\nThe output string may contain trailing spaces.\nThe\
    \ input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain leading or trailing spaces.\n\
    The input string may contain leading or trailing spaces.\nThe output string may\
    \ contain leading or trailing spaces.\nThe input string may contain leading or\
    \ trailing spaces.\nThe output string may contain ", "    if base < 2 || base\
    \ > 36\n        error(\"Base must be between 2 and 36\")\n    end\n    \n    if\
    \ base == 2\n        return string(x)\n    \n    digits = string(x)\n    digits\
    \ = digits[2:end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n   \
    \ digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n\
    \    \n    digits = digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1]\
    \ .. end]\n    \n    digits = digits[digits[end-1] .. end]\n    \n    digits =\
    \ digits[digits[end-1] .. end]\n    \n    digits = digits[digits[end-1] .. end]\n",
  "    if base < 2 || base > 10 \n        error(\"Base must be between 2 and 10\"\
    )\n    else \n        if base == 2 \n            return string(x%10)\n       \
    \ else \n            digits = string(x%base^(x/base))\n            return digits\
    \ + change_base(digits, base-1)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe function should take as input a binary\
    \ string and return the decimal number.\nThe function should raise an error if\
    \ the input is not binary.\nThe function should raise an error if the input contains\
    \ more than 10 binary digits.\nThe function should raise an error if the input\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input contains more than 10 binary digits.\nThe function should raise an\
    \ error if the input contains more than 10 decimal digits.\nThe function should\
    \ raise an error if the input contains more than 10 binary digits.\nThe function\
    \ should raise an error if the input contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 ", "   \
    \ if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 10\n        return string(x*10)\n    else\n        return string(x*base^2)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should throw an error if the base is out of range.\nThe function\
    \ should throw an error if the number is negative.\nThe function should throw\
    \ an error if the number is too large.\nThe function should throw an error if\
    \ the number is too small.\nThe function should throw an error if the number is\
    \ zero.\nThe function should throw an error if the number is negative.\nThe function\
    \ should throw an error if the number is too large.\nThe function should throw\
    \ an error if the number is too small.\nThe function should throw an error if\
    \ the number is zero.\nThe function should throw an error if the number is negative.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is zero.\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is zero.\nThe function should throw an error if\
    \ the number is negative.\nThe function should throw an error if the number is\
    \ too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is negative.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is zero.\nThe\
    \ function should throw an error if the number is negative.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is zero.\nThe function should throw an error if the number is negative.\nThe\
    \ function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is zero.\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is zero.\nThe function should throw an error if\
    \ the number is negative.", "    if base < 10\n        return string(x)\n    \n\
    \    digits = digits(x)\n    digits = digits[digits.length - digits.length % base]\n\
    \    digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length - digits.length % base]\n    digits = digits[0\
    \ : digits.length - digits.length % base]\n", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x*base^digits(base))\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal number in base 10.\nThe function should throw an error if the input\
    \ is not valid.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains more\
    \ than 10 digits.\nThe function should throw an error if the input contains ",
  "    if base < 10\n        return str(x)\n    else\n        return change_base(x/base,\
    \ base)*base+(x%base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise: Write a function that converts binary\
    \ numbers to decimal.\nThe input is a string containing only 1s and 0s.\nThe output\
    \ is a decimal number.\nThe function should raise an error if the input contains\
    \ anything other than 1s and 0s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1s.\nThe function should raise an error if the input\
    \ contains more than 10 1s or 0s.\nThe function should raise an error if the input\
    \ contains more than 10 0s or 1", "    if base < 10 \n        error(\"Base must\
    \ be greater than or equal to 10\")\n    elseif base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(x * x)\n    elseif base == 3 \n\
    \        return toString(x * x * x)\n    elseif base == 4 \n        return toString(x\
    \ * x * x * x)\n    elseif base == 5 \n        return toString(x * x * x * x *\
    \ x)\n    elseif base == 6 \n        return toString(x * x * x * x * x * x)\n\
    \    elseif base == 7 \n        return toString(x * x * x * x * x * x * x)\n \
    \   elseif base == 8 \n        return toString(x * x * x * x * x * x * x * x)\n\
    \    elseif base == 9 \n        return toString(x * x * x * x * x * x * x * x\
    \ * x)\n    else\n        error(\"Base must be greater than or equal to 10\")\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I still don't\
    \ understand why my code doesn't work. Could you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some explanation to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you very much for your explanation. Now I understand\
    \ why my code doesn't work. Your solution is very elegant, but I think it would\
    \ be better to use a recursive function instead of an iterative one.\n<|/ c |>\n\
    <| c |>\nYes, I agree. Recursion is much more elegant and easier to understand.\n\
    <|/ c |>\n<| a tags=julia,recursion |>\nThe problem is that the function change_base\
    \ is called with two arguments, but the function itself only takes one argument.\
    \ \nThe function change_base is defined as:\n<code>", "    if base < 2 || base\
    \ > 36\n        error(\"Invalid base\")\n    elseif base == 10\n        str =\
    \ toString(x)\n    else\n        str = toString(x)\n        str = str[1 .. base]\n\
    \        str = str * base\n        str = toString(str)\n    end\n    return str\n\
    end", "    if base < 2 || base > 36\n        error(\"Base must be between 2 and\
    \ 36\")\n    end\n    if x == 0\n        return \"\"\n    digits = digits(x)\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits[0 : digits.length % base.length]\n    digits = digits[0 :\
    \ digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - digits.length % base.length]\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits[0 : digits.length - digits.length % base.length]\n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[digits.length - digits.length % base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - digits.length % base.length]\n\
    \    digits = digits[digits.length - digits.length % base.length : digit", " \
    \   if base < 10\n        return toString(x::Int64, base)\n    else\n        return\
    \ toString(x::Int64, base::Int64)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16 (hexadecimal).\nThe\
    \ function should accept two arguments: a string representing the number to be\
    \ converted\nand a base (between 2 and 16).\nThe function should return a string\
    \ representing the number in hexadecimal.\nThe function should raise an error\
    \ if the base is out of range.\nThe function should raise an error if the base\
    \ is 0.\nThe function should raise an error if the input string does not represent\
    \ a number.\nThe function should raise an error if the input string does not represent\
    \ a number in base 10.\nThe function should raise an error if the input string\
    \ does not represent a number in base 16.\nThe function should raise an error\
    \ if the input string does not represent a number in base 2.\nThe function should\
    \ raise an error if the input string does not represent a number in base 8.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 10.\nThe function should raise an error if the input\
    \ string does not represent a number in base 2.\nThe function should raise an\
    \ error if the input string does not represent a number in base 8.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 10.\nThe function should raise an error if the input string\
    \ does not represent a number in base 2.\nThe function should raise an error if\
    \ the input string does not represent a number in base 8.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 10.\nThe function should raise an error if the input string does not\
    \ represent a number in base 2.\nThe function should raise an error if the input\
    \ string does not represent a number in base 8.\nThe function should raise an\
    \ error if the input string does not represent a number in base 16.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 10.\nThe function should raise an error if the input string does not represent\
    \ a number in base 2.\nThe function should raise an error if the input string\
    \ does not represent a number in base 8.\nThe function should raise an error if\
    \ the input string does not represent a number in base 16.\nThe function should\
    \ raise ", "    if base < 2 || base > 36\n        error(\"base must be between\
    \ 2 and 36\")\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 3\n        return string(x, \"b\")\n    elseif base == 4\n        return\
    \ string(x, \"o\")\n    elseif base == 5\n        return string(x, \"x\")\n  \
    \  elseif base == 6\n        return string(x, \"l\")\n    elseif base == 7\n \
    \       return string(x, \"c\")\n    elseif base == 8\n        return string(x,\
    \ \"d\")\n    elseif base == 9\n        return string(x, \"s\")\n    elseif base\
    \ == 10\n        return string(x, \"p\")\n    else\n        error(\"base must\
    \ be between 2 and 36\")\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thank you so much for this! I really appreciate it!\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nI wrote a package for this:\nhttps://github.com/jrm/julia-base\n<code>\n\
    julia> using Base", "    if base == 10 \n        return \"0\" \n    else \n  \
    \      return show(x % base) \nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number from\
    \ one base to another.\nFor example, change_base(8, 3) should return \"22\".\n\
    Write a function that converts a number from one base to another and returns the\
    \ string representation of that number.\nFor example, change_base(8, 3) should\
    \ return \"22\".\nWrite a function that converts a number from one base to another\
    \ and returns the string representation of that number.\nFor example, change_base(8,\
    \ 3) should return \"22\".\nWrite a function that converts a number from one base\
    \ to another and returns the string representation of that number.\nFor example,\
    \ change_base(8, 3) should return \"22\".\nWrite a function that converts a number\
    \ from one base to another and returns the string representation of that number.\n\
    For example, change_base(8, 3) should return \"22\".\nWrite a function that converts\
    \ a number from one base to another and returns the string representation of that\
    \ number.\nFor example, change_base(8, 3) should return \"22\".\nWrite a function\
    \ that converts a number from one base to another and returns the string representation\
    \ of that number.\nFor example, change_base(8, 3) should return \"22\".\nWrite\
    \ a function that converts a number from one base to another and returns the string\
    \ representation of that number.\nFor example, change_base(8, 3) should return\
    \ \"22\".\nWrite a function that converts a number from one base to another and\
    \ returns the string representation of that number.\nFor example, change_base(8,\
    \ 3) should return \"22\".\nWrite a function that converts a number from one base\
    \ to another and returns the string representation of that number.\nFor example,\
    \ change_base(8, 3) should return \"22\".\nWrite a function that converts a number\
    \ from one base to another and returns the string representation of that number.\n\
    For example, change_base(8, 3) should return \"22\".\nWrite a function that converts\
    \ a number from one base to another and returns the string representation of that\
    \ number.\nFor example, change_base(8, 3) should return \"22\".\nWrite a function\
    \ that converts a number from one base to another and returns the string representation\
    \ of that number.\nFor example, change_base(8, 3) should return \"22\".\nWrite\
    \ a function that converts a number from one base to another and returns the string\
    \ representation of that number.\nFor example, change_base(8, 3) should return\
    \ \"22\".\nWrite a function that converts a number from one base to another and\
    \ returns the string representation of that number.\nFor example, change_base(8,\
    \ 3) should return \"22\".\nWrite a function that converts a number from one base\
    \ to another and returns the string representation of that number.\nFor example,\
    \ change_base(8, 3) should return \"22\".\nWrite a function that converts a number\
    \ from one ", "    if base < 2 || base > 10 || base == 0\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x * base)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    change_base(s::String, base::Int64)::String\n\
    \    Change numerical base of input string s to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(\"\
    22\", 3)\n    \"22\"\n    >>> change_base(\"22\", 2)\n    \"1000\"\n    >>> change_base(\"\
    111\", 2)\n    \"111\"\n    \"\"\"", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 36\n        return string(x*x)\n    else\n        return string(x*base^(x-1))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n    \
    \    throw(ArgumentError(\"base must be between 2 and 36\"))\n    else\n     \
    \   if base == 10\n            return x.to_string()\n        else\n          \
    \  digits = digits(x)\n            digits = digits[digits.length - base]\n   \
    \         digits = digits[digits.length - base]\n            digits = digits[digits.length\
    \ - base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - ", "    if base < 10\n  \
    \      return str(x)\n    else\n        return change_base(x / base, base) + str(x\
    \ % base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string that consists of 0s and 1s.\n\
    The output is a decimal number.\nThe function should work for all binary numbers.\n\
    The function should work for all decimal numbers.\nThe function should work for\
    \ all numbers with leading zeros.\nThe function should work for all numbers with\
    \ leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function should work for all numbers with leading zeros.\nThe function should\
    \ work for all numbers with leading zeros.\nThe function should work for all numbers\
    \ with leading zeros.\nThe function should work for all numbers with leading zeros.\n\
    The function ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        ", "    if base == 10 \n        digits = digits(x)\n        digits =\
    \ digits[2:end]\n        digits = digits[digits[1]==1]\n        digits = digits[digits[2]==1]\n\
    \        digits = digits[digits[3]==1]\n        digits = digits[digits[4]==1]\n\
    \        digits = digits[digits[5]==1]\n        digits = digits[digits[6]==1]\n\
    \        digits = digits[digits[7]==1]\n        digits = digits[digits[8]==1]\n\
    \        digits = digits[digits[9]==1]\n        digits = digits[digits[10]==1]\n\
    \        digits = digits[digits[11]==1]\n        digits = digits[digits[12]==1]\n\
    \        digits = digits[digits[13]==1]\n        digits = digits[digits[14]==1]\n\
    \        digits = digits[digits[15]==1]\n        digits = digits[digits[16]==1]\n\
    \        digits = digits[digits[17]==1]\n        digits = digits[digits[18]==1]\n\
    \        digits = digits[digits[19]==1]\n        digits = digits[digits[20]==1]\n\
    \        digits = digits[digits[21]==1]\n        digits = digits[digits[22]==1]\n\
    \        digits = digits[digits[23]==1]\n        digits = digits[digits[24]==1]\n\
    \        digits = digits[digits[25]==1]\n        digits = digits[digits[26]==1]\n\
    \        digits = digits[digits[27]==1]\n        digits = digits[digits[28]==1]\n\
    \        digits = digits[digits[29]==1]\n        digits = digits[digits[30]==1]\n\
    \        digits = digits[digits[31]==1]\n        digits = digits[digits[32]==1]\n\
    \        digits = digits[digits[33]==1]\n        digits = digits[digits[34]==1]\n\
    \        digits = digits[digits[35]==1]\n        digits = digits[digits[36]==1]\n\
    \        digits = digits[digits[37]==1]\n        digits = digits[digits[38]==1]\n\
    \        digits = digits[digits[39]==1]\n        digits = digits[digits[40]==1]\n\
    \        digits = digits[digits[41]==1]\n        digits = digits[digits[42]==1]\n\
    \        digits = ", "    if base == 10 \n        digits = \"0123456789\"\n  \
    \  else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[x % base]\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that converts a binary number to its decimal equivalent. \nThe input\
    \ is a binary string representing a number in base 2. \nThe output is a string\
    \ representing the number in base 10. \nThe function should return nothing but\
    \ print a message to the console if the input is not a binary string.\nThe function\
    \ should raise an error if the input is not a binary string with exactly two characters.\
    \ \nThe function should raise an error if the input is not a binary string with\
    \ exactly one '1'.\nThe function should raise an error if the input is not a binary\
    \ string with exactly one '0'.\nThe function should raise an error if the input\
    \ is not a binary string with exactly two '1's and '0's (except for the last character).\n\
    The function should raise an error if the input is not a binary string with exactly\
    \ two '1's and '0's (except for the last character).\nThe function should raise\
    \ an error if the input is not a binary string with exactly two '1's and '0's\
    \ (except for the last character).\nThe function should raise an error if the\
    \ input is not a binary string with exactly two '1's and '0's (except for the\
    \ last character).\nThe function should raise an error if the input is not a binary\
    \ string with exactly two '1's and '0's (except for the last character).\nThe\
    \ function should raise an error if the input is not a binary string with exactly\
    \ two '1's and '0's (except for the last character).\nThe function should raise\
    \ an error if the input is not a binary string with exactly two '1's and '0's\
    \ (except for the last character).\nThe function should raise an error if the\
    \ input is not a binary string with exactly two '1's and '0's (except for the\
    \ last character).\nThe function should raise an error if the input is not a binary\
    \ string with exactly two '1's and '0's (except for the last character).\nThe\
    \ function should raise an error if the input is not a binary string with exactly\
    \ two '1's and '0's (except for the last character).\nThe function should raise\
    \ an error if the input is not a binary string with exactly two '1's and '0's\
    \ (except for the last character).\nThe function should raise an error if the\
    \ input is not a binary string with exactly two '1's and '0's (except for the\
    \ last character).\nThe function should raise an error if the input is not a binary\
    \ string with exactly two '1's and '0's (except for the last character).\nThe\
    \ function should raise an error if the input is not a binary string with exactly\
    \ two '1's ", "    if base < 2 || base > 10\n        error(\"Base must be between\
    \ 2 and 10\")\n    else\n        return toString(digits(x)[base-1]) \nend\n</cell>\n\
    <code language=julia-1.1>", "    if base < 2 || base > 36\n        error(\"Base\
    \ must be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. A binary number\
    \ is a string with only 0 and 1 characters. A decimal number is a string with\
    \ numbers between 0 and 9. For example, binary number \"11\" represents decimal\
    \ number \"7\".", "    if base < 10\n        error(\"Base must be greater than\
    \ or equal to 10\")\n    else\n        if base == 10\n            return toString(x)\n\
    \        else\n            digits = toString(x)\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - base:]\n            digits = ", " \
    \   if base < 2 || base > 10 \n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    else if base == 2 \n        throw(ArgumentError(\"base cannot\
    \ be 2\"))\n    else if base == 10 \n        return toString(x)\n    else \n \
    \       return toString(toBase(x, base))\nend\n</cell>\n<code language=julia-1.5>",
  "    if base == 10 \n        return \"0\" \n    else \n        return show(x % base)\
    \ \nend\n</cell>\n<code language=julia-1.4>", "    if base < 10\n        return\
    \ toString(x::Int64, base)\n    else\n        return toString(x::Int64, base::Int64)\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI added a more general solution\
    \ that works for any base (including negative bases)\n<|/ c |>\n<| a |>\nThe solution\
    \ by is very elegant, but it is slower than the other solutions posted so far.\
    \ Here is a version that uses only integer arithmetic:\n<code>", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        digits =\
    \ digits(x)\n        digits = digits[2:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digit", "    if base\
    \ == 10 \n        digits = \"0123456789\"\n    else \n        digits = \"0123456789ABCDEF\"\
    \n    digits = digits[base::Int64]\n    return digits[x % base]\nend\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 10)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 16)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    else\n        digits = string(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        ", "    if base ==\
    \ 10 \n        digits = digits(x)\n        digits[digits.length - 1] = digits[digits.length\
    \ - 1] * base\n        return join(digits)\n    else \n        digits = digits(x)\n\
    \        digits[digits.length - 1] = digits[digits.length - 1] / base\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string in base 10 and returns the string in reverse order.\nFor\
    \ example, change_base(123, 10) should return \"321\".", "    if base < 2 || base\
    \ > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        return string(x*base^2)\n\
    end\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from one base to another.",
  "    if base == 10 \n        return \"{:0>5}\".format(x)\n    else if base == 2\
    \ \n        return \"{:0>4}\".format(x)\n    else \n        return \"{:0>3}\"\
    .format(x)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string with binary digits, e.g. \"\
    1010011\".\nThe output is a decimal number in base 10.\nThe function should raise\
    \ an error if the input is not valid binary number.\nThe function should raise\
    \ an error if the input contains more than 32 binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 binary digits.\nThe function\
    \ should raise an error if the input contains more than 32 binary digits.\nThe\
    \ function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error ", "    if base == 10 \n        then return\
    \ to_string(x)\n    else \n        digits = digits(x)\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[0 : digits.length - base]\n        digits =\
    \ digits + [base]\n        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.0>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.0>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ take two arguments: the first is the number to be converted, and the second\
    \ is the base of the number to be converted.\nThe function should return a string\
    \ containing the number in base 16.\nThe function should return an error message\
    \ if the input number is not in the range 10 to 16.\nThe function should return\
    \ an error message if the input base is not in the range 2 to 16.\nThe function\
    \ should return an error message if the input number is negative.\nThe function\
    \ should return an error message if the input number is zero.\nThe function should\
    \ return an error message if the input number is greater than 16.\nThe function\
    \ should return an error message if the input number is less than 2.\nThe function\
    \ should return an error message if the input number is greater than or equal\
    \ to 16.\nThe function should return an error message if the input number is less\
    \ than or equal to 2.\nThe function should return an error message if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ message if the input number is less than or equal to 2.\nThe function should\
    \ return an error message if the input number is greater than or equal to 16.\n\
    The function should return an error message if the input number is less than or\
    \ equal to 2.\nThe function should return an error message if the input number\
    \ is greater than or equal to 16.\nThe function should return an error message\
    \ if the input number is less than or equal to 2.\nThe function should return\
    \ an error message if the input number is greater than or equal to 16.\nThe function\
    \ should return an error message if the input number is less than or equal to\
    \ 2.\nThe function should return an error message if the input number is greater\
    \ than or equal to 16.\nThe function should return an error message if the input\
    \ number is less than or equal to 2.\nThe function should return an error message\
    \ if the input number is greater than or equal to 16.\nThe function should return\
    \ an error message if the input number is less than or equal to 2.\nThe function\
    \ should return an error message if the input number is greater than or equal\
    \ to 16.\nThe function should return an error message if the input number is less\
    \ than or equal to 2.\nThe function should return an error message if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ message if the input number is less than or equal to 2.\nThe function should\
    \ return an error message if the input number is greater than or equal to 16.\n\
    The function should ", "    if base == 10 \n        digits = digits(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[digits[1] == 0]\n        digits\
    \ = digits[digits[2] == 0]\n        digits = digits[digits[3] == 0]\n        digits\
    \ = digits[digits[4] == 0]\n        digits = digits[digits[5] == 0]\n        digits\
    \ = digits[digits[6] == 0]\n        digits = digits[digits[7] == 0]\n        digits\
    \ = digits[digits[8] == 0]\n        digits = digits[digits[9] == 0]\n        digits\
    \ = digits[digits[10] == 0]\n        digits = digits[digits[11] == 0]\n      \
    \  digits = digits[digits[12] == 0]\n        digits = digits[digits[13] == 0]\n\
    \        digits = digits[digits[14] == 0]\n        digits = digits[digits[15]\
    \ == 0]\n        digits = digits[digits[16] == 0]\n        digits = digits[digits[17]\
    \ == 0]\n        digits = digits[digits[18] == 0]\n        digits = digits[digits[19]\
    \ == 0]\n        digits = digits[digits[20] == 0]\n        digits = digits[digits[21]\
    \ == 0]\n        digits = digits[digits[22] == 0]\n        digits = digits[digits[23]\
    \ == 0]\n        digits = digits[digits[24] == 0]\n        digits = digits[digits[25]\
    \ == 0]\n        digits = digits[digits[26] == 0]\n        digits = digits[digits[27]\
    \ == 0]\n        digits = digits[digits[28] == 0]\n        digits = digits[digits[29]\
    \ == 0]\n        digits = digits[digits[30] == 0]\n        digits = digits[digits[31]\
    \ == 0]\n        digits = digits[digits[32] == 0]\n        digits = digits[digits[33]\
    \ == 0]\n        digits = digits[digits[34] == 0]\n        digits = digits[digits[35]\
    \ == 0]\n        digits = digits[digits[36] == 0]\n        digits = digits[digits[37]\
    \ == 0]\n        digits = digits[digits[38] == 0]\n        digits = digits[digits[39]\
    \ == 0]\n        digits = digits[digits[40] == 0]\n        digits = digits[digits[41]\
    \ == 0]\n        digits = digits[digits[42] == 0]\n        digits = digits[digits[43]\
    \ == 0]\n        digits = digits[digits[44] == 0]\n        digits = digits[digits[",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base)\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\n    else \n        digits = digits(x)\n  \
    \      digits = digits[2:end]\n        digits = digits[2:end]\n        return\
    \ join(digits, \"\")\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nI came up with this solution:\n<code>", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = string(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length / base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[digits.length / base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base:end]\n        digits\
    \ = digits[digits.length / base:end]\n        digits = digits[2:end]\n       \
    \ digits = digits[digits.length - digits.length % base:end]\n        digits =\
    \ digits[digits.length / base:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base:end]\n        digits = digits[digits.length\
    \ / base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base:end]\n        digits = digits[digits.length / base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length / base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[digits.length / base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - digits.length % base:end]\n        digits\
    \ = digits[digits.length / base:end]\n        digits = digits[2:end]\n       \
    \ digits = digits[digits.length - digits.length % base:end]\n        digits =\
    \ digits[digits.length / base:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - digits.length % base:end]\n        digits = digits[digits.length\
    \ / base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - digits.length % base:end]\n        digits = digits[digits.length / base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length / base:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - digits.length", " \
    \   if base == 10\n        return toString(x)\n    \n    digits = digits(x)\n\
    \    \n    base = digits[end]\n    digits[end] = digits[end]-base\n    digits\
    \ = digits[2:end]\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)", "    if base < 2 || base > 36\n        error(\"\
    Base must be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*base)\n    else\n        digits\
    \ = string(x%base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:", "    if base < 2 || base > 36\n        error(\"\
    Base must be between 2 and 36.\")\n    end\n    if base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 10)\n    else\n        return\
    \ string(x * pow(base, floor(log10(abs(x))))) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe input is a\
    \ string that consists of 0s and 1s.\nThe output is a string that consists of\
    \ decimal numbers.\nThe function should raise an error if the input string is\
    \ not valid.\nThe function should raise an error if the input string contains\
    \ more than 10 binary digits.\nThe function should raise an error if the input\
    \ string contains more than 10 decimal digits.\nThe function should raise an error\
    \ if the input string contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input string contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input string contains more than 10 binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 decimal digits.\nThe function should raise an error if the input string\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input string contains more than 10 decimal digits.\nThe function should\
    \ raise an error if the input string contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function ", "   \
    \ if base == 10 \n        return \"0\"\n    else if base == 2 \n        return\
    \ string(x)\n    else \n        return string(x*base)\nend\n</cell>\n<code language=julia-1.1>",
  "    if base == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digit", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    else\n        digits = digits(x)\n\
    \        digits = digits[digits.length - digits.length % base + 1:digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        return\
    \ string(digits, base)\nend\n</cell>\n<code language=julia-1.5>", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        return string(x/base^base,\
    \ base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another.\nThe function should throw an error if the\
    \ base is out of range.\nThe function should throw an error if the input number\
    \ is negative.\nThe function should throw an error if the input number is zero.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the ", "    if base < 2 || base > 36\n \
    \       throw(ArgumentError(\"Base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = string(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        return digits[digits.length / base]\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts a number from base 10 to base 36 (a-z).\nThe function\
    \ should throw an error if the base is out of range.\nThe function should throw\
    \ an error if the input number is negative.\nThe function should throw an error\
    \ if the input number is zero.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function ", "    if base < 2\
    \ || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n    elseif base\
    \ == 2\n        return string(x)\n    elseif base == 10\n        return string(x\
    \ * 10)\n    else\n        digits = string(x * base)\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:", "    if base < 10\
    \ || base > 36\n        throw(ArgumentError(\"Base must be between 10 and 36\"\
    ))\n    else\n        return String(digits(x), base)\nend", "    if base == 10\
    \ \n        digits = \"0123456789\"\n    elseif base == 2 \n        digits = \"\
    01\"\n    elseif base == 8 \n        digits = \"01234567\"\n    elseif base ==\
    \ 16 \n        digits = \"0123456789abcdef\"\n    elseif base == 32 \n       \
    \ digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    elseif base == 64 \n\
    \        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    elseif base == 128 \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    elseif base == 256 \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base)\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if base < 2 || base > 36\n        error(\"Base must be between 2 and 36\")\n\
    \    end\n    if base == 2\n        return string(x)\n    elseif base == 3\n \
    \       return string(x, \"b\")\n    elseif base == 4\n        return string(x,\
    \ \"o\")\n    elseif base == 5\n        return string(x, \"x\")\n    elseif base\
    \ == 6\n        return string(x, \"h\")\n    elseif base == 7\n        return\
    \ string(x, \"d\")\n    elseif base == 8\n        return string(x, \"o\")\n  \
    \  elseif base == 9\n        return string(x, \"x\")\n    elseif base == 10\n\
    \        return string(x, \"l\")\n    elseif base == 11\n        return string(x,\
    \ \"d\")\n    elseif base == 12\n        return string(x, \"h\")\n    elseif base\
    \ == 13\n        return string(x, \"l\")\n    elseif base == 14\n        return\
    \ string(x, \"o\")\n    elseif base == 15\n        return string(x, \"x\")\n \
    \   elseif base == 16\n        return string(x, \"h\")\n    elseif base == 17\n\
    \        return string(x, \"l\")\n    elseif base == 18\n        return string(x,\
    \ \"o\")\n    elseif base == 19\n        return string(x, \"x\")\n    elseif base\
    \ == 20\n        return string(x, \"h\")\n    elseif base == 21\n        return\
    \ string(x, \"l\")\n    elseif base == 22\n        return string(x, \"o\")\n \
    \   elseif base == 23\n        return string(x, \"x\")\n    elseif base == 24\n\
    \        return string(x, \"h\")\n    elseif base == 25\n        return string(x,\
    \ \"l\")\n    elseif base == 26\n        return string(x, \"o\")\n    elseif base\
    \ == 27\n        return string(x, \"x\")\n    elseif base == 28\n        return\
    \ string(x, \"h\")\n    elseif base == 29\n        return string(x, \"l\")\n \
    \   elseif base == 30\n        return string(x, \"o\")\n    elseif base == 31\n\
    \        return string(x, \"x\")\n    elseif base == 32\n        return string(x,\
    \ \"h\")\n    elseif base == 33\n        return string(x, \"l\")\n    elseif base\
    \ == 34\n        return string(x, \"o\")\n    elseif base == 35\n        return\
    \ string(x, \"x\")\n    elseif base == 36\n        return string(x, \"h\")\n \
    \   else\n        error(\"Base must be between 2 and 36\")\n    end\nend\n</cell>\n\
    <code language=julia-1.4>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base\
    \ == 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n      \
    \  return string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x\
    \ * 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 100000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    else\n        return show(digits(x, base))\n\
    end", "    if base < 10\n        return str((x % base) + base)\n    else\n   \
    \     return change_base(x / base, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers.\nThe input is a string that consists of only\
    \ 0s and 1s.\nThe output is a string that consists of decimal numbers.\nThe input\
    \ string may contain leading zeros.\nThe output string may contain leading zeros.\n\
    The input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ leading zeros.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string may contain leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string may contain leading zeros.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain leading zeros.\nThe output string may contain leading zeros.\nThe\
    \ input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ leading zeros.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string may contain leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string may contain leading zeros.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain leading zeros.\nThe output string may contain leading zeros.\nThe\
    \ input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain\
    \ leading zeros.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string may contain leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string may contain leading zeros.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain leading zeros.\nThe output string may contain leading zeros.\nThe\
    \ input string may contain leading zeros.\nThe output string may contain leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string may contain ",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 10\n        return string(x * 10)\n    else\n        digits = digits(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length /\
    \ base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length / base\
    \ - 1]\n        digits = digits[0 : digits.length / base]\n        digits = digits[digits.length\
    \ / base - 1]\n        digits = digits[0 : digits.length / base]\n        digits\
    \ = digits[digits.length / base - 1]\n        digits = digits[0 : digits.length\
    \ / base]\n        digit", "    if base == 10 \n        then return \"0\"\n  \
    \  else \n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length - ", "    if base == 10 \n        return\
    \ toString(x)\n    else if base == 2 \n        return toString(2*x)\n    else\
    \ if base == 3 \n        return toString(3*x)\n    else if base == 4 \n      \
    \  return toString(4*x)\n    else if base == 5 \n        return toString(5*x)\n\
    \    else if base == 6 \n        return toString(6*x)\n    else if base == 7 \n\
    \        return toString(7*x)\n    else if base == 8 \n        return toString(8*x)\n\
    \    else if base == 9 \n        return toString(9*x)\n    else \n        return\
    \ \"Invalid base\"\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n", "    if base < 2 ||\
    \ base > 36\n        error(\"Invalid base\")\n    elseif base == 10\n        return\
    \ toString(x)\n    else\n        digits = digits(x)\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length % base]\n\
    \        digits = digits + digits[digits.length - digits.length % base]\n    \
    \    digits = digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digit", "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n \
    \       return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"l\")\n    elseif base\
    \ == 7\n        return string(x, \"c\")\n    elseif base == 8\n        return\
    \ string(x, \"d\")\n    elseif base == 9\n        return string(x, \"s\")\n  \
    \  elseif base == 10\n        return string(x, \"p\")\n    else\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return str(x)\n    else\n        digits = digits(x)\n\
    \        digits = digits[digits.length-1::digits.length-base]\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = ", "    if base < 10\n        return show(base * x)\n    else\n\
    \        return show(base * x)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should take two arguments:\
    \ a string representing the number in base 10, and an integer representing the\
    \ base of the number in base 10.\nThe function should return the string representing\
    \ the number in base 16.\nThe function should return an error if the input string\
    \ does not represent a number in base 10.\nThe function should return an error\
    \ if the input base is less than 10.\nThe function should return an error if the\
    \ input base is greater than 16.\nThe function should return an error if the input\
    \ number is negative.\nThe function should return an error if the input number\
    \ is zero.\nThe function should return an error if the input number is greater\
    \ than or equal to 16.\nThe function should return an error if the input number\
    \ is less than or equal to 16.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ if the input number is less than or equal to 16.\nThe function should return\
    \ an error if the input number is greater than or equal to 16.\nThe function should\
    \ return an error if the input number is less than or equal to 16.\nThe function\
    \ should return an error if the input number is greater than or equal to 16.\n\
    The function should return an error if the input number is less than or equal\
    \ to 16.\nThe function should return an error if the input number is greater than\
    \ or equal to 16.\nThe function should return an error if the input number is\
    \ less than or equal to 16.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ if the input number is less than or equal to 16.\nThe function should return\
    \ an error if the input number is greater than or equal to 16.\nThe function should\
    \ return an error if the input number is less than or equal to 16.\nThe function\
    \ should return an error if the input number is greater than or equal to 16.\n\
    The function should return an error if the input number is less than or equal\
    \ to 16.\nThe function should return an error if the input number is greater than\
    \ or equal to 16.\nThe function should return an error if the input number is\
    \ less than or equal to 16.\nThe function should return an error if the input\
    \ number is greater than or equal to 16.\nThe function should return an error\
    \ if the input number is less than or equal to 16.\nThe function should return\
    \ an error if the input number is greater than or equal to 16.\nThe function should\
    \ return an error if the input number is less than or equal to 16.\nThe function\
    \ should return an error if the input number is greater than or equal to 16.\n\
    The function should return an error if the input number is less than or equal\
    \ to 16.\nThe function should return an error if the input number is greater than\
    \ or equal to 16.\nThe function ", "    if base < 10\n        return string(x)\n\
    \    \n    digits = digits(x)\n    digits = digits[digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length - digits.length % base]\n    digits = digits[0 : digits.length]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length - digits.length % base]\n    digits = digits[0 : digits.length]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    digits = digits[0 :\
    \ digits.length]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = digits[0 : digits.length - digits.length % base]\n   \
    \ digits = digits[0 : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    digits = ", "    if base == 10 \n        return toString(x)\n \
    \   else \n        return toString(change_base(x / base, base * base))\nend\n\
    </cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number from one base to another.\nThe function\
    \ should take two arguments: x is the number to be converted, and base is the\
    \ base of the number.\nThe function should return the string representation of\
    \ the number after conversion.\nThe function should raise an error if the base\
    \ is not in the range [2, 36].\nThe function should raise an error if the base\
    \ is 0.\nThe function should raise an error if the input number is negative.\n\
    The function should raise an error if the input number is too big.\nThe function\
    \ should raise an error if the input number is too small.\nThe function should\
    \ raise an error if the input number is NaN.\nThe function should raise an error\
    \ if the input number is infinity.\nThe function should raise an error if the\
    \ input number is too large.\nThe function should raise an error if the input\
    \ number is too small.\nThe function should raise an error if the input number\
    \ is infinite.\nThe function should raise an error if the input number is too\
    \ large.\nThe function should raise an error if the input number is too small.\n\
    The function should raise an error if the input number is infinite.\nThe function\
    \ should raise an error if the input number is too large.\nThe function should\
    \ raise an error if the input number is too small.\nThe function should raise\
    \ an error if the input number is infinite.\nThe function should raise an error\
    \ if the input number is too large.\nThe function should raise an error if the\
    \ input number is too small.\nThe function should raise an error if the input\
    \ number is infinite.\nThe function should raise an error if the input number\
    \ is too large.\nThe function should raise an error if the input number is too\
    \ small.\nThe function should raise an error if the input number is infinite.\n\
    The function should raise an error if the input number is too large.\nThe function\
    \ should raise an error if the input number is too small.\nThe function should\
    \ raise an error if the input number is infinite.\nThe function should raise an\
    \ error if the input number is too large.\nThe function should raise an error\
    \ if the input number is too small.\nThe function should raise an error if the\
    \ input number is infinite.\nThe function should raise an error if the input number\
    \ is too large.\nThe function should raise an error if the input number is too\
    \ small.\nThe function should raise an error if the input number is infinite.\n\
    The function should raise an error if the input number is too large.\nThe function\
    \ should raise an error if the input number is too small.\nThe function should\
    \ raise an error if the input number is infinite.\nThe function should raise an\
    \ error if the input number is too large.\nThe function should raise an error\
    \ if the input number is too ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 10\n        return string(x * 10^6)\n    else\n        return string(x *\
    \ 10^base) \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    convert_base(x::Int64,\
    \ base::Int64)::Int64\n    Convert x from base to base numbers are less than 10.\n\
    \    base numbers are less than 10.\n    >>> convert_base(8, 3)\n    22\n    >>>\
    \ convert_base(8, 2)\n    1000\n    >>> convert_base(7, 2)\n    111\n    \"\"\"",
  "    if base < 10\n        error(\"Base must be greater than or equal to 10\")\n\
    \    elseif base > 36\n        error(\"Base must be less than or equal to 36\"\
    )\n    else\n        return toString(base * x)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number from base 10 to base 16 (hexadecimal).\n\
    The function should take two arguments: an integer and a base (between 2 and 16).\n\
    The function should return the string representation of the number in base 16.\n\
    The function should raise an error if the base is out of range.\nThe function\
    \ should raise an error if the base is less than 2.\nThe function should raise\
    \ an error if the base is greater than 16.\nThe function should raise an error\
    \ if the base is less than 2.\nThe function should raise an error if the base\
    \ is greater than 16.\nThe function should raise an error if the base is less\
    \ than 2.\nThe function should raise an error if the base is greater than 16.\n\
    The function should raise an error if the base is less than 2.\nThe function should\
    \ raise an error if the base is greater than 16.\nThe function should raise an\
    \ error if the base is less than 2.\nThe function should raise an error if the\
    \ base is greater than 16.\nThe function should raise an error if the base is\
    \ less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than 2.\nThe function\
    \ should raise an error if the base is greater than 16.\nThe function should raise\
    \ an error if the base is less than 2.\nThe function should raise an error if\
    \ the base is greater than 16.\nThe function should raise an error if the base\
    \ is less than 2.\nThe function should raise an error if the base is greater than\
    \ 16.\nThe function should raise an error if the base is less than ", "    if\
    \ base < 2 || base > 10\n        error(\"Base must be between 2 and 10\")\n  \
    \  elseif base == 2\n        return string(x)\n    else\n        return string(x*base)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ only decimal numbers.\nThe function should raise an error if the input contains\
    \ non-binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 binary digits.\nThe function should raise an error if the input\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input contains more than 10 binary digits.\nThe function should raise an\
    \ error if the input contains more than 10 decimal digits.\nThe function should\
    \ raise an error if the input contains more than 10 binary digits.\nThe function\
    \ should raise an error if the input contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.\nThe function should raise an error if the input contains\
    \ more than 10 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input contains more than 10 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input contains more than 10 decimal digits.\n\
    The function should raise an error if the input contains more than 10 binary digits.\n\
    The function should raise an error if the input contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 10 binary digits.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n    convert x from base\
    \ to base\n    base numbers are less than 10.\n    >>> convert_base(8, 3)\n  \
    \  22\n    >>> convert_base(8, 2)\n    1000\n    >>> convert_base(7, 2)\n    111\n\
    \    \"\"\"", "    if base < 10\n        return show(base * x)\n    else\n   \
    \     return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise: Write a function that converts binary\
    \ to decimal.\n    Binary numbers are represented as strings of 0s and 1s.\n \
    \   For example, the binary number \"101\" is represented by the string \"111001\"\
    .\n    Write a function that converts binary to decimal.\n    Binary numbers are\
    \ represented as strings of 0s and 1s.\n    For example, the binary number \"\
    101\" is represented by the string \"111001\".\n    Write a function that converts\
    \ binary to decimal.\n    Binary numbers are represented as strings of 0s and\
    \ 1s.\n    For example, the binary number \"101\" is represented by the string\
    \ \"111001\".\n    Write a function that converts binary to decimal.\n    Binary\
    \ numbers are represented as strings of 0s and 1s.\n    For example, the binary\
    \ number \"101\" is represented by the string \"111001\".\n    Write a function\
    \ that converts binary to decimal.\n    Binary numbers are represented as strings\
    \ of 0s and 1s.\n    For example, the binary number \"101\" is represented by\
    \ the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as strings of 0s and 1s.\n    For example, the binary number \"101\" is represented\
    \ by the string \"111001\".\n    Write a function that converts binary to decimal.\n\
    \    Binary numbers are represented as strings of 0s and 1s.\n    For example,\
    \ the binary number \"101\" is represented by the string \"111001\".\n    Write\
    \ a function that converts binary to decimal.\n    Binary numbers are represented\
    \ as ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x, base)\nend", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    \n    if\
    \ x == 0\n        return \"\"\n    \n    digits = digits(x)\n    \n    digits\
    \ = digits[digits.length - digits.length % base.length : digits.length]\n    \n\
    \    digits = digits[0 : digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base.length]\n    \n    digits = digit", " \
    \   if base < 10\n        error(\"base must be greater than or equal to 10\")\n\
    \    elseif base > 36\n        error(\"base must be less than or equal to 36\"\
    )\n    else\n        str = toString(x)\n        str = str[start:end]\n       \
    \ str = str * base\n        str = toString(str)\n        return str\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 10\n        return toString(x::Int64,\
    \ base)\n    else\n        return toString(x::Int64, base::Int64 - 10)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from base\
    \ 10 to base 16 (hexadecimal).\nThe function should accept two arguments: a string\
    \ representing the number in base 10, and an integer representing the base of\
    \ the number in base 10.\nThe function should return the string representation\
    \ of the number in base 16.\nThe function should raise an error if the base is\
    \ not 10 or 16.\nThe function should raise an error if the input string does not\
    \ represent a number.\nThe function should raise an error if the input string\
    \ does not represent a number in base 10.\nThe function should raise an error\
    \ if the input string does not represent a number in base 16.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 16.\nThe function should raise an\
    \ error if the input string does not represent a number in base 16.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 16.\nThe function should raise an error if the input string\
    \ does not represent a number in base 16.\nThe function should raise an error\
    \ if the input string does not represent a number in base 16.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 16.\nThe function should raise an\
    \ error if the input string does not represent a number in base 16.\nThe function\
    \ should raise an error if the input string does not represent a number in base\
    \ 16.\nThe function should raise an error if the input string does not represent\
    \ a number in base 16.\nThe function should raise an error if the input string\
    \ does not represent a number in base 16.\nThe function should raise an error\
    \ if the input string does not represent a number in base 16.\nThe function should\
    \ raise an error if the input string does not represent a number in base 16.\n\
    The function should raise an error if the input string does not represent a number\
    \ in base 16.\nThe function should raise an error if the input string does not\
    \ represent a number in base 16.\nThe function should raise an error if the input\
    \ string does not represent a number in base 16.\nThe function should raise an\
    \ error if the input string does not represent a ", "    if base < 10\n      \
    \  return str((x % base) + base)\n    else\n        return str((x % base) / base)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\
    \ \nThe input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe input string may contain\
    \ leading zeroes.\nThe output string should contain the decimal representation\
    \ of the binary number with leading zeroes.\nThe input string may contain leading\
    \ zeros.\nThe output string should contain the decimal representation of the binary\
    \ number with leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string should contain the decimal representation of the binary number\
    \ with leading zeros.\nThe input string may contain leading zeros.\nThe output\
    \ string should contain the decimal representation of the binary number with leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string should\
    \ contain the decimal representation of the binary number with leading zeros.\n\
    The input string may contain leading zeros.\nThe output string should contain\
    \ the decimal representation of the binary number with leading zeros.\nThe input\
    \ string may contain leading zeros.\nThe output string should contain the decimal\
    \ representation of the binary number with leading zeros.\nThe input string may\
    \ contain leading zeros.\nThe output string should contain the decimal representation\
    \ of the binary number with leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string should contain the decimal representation of the binary\
    \ number with leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string should contain the decimal representation of the binary number\
    \ with leading zeros.\nThe input string may contain leading zeros.\nThe output\
    \ string should contain the decimal representation of the binary number with leading\
    \ zeros.\nThe input string may contain leading zeros.\nThe output string should\
    \ contain the decimal representation of the binary number with leading zeros.\n\
    The input string may contain leading zeros.\nThe output string should contain\
    \ the decimal representation of the binary number with leading zeros.\nThe input\
    \ string may contain leading zeros.\nThe output string should contain the decimal\
    \ representation of the binary number with leading zeros.\nThe input string may\
    \ contain leading zeros.\nThe output string should contain the decimal representation\
    \ of the binary number with leading zeros.\nThe input string may contain leading\
    \ zeros.\nThe output string should contain the decimal representation of the binary\
    \ number with leading zeros.\nThe input string may contain leading zeros.\nThe\
    \ output string should contain the decimal representation of the binary number\
    \ with leading zeros.\nThe input string may contain leading ", "    if base <\
    \ 10\n        return show(base * x)\n    else\n        return show(base * x) +\
    \ show(x % base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 2.", "    if base < 2 || base > 10\n        error(\"\
    Base must be between 2 and 10\")\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base^2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    \n    if base == 2\n        return string(x)\n    \n    if\
    \ base == 3\n        if x == 0\n            return \"0\"\n        if x == 1\n\
    \            return \"1\"\n        if x == -1\n            return \"-1\"\n   \
    \     if x == -2\n            return \"-2\"\n        if x == -3\n            return\
    \ \"-3\"\n        if x == -4\n            return \"-4\"\n        if x == -5\n\
    \            return \"-5\"\n        if x == -6\n            return \"-6\"\n  \
    \      if x == -7\n            return \"-7\"\n        if x == -8\n           \
    \ return \"-8\"\n        if x == -9\n            return \"-9\"\n        if x ==\
    \ -10\n            return \"-10\"\n        if x == -11\n            return \"\
    -11\"\n        if x == -12\n            return \"-12\"\n        if x == -13\n\
    \            return \"-13\"\n        if x == -14\n            return \"-14\"\n\
    \        if x == -15\n            return \"-15\"\n        if x == -16\n      \
    \      return \"-16\"\n        if x == -17\n            return \"-17\"\n     \
    \   if x == -18\n            return \"-18\"\n        if x == -19\n           \
    \ return \"-19\"\n        if x == -20\n            return \"-20\"\n        if\
    \ x == -21\n            return \"-21\"\n        if x == -22\n            return\
    \ \"-22\"\n        if x == -23\n            return \"-23\"\n        if x == -24\n\
    \            return \"-24\"\n        if x == -25\n            return \"-25\"\n\
    \        if x == -26\n            return \"-26\"\n        if x == -27\n      \
    \      return \"-27\"\n        if x == -28\n            return \"-28\"\n     \
    \   if x == -29\n            return \"-29\"\n        if x == -30\n           \
    \ return \"-30\"\n        if x == -31\n            return \"-31\"\n        if\
    \ x == -32\n            return \"-32\"\n        if x == -33\n            return\
    \ \"-33\"\n        if x == -34\n            return \"-34\"\n        if x == -35\n\
    \            return \"-35\"\n        if x == -36\n            return \"-36\"\n\
    \        if x == -37\n            return \"-37\"\n        if x == -38\n      \
    \      return \"-38\"\n        if x == -39\n            return \"-39\"\n     \
    \   if x == -40\n            return \"-40\"\n        if x == -41\n           \
    \ return \"-41\"\n        if x == -42\n            return \"-42\"\n        if\
    \ x == -43\n            return \"-43\"\n        if x == -44\n            return\
    \ \"-44\"\n        if x == -45\n            return \"-45\"\n        if x == -46\n\
    \            return \"-46\"\n        if x == -47\n            return \"-47\"\n\
    \        if x == -48\n            return \"-48\"\n        if x == -49\n      \
    \      return \"-49\"\n        if x == -50\n            return \"-50\"\n     \
    \   if x == -51\n            return \"-5", "    if base < 2 || base > 36\n   \
    \     throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = string(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        return digits[digits.length / base]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string that consists of only 0s and 1s.\nThe output is a string\
    \ that consists of only decimal numbers.\nThe function should throw an error if\
    \ the input string is not valid.\nThe function should throw an error if the input\
    \ string contains invalid characters.\nThe function should throw an error if the\
    \ input string contains invalid characters.\nThe function should throw an error\
    \ if the input string contains invalid characters.\nThe function should throw\
    \ an error if the input string contains invalid characters.\nThe function should\
    \ throw an error if the input string contains invalid characters.\nThe function\
    \ should throw an error if the input string contains invalid characters.\nThe\
    \ function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid ", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    \n    if x == 0\n        return \"\"\n    \n    if base ==\
    \ 10\n        return to_string(x)\n    \n    digits = to_string(x)\n    digits\
    \ = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n  \
    \  digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base^base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should throw an error if the base is not between 2 and 16.\n\
    The function should throw an error if the number is negative.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is zero.\nThe function should throw an error if the number is infinity.\nThe\
    \ function should throw an error if the number is NaN.\nThe function should throw\
    \ an error if the number is infinite.\nThe function should throw an error if the\
    \ number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should ",
  "    if base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x / 10)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary to decimal.\nThe input is a string that consists of only 0s and 1s.\n\
    The output is an integer that is the decimal equivalent of the binary string.\n\
    The function should raise an error if the input string is not valid.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as spaces or letters.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as letters or symbols.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function should raise an error if the input\
    \ string contains invalid characters, such as letters or symbols.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as letters or symbols.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as letters or symbols.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function should raise an error if the input\
    \ string contains invalid characters, such as letters or symbols.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as letters or symbols.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function should raise an error if the input string contains\
    \ invalid characters, such as letters or symbols.\nThe function should raise an\
    \ error if the input string contains invalid characters, such as letters or symbols.\n\
    The function should raise an error if the input string contains invalid characters,\
    \ such as letters or symbols.\nThe function should raise an error if the input\
    \ string contains invalid characters, such as letters or symbols.\nThe function\
    \ should raise an error if the input string contains invalid characters, such\
    \ as letters or symbols.\nThe function should raise an error if the input string\
    \ contains invalid characters, such as letters or symbols.\nThe function should\
    \ raise an error if the input string contains invalid characters, such as letters\
    \ or symbols.\nThe function ", "    if base < 2 || base > 10 \n        error(\"\
    Base must be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n\
    \    elseif base == 10 \n        return string(x::Int64)\n    elseif base == 3\
    \ \n        return string(x::Int64*10)\n    elseif base == 4 \n        return\
    \ string(x::Int64*100)\n    elseif base == 5 \n        return string(x::Int64*1000)\n\
    \    elseif base == 6 \n        return string(x::Int64*10000)\n    elseif base\
    \ == 7 \n        return string(x::Int64*100000)\n    elseif base == 8 \n     \
    \   return string(x::Int64*1000000)\n    elseif base == 9 \n        return string(x::Int64*10000000)\n\
    \    elseif base == 10 \n        return string(x::Int64*100000000)\n    elseif\
    \ base == 11 \n        return string(x::Int64*1000000000)\n    elseif base ==\
    \ 12 \n        return string(x::Int64*10000000000)\n    elseif base == 13 \n \
    \       return string(x::Int64*100000000000)\n    elseif base == 14 \n       \
    \ return string(x::Int64*1000000000000)\n    elseif base == 15 \n        return\
    \ string(x::Int64*10000000000000)\n    elseif base == 16 \n        return string(x::Int64*100000000000000)\n\
    \    elseif base == 17 \n        return string(x::Int64*1000000000000000)\n  \
    \  elseif base == 18 \n        return string(x::Int64*10000000000000000)\n   \
    \ elseif base == 19 \n        return string(x::Int64*100000000000000000)\n   \
    \ elseif base == 20 \n        return string(x::Int64*1000000000000000000)\n  \
    \  elseif base == 21 \n        return string(x::Int64*10000000000000000000)\n\
    \    elseif base == 22 \n        return string(x::Int64*100000000000000000000)\n\
    \    elseif base == 23 \n        return string(x::Int64*1000000000000000000000)\n\
    \    elseif base == 24 \n        return string(x::Int64*10000000000000000000000)\n\
    \    elseif base == 25 \n        return string(x::Int64*100000000000000000000000)\n\
    \    elseif base == 26 \n        return string(x::Int64*1000000000000000000000000)\n\
    \    elseif base == 27 \n        return string(x::Int64*10000000000000000000000000)\n\
    \    elseif base == 28 \n        return string(x::Int64*100000000000000000000000000)\n\
    \    elseif base == 29 \n        return string(x::Int64*1000000000000000000000000000)\n\
    \    elseif base == 30 \n        return string(x::Int64", "    if base == 10 \n\
    \        digits = digits(x)\n        digits = digits[2:end]\n        digits =\
    \ digits[digits[1] == 0 ? (end - 1) : 1]\n        return join(digits, \"\")\n\
    \    digits = digits(x)\n    digits = digits[2:end]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digits[1]\
    \ == 0 ? (end - 1) : 1]\n    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n\
    \    digits = digits[digits[1] == 0 ? (end - 1) : 1]\n    digits = digits[digit",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that converts a number from base 10 to base 16. \nThe function should throw\
    \ an error if the base is not between 2 and 16.\nThe function should throw an\
    \ error if the number is negative.\nThe function should throw an error if the\
    \ number is too large.\nThe function should throw an error if the number is too\
    \ small.\nThe function should throw an error if the number is too large.\nThe\
    \ function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is ", "    if base < 2 || base\
    \ > 36\n        error(\"Base must be between 2 and 36\")\n    end\n    \n    if\
    \ base == 2\n        return string(x)\n    end\n    \n    digits = string(x)\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]", "    if base < 2 ||\
    \ base > 10 \n        error(\"Base must be between 2 and 10\")\n    elseif base\
    \ == 2 \n        return string(x)\n    else\n        return string(x*base^2)\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    change_base(s::String, base::Int64)::String\n\
    \    Change numerical base of input string s to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(\"\
    22\", 3)\n    \"22\"\n    >>> change_base(\"1000\", 2)\n    \"1000\"\n    >>>\
    \ change_base(\"111\", 2)\n    \"111\"\n    \"\"\"", "    if base < 2 || base\
    \ > 10\n        throw(ArgumentError(\"base must be between 2 and 10\"))\n    else\n\
    \        return string(x%base^(x/base))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(::Int64, ::Int64)", "    if base < 2 || base > 36\n  \
    \      throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x/base^base,\
    \ base^base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary to decimal.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output is an integer number.\nThe input\
    \ string may contain leading zeros.\nThe output ", "    if base < 2 || base >\
    \ 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        return string(x * base^2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n    \
    \    throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    elseif base == 10\n        return string(x*x)\n\
    \    else\n        return string(x*base^(x-1))\nend\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that converts a number from base 10 to base 36 (a-z). \n\
    The function should throw an error if the base is not between 2 and 36.\nThe function\
    \ should throw an error if the input number is negative.\nThe function should\
    \ throw an error if the input number is zero.\nThe function should throw an error\
    \ if the input number is larger than 36.\nThe function should throw an error if\
    \ the input number is smaller than 2.\nThe function should throw an error if the\
    \ input number is larger than 36.\nThe function should throw an error if the input\
    \ number is smaller than 2.\nThe function should throw an error if the input number\
    \ is larger than 36.\nThe function should throw an error if the input number is\
    \ smaller than 2.\nThe function should throw an error if the input number is larger\
    \ than 36.\nThe function should throw an error if the input number is smaller\
    \ than 2.\nThe function should throw an error if the input number is larger than\
    \ 36.\nThe function should throw an error if the input number is smaller than\
    \ 2.\nThe function should throw an error if the input number is larger than 36.\n\
    The function should throw an error if the input number is smaller than 2.\nThe\
    \ function should throw an error if the input number is larger than 36.\nThe function\
    \ should throw an error if the input number is smaller than 2.\nThe function should\
    \ throw an error if the input number is larger than 36.\nThe function should throw\
    \ an error if the input number is smaller than 2.\nThe function should throw an\
    \ error if the input number is larger than 36.\nThe function should throw an error\
    \ if the input number is smaller than 2.\nThe function should throw an error if\
    \ the input number is larger than 36.\nThe function should throw an error if the\
    \ input number is smaller than 2.\nThe function should throw an error if the input\
    \ number is larger than 36.\nThe function should throw an error if the input number\
    \ is smaller than 2.\nThe function should throw an error if the input number is\
    \ larger than 36.\nThe function should throw an error if the input number is smaller\
    \ than 2.\nThe function should throw an error if the input number is larger than\
    \ 36.\nThe function should throw an error if the input number is smaller than\
    \ 2.\nThe function should throw an error if the input number is larger than 36.\n\
    The function should throw an error if the input number is smaller than 2.\nThe\
    \ function should throw an error if the input number is larger than 36.\nThe function\
    \ should throw an error if the input number is smaller than 2.\nThe function should\
    \ throw an error if the input number is larger than 36.\nThe function should throw\
    \ an error if the input number is smaller than 2.\nThe function should throw an\
    \ error if the input number is larger than 36.\nThe function should throw an error\
    \ if the input number is smaller than 2.\nThe function should throw an error if\
    \ the input number is larger than 36.\nThe function should throw an error if the\
    \ input number is smaller than 2.\nThe ", "    if base < 10\n        error(\"\
    Base must be less than 10\")\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(toInt(x)/toInt(base)*toInt(base))\nend\n</code>\n\
    <|/ a tags=julia,type-conversion |>\n<| a |>\n<code>", "    if base < 2 || base\
    \ > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    elseif base == 3\n        return string(x,\
    \ \"b\")\n    elseif base == 4\n        return string(x, \"o\")\n    elseif base\
    \ == 5\n        return string(x, \"x\")\n    elseif base == 6\n        return\
    \ string(x, \"h\")\n    elseif base == 7\n        return string(x, \"d\")\n  \
    \  elseif base == 8\n        return string(x, \"o\")\n    elseif base == 9\n \
    \       return string(x, \"x\")\n    elseif base == 10\n        return string(x,\
    \ \"l\")\n    elseif base == 11\n        return string(x, \"l\")\n    elseif base\
    \ == 12\n        return string(x, \"l\")\n    elseif base == 13\n        return\
    \ string(x, \"l\")\n    elseif base == 14\n        return string(x, \"l\")\n \
    \   elseif base == 15\n        return string(x, \"l\")\n    elseif base == 16\n\
    \        return string(x, \"l\")\n    elseif base == 17\n        return string(x,\
    \ \"l\")\n    elseif base == 18\n        return string(x, \"l\")\n    elseif base\
    \ == 19\n        return string(x, \"l\")\n    elseif base == 20\n        return\
    \ string(x, \"l\")\n    elseif base == 21\n        return string(x, \"l\")\n \
    \   elseif base == 22\n        return string(x, \"l\")\n    elseif base == 23\n\
    \        return string(x, \"l\")\n    elseif base == 24\n        return string(x,\
    \ \"l\")\n    elseif base == 25\n        return string(x, \"l\")\n    elseif base\
    \ == 26\n        return string(x, \"l\")\n    elseif base == 27\n        return\
    \ string(x, \"l\")\n    elseif base == 28\n        return string(x, \"l\")\n \
    \   elseif base == 29\n        return string(x, \"l\")\n    elseif base == 30\n\
    \        return string(x, \"l\")\n    elseif base == 31\n        return string(x,\
    \ \"l\")\n    elseif base == 32\n        return string(x, \"l\")\n    elseif base\
    \ == 33\n        return string(x, \"l\")\n    elseif base == 34\n        return\
    \ string(x, \"l\")\n    elseif base == 35\n        return string(x, \"l\")\n \
    \   elseif base == 36\n        return string(x, \"l\")\n    else\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base == 10 \n        digits = digits(x)\n        return digits[1] + digits[2]\
    \ + digits[3]\n    else \n        digits = digits(x)\n        digits[1] = digits[1]\
    \ * base\n        digits[2] = digits[2] * base\n        digits[3] = digits[3]\
    \ * base\n        return digits[1] + digits[2] + digits[3]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number to a binary string. \nThe function should\
    \ take one argument x, which can be any numerical type.\nThe function should return\
    \ a string representation of x, in binary format.\nThe function should throw an\
    \ error if the argument x is not numeric.\nThe function should throw an error\
    \ if the argument x is negative.\nThe function should throw an error if the argument\
    \ x is too big.\nThe function should throw an error if the argument x is too small.\n\
    The function should throw an error if the argument x is zero.\nThe function should\
    \ throw an error if the argument x is too large.\nThe function should throw an\
    \ error if the argument x is too small.\nThe function should throw an error if\
    \ the argument x is too large.\nThe function should throw an error if the argument\
    \ x is too small.\nThe function should throw an error if the argument x is too\
    \ large.\nThe function should throw an error if the argument x is too small.\n\
    The function should throw an error if the argument x is too large.\nThe function\
    \ should throw an error if the argument x is too small.\nThe function should throw\
    \ an error if the argument x is too large.\nThe function should throw an error\
    \ if the argument x is too small.\nThe function should throw an error if the argument\
    \ x is too large.\nThe function should throw an error if the argument x is too\
    \ small.\nThe function should throw an error if the argument x is too large.\n\
    The function should throw an error if the argument x is too small.\nThe function\
    \ should throw an error if the argument x is too large.\nThe function should throw\
    \ an error if the argument x is too small.\nThe function should throw an error\
    \ if the argument x is too large.\nThe function should throw an error if the argument\
    \ x is too small.\nThe function should throw an error if the argument x is too\
    \ large.\nThe function should throw an error if the argument x is too small.\n\
    The function should throw an error if the argument x is too large.\nThe function\
    \ should throw an error if the argument x is too small.\nThe function should throw\
    \ an error if the argument x is too large.\nThe function should throw an error\
    \ if the argument x is too small.\nThe function should throw an error if the argument\
    \ x is too large.\nThe function should throw an error if the argument x is too\
    \ small.\nThe function should throw an error if the argument x is too large.\n\
    The function should throw an error if the argument x is too small.\nThe function ",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits + string(x)\n        digits = digits[digits.length - digits.length %\
    \ base]\n        digits = digits[0 : digits.length % base]\n        return digits\n\
    end\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.3>", "    if base < 10\n        return show(base * x)\n\
    \    else\n        return show(base * x) / show(base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe input number x is assumed to be in string format. \n\
    The output string representation is returned in string format.\nThe input number\
    \ x is assumed to be in string format. \nThe output string representation is returned\
    \ in string format.\nThe ", "    if base < 10\n        return toString(x::Int64,\
    \ base)\n    else\n        return toString(x::Int64, base::Int64)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should take two arguments: the first is the number to be\
    \ converted, and the second is the base of the number.\nThe function should return\
    \ a string representation of the number in base 16.\nThe function should return\
    \ an error if the base is not 10 or 16.\nThe function should return an error if\
    \ the number is negative.\nThe function should return an error if the number is\
    \ zero.\nThe function should return an error if the number is greater than the\
    \ maximum value of Int64.\nThe function should return an error if the number is\
    \ less than the minimum value of Int64.\nThe function should return an error if\
    \ the number is outside the range of Int64.\nThe function should return an error\
    \ if the number is outside the range of Int32.\nThe function should return an\
    \ error if the number is outside the range of Int8.\nThe function should return\
    \ an error if the number is outside the range of UInt8.\nThe function should return\
    \ an error if the number is outside the range of Float32.\nThe function should\
    \ return an error if the number is outside the range of Float64.\nThe function\
    \ should return an error if the number is outside the range of Float16.\nThe function\
    \ should return an error if the number is outside the range of Bool.\nThe function\
    \ should return an error if the number is outside the range of String.\nThe function\
    \ should return an error if the number is outside the range of Symbol.\nThe function\
    \ should return an error if the number is outside the range of Date.\nThe function\
    \ should return an error if the number is outside the range of Base.\nThe function\
    \ should return an error if the number is outside the range of Base.Index.\nThe\
    \ function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should return an error if the number is outside the range of Base.Symbol.\n\
    The function should ", "    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x*x)\n    elseif base == 3 \n   \
    \     return string(x*x*x)\n    elseif base == 4 \n        return string(x*x*x*x)\n\
    \    elseif base == 5 \n        return string(x*x*x*x*x)\n    elseif base == 6\
    \ \n        return string(x*x*x*x*x*x)\n    elseif base == 7 \n        return\
    \ string(x*x*x*x*x*x*x)\n    elseif base == 8 \n        return string(x*x*x*x*x*x*x*x)\n\
    \    elseif base == 9 \n        return string(x*x*x*x*x*x*x*x*x)\n    else\n \
    \       error(\"Base must be between 2 and 10\")\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    change_base(::Int64, ::Int64)::String\n   \
    \ Change numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7,\
    \ 2)\n    \"111\"\n    \"\"\"", "    if base < 10 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 10 and 36\"))\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(base * x)\nend\n</cell>\n<code language=julia-1.1>",
  "    if base < 2 || base > 10 || base == 0\n        throw(ArgumentError(\"base must\
    \ be between 2 and 10\"))\n    else\n        digits = digits(x)\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base]\n   \
    \     digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digit", "    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base)*base\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise\nWrite a function that converts a\
    \ number from base 10 to base 36. \nThe function should throw an error if the\
    \ base is out of range.\nThe function should throw an error if the number is negative.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.",
  "    if base < 2 || base > 36\n        error(\"Invalid base\")\n    elseif base\
    \ == 2\n        return string(x)\n    elseif base == 3\n        return string(x\
    \ * 1000 + 100)\n    elseif base == 4\n        return string(x * 10000 + 1000)\n\
    \    elseif base == 5\n        return string(x * 100000 + 10000)\n    elseif base\
    \ == 6\n        return string(x * 1000000 + 100000)\n    elseif base == 7\n  \
    \      return string(x * 10000000 + 1000000)\n    elseif base == 8\n        return\
    \ string(x * 100000000 + 10000000)\n    elseif base == 9\n        return string(x\
    \ * 1000000000 + 100000000)\n    elseif base == 10\n        return string(x *\
    \ 10000000000 + 1000000000)\n    else\n        error(\"Invalid base\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n    \
    \    throw(ArgumentError(\"base must be between 2 and 36\"))\n    else\n     \
    \   str = toString(x)\n        str = str[start:end]\n        str = str * base\n\
    \        str = toString(str)\n        return str\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    change_base(s::String, base::Int64)::Int64\n    Change numerical base of\
    \ input string s to base.\n    return numerical base after the conversion.\n \
    \   base numbers are less than 10.\n    >>> change_base(\"22\", 3)\n    22\n \
    \   >>> change_base(\"1000\", 2)\n    1000\n    >>> change_base(\"111\", 2)\n\
    \    111\n    \"\"\"", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    \n    digits = digits(x)\n    digits = digits[2:end]\n \
    \   digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n\
    \    digits = digits[digits[1]:end]\n    digits = digits[digits[1]:end]\n    digits\
    \ = digits[digits[1]", "    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 10 \n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2 \n        return string(x)\n    else\n  \
    \      return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe input is a string containing binary\
    \ numbers, \nthe output is a string containing the decimal numbers.\nThe input\
    \ string may contain leading zeros, \nthe output string should not contain leading\
    \ zeros.\nThe input string may contain spaces, \nthe output string should not\
    \ contain spaces.\nThe input string may contain leading spaces, \nthe output string\
    \ should not contain leading spaces.\nThe input string may contain trailing spaces,\
    \ \nthe output string should not contain trailing spaces.\nThe input string may\
    \ contain leading zeros, \nthe output string should not contain leading zeros.\n\
    The input string may contain spaces, \nthe output string should not contain spaces.\n\
    The input string may contain leading spaces, \nthe output string should not contain\
    \ leading spaces.\nThe input string may contain trailing spaces, \nthe output\
    \ string should not contain trailing spaces.\nThe input string may contain leading\
    \ zeros, \nthe output string should not contain leading zeros.\nThe input string\
    \ may contain spaces, \nthe output string should not contain spaces.\nThe input\
    \ string may contain leading spaces, \nthe output string should not contain leading\
    \ spaces.\nThe input string may contain trailing spaces, \nthe output string should\
    \ not contain trailing spaces.\nThe input string may contain leading zeros, \n\
    the output string should not contain leading zeros.\nThe input string may contain\
    \ spaces, \nthe output string should not contain spaces.\nThe input string may\
    \ contain leading spaces, \nthe output string should not contain leading spaces.\n\
    The input string may contain trailing spaces, \nthe output string should not contain\
    \ trailing spaces.\nThe input string may contain leading zeros, \nthe output string\
    \ should not contain leading zeros.\nThe input string may contain spaces, \nthe\
    \ output string should not contain spaces.\nThe input string may contain leading\
    \ spaces, \nthe output string should not contain leading spaces.\nThe input string\
    \ may contain trailing spaces, \nthe output string should not contain trailing\
    \ spaces.\nThe input string may contain leading zeros, \nthe output string should\
    \ not contain leading zeros.\nThe input string may contain spaces, \nthe output\
    \ string should not contain spaces.\nThe input string may ", "    if base < 10\n\
    \        return show(base * x)\n    else\n        return show(base * x / 10)\n\
    end\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe function should work for\
    \ any base from 2 to 64.\nThe function should work for negative numbers.\nThe\
    \ function should work for any number of leading 0s.\nThe function should work\
    \ for any number of leading 1s.\nThe function should work for any number of leading\
    \ 0s and 1s.\nThe function should work for any number of leading 0s, 1s and 2s.\n\
    The function should work for any number of leading 0s, 1s, 2s and 3s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s and 4s.\nThe function should\
    \ work for any number of leading 0s, 1s, 2s, 3s, 4s and 5s.\nThe function should\
    \ work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s and 6s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s and 7s.\nThe\
    \ function should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s\
    \ and 8s.\nThe function should work for any number of leading 0s, 1s, 2s, 3s,\
    \ 4s, 5s, 6s, 7s, 8s and 9s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s and 10s.\nThe function should work for\
    \ any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s and 11s.\n\
    The function should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s,\
    \ 7s, 8s, 9s, 10s, 11s and 12s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s, 10s, 11s, 12s and 13s.\nThe function\
    \ should work for any number of leading 0s, 1s, 2s, 3s, 4s, 5s, 6s, 7s, 8s, 9s,\
    \ 10s, 11s, 12s, 13s and 14s.\nThe function should work for any number of leading\
    \ 0s, 1s, 2s, 3s, ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^digits(x))\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return toString(x::Int64, base)\n    else\n        return\
    \ toString(x::Int64, base::Int64)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string containing only 0s and 1s.\n\
    The output is a decimal number.\nThe function should raise an error if the input\
    \ is not binary.\nThe function should raise an error if the input contains more\
    \ than 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 bits.\nThe function should raise an error if the input contains negative\
    \ numbers.\nThe function should raise an error if the ", "    if base < 2 || base\
    \ > 10 || base == 0\n        throw(ArgumentError(\"base must be between 2 and\
    \ 10\"))\n    elseif base == 2\n        return string(x)\n    else\n        return\
    \ string(x, base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string containing only 0s and 1s.\n\
    The output is a string containing the decimal representation of the binary number.\n\
    The function should throw an error if the input is not valid binary number.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.1>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.1>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.1>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts a number to a string using base 36. For example, change_base(123,\
    \ 36) should return \"4m7\".", "    if base < 10 \n        error(\"base must be\
    \ less than 10\")\n    elseif base == 0 \n        error(\"base must be greater\
    \ than 0\")\n    elseif base > 36 \n        error(\"base must be less than 36\"\
    )\n    elseif base < 0 \n        error(\"base must be greater than 0\")\n    elseif\
    \ base == 1 \n        x % base\n    elseif base == 2 \n        x // base\n   \
    \ elseif base == 3 \n        x % base * base\n    elseif base == 4 \n        x\
    \ // base * base\n    elseif base == 5 \n        x % base * base * base\n    elseif\
    \ base == 6 \n        x // base * base * base * base\n    elseif base == 7 \n\
    \        x % base * base * base * base * base\n    elseif base == 8 \n       \
    \ x // base * base * base * base * base * base\n    elseif base == 9 \n      \
    \  x % base * base * base * base * base * base * base\n    elseif base == 10 \n\
    \        x // base * base * base * base * base * base * base * base\n    elseif\
    \ base == 11 \n        x % base * base * base * base * base * base * base * base\
    \ * base\n    elseif base == 12 \n        x // base * base * base * base * base\
    \ * base * base * base * base * base\n    elseif base == 13 \n        x % base\
    \ * base * base * base * base * base * base * base * base * base * base\n    elseif\
    \ base == 14 \n        x // base * base * base * base * base * base * base * base\
    \ * base * base * base * base\n    elseif base == 15 \n        x % base * base\
    \ * base * base * base * base * base * base * base * base * base * base * base\n\
    \    elseif base == 16 \n        x // base * base * base * base * base * base\
    \ * base * base * base * base * base * base * base * base * base\n    elseif base\
    \ == 17 \n        x % base * base * base * base * base * base * base * base *\
    \ base * base * base * base * base * base * base * base * base\n    elseif base\
    \ == 18 \n        x // base * base * base * base * base * base * base * base *\
    \ base * base * base * base * base * base * base * base * base * base * base *\
    \ base * base * base * base", "    if base < 10\n        return show(base * x)\n\
    \    else\n        return show(base * x) % base\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ accept two arguments: the first is the number to be converted, and the second\
    \ is the base of the number to be converted.\nThe function should return a string\
    \ representation of the number in base 16.\nThe function should raise an error\
    \ if the base is not 10 or 16.\nThe function should raise an error if the number\
    \ is negative.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        return toString(toInt(x,\
    \ base))\nend\n</cell>\n<code language=julia-1.5>", "    if base < 10\n      \
    \  error(\"base must be greater than or equal to 10\")\n    elseif base > 36\n\
    \        error(\"base must be less than or equal to 36\")\n    elseif base ==\
    \ 0\n        error(\"base must not be equal to 0\")\n    else\n        str = toString(x)\n\
    \        str = str[start:end]\n        str = str * base\n        str = toString(str)\n\
    \    end\n    return str\nend\n</cell>\n<code language=julia-1.5>", "    if base\
    \ == 10 \n        digits = digits(x)\n        digits[digits.length-1] = digits[digits.length-1].to_i\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse", "    if base < 10\n        return toString(x::Int64,\
    \ base)\n    else\n        return toString(x::Int64, base::Int64)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a number to a binary\
    \ string.\nThe function should take one argument x that is a number.\nThe function\
    \ should return a string containing the binary representation of x.\nThe function\
    \ should return an error message if the argument is not of type number.\nThe function\
    \ should return an error message if the argument is not positive.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not an integer.\nThe function\
    \ should return an error message if the argument is not ", "    if base < 2 ||\
    \ base > 36\n        error(\"Invalid base\")\n    elseif base == 10\n        return\
    \ toString(x)\n    else\n        return toString(x*base^digits(x))\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = digits(x)\n     \
    \   digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length % base]\n        digits = digits + string(x)\n        digits\
    \ = digits[digits.length - digits.length % base]\n        digits = digits[0 :\
    \ digits.length % base]\n        return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number to a string with leading zeros. If the number\
    \ is negative, add \"-\" to the front of the string.", "    if base < 10 \n  \
    \      error(\"base must be greater than or equal to 10\")\n    elseif base ==\
    \ 10 \n        return toString(x)\n    elseif base == 2 \n        return toString(2*x)\n\
    \    elseif base == 3 \n        return toString(3*x)\n    elseif base == 4 \n\
    \        return toString(4*x)\n    elseif base == 5 \n        return toString(5*x)\n\
    \    elseif base == 6 \n        return toString(6*x)\n    elseif base == 7 \n\
    \        return toString(7*x)\n    elseif base == 8 \n        return toString(8*x)\n\
    \    elseif base == 9 \n        return toString(9*x)\n    elseif base == 10 \n\
    \        return toString(10*x)\n    elseif base == 11 \n        return toString(11*x)\n\
    \    elseif base == 12 \n        return toString(12*x)\n    elseif base == 13\
    \ \n        return toString(13*x)\n    elseif base == 14 \n        return toString(14*x)\n\
    \    elseif base == 15 \n        return toString(15*x)\n    elseif base == 16\
    \ \n        return toString(16*x)\n    elseif base == 17 \n        return toString(17*x)\n\
    \    elseif base == 18 \n        return toString(18*x)\n    elseif base == 19\
    \ \n        return toString(19*x)\n    elseif base == 20 \n        return toString(20*x)\n\
    \    elseif base == 21 \n        return toString(21*x)\n    elseif base == 22\
    \ \n        return toString(22*x)\n    elseif base == 23 \n        return toString(23*x)\n\
    \    elseif base == 24 \n        return toString(24*x)\n    elseif base == 25\
    \ \n        return toString(25*x)\n    elseif base == 26 \n        return toString(26*x)\n\
    \    elseif base == 27 \n        return toString(27*x)\n    elseif base == 28\
    \ \n        return toString(28*x)\n    elseif base == 29 \n        return toString(29*x)\n\
    \    elseif base == 30 \n        return toString(30*x)\n    elseif base == 31\
    \ \n        return toString(31*x)\n    elseif base == 32 \n        return toString(32*x)\n\
    \    elseif base == 33 \n        return toString(33*x)\n    elseif base == 34\
    \ \n        return toString(34*x)\n    elseif base == 35 \n        return toString(35*x)\n\
    \    elseif base == 36 \n        return toString(36*x)\n    elseif base == 37\
    \ \n        return toString(37*x)\n    elseif base == 38 \n        return toString(38*x)\n\
    \    elseif base == 39 \n        return toString(39*x)\n    elseif base == 40\
    \ \n        return toString(40*x)\n    elseif base == 41 \n        return toString(41*x)\n\
    \    elseif base == 42 \n        return ", "    if base < 10 \n        error(\"\
    base must be greater than or equal to 10\")\n    elseif base > 64 \n        error(\"\
    base must be less than or equal to 64\")\n    elseif base == 0 \n        error(\"\
    base must not be zero\")\n    elseif base == 1 \n        return string(x)\n  \
    \  elseif base == 2 \n        return string(x*2)\n    elseif base == 3 \n    \
    \    return string(x*3)\n    elseif base == 4 \n        return string(x*4)\n \
    \   elseif base == 5 \n        return string(x*5)\n    elseif base == 6 \n   \
    \     return string(x*6)\n    elseif base == 7 \n        return string(x*7)\n\
    \    elseif base == 8 \n        return string(x*8)\n    elseif base == 9 \n  \
    \      return string(x*9)\n    elseif base == 10 \n        return string(x*10)\n\
    \    elseif base == 11 \n        return string(x*11)\n    elseif base == 12 \n\
    \        return string(x*12)\n    elseif base == 13 \n        return string(x*13)\n\
    \    elseif base == 14 \n        return string(x*14)\n    elseif base == 15 \n\
    \        return string(x*15)\n    elseif base == 16 \n        return string(x*16)\n\
    \    elseif base == 17 \n        return string(x*17)\n    elseif base == 18 \n\
    \        return string(x*18)\n    elseif base == 19 \n        return string(x*19)\n\
    \    elseif base == 20 \n        return string(x*20)\n    elseif base == 21 \n\
    \        return string(x*21)\n    elseif base == 22 \n        return string(x*22)\n\
    \    elseif base == 23 \n        return string(x*23)\n    elseif base == 24 \n\
    \        return string(x*24)\n    elseif base == 25 \n        return string(x*25)\n\
    \    elseif base == 26 \n        return string(x*26)\n    elseif base == 27 \n\
    \        return string(x*27)\n    elseif base == 28 \n        return string(x*28)\n\
    \    elseif base == 29 \n        return string(x*29)\n    elseif base == 30 \n\
    \        return string(x*30)\n    elseif base == 31 \n        return string(x*31)\n\
    \    elseif base == 32 \n        return string(x*32)\n    elseif base == 33 \n\
    \        return string(x*33)\n    elseif base == 34 \n        return string(x*34)\n\
    \    elseif base == 35 \n        return string(x*35)\n    elseif base == 36 \n\
    \        return string(x*36)\n    elseif base == 37 \n        return string(x*37)\n\
    \    elseif base == 38 \n        return string(x*38)", "    if base < 10\n   \
    \     return string(x)\n    \n    digits = string(x)\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]", "    if base < 10\n        return str((x % base)\
    \ + base)\n    else\n        return str((x % base) / base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe function should raise\
    \ an error if the input string contains non-binary digits.\nThe function should\
    \ raise an error if the input string contains more than 32 binary digits.\nThe\
    \ function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string contains more than 32 binary digits.\nThe function should raise\
    \ an error if the input string contains negative binary digits.\nThe function\
    \ should raise an error if the input string contains more than 32 binary digits.\n\
    The function should raise an error if the input string contains negative binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 32 binary digits.\nThe function should raise an error if the input string\
    \ contains negative binary digits.\nThe function should raise an error if the\
    \ input string ", "    if base < 2 || base > 10\n        error(\"Base must be\
    \ between 2 and 10\")\n    elseif base == 2\n        return string(x)\n    else\n\
    \        return string(x/base^base, base = base)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base == 10 \n        digits = \"0123456789\"\n    else \n        digits\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n    digits = digits[base-10:base]\n\
    \    \n    return digits[(x%base)] + digits[(x/base)]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    elseif base == 10\n        return string(x*10)\n\
    \    else\n        return string(x*pow(base, floor(log10(x))))\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string with binary digits, e.g. \"101001\".\nThe output is an integer\
    \ with the decimal number in base 10.\nThe function should throw an error if the\
    \ input string does not contain exactly one binary digit.\nThe function should\
    \ throw an error if the input string contains more than two binary digits.\nThe\
    \ function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input string contains leading zeros.\n\
    The function should throw an error if the input ", "    if base < 2 || base >\
    \ 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[digits[1]:end]\n    \
    \    digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digits[digits[1]:end]\n\
    \        digits = digits[digits[1]:end]\n        digits = digit", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n    elseif\
    \ base == 10\n        return toString(x)\n    else\n        return toString(x\
    \ * base^floor(log(x, base)))\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a number to a binary string. \nThe function should take two arguments:\
    \ the number to be converted and the base of the number.\nThe function should\
    \ return a string representation of the number in binary format.\nThe function\
    \ should throw an error if the base is not in the range 2 to 36.\nThe function\
    \ should throw an error if the number to be converted is negative.\nThe function\
    \ should throw an error if the number to be converted is zero.\nThe function should\
    \ throw an error if the number to be converted is larger than the base of the\
    \ number.\nThe function should throw an error if the number to be converted is\
    \ smaller than the base of the number.\nThe function should throw an error if\
    \ the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is NaN.\nThe function should throw an error if\
    \ the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe function should throw an error\
    \ if the number to be converted is infinity.\nThe ", "    if base == 10 \n   \
    \     digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    return digits[base-1] + digits[mod(x, base)]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers\
    \ to decimal.\nThe input is a string that consists of only 0s and 1s.\nThe output\
    \ is a decimal number.\nThe function should throw an error if the input is not\
    \ valid.\nThe function should throw an error if the input contains more than 10\
    \ binary digits.\nThe function should throw an error if the input contains more\
    \ than 10 decimal digits.\nThe function should throw an error if the input contains\
    \ more than 10 binary digits.\nThe function should throw an error if the input\
    \ contains more than 10 decimal digits.\nThe function should throw an error if\
    \ the input contains more than 10 binary digits.\nThe function should throw an\
    \ error if the input contains more than 10 decimal digits.\nThe function should\
    \ throw an error if the input contains more than 10 binary digits.\nThe function\
    \ should throw an error if the input contains more than 10 decimal digits.\nThe\
    \ function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe function should throw an error if the input contains\
    \ more than 10 decimal digits.\nThe function should throw an error if the input\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input contains more than 10 decimal digits.\nThe function should throw an\
    \ error if the input contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input contains more than 10 decimal digits.\nThe function\
    \ should throw an error if the input contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input contains more than 10 decimal digits.\n\
    The function should throw an error if the input contains more than 10 binary digits.\n\
    The function should throw an error if the input contains more than 10 decimal\
    \ digits.\nThe function should throw an error if the input contains more than\
    \ 10 binary digits.\nThe ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        ", "    if base < 10\n        return string(x)\n    else\n        digits\
    \ = string(x%base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x/base^base*base)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(s::String, base::Int64)::Int64\n    Change numerical base\
    \ of input string s to base.\n    return numerical base after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(\"22\", 3)\n    22\n\
    \    >>> change_base(\"1000\", 2)\n    1000\n    >>> change_base(\"111\", 2)\n\
    \    111\n    \"\"\"", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x%base)\n        digits = digits[2:end]\n \
    \       digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        ", "    if base == 10 \n        digits\
    \ = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    digits = digits[base:end]\n    return digits[(x%base)] + digits[(x/base)]\n\
    end\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary number to its decimal\
    \ representation. \nThe function should accept a binary number as its only argument\
    \ and return a string containing the decimal representation of its binary number.\
    \ \nThe function should use recursion to compute the decimal representation of\
    \ the binary number. \nThe function should return an error if the binary number\
    \ is not of length 2.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any character other than 0 or 1.\nThe function\
    \ should return an error if the binary number contains any character other than\
    \ 0 or 1.\nThe function should return an error if the binary number contains any\
    \ character other than 0 or 1.\nThe function should return an error if the binary\
    \ number contains any character other than 0 or 1.\nThe function should return\
    \ an error if the binary number contains any character other than 0 or 1.\nThe\
    \ function should return an error if the binary number contains any character\
    \ other than 0 or 1.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any character other than 0 or 1.\nThe function\
    \ should return an error if the binary number contains any character other than\
    \ 0 or 1.\nThe function should return an error if the binary number contains any\
    \ character other than 0 or 1.\nThe function should return an error if the binary\
    \ number contains any character other than 0 or 1.\nThe function should return\
    \ an error if the binary number contains any character other than 0 or 1.\nThe\
    \ function should return an error if the binary number contains any character\
    \ other than 0 or 1.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any character other than 0 or 1.\nThe function\
    \ should return an error if the binary number contains any character other than\
    \ 0 or 1.\nThe function should return an error if the binary number contains any\
    \ character other than 0 or 1.\nThe function should return an error if the binary\
    \ number contains any character other than 0 or 1.\nThe function should return\
    \ an error if the binary number contains any character other than 0 or 1.\nThe\
    \ function should return an error if the binary number contains any character\
    \ other than 0 or 1.\nThe function should return an error if the binary number\
    \ contains any character other than 0 or 1.\nThe function should return an error\
    \ if the binary number contains any ", "    if base < 2 || base > 36\n       \
    \ throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    else\n        digits = digits(x)\n        digits\
    \ = digits[digits.length - base]\n        digits = digits[digits.length - base]\n\
    \        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base^digits(x))\nend", "    if base < 10 \n        error(\"base must be greater\
    \ than 10\")\n    elseif base == 10 \n        return toString(x)\n    elseif base\
    \ == 2 \n        return toString(x * 10)\n    elseif base == 3 \n        return\
    \ toString(x * 100)\n    elseif base == 4 \n        return toString(x * 1000)\n\
    \    elseif base == 5 \n        return toString(x * 10000)\n    elseif base ==\
    \ 6 \n        return toString(x * 100000)\n    elseif base == 7 \n        return\
    \ toString(x * 1000000)\n    elseif base == 8 \n        return toString(x * 10000000)\n\
    \    elseif base == 9 \n        return toString(x * 100000000)\n    elseif base\
    \ == 10 \n        return toString(x * 1000000000)\n    elseif base == 11 \n  \
    \      return toString(x * 10000000000)\n    elseif base == 12 \n        return\
    \ toString(x * 100000000000)\n    elseif base == 13 \n        return toString(x\
    \ * 1000000000000)\n    elseif base == 14 \n        return toString(x * 10000000000000)\n\
    \    elseif base == 15 \n        return toString(x * 100000000000000)\n    elseif\
    \ base == 16 \n        return toString(x * 1000000000000000)\n    elseif base\
    \ == 17 \n        return toString(x * 10000000000000000)\n    elseif base == 18\
    \ \n        return toString(x * 100000000000000000)\n    elseif base == 19 \n\
    \        return toString(x * 1000000000000000000)\n    elseif base == 20 \n  \
    \      return toString(x * 10000000000000000000)\n    elseif base == 21 \n   \
    \     return toString(x * 100000000000000000000)\n    elseif base == 22 \n   \
    \     return toString(x * 1000000000000000000000)\n    elseif base == 23 \n  \
    \      return toString(x * 10000000000000000000000)\n    elseif base == 24 \n\
    \        return toString(x * 100000000000000000000000)\n    elseif base == 25\
    \ \n        return toString(x * 1000000000000000000000000)\n    elseif base ==\
    \ 26 \n        return toString(x * 10000000000000000000000000)\n    elseif base\
    \ == 27 \n        return toString(x * 100000000000000000000000000)\n    elseif\
    \ base == 28 \n        return toString(x * 1000000000000000000000000000)\n   \
    \ elseif base == 29 \n        return toString(x * 10000000000000000000000000000)\n\
    \    elseif base == 30 \n        return toString(x * 100000000000000000000000000000)\n\
    \    elseif base == 31 \n        return toString(x * 1000000000000000000000000000000)\n\
    \    elseif base == 32 \n        return toString(x * 10000000000000000000000000000000)\n\
    \    elseif base == 33 \n        return toString(x * 100000000000000000000000000000000)\n\
    \    elseif base == 34 \n        return toString(x * 1000000000000000000000000000000000)\n\
    \    elseif base == 35 \n        return toString(x * 10000000000000000000000000000000000)\n",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    else\n        return toString(div(x, base))\nend\n</cell>\n\
    <text>\nExercise: Write a function that converts a number from base 10 to base\
    \ 2.\nThe function should throw an error if the base is not between 2 and 10.\n\
    The function should return the string representation of the number in base 2.\n\
    The function should work for any base between 2 and 10.\nThe function should work\
    \ for negative numbers.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    digits = digits(x)\n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    digits = digits[digits.length - base]\n    \n    digits = digits[digits.length\
    \ - base]\n    \n    digits = digits[digits.length - base]\n    \n    digits =\
    \ digits[digits.length - base]\n    \n    digits = digits[digits.length - base]\n\
    \    \n    ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base\
    \ must be between 2 and 36\"))\n    \n    if base == 2\n        return string(x)\n\
    \    \n    digits = string(x)\n    digits = digits[2:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length / base:end]\n\
    \    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n \
    \   digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digits = digits[2:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ / base:end]\n    digits = digits[digits.length % base:end]\n    digit", "  \
    \  if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x, base)\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x % base)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string with leading zeros.\nThe function should take one argument,\
    \ x, and return a string.\nThe function should return \"0\" if x is less than\
    \ 10, \"00\" if x is less than 100, etc.\nThe function should return \"x\" if\
    \ x is greater than 100.\nThe function should return \"x\" if x is greater than\
    \ 1000.\nThe function should return \"0\" if x is greater than 1000.\nThe function\
    \ should return \"x\" if x is greater than 10000.\nThe function should return\
    \ \"0\" if x is greater than 10000.\nThe function should return \"x\" if x is\
    \ greater than 100000.\nThe function should return \"0\" if x is greater than\
    \ 100000.\nThe function should return \"x\" if x is greater than 1000000.\nThe\
    \ function should return \"0\" if x is greater than 1000000.\nThe function should\
    \ return \"x\" if x is greater than 10000000.\nThe function should return \"0\"\
    \ if x is greater than 10000000.\nThe function should return \"x\" if x is greater\
    \ than 100000000.\nThe function should return \"0\" if x is greater than 100000000.\n\
    The function should return \"x\" if x is greater than 1000000000.\nThe function\
    \ should return \"0\" if x is greater than 1000000000.\nThe function should return\
    \ \"x\" if x is greater than 10000000000.\nThe function should return \"0\" if\
    \ x is greater than 10000000000.\nThe function should return \"x\" if x is greater\
    \ than 100000000000.\nThe function should return \"0\" if x is greater than 100000000000.\n\
    The function should return \"x\" if x is greater than 1000000000000.\nThe function\
    \ should return \"0\" if x is greater than 1000000000000.\nThe function should\
    \ return \"x\" if x is greater than 10000000000000.\nThe function should return\
    \ \"0\" if x is greater than 10000000000000.\nThe function should return \"x\"\
    \ if x is greater than 100000000000000.\nThe function should return \"0\" if x\
    \ is greater than 100000000000000.\nThe function should return \"x\" if x is greater\
    \ than 1000000000000000.\nThe function should return \"0\" if x is greater than\
    \ 1000000000000000.\nThe function should return \"x\" if x is greater than 10000000000000000.\n\
    The function should return \"0\" if x is greater than 10000000000000000.\nThe\
    \ function should return \"x\" if x is greater than 100000000000000000.\nThe function\
    \ should return \"0\" if x is greater than 100000000000000000.\nThe function ",
  "    if base == 10 \n        return toString(x)\n    \n    digits = toString(x)\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits[0 : digits.length - digits.length % base.length]\n    digits\
    \ = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length]\n    digits = digits[0\
    \ : digits.length - base.length]\n    digits = digits[digits.length - base.length\
    \ : digits.length]\n    digits = digits[0 : digits.length - base.length]\n   \
    \ digits = digits[digits.length - base.length : digits.length", "    if base <\
    \ 10\n        return str(x)\n    else\n        return change_base(x % base, base\
    \ * 10)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise\nWrite a function that converts a\
    \ number from base 10 to base 16. \nThe function should accept two arguments:\
    \ the first is the number to be converted, and the second is the base of the number.",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 3\n        return string(x, \"b\")\n    elseif base == 4\n        return\
    \ string(x, \"o\")\n    elseif base == 5\n        return string(x, \"x\")\n  \
    \  elseif base == 6\n        return string(x, \"i\")\n    elseif base == 7\n \
    \       return string(x, \"u\")\n    elseif base == 8\n        return string(x,\
    \ \"iu\")\n    elseif base == 9\n        return string(x, \"iux\")\n    elseif\
    \ base == 10\n        return string(x, \"iuxb\")\n    elseif base == 11\n    \
    \    return string(x, \"iuxob\")\n    elseif base == 12\n        return string(x,\
    \ \"iuxob\")\n    elseif base == 13\n        return string(x, \"iuxob\")\n   \
    \ elseif base == 14\n        return string(x, \"iuxob\")\n    elseif base == 15\n\
    \        return string(x, \"iuxob\")\n    elseif base == 16\n        return string(x,\
    \ \"iuxob\")\n    elseif base == 17\n        return string(x, \"iuxob\")\n   \
    \ elseif base == 18\n        return string(x, \"iuxob\")\n    elseif base == 19\n\
    \        return string(x, \"iuxob\")\n    elseif base == 20\n        return string(x,\
    \ \"iuxob\")\n    elseif base == 21\n        return string(x, \"iuxob\")\n   \
    \ elseif base == 22\n        return string(x, \"iuxob\")\n    elseif base == 23\n\
    \        return string(x, \"iuxob\")\n    elseif base == 24\n        return string(x,\
    \ \"iuxob\")\n    elseif base == 25\n        return string(x, \"iuxob\")\n   \
    \ elseif base == 26\n        return string(x, \"iuxob\")\n    elseif base == 27\n\
    \        return string(x, \"iuxob\")\n    elseif base == 28\n        return string(x,\
    \ \"iuxob\")\n    elseif base == 29\n        return string(x, \"iuxob\")\n   \
    \ elseif base == 30\n        return string(x, \"iuxob\")\n    elseif base == 31\n\
    \        return string(x, \"iuxob\")\n    elseif base == 32\n        return string(x,\
    \ \"iuxob\")\n    elseif base == 33\n        return string(x, \"iuxob\")\n   \
    \ elseif base == 34", "    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    end\n    if base == 10\n        return toString(x)\n\
    \    \n    digits = toString(x)\n    digits = digits[2:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[digits.length - digits.length % base:end]\n    digits = digits[digits.length\
    \ - digits.length % base:end]\n    digits = digits[digits.length - digits.length\
    \ % base:end]\n    digits = digits[digits.length - digits.length % base:end]\n\
    \    digits = digits[", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = digit", "    if\
    \ base < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2\
    \ and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n     \
    \   return string(x * base^2)\nend", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        ", "    if base < 10\n        return show(base * x)\n    else\n     \
    \   return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string containing only 0s and 1s.\n\
    The output is a decimal number.\nThe function should raise an error if the input\
    \ is not binary.\nThe function should raise an error if the input contains more\
    \ than two digits.\nThe function should raise an error if the input contains leading\
    \ zeros.\nThe function should raise an error if the input contains trailing zeros.\n\
    The function should raise an error if the input contains leading or trailing zeros.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary digits.\n\
    The function should raise an error if the input contains non-decimal digits.\n\
    The function should raise an error if the input contains non-binary ", "    if\
    \ base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x / 10)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that converts\
    \ a number to a binary string. \nThe function should take one argument, x, and\
    \ return a string representation of x.\nThe function should return a string representation\
    \ of x with leading zeros removed.\nThe function should return an error if x is\
    \ less than 0.\nThe function should return an error if x is greater than or equal\
    \ to 2.\nThe function should return an error if x is less than 10.\nThe function\
    \ should return an error if x is greater than or equal to 10.\nThe function should\
    \ return an error if x is less than or equal to 16.\nThe function should return\
    \ an error if x is greater than or equal to 16.\nThe function should return an\
    \ error if x is less than or equal to 32.\nThe function should return an error\
    \ if x is greater than or equal to 32.\nThe function should return an error if\
    \ x is less than or equal to 64.\nThe function should return an error if x is\
    \ greater than or equal to 64.\nThe function should return an error if x is less\
    \ than or equal to 128.\nThe function should return an error if x is greater than\
    \ or equal to 128.\nThe function should return an error if x is less than or equal\
    \ to 256.\nThe function should return an error if x is greater than or equal to\
    \ 256.\nThe function should return an error if x is less than or equal to 512.\n\
    The function should return an error if x is greater than or equal to 512.\nThe\
    \ function should return an error if x is less than or equal to 1024.\nThe function\
    \ should return an error if x is greater than or equal to 1024.\nThe function\
    \ should return an error if x is less than or equal to 2048.\nThe function should\
    \ return an error if x is greater than or equal to 2048.\nThe function should\
    \ return an error if x is less than or equal to 4096.\nThe function should return\
    \ an error if x is greater than or equal to 4096.\nThe function should return\
    \ an error if x is less than or equal to 8192.\nThe function should return an\
    \ error if x is greater than or equal to 8192.\nThe function should return an\
    \ error if x is less than or equal to 16384.\nThe function should return an error\
    \ if x is greater than or equal to 16384.\nThe function should return an error\
    \ if x is less than or equal to 32768.\nThe function should return an error if\
    \ x is greater than or equal to 32768.\nThe function should return an error if\
    \ x is less than or equal to 65536.\nThe function should return an error if x\
    \ is greater than or equal to 65536.\nThe function should return an error if x\
    \ is less than or equal to 131072.\nThe function should return an error if x is\
    \ greater than or equal to 131072.\nThe function ", "    if base == 10 \n    \
    \    digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    \n    digits = digits[base:end]\n    \n    return digits[x]\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a number from one base to another.",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base^digits(x))\nend", "    if base < 2 || base > 36\n \
    \       throw(ArgumentError(\"Invalid base\"))\n    elseif base == 10\n      \
    \  return toString(x)\n    else\n        return toString(toInt(x)/toInt(base)*toInt(base))\n\
    end\n</cell>\n<code language=julia-1.3>", "    if base < 2 || base > 10 \n   \
    \     throw(ArgumentError(\"base must be between 2 and 10\"))\n    elseif base\
    \ == 2 \n        return string(x::Int64)\n    elseif base == 10 \n        return\
    \ string(x::Int64, \"0\")\n    elseif base == 3 \n        return string(x::Int64,\
    \ \"000\")\n    elseif base == 4 \n        return string(x::Int64, \"0000\")\n\
    \    elseif base == 5 \n        return string(x::Int64, \"00000\")\n    elseif\
    \ base == 6 \n        return string(x::Int64, \"000000\")\n    elseif base ==\
    \ 7 \n        return string(x::Int64, \"0000000\")\n    elseif base == 8 \n  \
    \      return string(x::Int64, \"00000000\")\n    elseif base == 9 \n        return\
    \ string(x::Int64, \"000000000\")\n    elseif base == 10 \n        return string(x::Int64,\
    \ \"0000000000\")\n    elseif base == 11 \n        return string(x::Int64, \"\
    00000000000\")\n    elseif base == 12 \n        return string(x::Int64, \"000000000000\"\
    )\n    elseif base == 13 \n        return string(x::Int64, \"0000000000000\")\n\
    \    elseif base == 14 \n        return string(x::Int64, \"00000000000000\")\n\
    \    elseif base == 15 \n        return string(x::Int64, \"000000000000000\")\n\
    \    elseif base == 16 \n        return string(x::Int64, \"0000000000000000\"\
    )\n    elseif base == 17 \n        return string(x::Int64, \"00000000000000000\"\
    )\n    elseif base == 18 \n        return string(x::Int64, \"000000000000000000\"\
    )\n    elseif base == 19 \n        return string(x::Int64, \"0000000000000000000\"\
    )\n    elseif base == 20 \n        return string(x::Int64, \"00000000000000000000\"\
    )\n    elseif base == 21 \n        return string(x::Int64, \"000000000000000000000\"\
    )\n    elseif base == 22 \n        return string(x::Int64, \"0000000000000000000000\"\
    )\n    elseif base == 23 \n        return string(x::Int64, \"00000000000000000000000\"\
    )\n    elseif base == 24 \n        return string(x::Int64, \"000000000000000000000000\"\
    )\n    elseif base == 25 \n        return string(x::Int64, \"0000000000000000000000000\"\
    )\n    elseif base == 26 \n        return string(x::Int64, \"00000000000000000000000000\"\
    )\n    elseif base == 27 \n        return string(x::Int64, \"000000000000000000000000000\"\
    )\n    elseif base == 28 \n        return string(x::Int64, \"0000000000000000000000000000\"\
    )\n    elseif base == 29 \n        return string(x::Int64, \"00000000000000000000000000000\"\
    )\n    elseif base == 30 \n        return string(x", "    if base < 10\n     \
    \   return show(base * x)\n    else\n        return show(base * x / 10)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts binary numbers to decimal numbers.",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x/base^base, base = base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts binary to decimal.\nThe input\
    \ is a binary string and output is the decimal number.\nThe input can have up\
    \ to 32 bits.\nThe input string can have leading zeros.\nThe input string can\
    \ have trailing zeros.\nThe input string can have leading or trailing zeros.\n\
    The input string can have leading spaces.\nThe input string can have trailing\
    \ spaces.\nThe input string can have leading or trailing spaces.\nThe input string\
    \ can have leading or trailing zeros.\nThe input string can have leading or trailing\
    \ spaces.\nThe input string can have leading or trailing zeros.\nThe input string\
    \ can have leading or trailing spaces.\nThe input string can have leading or trailing\
    \ zeros.\nThe input string can have leading or trailing spaces.\nThe input string\
    \ can have leading or trailing zeros.\nThe input string can have leading or trailing\
    \ spaces.\nThe input string can have leading or trailing zeros.\nThe input string\
    \ can have leading or trailing spaces.\nThe input string can have leading or trailing\
    \ zeros.\nThe input string can have leading or trailing spaces.\nThe input string\
    \ can have leading or trailing zeros.\nThe input string can have leading or trailing\
    \ spaces.\nThe input string can have leading or trailing zeros.\nThe input string\
    \ can have leading or trailing spaces.\nThe input string can have leading or trailing\
    \ zeros.\nThe input string can have leading or trailing spaces.\nThe input string\
    \ can have leading or trailing zeros.\nThe input string can have leading or trailing\
    \ spaces.\nThe input string can have leading or trailing zeros.\nThe input string\
    \ can have leading or trailing spaces.\nThe input string can have leading or trailing\
    \ zeros.\nThe input string can have leading or trailing spaces.\nThe input string\
    \ can have leading or trailing zeros.\nThe input string can have leading or trailing\
    \ spaces.\nThe input string can have leading or trailing zeros.\nThe input string\
    \ can have leading or trailing spaces.\nThe input string can have leading or trailing\
    \ zeros.\nThe input string can have leading or trailing spaces.\nThe input string\
    \ can have leading or trailing zeros.", "    if base < 2 || base > 36\n      \
    \  throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    else\n        return string(x*base^digits(x))\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)::Int64",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x, base)\nend", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a string to a number.\nThe string can contain any characters,\
    \ including spaces.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-numeric characters.\nThe function should return an error if the string contains\
    \ non-", "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must\
    \ be between 2 and 10\"))\n    \n    digits = digits(x)\n    digits = digits[digits.length\
    \ - digits.length % base.length : digits.length]\n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n    digits = digits[digits.length - digits.length\
    \ % base.length : digits.length]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base.length", "    if base < 2 || base > 36\n        error(\"\
    Base must be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base\
    \ == 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n      \
    \  return string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x\
    \ * 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 1000000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base ", "    if base == 10 \n        then return\
    \ toString(x)\n        else return change_base(x / base, base) + toString(x%base)\n\
    \    else return change_base(x / base, base) + toString(x%base)\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string that consists of 0s and 1s.\nThe output is a string that\
    \ consists of decimal numbers.\nThe input string may contain leading zeros.\n\
    The output string may contain leading zeros.\nThe input string may contain trailing\
    \ zeros.\nThe output string may contain trailing zeros.\nThe input string may\
    \ contain leading spaces.\nThe output string may contain leading spaces.\nThe\
    \ input string may contain trailing spaces.\nThe output string may contain trailing\
    \ spaces.\nThe input string may contain leading plus signs.\nThe output string\
    \ may contain leading plus signs.\nThe input string may contain trailing plus\
    \ signs.\nThe output string may contain trailing plus signs.\nThe input string\
    \ may contain leading minus signs.\nThe output string may contain leading minus\
    \ signs.\nThe input string may contain trailing minus signs.\nThe output string\
    \ may contain trailing minus signs.\nThe input string may contain leading decimal\
    \ points.\nThe output string may contain leading decimal points.\nThe input string\
    \ may contain trailing decimal points.\nThe output string may contain trailing\
    \ decimal points.\nThe input string may contain leading zeros.\nThe output string\
    \ may contain leading zeros.\nThe input string may contain trailing zeros.\nThe\
    \ output string may contain trailing zeros.\nThe input string may contain leading\
    \ spaces.\nThe output string may contain leading spaces.\nThe input string may\
    \ contain trailing spaces.\nThe output string may contain trailing spaces.\nThe\
    \ input string may contain leading plus signs.\nThe output string may contain\
    \ leading plus signs.\nThe input string may contain trailing plus signs.\nThe\
    \ output string may contain trailing plus signs.\nThe input string may contain\
    \ leading minus signs.\nThe output string may contain leading minus signs.\nThe\
    \ input string may contain trailing minus signs.\nThe output string may contain\
    \ trailing minus signs.\nThe input string may contain leading decimal points.\n\
    The output string may contain leading decimal points.\nThe input string may contain\
    \ trailing decimal points.\nThe output string may contain trailing decimal points.\n",
  "    if base == 10 \n        return \"{:0>10}\".format(x)\n    else \n        return\
    \ \"{:0>{base}b}\".format(x,base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise: Write a function that converts a\
    \ number from base 10 to any base from 2 to 36. \nThe function should take two\
    \ arguments: x is the number to be converted, and base is the base of the number\
    \ to be converted.\nThe function should return the converted number as a string.\n\
    The function should raise an error if the base is not in the range 2 to 36.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is zero.\nThe function should raise an error if the number is infinity.\nThe\
    \ function should raise an error if the number is NaN.\nThe function should raise\
    \ an error if the number is infinite.\nThe function should raise an error if the\
    \ number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\n", "    if base == 10 \n        digits = \"0123456789\"\
    \n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    digits\
    \ = digits[base:end]\n    return digits[(x-1):end]\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to its decimal representation.\
    \ \nThe function should take one argument, x, and return a string.\nThe function\
    \ should return the decimal representation of the binary number in string format.\n\
    The function should raise an error if the argument is not binary.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length 2.\nThe function should raise an error if the\
    \ argument is not of length 2.\nThe function should raise an error if the argument\
    \ is not of length 2.\nThe function should raise an error if the argument is not\
    \ of length 2.\nThe function should raise an error if the argument is not of length\
    \ 2.\nThe function should raise an error if the argument is not of length 2.\n\
    The function should raise an error if the argument is not of length 2.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length 2.\nThe function should raise an error if the\
    \ argument is not of length 2.\nThe function should raise an error if the argument\
    \ is not of length 2.\nThe function should raise an error if the argument is not\
    \ of length 2.\nThe function should raise an error if the argument is not of length\
    \ 2.\nThe function should raise an error if the argument is not of length 2.\n\
    The function should raise an error if the argument is not of length 2.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length 2.\nThe function should raise an error if the\
    \ argument is not of length 2.\nThe function should raise an error if the argument\
    \ is not of length 2.\nThe function should raise an error if the argument is not\
    \ of length 2.\nThe function should raise an error if the argument is not of length\
    \ 2.\nThe function should raise an error if the argument is not of length 2.\n\
    The function should raise an error if the argument is not of length 2.\nThe function\
    \ should raise an error if the argument is not of length 2.\nThe function should\
    \ raise an error if the argument is not of length 2.\nThe function should raise\
    \ an error if the argument is not of length 2.\nThe function should raise an error\
    \ if the argument is not of length ", "    if base < 10\n        return show(base\
    \ * x)\n    else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.3>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
