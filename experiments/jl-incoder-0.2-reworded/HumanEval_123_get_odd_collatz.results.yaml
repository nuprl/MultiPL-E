language: jl
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n    \n   \
    \ return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_f2yamql.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_f2yamql.jl:1\n\
    in expression starting at /tmp/tmp_f2yamql.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 1\
    \ ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 ==\
    \ 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2\
    \ == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n\
    \ % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+=\
    \ n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 1 ? 1 : 3\n    odd_collatz .+= n % 2 == \nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqoyyajif.jl:1\nin expression starting at /tmp/tmpqoyyajif.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        [1]\n    else\n        odd_collatz(n - 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the sum of the even numbers from 1 to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwm765n1.jl:26\nin expression starting at\
    \ /tmp/tmpnwm765n1.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.0>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps it takes to reach 1 from n.\nusing Test\n\n@testset begin\n\n\
    candidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6ple_w_.jl:26\nin expression starting at\
    \ /tmp/tmpb6ple_w_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hn9l8be.jl:27\nin expression starting at\
    \ /tmp/tmp0hn9l8be.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n*3+1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64ogrw5l.jl:28\nin expression starting at\
    \ /tmp/tmp64ogrw5l.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/53]\n\
    \    odd_collatz .+= [n/63]\n    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/91]\n\
    \    odd_collatz .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+=\
    \ [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz .+= [n/225]\n    odd_collatz\
    \ .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz .+= [n/361]\n    odd_collatz\
    \ .+= [n/451]\n    odd_collatz .+= [n/559]\n    odd_collatz .+= [n/663]\n    odd_collatz\
    \ .+= [n/783]\n    odd_collatz .+= [n/919]\n    odd_collatz .+= [n/1097]\n   \
    \ odd_collatz .+= [n/1237]\n    odd_collatz .+= [n/1397]\n    odd_collatz .+=\
    \ [n/1637]\n    odd_collatz .+= [n/1937]\n    odd_collatz .+= [n/2237]\n    odd_collatz\
    \ .+= [n/2537]\n    odd_collatz .+= [n/2897]\n    odd_collatz .+= [n/3617]\n \
    \   od\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x2o_q0e.jl:1\nin expression starting at /tmp/tmp3x2o_q0e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpmqut1x1j.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqut1x1j.jl:23\n\
    in expression starting at /tmp/tmpmqut1x1j.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4y2zkrx.jl:26\nin expression starting at\
    \ /tmp/tmpe4y2zkrx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_28a0qey.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_28a0qey.jl:1\n\
    in expression starting at /tmp/tmp_28a0qey.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7r60x3u.jl:26\nin expression starting at\
    \ /tmp/tmpj7r60x3u.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qknu5__.jl:26\nin expression starting at\
    \ /tmp/tmp8qknu5__.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        [1]\n    else\n        odd_collatz(n - 1) + [n % 2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return a sorted vector that has the even numbers in collatz sequence.\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp919cmlko.jl:26\nin expression starting at\
    \ /tmp/tmp919cmlko.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums[1]\
    \ = 1\n    odd_nums[2] = 1\n    odd_nums[3] = 2\n    odd_nums[4] = 3\n    odd_nums[5]\
    \ = 5\n    odd_nums[6] = 8\n    odd_nums[7] = 13\n    odd_nums[8] = 21\n    odd_nums[9]\
    \ = 34\n    odd_nums[10] = 55\n    odd_nums[11] = 89\n    odd_nums[12] = 144\n\
    \    odd_nums[13] = 233\n    odd_nums[14] = 377\n    odd_nums[15] = 610\n    odd_nums[16]\
    \ = 987\n    odd_nums[17] = 1597\n    odd_nums[18] = 2584\n    odd_nums[19] =\
    \ 4181\n    odd_nums[20] = 6765\n    odd_nums[21] = 10946\n    odd_nums[22] =\
    \ 17711\n    odd_nums[23] = 28657\n    odd_nums[24] = 46368\n    odd_nums[25]\
    \ = 75025\n    odd_nums[26] = 121393\n    odd_nums[27] = 196418\n    odd_nums[28]\
    \ = 317811\n    odd_nums[29] = 514229\n    odd_nums[30] = 832040\n    odd_nums[31]\
    \ = 1346269\n    odd_nums[32] = 2178309\n    odd_nums[33] = 3424578\n    odd_nums[34]\
    \ = 5529536\n    odd_nums[35] = 8912896\n    odd_nums[36] = 14397219\n    odd_nums[37]\
    \ = 24593840\n    odd_nums[38] = 39088169\n    odd_nums[39] = 56085571\n    odd_nums[40]\
    \ = 80651551\n    odd_nums[41] = 130496954\n    odd_nums[42] = 211995232\n   \
    \ odd_nums[43] = 345222688\n    odd_nums[44] = 570288728\n    odd_nums[45] = 923873273\n\
    \    odd_nums[46] = 1493035648\n    odd_nums[47] = 2412728124\n    odd_nums[48\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y6wmrps.jl:1\nin expression starting at /tmp/tmp9y6wmrps.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1bos73e.jl:26\nin expression starting at\
    \ /tmp/tmph1bos73e.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_nums = get_odd_collatz(n-1)\n    odd_nums\
    \ = [odd_nums[i] + 1 for i in 1:length(odd_nums)]\n    odd_nums = odd_nums[2:end]\n\
    \    return odd_nums\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8zqddxs.jl:27\nin expression starting at\
    \ /tmp/tmpj8zqddxs.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n * 2 if n % 2 == 0 else n * 3 + 1 ]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpnrjqa7mw.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnrjqa7mw.jl:23\n\
    in expression starting at /tmp/tmpnrjqa7mw.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return\
    \ odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnvla3t9b.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnvla3t9b.jl:1\n\
    in expression starting at /tmp/tmpnvla3t9b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tk6ppvr.jl:27\nin expression starting at\
    \ /tmp/tmp0tk6ppvr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n * 2 if n % 2 == 0 else n * 3]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp2jma37ln.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2jma37ln.jl:23\n\
    in expression starting at /tmp/tmp2jma37ln.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxena81bx.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxena81bx.jl:1\n\
    in expression starting at /tmp/tmpxena81bx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n % 2 == 0 ? 1 : 3 * odd_collatz[end-1] + 1]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of steps it takes to reach 1 from $n$. For example, get_steps(3) should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t\
    @test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfo63etp6.jl:26\nin expression starting at\
    \ /tmp/tmpfo63etp6.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3\n    \n    return odd_collatz\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppshx1hjf.jl:1\nin expression starting at /tmp/tmppshx1hjf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz = [odd_collatz[1], 3*odd_collatz[1]+1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given positive integer\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w7r1zft.jl:26\nin expression starting at\
    \ /tmp/tmp1w7r1zft.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of even numbers in a given\
    \ vector. For example, get_even_count([1,2,3,4,5]) should return 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1ev76t_.jl:26\nin expression starting at\
    \ /tmp/tmpi1ev76t_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/3]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/2]\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/\nusing Test\n\n@testset begin\n\
    \ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60ekz5af.jl:1\nin expression starting at /tmp/tmp60ekz5af.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n \
    \       return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwtlrorh2.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwtlrorh2.jl:1\n\
    in expression starting at /tmp/tmpwtlrorh2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nget_odd_collatz(10)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the factorial of a given positive integer n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkv_gds0t.jl:25\nin expression starting at\
    \ /tmp/tmpkv_gds0t.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj_mk0v2.jl:26\nin expression starting at\
    \ /tmp/tmpmj_mk0v2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz .+= [n]\n    else \n   \
    \     odd_collatz .+= [n * 3]\n    end\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbfbmr9c.jl:33\nin expression starting at\
    \ /tmp/tmptbfbmr9c.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * (3 + (n % 2))\n    \n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhau0yyy.jl:1\nin expression starting at /tmp/tmpfhau0yyy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the nth number in the\
    \ Fibonacci sequence. \nFor example, get_fibonacci(3) should return 5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcyiimqo0.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcyiimqo0.jl:23\n\
    in expression starting at /tmp/tmpcyiimqo0.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz += [n/2]\n        return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_ubqaqn.jl:27\nin expression starting at\
    \ /tmp/tmpg_ubqaqn.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@time get_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the Collatz sequence\
    \ starting from n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6kpcr6_.jl:27\nin expression starting at\
    \ /tmp/tmpf6kpcr6_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjz_3hh9.jl:25\nin expression starting at\
    \ /tmp/tmpbjz_3hh9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiue9izox.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiue9izox.jl:1\n\
    in expression starting at /tmp/tmpiue9izox.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer n and returns\
    \ the number of steps it takes to reach 1 from n.\nusing Test\n\n@testset begin\n\
    \ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpht6hus_b.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpht6hus_b.jl:23\n\
    in expression starting at /tmp/tmpht6hus_b.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n]\n        return odd_collatz\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2n6juugc.jl:28\nin expression starting at\
    \ /tmp/tmp2n6juugc.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwk1m06p.jl:26\nin expression starting at\
    \ /tmp/tmpgwk1m06p.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer n and returns the number of steps\
    \ it takes to reach 1 from n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcg7uido.jl:27\nin expression starting at\
    \ /tmp/tmpjcg7uido.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz .+= [n]\n        return\
    \ odd_collatz\n    \n    odd_collatz .+= [n * 3]\n    return odd_collatz\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwroxvt0x.jl:1\nin expression starting at /tmp/tmpwroxvt0x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 3 + 1]\n    if n % 2 == 1 \n        odd_collatz .= [n\
    \ + 1]\n    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpol4ng02c.jl:29\nin expression starting at\
    \ /tmp/tmpol4ng02c.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * odd_collatz[end] + 1]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnonok5ey.jl:26\nin expression starting at\
    \ /tmp/tmpnonok5ey.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes in a list of numbers and\
    \ returns the number of even numbers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9aff03a7.jl:26\nin expression starting at\
    \ /tmp/tmp9aff03a7.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz = [odd_collatz[i] + 1 for i in 1:length(odd_collatz)]\n \
    \       return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuh0mx0b.jl:28\nin expression starting at\
    \ /tmp/tmpeuh0mx0b.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        return odd_collatz\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwrog73i_.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwrog73i_.jl:1\n\
    in expression starting at /tmp/tmpwrog73i_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz += [n]\n    else \n    \
    \    odd_collatz += [n] * 3 + 1\n    end\n    \n    return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfa52slsm.jl:33\nin expression starting at\
    \ /tmp/tmpfa52slsm.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of steps it takes to reach 1 from n.\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mttzjfo.jl:27\nin expression starting at\
    \ /tmp/tmp7mttzjfo.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + 1]\n        if n % 2 == 1 \n         \
    \   odd_collatz .= [n + 1]\n        end\n        return odd_collatz\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g3dn5_2.jl:31\nin expression starting at\
    \ /tmp/tmp5g3dn5_2.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n / 2]\n    if n % 2 == 1 \n        odd_collatz += [3]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqo8glgi.jl:29\nin expression starting at\
    \ /tmp/tmplqo8glgi.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp346gl7xu.jl:27\nin expression starting at\
    \ /tmp/tmp346gl7xu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0\
    \ ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 ==\
    \ 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2\
    \ == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n\
    \ % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+=\
    \ n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz\
    \ .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == \nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8uz7hirc.jl:1\nin expression starting at /tmp/tmp8uz7hirc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the nth Fibonacci number.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb61wu7f.jl:25\nin expression starting at\
    \ /tmp/tmpxb61wu7f.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 1 ? 1 :\
    \ 3\n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3k2ncqru.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3k2ncqru.jl:1\n\
    in expression starting at /tmp/tmp3k2ncqru.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    if n % 2 == 1 \n        odd_collatz .+= [n*3]\n\
    \    odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr0g5rcn.jl:28\nin expression starting at\
    \ /tmp/tmpyr0g5rcn.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp3fn2bgpf.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fn2bgpf.jl:23\n\
    in expression starting at /tmp/tmp3fn2bgpf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n / 2]\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n\
    \    end\n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp61x8li3k.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp61x8li3k.jl:1\n\
    in expression starting at /tmp/tmp61x8li3k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for n in odd_collatz]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given positive integer. \nFor example, factorial(5) returns 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpsr30luv5.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsr30luv5.jl:24\n\
    in expression starting at /tmp/tmpsr30luv5.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        [1]\n    else\n        odd_collatz(n - 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyytd004.jl:26\nin expression starting at\
    \ /tmp/tmpwyytd004.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp73fg0ygn.jl:24 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp73fg0ygn.jl:24\n\
    in expression starting at /tmp/tmp73fg0ygn.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.append(1)\n\
    \    odd_nums.append(n)\n    odd_nums = odd_nums[2:end]\n    return odd_nums\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76xpd_0c.jl:28\nin expression starting at\
    \ /tmp/tmp76xpd_0c.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    \n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpjz_ecb_y.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjz_ecb_y.jl:24\n\
    in expression starting at /tmp/tmpjz_ecb_y.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44wi00ld.jl:27\nin expression starting at\
    \ /tmp/tmp44wi00ld.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/191]\n    odd_collatz\
    \ .+= [n/223]\n    odd_collatz .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz\
    \ .+= [n/331]\n    odd_collatz .+= [n/377]\n    odd_collatz .+= [n/425]\n    odd_collatz\
    \ .+= [n/479]\n    odd_collatz .+= [n/531]\n    odd_collatz .+= [n/593]\n    odd_collatz\
    \ .+= [n/653]\n    odd_collatz .+= [n/711]\n    odd_collatz .+= [n/769]\n    odd_collatz\
    \ .+= [n/823]\n    odd_collatz .+= [n/883]\n    odd_collatz .+= [n/937]\n    odd_collatz\
    \ .+= [n/991]\n    odd_collatz .+= [n/1059]\n    odd_collat\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9ohwoav.jl:1\nin expression starting at /tmp/tmpk9ohwoav.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz += [n/2]\n        return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_ubqaqn.jl:27\nin expression starting at\
    \ /tmp/tmpg_ubqaqn.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/53]\n\
    \    odd_collatz .+= [n/63]\n    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/91]\n\
    \    odd_collatz .+= [n/107]\n    odd_collatz .+= [n/131]\n    odd_collatz .+=\
    \ [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz .+= [n/229]\n    odd_collatz\
    \ .+= [n/253]\n    odd_collatz .+= [n/289]\n    odd_collatz .+= [n/331]\n    odd_collatz\
    \ .+= [n/377]\n    odd_collatz .+= [n/539]\n    odd_collatz .+= [n/647]\n    odd_collatz\
    \ .+= [n/711]\n    odd_collatz .+= [n/769]\n    odd_collatz .+= [n/823]\n    odd_collatz\
    \ .+= [n/871]\n    odd_collatz .+= [n/937]\n    odd_collatz .+= [n/1013]\n   \
    \ odd_collatz .+= [n/1097]\n    odd_collatz .+= [n/1175]\n    odd_collatz .+=\
    \ [n/1237]\n    odd_collatz .+= [n/1319]\n    odd_collatz .+= [n/1397]\n    odd_\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzprgmutl.jl:1\nin expression starting at /tmp/tmpzprgmutl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf45mbaf0.jl:30\nin expression starting at\
    \ /tmp/tmpf45mbaf0.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the nth Fibonacci number.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1piuf9h7.jl:32\nin expression starting at\
    \ /tmp/tmp1piuf9h7.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_) in\
    \ odd_collatz]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcn8fb3ab.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcn8fb3ab.jl:24\n\
    in expression starting at /tmp/tmpcn8fb3ab.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahj5_pea.jl:25\nin expression starting at\
    \ /tmp/tmpahj5_pea.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    else\n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a positive integer n and returns the Collatz sequence for n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp8cu4riyy.jl:24 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8cu4riyy.jl:24\n\
    in expression starting at /tmp/tmp8cu4riyy.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_,n) in zip(odd_collatz,\
    \ odd_collatz)]\n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0r7gvf_p.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0r7gvf_p.jl:23\n\
    in expression starting at /tmp/tmp0r7gvf_p.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 + (n % 2 == 1)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbmvnmc0.jl:27\nin expression starting at\
    \ /tmp/tmpdbmvnmc0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnb4r994q.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnb4r994q.jl:1\n\
    in expression starting at /tmp/tmpnb4r994q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4v6uf_kn.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4v6uf_kn.jl:1\n\
    in expression starting at /tmp/tmp4v6uf_kn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n / 2]\n        odd_collatz += [n / 2 * 3]\n \
    \       odd_collatz += [n / 2 * 3 + (n % 2 == 0)]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfmwnwki.jl:29\nin expression starting at\
    \ /tmp/tmprfmwnwki.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz\
    \ .+= [n/229]\n    odd_collatz .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz\
    \ .+= [n/303]\n    odd_collatz .+= [n/337]\n    odd_collatz .+= [n/361]\n    odd_collatz\
    \ .+= [n/379]\n    odd_collatz .+= [n/393]\n    odd_collatz .+= [n/419]\n    odd_collatz\
    \ .+= [n/439]\n    odd_collatz .+= [n/463]\n    odd_collatz .+= [n/479]\n    odd_collatz\
    \ .+= [n/499]\n    odd_collatz .+= [n/511]\n    odd_collatz .+= [n/531]\n    odd_collatz\
    \ .+= [n/547]\n    odd_collatz .+= [n/561]\n    odd_collatz .+= [n/587\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ll3terq.jl:1\nin expression starting at /tmp/tmp3ll3terq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n / 2]\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n\
    \    end\n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp61x8li3k.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp61x8li3k.jl:1\n\
    in expression starting at /tmp/tmp61x8li3k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn4z6g7d7.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4z6g7d7.jl:1\n\
    in expression starting at /tmp/tmpn4z6g7d7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[2]*2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert get_odd_collatz(5) == [1, 5]\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the nth Fibonacci number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwt1n0tml.jl:26\nin expression starting at\
    \ /tmp/tmpwt1n0tml.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/113]\n    odd_collatz .+= [n/129]\n    odd_collatz .+= [n/131]\n    odd_collatz\
    \ .+= [n/137]\n    odd_collatz .+= [n/143]\n    odd_collatz .+= [n/149]\n    odd_collatz\
    \ .+= [n/153]\n    odd_collatz .+= [n/157]\n    odd_collatz .+= [n/163]\n    odd_collatz\
    \ .+= [n/169]\n    odd_collatz .+= [n/173]\n    odd_collatz .+= [n/177]\n    odd_collatz\
    \ .+= [n/183]\n    odd_collatz .+= [n/189]\n    odd_collatz .+= [n/193]\n    odd_collatz\
    \ .+= [n/197]\n    odd_collatz .+= [n/203]\n    odd_collatz .+= [n/209]\n    odd_collatz\
    \ .+= [n/213]\n    odd_collatz .+= [n/217]\n    odd_collatz .+= [n/223]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo77ujnmi.jl:1\nin expression starting at /tmp/tmpo77ujnmi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_nums = get_odd_collatz(n-1)\n\
    \    \n    odd_nums = [odd_nums[i] + 1 for i in 1:length(odd_nums)]\n    \n  \
    \  return odd_nums\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the nth\
    \ Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2w592ad.jl:29\nin expression starting at\
    \ /tmp/tmpy2w592ad.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1], odd_collatz[1]\
    \ * 3] + odd_collatz[2:end]\n    \n    return odd_collatz\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\n\
    Exercise 1\nWrite a function that takes in a positive integer n and returns the\
    \ Collatz sequence up to n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecoeyd0e.jl:30\nin expression starting at\
    \ /tmp/tmpecoeyd0e.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[2] * 2 + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfmqzteui.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfmqzteui.jl:1\n\
    in expression starting at /tmp/tmpfmqzteui.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n \
    \   odd_collatz .+= [n/2]\n    odd_collatz .+= [n*3+1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp70ak6bl.jl:27\nin expression starting at\
    \ /tmp/tmpp70ak6bl.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3\n    end\n    \n    return odd_collatz\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpquaqttiu.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpquaqttiu.jl:1\n\
    in expression starting at /tmp/tmpquaqttiu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_) in\
    \ odd_collatz]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcn8fb3ab.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcn8fb3ab.jl:24\n\
    in expression starting at /tmp/tmpcn8fb3ab.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n*3+1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6k9vw9_.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6k9vw9_.jl:1\n\
    in expression starting at /tmp/tmps6k9vw9_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    if n % 2 == 1 \n        odd_collatz .+= [n/2]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0fc3jtn.jl:29\nin expression starting at\
    \ /tmp/tmpm0fc3jtn.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 3 + (n % 2 == 0)]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0nj2k1n.jl:26\nin expression starting at\
    \ /tmp/tmpy0nj2k1n.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1m9qy7m.jl:27\nin expression starting at\
    \ /tmp/tmpe1m9qy7m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        [1]\n    else\n        odd_collatz(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5) == [1, 5]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Collatz sequence for positive\
    \ integer n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t\
    @test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yrmfcyd.jl:26\nin expression starting at\
    \ /tmp/tmp0yrmfcyd.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1], odd_collatz[2]]\n\
    \    \n    odd_collatz = [odd_collatz[1], odd_collatz[2]]\n    \n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenp050gb.jl:32\nin expression starting at\
    \ /tmp/tmpenp050gb.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz += [n/2]\n    if n % 2 == 1 \n        odd_collatz += [n*3]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2fmebrt.jl:29\nin expression starting at\
    \ /tmp/tmpk2fmebrt.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0\
    \ ? 1 : 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhthngtn.jl:28\nin expression starting at\
    \ /tmp/tmplhthngtn.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpk9kiqyew.jl:24 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk9kiqyew.jl:24\n\
    in expression starting at /tmp/tmpk9kiqyew.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * (3 + (n % 2))\n    \n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfg1b1pg9.jl:32\nin expression starting at\
    \ /tmp/tmpfg1b1pg9.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmps4bbx293.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4bbx293.jl:23\n\
    in expression starting at /tmp/tmps4bbx293.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[1] * 3 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy46kag2v.jl:26\nin expression starting at\
    \ /tmp/tmpy46kag2v.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? 1 : 3\n        odd_collatz .+= n\
    \ % 2 == 0 ? 1 : 3\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4j5kt6e.jl:28\nin expression starting at\
    \ /tmp/tmpr4j5kt6e.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return a sorted vector that has the even\
    \ numbers in collatz sequence.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnudparwy.jl:34\nin expression starting at\
    \ /tmp/tmpnudparwy.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.4>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the nth Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkek3hdkt.jl:26\nin expression starting at\
    \ /tmp/tmpkek3hdkt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf45mbaf0.jl:30\nin expression starting at\
    \ /tmp/tmpf45mbaf0.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi36l2xvo.jl:26\nin expression starting at\
    \ /tmp/tmpi36l2xvo.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n / 2]\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnwllrc1.jl:29\nin expression starting at\
    \ /tmp/tmpnnwllrc1.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n * 2 if n % 2 == 0 else n * 3]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpakiufgau.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpakiufgau.jl:23\n\
    in expression starting at /tmp/tmpakiufgau.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 3 + 1]\n    odd_collatz .= odd_collatz[end-1]\n\
    \    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the factorial of a given\
    \ positive integer n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqprj6okc.jl:29\nin expression starting at\
    \ /tmp/tmpqprj6okc.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz += [n/2]\n        return odd_collatz\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmfg_jck_.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmfg_jck_.jl:1\n\
    in expression starting at /tmp/tmpmfg_jck_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[1] * 3 + (n % 2)]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given positive\
    \ integer n.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t\
    @test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscljhck9.jl:26\nin expression starting at\
    \ /tmp/tmpscljhck9.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the Collatz sequence starting from n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrvxqmzt.jl:30\nin expression starting at\
    \ /tmp/tmpbrvxqmzt.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 2 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp8rdzd73i.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8rdzd73i.jl:23\n\
    in expression starting at /tmp/tmp8rdzd73i.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz = [odd_collatz[1], odd_collatz[2]\
    \ * 3]\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given positive integer. \nFor example, factorial(5) returns\
    \ 120.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8c8e5h_p.jl:30\nin expression starting at\
    \ /tmp/tmp8c8e5h_p.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= [n * 3 if n % 2 == 0 else 1]\n        return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the Collatz\
    \ sequence up to and including n.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpu3oy63z0.jl:24 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3oy63z0.jl:24\n\
    in expression starting at /tmp/tmpu3oy63z0.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp346gl7xu.jl:27\nin expression starting at\
    \ /tmp/tmp346gl7xu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46sw9j79.jl:26\nin expression starting at\
    \ /tmp/tmp46sw9j79.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[2] * 2 + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfmqzteui.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfmqzteui.jl:1\n\
    in expression starting at /tmp/tmpfmqzteui.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        return odd_collatz\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph1_5ciz4.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph1_5ciz4.jl:1\n\
    in expression starting at /tmp/tmph1_5ciz4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz = [odd_collatz[i] + (n % 2 == 0 ? 1 : 3) for i in 1:length(odd_collatz)]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a positive\
    \ integer n and returns the number of steps it takes to reach 1 from n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpaqatkx.jl:26\nin expression starting at\
    \ /tmp/tmpwpaqatkx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8dgat7fe.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8dgat7fe.jl:1\n\
    in expression starting at /tmp/tmp8dgat7fe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .= [n/2]\n        odd_collatz .= odd_collatz .+ [n/3]\n \
    \       odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz\
    \ .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .=\
    \ odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz\
    \ .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n     \
    \   odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+\
    \ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz\
    \ .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .=\
    \ odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz\
    \ .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n     \
    \   odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+\
    \ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz\
    \ .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz .=\
    \ odd_collatz .+ [n/3]\n        odd_collatz .= odd_collatz .+ [n/3]\n        odd_collatz\
    \ .= odd_collatz .+ [n/3]\n\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpl7s__9ti.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl7s__9ti.jl:1\n\
    in expression starting at /tmp/tmpl7s__9ti.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn4z6g7d7.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4z6g7d7.jl:1\n\
    in expression starting at /tmp/tmpn4z6g7d7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9knpnnln.jl:27\nin expression starting at\
    \ /tmp/tmp9knpnnln.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7lasthsv.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7lasthsv.jl:23\n\
    in expression starting at /tmp/tmp7lasthsv.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n     \
    \   return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpid5g8yrm.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpid5g8yrm.jl:1\n\
    in expression starting at /tmp/tmpid5g8yrm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3 + 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahj5_pea.jl:25\nin expression starting at\
    \ /tmp/tmpahj5_pea.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n * 2 if n % 2 == 0 else n * 3]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpicposim8.jl:24 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpicposim8.jl:24\n\
    in expression starting at /tmp/tmpicposim8.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ get_odd_collatz(5) == [1, 5]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer n and returns the nth Fibonacci number.\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmparcz7mds.jl:27\nin expression starting at\
    \ /tmp/tmparcz7mds.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ddyp464.jl:26\nin expression starting at\
    \ /tmp/tmp1ddyp464.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n % 2 == 0 ? 1 : 3 * odd_collatz[end-1] + 1]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nProblem 3\nWrite a function that returns the first\
    \ n Fibonacci numbers. \nThe Fibonacci numbers are defined by the recurrence relation:\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa_ojkul.jl:26\nin expression starting at\
    \ /tmp/tmpqa_ojkul.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz = [odd_collatz[1], odd_collatz[2]*odd_collatz[1]]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44niw9vh.jl:26\nin expression starting at\
    \ /tmp/tmp44niw9vh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        return odd_collatz\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkjjy560.jl:35\nin expression starting at\
    \ /tmp/tmpbkjjy560.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@assert get_odd_collatz(5)\
    \ == [1, 5]\n</cell>\n<text>\nExercise 4\nWrite a function that returns the factorial\
    \ of a given positive integer n.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4nhw0ghm.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nhw0ghm.jl:24\n\
    in expression starting at /tmp/tmp4nhw0ghm.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj_mk0v2.jl:26\nin expression starting at\
    \ /tmp/tmpmj_mk0v2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 1 ? 1 :\
    \ 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tdmkiz6.jl:27\nin expression starting at\
    \ /tmp/tmp3tdmkiz6.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ odd_collatz\n    odd_collatz = [n / 2] ++ odd_collatz\n\
    \    odd_collatz = [n / 2] ++ od\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrhdin74.jl:1\nin expression starting at /tmp/tmpzrhdin74.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n / 2]\n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the nth Fibonacci number\
    \ in the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ relation:\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t\
    @test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsrgcddc.jl:29\nin expression starting at\
    \ /tmp/tmpmsrgcddc.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.3>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps it takes to reach 1 from the first odd number in the Collatz\
    \ sequence.\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t\
    @test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykfj2mb3.jl:26\nin expression starting at\
    \ /tmp/tmpykfj2mb3.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq31eujr.jl:26\nin expression starting at\
    \ /tmp/tmpwq31eujr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz += [n/2]\n    if n % 2 == 1 \n        odd_collatz += [n*3]\n\
    \    odd_collatz\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the nth Fibonacci number in the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence relation:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yv1_gqf.jl:28\nin expression starting at\
    \ /tmp/tmp8yv1_gqf.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz = [odd_collatz[1], odd_collatz[1] * 2 + 1]\n     \
    \   return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcehxmsxt.jl:27\nin expression starting at\
    \ /tmp/tmpcehxmsxt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? 1 : 3\n    odd_collatz .+= n % 2 == 0 ? 1 :\
    \ 3\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a positive integer\
    \ n and returns the number of steps it takes to reach 1 from n.\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fu27xhg.jl:27\nin expression starting at\
    \ /tmp/tmp9fu27xhg.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz\
    \ .+= [n/223]\n    odd_collatz .+= [n/253]\n    odd_collatz .+= [n/273]\n    odd_collatz\
    \ .+= [n/313]\n    odd_collatz .+= [n/337]\n    odd_collatz .+= [n/373]\n    odd_collatz\
    \ .+= [n/439]\n    odd_collatz .+= [n/493]\n    odd_collatz .+= [n/553]\n    odd_collatz\
    \ .+= [n/593]\n    odd_collatz .+= [n/643]\n    odd_collatz .+= [n/739]\n    odd_collatz\
    \ .+= [n/839]\n    odd_collatz .+= [n/939]\n    odd_collatz .+= [n/1039]\n   \
    \ odd_collatz .+= [n/1199]\n    odd_collatz .+= [n/1379]\n    odd_collat\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr1y7u41.jl:1\nin expression starting at /tmp/tmpkr1y7u41.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 3 + 1]\n    if n % 2 == 1 \n        odd_collatz .= [n\
    \ + 1]\n    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    @time get_odd_collatz(10)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer $n$ and returns the number of steps it takes to reach 1 from\
    \ $n$. For example, get_steps(5) should return 4 because 5 is even, 5 is odd,\
    \ then 6 is odd, then 7 is odd, then 8 is odd, then 9 is odd, then 10 is odd,\
    \ then 11 is odd, then 12 is odd, then 13 is odd, then 14 is odd, then 15 is odd,\
    \ then 16 is odd, then 17 is odd, then 18 is odd, then 19 is odd, then 20 is odd,\
    \ then 21 is odd, then 22 is odd, then 23 is odd, then 24 is odd, then 25 is odd,\
    \ then 26 is odd, then 27 is odd, then 28 is odd, then 29 is odd, then 30 is odd,\
    \ then 31 is odd, then 32 is odd, then 33 is odd, then 34 is odd, then 35 is odd,\
    \ then 36 is odd, then 37 is odd, then 38 is odd, then 39 is odd, then 40 is odd,\
    \ then 41 is odd, then 42 is odd, then 43 is odd, then 44 is odd, then 45 is odd,\
    \ then 46 is odd, then 47 is odd, then 48 is odd, then 49 is odd, then 50 is odd,\
    \ then 51 is odd, then 52 is odd, then 53 is odd, then 54 is odd, then 55 is odd,\
    \ then 56 is odd, then 57 is odd, then 58 is odd, then 59 is odd, then 60 is odd,\
    \ then 61 is odd, then 62 is odd, then 63 is odd, then 64 is odd, then 65 is odd,\
    \ then 66 is odd, then 67 is odd, then 68 is odd, then 69 is odd, then 70 is odd,\
    \ then 71 is odd, then 72 is odd, then 73 is odd, then 74 is odd, then 75 is odd,\
    \ then 76 is odd, then 77 is odd, then 78 is odd, then 79 is odd, then 80 is odd,\
    \ then 8\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zy3d55m.jl:29\nin expression starting at\
    \ /tmp/tmp0zy3d55m.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [n / 2] * 3\n    odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return a sorted vector that has the even numbers in collatz sequence.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx98b1ld7.jl:27\nin expression starting at\
    \ /tmp/tmpx98b1ld7.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3 + 1\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ vector that has the even numbers in collatz sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3jrpmop.jl:32\nin expression starting at\
    \ /tmp/tmpa3jrpmop.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj5a88ur1.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj5a88ur1.jl:1\n\
    in expression starting at /tmp/tmpj5a88ur1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n % 2 == 0 ? 1 : 3 * odd_collatz[-1] + 1]\n  \
    \      return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xjkjb3p.jl:27\nin expression starting at\
    \ /tmp/tmp3xjkjb3p.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n positive integers starting\
    \ from 1 that have the Collatz conjecture.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw8n_uz06.jl:26\nin expression starting at\
    \ /tmp/tmpw8n_uz06.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given positive integer.\
    \ \nThe factorial of a positive integer is defined as the product of all the positive\
    \ integers less than or equal to that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkslj_vwn.jl:26\nin expression starting at\
    \ /tmp/tmpkslj_vwn.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for (_,n) in zip(odd_collatz,\
    \ odd_collatz)]\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp28z4nv1v.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp28z4nv1v.jl:23\n\
    in expression starting at /tmp/tmp28z4nv1v.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwk1m06p.jl:26\nin expression starting at\
    \ /tmp/tmpgwk1m06p.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    \n    odd_collatz\
    \ += [n * 3]\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtpjdecp.jl:32\nin expression starting at\
    \ /tmp/tmpvtpjdecp.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz = [odd_collatz[end-1] + 1 for i in 1:length(odd_collatz)]\n \
    \   odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1j7nsjj8.jl:26\nin expression starting at\
    \ /tmp/tmp1j7nsjj8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04u2u2na.jl:1\nin expression starting at /tmp/tmp04u2u2na.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of steps it takes to reach 1 from n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pb435cm.jl:26\nin expression starting at\
    \ /tmp/tmp0pb435cm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz += [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n@time get_odd_collatz(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the nth term of the\
    \ Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence relation:\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpdlg4rkzt.jl:23 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdlg4rkzt.jl:23\n\
    in expression starting at /tmp/tmpdlg4rkzt.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpz3vecspx.jl:23 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz3vecspx.jl:23\n\
    in expression starting at /tmp/tmpz3vecspx.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * odd_collatz[end] + 1]\n    return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepq5kday.jl:26\nin expression starting at\
    \ /tmp/tmpepq5kday.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_28a0qey.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_28a0qey.jl:1\n\
    in expression starting at /tmp/tmp_28a0qey.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nget_odd_collatz(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a positive integer n and returns the\
    \ number of steps it takes to reach 1 from n.\nusing Test\n\n@testset begin\n\n\
    candidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\
    \t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1)\
    \ == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp3_jile.jl:26\nin expression starting at\
    \ /tmp/tmpkp3_jile.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 0 \n        odd_collatz .+= [n]\n    else \n   \
    \     odd_collatz .+= [n] * 3\n    end\n    \n    return odd_collatz\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprg1ye2nv.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprg1ye2nv.jl:1\n\
    in expression starting at /tmp/tmprg1ye2nv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .= [n/2]\n        odd_collatz .= odd_collatz .+ [n*3+1]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcthjj0xd.jl:28\nin expression starting at\
    \ /tmp/tmpcthjj0xd.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/53]\n\
    \    odd_collatz .+= [n/63]\n    odd_collatz .+= [n/79]\n    odd_collatz .+= [n/97]\n\
    \    odd_collatz .+= [n/113]\n    odd_collatz .+= [n/127]\n    odd_collatz .+=\
    \ [n/131]\n    odd_collatz .+= [n/139]\n    odd_collatz .+= [n/147]\n    odd_collatz\
    \ .+= [n/153]\n    odd_collatz .+= [n/159]\n    odd_collatz .+= [n/163]\n    odd_collatz\
    \ .+= [n/161]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/161]\n    odd_collatz\
    \ .+= [n/159]\n    odd_collatz .+= [n/153]\n    odd_collatz .+= [n/147]\n    odd_collatz\
    \ .+= [n/139]\n    odd_collatz .+= [n/131]\n    odd_collatz .+= [n/127]\n    odd_collatz\
    \ .+= [n/113]\n    odd_collatz .+= [n/97]\n    odd_collatz .+= [n/79]\n    odd_collatz\
    \ .+= [n/63]\n    odd_collatz .+= [n/53]\n    odd_collatz .+= [n/37\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5trf2l4v.jl:1\nin expression starting at /tmp/tmp5trf2l4v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    if n % 2 == 1 \n        odd_collatz .+= [n/2]\n\
    \    end\n    return odd_collatz\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhzrpydj.jl:29\nin expression starting at\
    \ /tmp/tmpyhzrpydj.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * (3 + (n % 2))\n    \n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhau0yyy.jl:1\nin expression starting at /tmp/tmpfhau0yyy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_28a0qey.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_28a0qey.jl:1\n\
    in expression starting at /tmp/tmp_28a0qey.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .= [n * 3 + (n % 2 == 1)]\n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ vector that has the even numbers in collatz sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cghg7vi.jl:26\nin expression starting at\
    \ /tmp/tmp9cghg7vi.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n*3+1]\n\
    \    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m0_qhd8.jl:28\nin expression starting at\
    \ /tmp/tmp0m0_qhd8.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz = [odd_collatz[end-1] + 1 for x in odd_collatz]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfg0e0f1m.jl:27\nin expression starting at\
    \ /tmp/tmpfg0e0f1m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 2 if n % 2 == 0 else n * 3 + 1 for i in odd_collatz]\n\
    \        return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp3sxhw6d_.jl:24 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3sxhw6d_.jl:24\n\
    in expression starting at /tmp/tmp3sxhw6d_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz += [n/2]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n\
    \    odd_collatz += [n/3]\n    odd_collatz += [n/3]\n    odd_collatz\nusing Test\n\
    \n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1,\
    \ 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) ==\
    \ [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6_3qkop.jl:1\nin expression starting at /tmp/tmpz6_3qkop.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n % 2]\n        return odd_collatz\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzvzg93d.jl:28\nin expression starting at\
    \ /tmp/tmpmzvzg93d.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1bos73e.jl:26\nin expression starting at\
    \ /tmp/tmph1bos73e.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/113]\n    odd_collatz .+= [n/127]\n    odd_collatz .+= [n/135]\n    odd_collatz\
    \ .+= [n/143]\n    odd_collatz .+= [n/151]\n    odd_collatz .+= [n/159]\n    odd_collatz\
    \ .+= [n/167]\n    odd_collatz .+= [n/175]\n    odd_collatz .+= [n/183]\n    odd_collatz\
    \ .+= [n/191]\n    odd_collatz .+= [n/199]\n    odd_collatz .+= [n/207]\n    odd_collatz\
    \ .+= [n/215]\n    odd_collatz .+= [n/223]\n    odd_collatz .+= [n/227]\n    odd_collatz\
    \ .+= [n/231]\n    odd_collatz .+= [n/237]\n    odd_collatz .+= [n/243]\n    odd_collatz\
    \ .+= [n/251]\n    odd_collatz .+= [n/259]\n    odd_collatz .+= [n/267]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d7ps4dy.jl:1\nin expression starting at /tmp/tmp8d7ps4dy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_nums = Vector{Int64}()\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n    odd_nums.push(2)\n\
    \    odd_nums.push(2)\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra4g0huz.jl:1\nin expression starting at /tmp/tmpra4g0huz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n / 2]\n    if n % 2 == 1 \n        odd_collatz .=\
    \ odd_collatz .+ [n / 2]\n    end\n    return odd_collatz\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1,\
    \ 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ufmdl6i.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ufmdl6i.jl:1\n\
    in expression starting at /tmp/tmp7ufmdl6i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .= [n % 2 == 0 ? 1 : 3 * odd_collatz[end] + 1]\n    \n\
    \    return odd_collatz\nend\nusing Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\
    \t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\
    \t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpofim9nqv.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpofim9nqv.jl:1\n\
    in expression starting at /tmp/tmpofim9nqv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz += [n / 2]\n        return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ vector that has the even numbers in collatz sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ljf49ph.jl:27\nin expression starting at\
    \ /tmp/tmp1ljf49ph.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        odd_collatz += [n / 2]\n    else \n\
    \        odd_collatz += [n / 2] * 3\n    \n    return odd_collatz\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return a sorted\
    \ vector that has the even numbers in collatz sequence.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt1o6ljj.jl:32\nin expression starting at\
    \ /tmp/tmpnt1o6ljj.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    \n    if n % 2 == 0 \n        odd_collatz += [n/2]\n    else \n        odd_collatz\
    \ += [n*3]\n    \n    return odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\
    get_odd_collatz(10)\n</cell>\n<text>\nExercise 1\nWrite a function that returns\
    \ the first n positive integers greater than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11,\
    \ 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\
    \t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g7e7c4m.jl:32\nin expression starting at\
    \ /tmp/tmp1g7e7c4m.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1\n        return [1]\n    else\n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/5]\n        odd_collatz .+= [n/7]\n        odd_collatz .+= [n/11]\n \
    \       odd_collatz .+= [n/13]\n        odd_collatz .+= [n/17]\n        odd_collatz\
    \ .+= [n/19]\n        odd_collatz .+= [n/23]\n        odd_collatz .+= [n/29]\n\
    \        odd_collatz .+= [n/37]\n        odd_collatz .+= [n/43]\n        odd_collatz\
    \ .+= [n/59]\n        odd_collatz .+= [n/67]\n        odd_collatz .+= [n/83]\n\
    \        odd_collatz .+= [n/99]\n        odd_collatz .+= [n/107]\n        odd_collatz\
    \ .+= [n/131]\n        odd_collatz .+= [n/163]\n        odd_collatz .+= [n/191]\n\
    \        odd_collatz .+= [n/223]\n        odd_collatz .+= [n/251]\n        odd_collatz\
    \ .+= [n/289]\n        odd_collatz .+= [n/339]\n        odd_collatz .+= [n/379]\n\
    \        odd_collatz .+= [n/431]\n        odd_collatz .+= [n/573]\n        odd_collatz\
    \ .+= [n/739]\n        odd_collatz .+= [n/919]\n        odd_collatz .+= [n/1097]\n\
    \        odd_collatz .+= [n/1365]\n        odd_collatz .+= [n/1733]\n        odd_collatz\
    \ .+= [n/2031]\n        odd_collatz .+= [n/2439]\n        odd_collatz .+= [n/2891]\n\
    \        odd_collatz .+= [n/3397]\n        odd_collatz .+= [n/3831]\n        odd_\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphidmc4so.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphidmc4so.jl:1\n\
    in expression starting at /tmp/tmphidmc4so.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n-1)\n\
    \    odd_collatz .+= [n/2]\n    odd_collatz .+= [n/3]\n    odd_collatz .+= [n/5]\n\
    \    odd_collatz .+= [n/7]\n    odd_collatz .+= [n/11]\n    odd_collatz .+= [n/13]\n\
    \    odd_collatz .+= [n/17]\n    odd_collatz .+= [n/19]\n    odd_collatz .+= [n/23]\n\
    \    odd_collatz .+= [n/29]\n    odd_collatz .+= [n/37]\n    odd_collatz .+= [n/43]\n\
    \    odd_collatz .+= [n/59]\n    odd_collatz .+= [n/67]\n    odd_collatz .+= [n/83]\n\
    \    odd_collatz .+= [n/99]\n    odd_collatz .+= [n/107]\n    odd_collatz .+=\
    \ [n/131]\n    odd_collatz .+= [n/163]\n    odd_collatz .+= [n/193]\n    odd_collatz\
    \ .+= [n/225]\n    odd_collatz .+= [n/251]\n    odd_collatz .+= [n/289]\n    odd_collatz\
    \ .+= [n/361]\n    odd_collatz .+= [n/425]\n    odd_collatz .+= [n/495]\n    odd_collatz\
    \ .+= [n/577]\n    odd_collatz .+= [n/653]\n    odd_collatz .+= [n/729]\n    odd_collatz\
    \ .+= [n/811]\n    odd_collatz .+= [n/907]\n    odd_collatz .+= [n/1013]\n   \
    \ odd_collatz .+= [n/1117]\n    odd_collatz .+= [n/1223]\n    odd_collatz .+=\
    \ [n/1349]\n    odd_collatz .+= [n/1477]\n    odd_collatz .+= [n/1597]\n    \n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1sw4m7p.jl:1\nin expression starting at /tmp/tmpz1sw4m7p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n-1)\n\
    \        odd_collatz .+= [n/2]\n        odd_collatz .+= [n/3]\n        odd_collatz\
    \ .+= [n/3]\n        odd_collatz .+= [n/2]\n        return odd_collatz\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf45mbaf0.jl:30\nin expression starting at\
    \ /tmp/tmpf45mbaf0.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    odd_collatz = get_odd_collatz(n / 2)\n\
    \    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * odd_collatz[end] + 1]\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oix56fq.jl:25\nin expression starting at\
    \ /tmp/tmp1oix56fq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    else \n        odd_collatz = get_odd_collatz(n\
    \ / 2)\n        odd_collatz .= [n * 3 if n % 2 == 0 else n * 2 + 1]\n        return\
    \ odd_collatz\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return a sorted vector that has the even numbers in collatz sequence.\n\
    using Test\n\n@testset begin\n\ncandidate = get_odd_collatz;\n\t@test(candidate(14)\
    \ == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5) == [1, 5])\n\t@test(candidate(12)\
    \ == [1, 3, 5])\n\t@test(candidate(1) == [1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpvoqpe5pu.jl:24 expected \"\
    end\", got \"]\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvoqpe5pu.jl:24\n\
    in expression starting at /tmp/tmpvoqpe5pu.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return a sorted vector that has\
    \ the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    previous term\
    \ as follows: if the previous term is even, the next term is one half of \n  \
    \  the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n    term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n\
    \        2. returned vector sorted in increasing order.\n\n    For example:\n\
    \    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
    \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    >>> get_odd_collatz(5)\n\
    \    [1, 5]\n    \"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64} \n\
    \    if n == 1 \n        return [1]\n    \n    odd_collatz = get_odd_collatz(n\
    \ / 2)\n    odd_collatz .+= n % 2 == 0 ? [n / 2] : [3 * n + 1]\n    return odd_collatz\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_odd_collatz;\n\t@test(candidate(14) == [1, 5, 7, 11, 13, 17])\n\t@test(candidate(5)\
    \ == [1, 5])\n\t@test(candidate(12) == [1, 3, 5])\n\t@test(candidate(1) == [1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9knpnnln.jl:27\nin expression starting at\
    \ /tmp/tmp9knpnnln.jl:27\n"
  stdout: ''
