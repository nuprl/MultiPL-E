name: HumanEval_11_string_xor
language: jl
prompt: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
  \ binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"\
  010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String, b::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
  111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\
  \t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
completions: ["    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"\
    010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string. \nThe function\
    \ should raise an error if the string is not of length 1.\nHint: use the function\
    \ length() from the Base package.\nHint: use the function char() from the Base\
    \ package.\nHint: use the function typeof() from the Base package.\nHint: use\
    \ the function typeof() from the Base package.\nHint: use the function typeof()\
    \ from the Base package.\nHint: use the function typeof() from the Base package.\n\
    Hint: use the function typeof() from the Base package.\nHint: use the function\
    \ typeof() from the Base package.\nHint: use the function typeof() from the Base\
    \ package.\nHint: use the function typeof() from the Base package.\nHint: use\
    \ the function typeof() from the Base package.\nHint: use the function typeof()\
    \ from the Base package.\nHint: use the function typeof() from the Base package.\n\
    Hint: use the function typeof() from the Base package.\nHint: use the function\
    \ typeof() from the Base package.\nHint: use the function typeof() from the Base\
    \ package.\nHint: use the function typeof() from the Base package.\nHint: use\
    \ the function typeof() from the Base package.\nHint: use the function typeof()\
    \ from the Base package.\nHint: use the function typeof() from the Base package.\n\
    Hint: use the function typeof() from the Base package.\nHint: use the function\
    \ typeof() from the Base package.\nHint: use the function typeof() from the Base\
    \ package.\nHint: use the function typeof() from the Base package.\nHint: use\
    \ the function typeof() from the Base package.\nHint: use the function typeof()\
    \ from the Base package.\nHint: use the function typeof() from the Base package.\n\
    Hint: use the function typeof() from the Base package.\nHint: use the function\
    \ typeof() from the Base package.\nHint: use the function typeof() from the Base\
    \ package.\nHint: use the function typeof() from the Base package.\nHint: use\
    \ the function typeof() from the Base package.\nHint: use the function typeof()\
    \ from the Base package.\nHint: use the function typeof() from the Base package.\n\
    Hint: use the function typeof() from the Base package.\nHint: use the function\
    \ typeof() from the Base package.\nHint: use the function typeof() from the Base\
    \ package.\nHint: use the function typeof() from the Base package.\nHint: use\
    \ the function typeof() from the Base package.\nHint: use the function typeof()\
    \ from the Base package.\nHint: use the function typeof() from the Base package.\n\
    Hint: use the ", "    return string_to_bits(a) ^ string_to_bits(b)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if a==\"\" || b==\"\"\n        return \"\"\n\
    \    else\n        return (a^b)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ performs binary AND on two strings a and b. \nThis function should return result\
    \ also as a string.\n>>> string_and(\"010\", \"110\")\n\"100\"\n>>> string_and(\"\
    010\", \"010\")\n\"100\"\n>>> string_and(\"010\", \"100\")\n\"100\"\n>>> string_and(\"\
    010\", \"011\")\n\"100\"\n>>> string_and(\"010\", \"101\")\n\"100\"\n>>> string_and(\"\
    010\", \"1101\")\n\"100\"\n>>> string_and(\"010\", \"0101\")\n\"100\"\n>>> string_and(\"\
    010\", \"01010\")\n\"100\"\n>>> string_and(\"010\", \"0101011\")\n\"100\"\n>>>\
    \ string_and(\"010\", \"01010101\")\n\"100\"\n>>> string_and(\"010\", \"010101010\"\
    )\n\"100\"\n>>> string_and(\"010\", \"0101010101\")\n\"100\"\n>>> string_and(\"\
    010\", \"01010101010\")\n\"100\"\n>>> string_and(\"010\", \"0101010101011\")\n\
    \"100\"\n>>> string_and(\"010\", \"01010101010101\")\n\"100\"\n>>> string_and(\"\
    010\", \"010101010101010\")\n\"100\"\n>>> string_and(\"010\", \"01010101010101011\"\
    )\n\"100\"\n>>> string_and(\"010\", \"010101010101010101\")\n\"100\"\n>>> string_and(\"\
    010\", \"0101010101010101010\")\n\"100\"\n>>> string_and(\"010\", \"010101010101010101011\"\
    )\n\"100\"\n>>> string_and(\"010\", \"010101010101010101010101\")\n\"100\"\n>>>\
    \ string_and(\"010\", \"0101010101010101010101010\")\n\"100\"\n>>> string_and(\"\
    010\", \"01010101010101010101010101\")\n\"100\"\n>>> string_and(\"010\", \"010101010101010101010101010\"\
    )\n\"100\"\n>>> string_and(\"010\", \"01010101010101010101010101011\")\n\"100\"\
    \n>>> string_and(\"010\", \"01010101010101010", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(a) == length(b) then\n        local\
    \ result = \"\"\n        for i = 1, length(a) do\n            local c = a[i]\n\
    \            result = (result + c) ^ b[i]\n        end\n        return result\n\
    \    else\n        return \"Invalid inputs\"\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one number as input and return true or false accordingly.\nThe function\
    \ should also return an error message if the input is invalid.\nThe function should\
    \ also return an error message if the number is negative.\nThe function should\
    \ also return an error message if the number is zero.\nThe function should also\
    \ return an error message if the number is greater than the square root of the\
    \ number itself.\nThe function should also return an error message if the number\
    \ is less than 1.\nThe function should also return an error message if the number\
    \ is greater than 100.\nThe function should also return an error message if the\
    \ number is less than 1.", "    return bin(bin(a) XOR bin(b))[2:]\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal integer.\nThe\
    \ function should take a string as input and return a number.\nThe function should\
    \ raise an error if the input is not valid binary string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should\
    \ raise an error if the input is not valid decimal string.\nThe function should ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    end\n \
    \   \n    string = \"\"\n    for i in eachindex(a)\n        string += (a[i] ^\
    \ b[i])\n    end\n    \n    return string\nend", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if length(a) == length(b) \n    \
    \    \n        if length(a) == 0 \n            return b\n        \n        if\
    \ length(b) == 0 \n            return a\n        \n        if a[0] == b[0] \n\
    \            return string_xor(a[1:], b[1:])\n        \n        return string_xor(a[1:],\
    \ b) + a[0]\n    \n    else \n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\
    \ \nThe function should ignore all whitespace characters and should ignore all\
    \ non-alphabetic characters. \nThe function should ignore all characters that\
    \ are not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe function should ignore all characters that are\
    \ not in the alphabet (including spaces, punctuation, and symbols).\nThe function\
    \ should ignore all characters that are not in the alphabet (including spaces,\
    \ punctuation, and symbols).\nThe ", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all spaces and special\
    \ characters and should ignore case when counting characters.\nThe function should\
    \ ignore all spaces and special characters and should ignore case when counting\
    \ characters.\nThe function should ignore all spaces and special characters and\
    \ should ignore case when counting characters.\nThe function should ignore all\
    \ spaces and special characters and should ignore case when counting characters.\n\
    The function should ignore all spaces and special characters and should ignore\
    \ case when counting characters.\nThe function should ignore all spaces and special\
    \ characters and should ignore case when counting characters.\nThe function should\
    \ ignore all spaces and special characters and should ignore case when counting\
    \ characters.\nThe function should ignore all spaces and special characters and\
    \ should ignore case when counting characters.\nThe function should ignore all\
    \ spaces and special characters and should ignore case when counting characters.\n\
    The function should ignore all spaces and special characters and should ignore\
    \ case when counting characters.\nThe function should ignore all spaces and special\
    \ characters and should ignore case when counting characters.\nThe function should\
    \ ignore all spaces and special characters and should ignore case when counting\
    \ characters.\nThe function should ignore all spaces and special characters and\
    \ should ignore case when counting characters.\nThe function should ignore all\
    \ spaces and special characters and should ignore case when counting characters.\n\
    The function should ignore all spaces and special characters and should ignore\
    \ case when counting characters.\nThe function should ignore all spaces and special\
    \ characters and should ignore case when counting characters.\nThe function should\
    \ ignore all spaces and special characters and should ignore case when counting\
    \ characters.\nThe function should ignore all spaces and special characters and\
    \ should ignore case when counting characters.\nThe function should ignore all\
    \ spaces and special characters and should ignore case when counting characters.\n\
    The function should ignore all spaces and special characters and should ignore\
    \ case when counting characters.\nThe function should ignore all spaces and special\
    \ characters and should ignore case when counting characters.\nThe function should\
    \ ignore all spaces and special characters and should ignore case when counting\
    \ characters.\nThe function should ignore all spaces and special characters and\
    \ should ignore case when counting characters.\nThe function should ignore all\
    \ spaces and special characters and should ignore case when counting ", "    if\
    \ length(a) != length(b) then return \"Error\" else return a^b\nend", "    if\
    \ length(a) != length(b) \n        error(\"Strings must have same length\")\n\
    \    elseif length(a) == 0 \n        error(\"String is empty\")\n    elseif length(a)\
    \ == 1 \n        return b\n    elseif length(a) == 2 \n        return string_xor(a[1:2],\
    \ b[1:2])\n    elseif length(a) == 3 \n        return string_xor(a[1:3], b[1:3])\n\
    \    elseif length(a) == 4 \n        return string_xor(a[1:4], b[1:4])\n    elseif\
    \ length(a) == 5 \n        return string_xor(a[1:5], b[1:5])\n    elseif length(a)\
    \ == 6 \n        return string_xor(a[1:6], b[1:6])\n    elseif length(a) == 7\
    \ \n        return string_xor(a[1:7], b[1:7])\n    elseif length(a) == 8 \n  \
    \      return string_xor(a[1:8], b[1:8])\n    elseif length(a) == 9 \n       \
    \ return string_xor(a[1:9], b[1:9])\n    elseif length(a) == 10 \n        return\
    \ string_xor(a[1:10], b[1:10])\n    elseif length(a) == 11 \n        return string_xor(a[1:11],\
    \ b[1:11])\n    elseif length(a) == 12 \n        return string_xor(a[1:12], b[1:12])\n\
    \    elseif length(a) == 13 \n        return string_xor(a[1:13], b[1:13])\n  \
    \  elseif length(a) == 14 \n        return string_xor(a[1:14], b[1:14])\n    elseif\
    \ length(a) == 15 \n        return string_xor(a[1:15], b[1:15])\n    elseif length(a)\
    \ == 16 \n        return string_xor(a[1:16], b[1:16])\n    elseif length(a) ==\
    \ 17 \n        return string_xor(a[1:17], b[1:17])\n    elseif length(a) == 18\
    \ \n        return string_xor(a[1:18], b[1:18])\n    elseif length(a) == 19 \n\
    \        return string_xor(a[1:19], b[1:19])\n    elseif length(a) == 20 \n  \
    \      return string_xor(a[1:20], b[1:20])\n    elseif length(a) == 21 \n    \
    \    return string_xor(a[1:21], b[1:21])\n    elseif length(a) == 22 \n      \
    \  return string_xor(a[1:22], b[1:22])\n    elseif length(a) == 23 \n        return\
    \ string_xor(a[1:23], b[1:23])\n    elseif length(a) == 24 \n        return string_xor(a[1:24],\
    \ b[1:24])\n    elseif length(a) == 25 \n        return string_xor(a[1:25], b[1:25])\n\
    \    elseif length(a) == 26 \n        return string_xor(a[1:26], b[1:26])\n  \
    \  elseif length(a) == 27 \n", "    if a==\"\" || b==\"\"\n        return \"\"\
    \n    elseif a==b\n        return a\n    elseif a==\"0\" && b==\"1\"\n       \
    \ return \"0\"\n    elseif a==\"1\" && b==\"0\"\n        return \"1\"\n    else\n\
    \        return \"\"\n    end\nend\n</cell>\n<code language=julia-1.4>", "   \
    \ \n    if length(a) == length(b) \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
