name: HumanEval_30_get_positive
language: jl
prompt: "\"\"\"Return only positive numbers in the vector.\n    >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
  \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
  \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
  \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
completions: ["    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x >= 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = Vector{Int64}()\n\
    \    for x in l\n        if x >= 0\n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the absolute value of a number.", "    positive = filter(x -> x\
    \ > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.4>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = Vector{Int64}()\n\
    \    for x in l\n        if x >= 0\n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n \
    \   return positive\nend", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x >= 0, l)\n    return positive\nend", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = Vector{Int64}()\n    for x in l\n        if x > 0 \n           \
    \ push!(positive, x)\n        end\n    end\n    return positive\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that returns the negative numbers in the\
    \ vector.", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n\
    </cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n \
    \   return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive =\
    \ filter(x -> x > 0, l)\n    return positive\nend", "    positive = Vector{Int64}()\n\
    \    for i in l\n        if i > 0 \n            push!(positive, i)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<code language=julia-1.3>", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive =\
    \ filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ all numbers in a vector.", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = Vector{Int64}()\n \
    \   for x in l\n        if x > 0 \n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n \
    \   return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive =\
    \ filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the negative numbers in the vector.\n    >>>\
    \ get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -3]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n\
    \    \"\"\"", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n\
    </cell>\n<code language=julia-1.5>", "    positive = filter(x -> x >= 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"Return only negative numbers in the vector.\n   \
    \ >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -3, -3, 9, 123, -1, -10]\n   \
    \ \"\"\"", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ positive numbers in a vector.", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x >= 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = Vector{Int64}()\n    for x in l\n        if x > 0 \n           \
    \ push!(positive, x)\n        end\n    end\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = Vector{Int64}()\n\
    \    for x in l\n        if x >= 0\n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ positive = Vector{Int64}()\n    for x in l\n        if x > 0 \n            push!(positive,\
    \ x)\n        end\n    end\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = Vector{Int64}()\n  \
    \  for x in l\n        if x >= 0\n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the absolute values of the elements of a vector.", " \
    \   positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = Vector{Int64}()\n  \
    \  for x in l\n        if x >= 0\n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the negative numbers in the vector.", "    positive = Vector{Int64}()\n\
    \    for x in l\n        if x > 0 \n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = Vector{Int64}()\n    for x in l\n        if x > 0 \n            push!(positive,\
    \ x)\n        end\n    end\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\n\
    Exercise 2: get_negative\nWrite a function that returns only negative numbers\
    \ in the vector.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n\
    \    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9, -10, -3, -9,\
    \ -10, -3, -9, -10, -3, -9, -10, ", "    positive = filter(x -> x >= 0, l)\n \
    \   return positive\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return only\
    \ negative numbers in the vector.\n    >>> get_negative([-1, 2, -4, 5, 6])\n \
    \   [-2, -4, -6, -5]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10])\n    [-5, -3, -3, -9, -123, -1]\n    \"\"\"", "    positive = Vector{Int64}()\n\
    \    for x in l\n        if x > 0 \n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return only negative numbers in the vector.\n    >>> get_negative([-1, 2,\
    \ -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_negative([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, -3, -3, -9, -10, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,\
    \ -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, ",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = Vector{Int64}()\n  \
    \  for x in l\n        if x > 0 \n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ positive = Vector{Int64}()\n    for x in l\n        if x >= 0\n            push!(positive,\
    \ x)\n        end\n    end\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = Vector{Int64}()\n    for x in l\n    \
    \    if x > 0 \n            push!(positive, x)\n        end\n    end\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = Vector{Int64}()\n \
    \   for i in l\n        if i > 0 \n            push!(positive, i)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the negative numbers in a vector.", "    positive = filter(x ->\
    \ x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", " \
    \   positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = Vector{Int64}()\n    for x in l\n    \
    \    if x > 0 \n            push!(positive, x)\n        end\n    end\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return only negative numbers in the vector.\n\
    \    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -3]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -3, -3, 9, 123, -1, -10]\n   \
    \ \"\"\"", "    positive = filter(x -> x > 0, l)\n    return positive\nend", " \
    \   positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend", "    positive\
    \ = Vector{Int64}()\n    for x in l\n        if x > 0 \n            push!(positive,\
    \ x)\n        end\n    end\n    return positive\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers in the vector.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, -4, 5])\n10\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9, 123, 1])\n10\n>>> sum([5, 3, 2, 3, 9,\
    \ 123, 1])\n10\n", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x >= 0,\
    \ l)\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of positive numbers in a vector.", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x >= 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x >= 0,\
    \ l)\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return only negative numbers in\
    \ the vector.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n\
    \    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -3, -3,\
    \ -9, -123, -1]\n    \"\"\"", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.4>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = Vector{Int64}()\n    for x in l\n        if x > 0 \n           \
    \ push!(positive, x)\n        end\n    end\n    return positive\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the negative numbers in the\
    \ vector.", "    positive = filter(x -> x > 0, l)\n    return positive\nend",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = Vector{Int64}()\n    for x in l\n    \
    \    if x > 0 \n            push!(positive, x)\n        end\n    end\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the vector.", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x >= 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return only negative numbers in the vector.\n   \
    \ >>> get_negative([-1, 2, -4, 5, 6])\n    [-2, -4, -6, 6]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -9, 0, 123, 1]\n    \"\
    \"\"", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = Vector{Int64}()\n    for x in l\n\
    \        if x > 0 \n            push!(positive, x)\n        end\n    end\n   \
    \ return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return only negative numbers in the vector.\n    >>> get_negative([-1, 2,\
    \ -4, 5, 6])\n    [-1, -4, -6, -5]\n    >>> get_negative([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, -3, -3, -9, 0, 123, 1]\n    \"\"\"", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end", "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n\
    <code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.1>", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>", "    positive = Vector{Int64}()\n\
    \    for x in l\n        if x > 0 \n            push!(positive, x)\n        end\n\
    \    end\n    return positive\nend\n</cell>\n<text>\nExercise 2: get_negative",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.4>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend", "    positive = filter(x\
    \ -> x > 0, l)\n    return positive\nend", "    positive = filter(x -> x > 0,\
    \ l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.3>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n\
    \    return positive\nend\n</cell>\n<code language=julia-1.5>", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend", "    positive\
    \ = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code language=julia-1.5>",
  "    positive = filter(x -> x > 0, l)\n    return positive\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    positive = filter(x -> x > 0, l)\n    return positive\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return only negative numbers in\
    \ the vector.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6, -5]\n\
    \    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, -3, -3,\
    \ -9, 0, 123, 1]\n    \"\"\"", "    positive = filter(x -> x > 0, l)\n    return\
    \ positive\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
