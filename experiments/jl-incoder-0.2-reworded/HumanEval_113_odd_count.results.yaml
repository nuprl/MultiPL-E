language: jl
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 != 0, i))\n    end\n    odd_count_str\
    \ = odd_count_str + \" \"\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppg08wmb1.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmppg08wmb1.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmppg08wmb1.jl:15\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmppg08wmb1.jl:15\n \
    \  [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppg08wmb1.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppg08wmb1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppg08wmb1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmppg08wmb1.jl:15\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /t"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, count(str, digits(str)))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7umyu04r.jl:18\nin expression starting at\
    \ /tmp/tmp7umyu04r.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count(str, '1'))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers where the ith\
    \ element is the number of odd digits in the\nith string of the input. For example,\
    \ if the input vector is [\"1234567\", \"123\", \"111\", \"222\", \"333\", \"\
    4444\", \"555\", \"666\", \"777\", \"8888\", \"9999\"] then the output vector\
    \ should be [5, 3, 1, 1, 2, 1, 1, 2, 1, 1, 1]. Make sure your function works with\
    \ vectors of different lengths.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpep_w359h.jl:18\nin expression starting at\
    \ /tmp/tmpep_w359h.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp58zo5y1y.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp58zo5y1y.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp58zo5y1y.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp58zo5y1y.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp58zo5y1y.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp58zo5y1y.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] odd_count(lst::Vector{String}"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ sum of the number of odd digits in each string of the input.\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmplq4jmd7z.jl:1\nin\
    \ expression starting at /tmp/tmplq4jmd7z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings as output. Each element of the output should be\
    \ \"the sum of the odd digits in the i'th string of the input.\" where all the\
    \ i's should be replaced by the sum of the odd digits in the i'th string of the\
    \ input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprigrnhab.jl:18\nin expression starting at\
    \ /tmp/tmprigrnhab.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpq7mv8d2q.jl:1\nin\
    \ expression starting at /tmp/tmpq7mv8d2q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for i in lst\n      \
    \  odd_counts = push!(odd_counts, length(findall(i, digits_odd)))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphh5n_658.jl:19\nin expression starting at\
    \ /tmp/tmphh5n_658.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjffd783w.jl:18\nin expression starting at\
    \ /tmp/tmpjffd783w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd%sof\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, [\"n\"=>length(lst)])\n\
    \    odd_count_str = replace(odd_count_str, [\"d\"=>digits(lst)])\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpw4il4c1p.jl:1\nin\
    \ expression starting at /tmp/tmpw4il4c1p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_strs = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_count_strs[i] = odd_count_str(length(s),\
    \ i, length(s))\n    end\n    return odd_count_strs\nend\n</cell>\n<code language=julia-1.0>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ is the concatenation of all the odd digits in each string. For example, [\"\
    1234567\", \"3\"] should return [\"25\", \"3\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpmbjy83wx.jl:1\nin\
    \ expression starting at /tmp/tmpmbjy83wx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of integers where the integers represent the number of odd characters\
    \ in the strings in the input vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rcfe5ab.jl:18\nin expression starting at\
    \ /tmp/tmp1rcfe5ab.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpz25if98_.jl:1\nin\
    \ expression starting at /tmp/tmpz25if98_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ as input and returns a vector of strings as output.\nEach element of the output\
    \ should be \"the number of even elements in the\nstring i of the input.\" where\
    \ all the i's should be replaced by the number\nof even digits in the i'th string\
    \ of the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzybkp1ab.jl:19\nin expression starting at\
    \ /tmp/tmpzybkp1ab.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcount(str, \"1\") + strcount(str, \"8\") + strcount(str,\
    \ \"9\"))\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9w8p2vg.jl:19\nin expression starting at\
    \ /tmp/tmpb9w8p2vg.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"1111111\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\n    Each element\
    \ i of the output should be \"the number of even elements in the\n    string i\
    \ of the input.\" where all the i's should be replaced by the number\n    of even\
    \ digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc9tr_75.jl:18\nin expression starting at\
    \ /tmp/tmptc9tr_75.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wzu_qzh.jl:18\nin expression starting at\
    \ /tmp/tmp1wzu_qzh.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eapl5f4.jl:18\nin expression starting at\
    \ /tmp/tmp2eapl5f4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for str in lst\n        odd_digits\
    \ += findall(x -> x % 2 == 1, str)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\n    Each element i of the output should be \"the number\
    \ of even elements in the\n    string i of the input.\" where all the i's should\
    \ be replaced by the number\n    of even digits in the i'th string of the input.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8e5n26p.jl:18\nin expression starting at\
    \ /tmp/tmps8e5n26p.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $odd_digits\
    \ the str$length(odd_digits) of the $length(odd_digits) input.\"]\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings as output.\n\
    Each element of the output should be \"the number of even elements in the string\
    \ i of the input.\" where all the i's should be replaced by the number of even\
    \ digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfynhgw_.jl:18\nin expression starting at\
    \ /tmp/tmpnfynhgw_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, \nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw96fpzt9.jl:49\nin expression starting at\
    \ /tmp/tmpw96fpzt9.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp62bnvyaj.jl:1\nin\
    \ expression starting at /tmp/tmp62bnvyaj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst[3]))\n    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst[7]))\n    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst[11]))\n    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst[15]))\n    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst[19]))\n    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst[23]))\n    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst[27]))\n    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n\
    \    odd_count_str = replace(odd_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6jtoz8m.jl:43\nin expression starting at\
    \ /tmp/tmps6jtoz8m.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = [odd_count_str % \n        sum(map(x\
    \ -> count(x, \"1\"), lst)), \n        odd_count_str % \n        sum(map(x ->\
    \ count(x, \"8\"), lst))]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp0opa_mot.jl:1\nin\
    \ expression starting at /tmp/tmp0opa_mot.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in\
    \ enumerate(lst)\n        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9o0xkth.jl:19\nin expression starting at\
    \ /tmp/tmpd9o0xkth.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\")) + length(findall(str,\
    \ \"9\"))\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a vector of strings, where each string consists of only digits, return\
    \ a vector.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzk_5o3w.jl:18\nin expression starting at\
    \ /tmp/tmpbzk_5o3w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(str)\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynbx6e4n.jl:20\nin expression starting at\
    \ /tmp/tmpynbx6e4n.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfl61i_6q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfl61i_6q.jl:1\n\
    in expression starting at /tmp/tmpfl61i_6q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[str] =  length(findall(str -> str =~ \"^[0-9]+$\", str))\n\
    \    end\n    return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbdzbhf2.jl:14\nin expression starting at\
    \ /tmp/tmpqbdzbhf2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst))\n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 0, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \" \")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"'\", \"\")\n    odd_count_str = replace(odd_count_str, \"(\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \")\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \"%\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"!\", \"\")\n    odd_count_str = replace(odd_count_str, \"@\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"#\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"$\", \"\")\n    odd_count_str = replace(odd_count_str, \"%\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"^\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"&\", \"\")\n    odd_count_str = replace(odd_count_str, \"*\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"+\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \",\", \"\")\n\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63q62dwh.jl:40\nin expression starting at\
    \ /tmp/tmp63q62dwh.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, [\"n\"], map(length, lst))\n  \
    \  odd_count_str = replace(odd_count_str, [\"d\"], map(digits, lst))\n    odd_count_str\
    \ = replace(odd_count_str, [\"str\"], map(str, lst))\n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpqhj7xz8k.jl:1\nin\
    \ expression starting at /tmp/tmpqhj7xz8k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_strs = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_count_strs[i] = odd_count_str(length(s),\
    \ i, length(s))\n    end\n    return odd_count_strs\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmph3fplbh2.jl:1\nin\
    \ expression starting at /tmp/tmph3fplbh2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, count(str, digits))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_0q_srh.jl:18\nin expression starting at\
    \ /tmp/tmpc_0q_srh.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i .== \"1\", lst[i]))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgdxsqba.jl:18\nin expression starting at\
    \ /tmp/tmpzgdxsqba.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count, lst))\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1ns\",\
    \ \" ns \")\n    odd_count_str = replace(odd_count_str, r\"\\1ns\", \" ns \")\n\
    \    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa0xdhu0w.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa0xdhu0w.jl:1\n\
    in expression starting at /tmp/tmpa0xdhu0w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\
    \ \n    end\n    return [\"the number of odd elements \" + odd_count_str + \"\
    .\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of strings and returns a vector\
    \ of strings where each string consists of only digits.\n    Each element i of\
    \ the output should be \"the number of even elements in the\n    string i of the\
    \ input.\" where all the i's should be replaced by the number\n    of even digits\
    \ in the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmihvs8cw.jl:19\nin expression starting at\
    \ /tmp/tmpmihvs8cw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfl61i_6q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfl61i_6q.jl:1\n\
    in expression starting at /tmp/tmpfl61i_6q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwi_2o9yv.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpwi_2o9yv.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpwi_2o9yv.jl:11\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpwi_2o9yv.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwi_2o9yv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwi_2o9yv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwi_2o9yv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching odd_count(::String)\n  Closest candidates\
    \ are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpwi_2o9yv.jl:11\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpwi_2o9yv.jl:15\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwi_2o9yv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwi_2o9yv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwi_2o9yv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Vector{String})\
    \ at /tmp/tmpwi_2o9yv.jl:11\n  Stacktrace:\n   [1]"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ [\"the number of odd elements \" + odd_count_str + \".\"]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings as an input and returns a vector of strings as\
    \ an output.\nThe output vector should contain the number of times the string\
    \ \"11\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    11111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output \nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16845gat.jl:21\nin expression starting at\
    \ /tmp/tmp16845gat.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ str, \"the number of odd elements \")\n    end\n    odd_count_str = strcat(odd_count_str,\
    \ \" of the \", length(lst), \" \", string(lst), \"nput.\")\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\n    Each element i of the output\
    \ should be \"the number of even elements in the\n    string i of the input.\"\
    \ where all the i's should be replaced by the number\n    of even digits in the\
    \ i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6co0fe8h.jl:19\nin expression starting at\
    \ /tmp/tmp6co0fe8h.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\n@test odd_count([\"1234567\"]) == [\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@test odd_count([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers where the ith element is the number of odd digits in string i.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxtfrtba.jl:18\nin expression starting at\
    \ /tmp/tmpxxtfrtba.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1ik8ps2.jl:18\nin expression starting at\
    \ /tmp/tmpq1ik8ps2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(i, digits)) \n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings as input and returns a vector\
    \ where each element of the output is the sum of the number of odd digits in each\
    \ string of the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpae0i0m2j.jl:21\nin expression starting at\
    \ /tmp/tmpae0i0m2j.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwi_2o9yv.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpwi_2o9yv.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpwi_2o9yv.jl:11\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpwi_2o9yv.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwi_2o9yv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwi_2o9yv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwi_2o9yv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching odd_count(::String)\n  Closest candidates\
    \ are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpwi_2o9yv.jl:11\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpwi_2o9yv.jl:15\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwi_2o9yv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwi_2o9yv.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwi_2o9yv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Vector{String})\
    \ at /tmp/tmpwi_2o9yv.jl:11\n  Stacktrace:\n   [1]"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[str] =  length(findall(str -> str == '1', str))\n    end\n\
    \    return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpc7o1rped.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpc7o1rped.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  ArgumentError: invalid index: \"1234567\" of type\
    \ String\n  Stacktrace:\n    [1] to_index(i::String)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::String)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] setindex!\n      @ ./abstractarray.jl:1315\
    \ [inlined]\n    [6] odd_count(lst::Vector{String})\n      @ Main /tmp/tmpc7o1rped.jl:14\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc7o1rped.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpc7o1rped.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpc7o1rped.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  ArgumentError: invalid index: \"3\" of type String\n  Stacktrace:\n    [1]\
    \ to_index(i::String)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::String)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] setindex!\n\
    \      @ ./abstractarray.jl:1315 [inlined]\n    [6] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpc7o1rped.jl:14\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc7o1rped.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpc7o1rped.jl:22\ntest set:\
    \ Error During Test at /"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i,\
    \ digits)\n    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_yq2ou4.jl:18\nin expression starting at\
    \ /tmp/tmpx_yq2ou4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, str, \"\\n\")\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfy901ik9.jl:20\nin expression starting at\
    \ /tmp/tmpfy901ik9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector where each element is the length of the longest\
    \ string in the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_k8yjn8.jl:19\nin expression starting at\
    \ /tmp/tmpw_k8yjn8.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkd0yncwn.jl:20\nin expression starting at\
    \ /tmp/tmpkd0yncwn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append!(odd_counts, count(str, '1'))\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70otaady.jl:18\nin expression starting at\
    \ /tmp/tmp70otaady.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_62d7e4a.jl:18\nin expression starting at\
    \ /tmp/tmp_62d7e4a.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 != 0, s)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers representing the number of odd characters in each string. For example,\
    \ [\"hello\", \"world\"] should return [5, 1]. Assume that all strings are valid\
    \ and contain only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzs60pvl6.jl:18\nin expression starting at\
    \ /tmp/tmpzs60pvl6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\n    Each element i of the output should be \"the number\
    \ of even elements in the\n    string i of the input.\" where all the i's should\
    \ be replaced by the number\n    of even digits in the i'th string of the input.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp5eqromfh.jl:1\nin\
    \ expression starting at /tmp/tmp5eqromfh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcount(str, \"1\") + strcount(str, \"8\"))\n    end\n\
    \    odd_count_str = strcat(odd_count_str, \".\")\n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpas97y1m4.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpas97y1m4.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strcount not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpas97y1m4.jl:15\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas97y1m4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas97y1m4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpas97y1m4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strcount not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpas97y1m4.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas97y1m4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpas97y1m4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpas97y1m4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strcount not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpas97y1m4.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpas97y1m4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17m0v00o.jl:19\nin expression starting at\
    \ /tmp/tmp17m0v00o.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = \"\" \n    for str in lst\n        odd_count_str = odd_count_str\
    \ + @sprintf \"the str%dd\" str\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector where each element is the sum of the number of odd digits\
    \ in each string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp2vvptva3.jl:1\nin\
    \ expression starting at /tmp/tmp2vvptva3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in\
    \ enumerate(lst)\n        odd_counts[i] = \"the number of odd elements \" \n \
    \       odd_counts[i] += (length(digits(s)) - length(digits(replace(s, digits(s),\
    \ \"0\")))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i] +=\
    \ s\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"10000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"10000000000\", \"\
    1111111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"10000000000\", \"1111111111\", \"2222222222\"\
    ])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8z80qsb.jl:22\nin expression starting at\
    \ /tmp/tmpt8z80qsb.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwm4oprf.jl:20\nin expression starting at\
    \ /tmp/tmppwm4oprf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, str1, lst[1])\n\
    \    odd_count_str = replace(odd_count_str, str2, lst[2])\n    odd_count_str =\
    \ replace(odd_count_str, str3, lst[3])\n    odd_count_str = replace(odd_count_str,\
    \ str4, lst[4])\n    odd_count_str = replace(odd_count_str, str5, lst[5])\n  \
    \  odd_count_str = replace(odd_count_str, str6, lst[6])\n    odd_count_str = replace(odd_count_str,\
    \ str7, lst[7])\n    odd_count_str = replace(odd_count_str, str8, lst[8])\n  \
    \  odd_count_str = replace(odd_count_str, str9, lst[9])\n    odd_count_str = replace(odd_count_str,\
    \ str10, lst[10])\n    odd_count_str = replace(odd_count_str, str11, lst[11])\n\
    \    odd_count_str = replace(odd_count_str, str12, lst[12])\n    odd_count_str\
    \ = replace(odd_count_str, str13, lst[13])\n    odd_count_str = replace(odd_count_str,\
    \ str14, lst[14])\n    odd_count_str = replace(odd_count_str, str15, lst[15])\n\
    \    odd_count_str = replace(odd_count_str, str16, lst[16])\n    odd_count_str\
    \ = replace(odd_count_str, str17, lst[17])\n    odd_count_str = replace(odd_count_str,\
    \ str18, lst[18])\n    odd_count_str = replace(odd_count_str, str19, lst[19])\n\
    \    odd_count_str = replace(odd_count_str, str20, lst[20])\n    odd_count_str\
    \ = replace(odd_count_str, str21, lst[21])\n    odd_count_str = replace(odd_count_str,\
    \ str22, lst[22])\n    odd_count_str = replace(odd_count_str, str23, lst[23])\n\
    \    odd_count_str = replace(odd_count_str, str24, lst[24])\n    odd_count_str\
    \ = replace(odd_count_str, str25, lst[25])\n    odd_count_str = replace(odd_count_str,\
    \ str26, lst[26])\n    odd_count_str = replace(odd_count_str, str27, lst[27])\n\
    \    odd_count_str = replace(odd_count_str, str28, lst[28])\n    odd_count_str\
    \ = replace(odd_count_str, str29, lst[29])\n    odd_count_str = replace(odd_\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x8e0ulr.jl:43\nin expression starting at\
    \ /tmp/tmp0x8e0ulr.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = odd_counts + count_odd_digits(str)\n    end\n    return odd_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps2fmw3kl.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmps2fmw3kl.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_odd_digits not defined\n \
    \ Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmps2fmw3kl.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps2fmw3kl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps2fmw3kl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmps2fmw3kl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmps2fmw3kl.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps2fmw3kl.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps2fmw3kl.jl:22\ntest set:\
    \ Error During Test at /tmp/tmps2fmw3kl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmps2fmw3kl.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps2fmw3kl.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 != 0, i))\n    end\n    odd_count_str\
    \ = odd_count_str + \" \"\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\", \"\
    1000000001\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\", \"1000000001\", \"1000000002\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\", \"100\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivnrmco6.jl:20\nin expression starting at\
    \ /tmp/tmpivnrmco6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpg9hyb2n3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpg9hyb2n3.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpg9hyb2n3.jl:14\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpg9hyb2n3.jl:14\n \
    \  [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpg9hyb2n3.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpg9hyb2n3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpg9hyb2n3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpg9hyb2n3.jl:14\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /t"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in\
    \ lst\n        odd_counts[str] =  length(findall(str -> str == \"1\", str))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3g_681b.jl:19\nin expression starting at\
    \ /tmp/tmpi3g_681b.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nFor example, [\"1\", \"2\", \"3\"] should return [\"\
    1\", \"2\", \"3\"].\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpnt0jwrkj.jl:1\nin\
    \ expression starting at /tmp/tmpnt0jwrkj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(filter(x -> x % 2 == 1, str)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe5h9w9w.jl:18\nin expression starting at\
    \ /tmp/tmpwe5h9w9w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\")) + length(findall(str,\
    \ \"9\"))\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers representing\
    \ the number of odd characters in each string. For example, if the input vector\
    \ is [\"1\", \"11\", \"111\", \"1111\", \"11111\"], then the output vector should\
    \ be [1, 1, 2, 1, 1, 1].\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wfkki2w.jl:18\nin expression starting at\
    \ /tmp/tmp7wfkki2w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvdkkj_g.jl:20\nin expression starting at\
    \ /tmp/tmpsvdkkj_g.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits)...)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings as input and returns a vector\
    \ of strings as output. Each element of the output should be \"the number of even\
    \ elements in the string i of the input.\" where all the i's should be replaced\
    \ by the number of even digits in the i'th string of the input.\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rae16hw.jl:18\nin expression starting at\
    \ /tmp/tmp1rae16hw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcgb99kd.jl:18\nin expression starting at\
    \ /tmp/tmpbcgb99kd.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = [odd_count_str for i in 1:length(lst)]\n\
    \    return odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpa_doep4w.jl:1\nin\
    \ expression starting at /tmp/tmpa_doep4w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmp6vzjse1l.jl:16\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6vzjse1l.jl:1\n\
    in expression starting at /tmp/tmp6vzjse1l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[findall(str, \"\\d\")] .= length(findall(str, \"\\d\"))\n\
    \    end\n    return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzfq5qzax.jl:14\nin expression starting at /tmp/tmpzfq5qzax.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for str in lst\n        odd_digits +=\
    \ count_digits(str)\n    end\n    return map(str, odd_digits)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp314bf6do.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp314bf6do.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_digits not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp314bf6do.jl:14\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp314bf6do.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp314bf6do.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp314bf6do.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: count_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp314bf6do.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp314bf6do.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp314bf6do.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp314bf6do.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmp314bf6do.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp314bf6do.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits)nput.\"]\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9y21wya.jl:18\nin expression starting at\
    \ /tmp/tmpr9y21wya.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, str, \"the number of odd elements \")\n    end\n   \
    \ odd_count_str = strcat(odd_count_str, \"n the str\")\n    odd_count_str = strcat(odd_count_str,\
    \ length(lst), \"th \")\n    odd_count_str = strcat(odd_count_str, string(length(lst)))\n\
    \    odd_count_str = strcat(odd_count_str, \"nput.\")\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwo_oojf.jl:23\nin expression starting at\
    \ /tmp/tmpzwo_oojf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, strcat(\" the number of odd elements \", count_odd_digits(str),\
    \ \" the str\", count_odd_digits(str), \" of the \", count_odd_digits(str), \"\
    \ input.\"))\n    end\n    odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdzhx0r6.jl:19\nin expression starting at\
    \ /tmp/tmptdzhx0r6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, str))\n\
    \    end\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, lst))\n\
    \    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, str))\n  \
    \  odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 0, str))\n    odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 == 1, str))\n    odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 0, str))\n    odd_count_str = odd_count_str +\
    \ length(filter(x -> x % 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x\
    \ % 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x %\
    \ 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2\
    \ == 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 ==\
    \ 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0,\
    \ str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, str))\n\
    \    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, str))\n  \
    \  odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 0, str))\n    odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 == 1, str))\n    odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 0, str))\n    odd_count_str = odd_count_str +\
    \ length(filter(x -> x % 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 == 0, str))\n    odd_count_str = od\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3vlz8u0b.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3vlz8u0b.jl:1\n\
    in expression starting at /tmp/tmp3vlz8u0b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdju4v4vm.jl:19\nin expression starting at\
    \ /tmp/tmpdju4v4vm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 == 1, s)\n    end\n    odd_count = Vector{String}()\n    for s in lst\n\
    \        odd_count += [\"the number of odd elements \" ^ string(length(odd_digits))\
    \ ^ \"n the str\" ^ string(length(s)) ^ \"n of the \" ^ string(length(s)) ^ \"\
    nput.\"]\n    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1_qvuu9.jl:22\nin expression starting at\
    \ /tmp/tmpo1_qvuu9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ [\"the number of odd elements \" + odd_count_str + \".\"]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_r_cdl2.jl:20\nin expression starting at\
    \ /tmp/tmpp_r_cdl2.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy5is5hpa.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpy5is5hpa.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Char)\n      @ Main /tmp/tmpy5is5hpa.jl:14\n\
    \    [2] (::Base.var\"#104#106\"{var\"#1#2\"})(p::Pair{Int64, Char})\n      @\
    \ Base ./none:0\n    [3] iterate(::Base.Iterators.Filter{Base.var\"#104#106\"\
    {var\"#1#2\"}, Base.Generator{Base.Iterators.Zip{Tuple{Base.EachStringIndex{String},\
    \ String}}, Base.var\"#6#7\"{Pair}}})\n      @ Base.Iterators ./iterators.jl:447\n\
    \    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] findall\n      @ ./array.jl:2253 [inlined]\n    [8] odd_count(lst::Vector{String})\n\
    \      @ Main /tmp/tmpy5is5hpa.jl:14\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpy5is5hpa.jl:23 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpy5is5hpa.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpy5is5hpa.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of integers where the ith element of the output is the number of odd\
    \ digits in string i.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8a2rybdv.jl:21\nin expression starting at\
    \ /tmp/tmp8a2rybdv.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i .== \"1\"))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq13djp08.jl:18\nin expression starting at\
    \ /tmp/tmpq13djp08.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpg9hyb2n3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpg9hyb2n3.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching rem(::Char, ::Int64)\n\
    \  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpg9hyb2n3.jl:14\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpg9hyb2n3.jl:14\n \
    \  [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpg9hyb2n3.jl:23 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpg9hyb2n3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpg9hyb2n3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching rem(::Char, ::Int64)\n  Closest candidates\
    \ are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmpg9hyb2n3.jl:14\n\
    \   [2] filter(f::var\"#1#2\", s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] odd_count(lst::Vector{String})\n     @ Main /t"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqufis35.jl:18\nin expression starting at\
    \ /tmp/tmpiqufis35.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + \n            length(filter(x\
    \ -> x % 2 != 0, s)) + \" the str\" + \n            length(filter(x -> x % 2 ==\
    \ 0, s)) + \" of the str\" + \n            length(filter(x -> x % 2 == 1, s))\
    \ + \".\"\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\", \"\
    1000000001\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\", \"1000000001\", \"1000000002\"\
    ])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn3ekp7y.jl:21\nin expression starting at\
    \ /tmp/tmpbn3ekp7y.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 != 0, i))\n    end\n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nThe function should return the same vector if the\
    \ input vector is empty or if the input vector consists of only empty strings.\n\
    The function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of strings that contain only digits.\nThe\
    \ function should return a vector of strings where each string consists of only\
    \ digits if the input vector consists of \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4xcfwnq.jl:18\nin expression starting at\
    \ /tmp/tmpq4xcfwnq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = [odd_counts[i] + str[i] for i in range(len(str))]\n    end\n\
    \    odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqslk0ih.jl:19\nin expression starting at\
    \ /tmp/tmpvqslk0ih.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdse3um9z.jl:18\nin expression starting at\
    \ /tmp/tmpdse3um9z.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strcount(str, \"1\") + strcount(str, \"8\"))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector where each element is the sum of the number of odd digits in\
    \ each string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiw943g98.jl:18\nin expression starting at\
    \ /tmp/tmpiw943g98.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = \"\" \n    for str in lst\n        odd_count_str = odd_count_str\
    \ * str\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpi79ajiw2.jl:1\nin\
    \ expression starting at /tmp/tmpi79ajiw2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise: Write a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0c4q2m0x.jl:19\nin expression starting at\
    \ /tmp/tmp0c4q2m0x.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd%sof\
    \ the %dd%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h3j3l7b.jl:18\nin expression starting at\
    \ /tmp/tmp5h3j3l7b.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of integers representing the number of odd characters\
    \ in each string. For example, if the input vector is [\"1\", \"11\", \"111\"\
    ], then the output vector should be [1, 3, 1].\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposkjybof.jl:18\nin expression starting at\
    \ /tmp/tmposkjybof.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str -> str == \"1\", str))\n    end\n    \n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector where each element is the sum of the number of odd digits\
    \ in each string in the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5_nf16r.jl:20\nin expression starting at\
    \ /tmp/tmpj5_nf16r.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str -> str == \"1\", str))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.3>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfi1i_2g.jl:18\nin expression starting at\
    \ /tmp/tmpsfi1i_2g.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbz0kt0y.jl:18\nin expression starting at\
    \ /tmp/tmpqbz0kt0y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector where each element is the number of even digits in each string of the\
    \ input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmphfsca4o3.jl:1\nin\
    \ expression starting at /tmp/tmphfsca4o3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count(str, digits(str)))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6j408zjz.jl:18\nin expression starting at\
    \ /tmp/tmp6j408zjz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings as output.\nEach element of the output should be\
    \ \"the number of even elements in the\nstring i of the input.\" where all the\
    \ i's should be replaced by the number\nof even digits in the i'th string of the\
    \ input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ymbg0wx.jl:20\nin expression starting at\
    \ /tmp/tmp9ymbg0wx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd%s\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 3, \"\")\n    odd_count_str = replace(odd_count_str, 4, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 5, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 6, \"\")\n    odd_count_str = replace(odd_count_str, 7, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 8, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 9, \"\")\n    odd_count_str = replace(odd_count_str, 10, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 11, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 12, \"\")\n    odd_count_str = replace(odd_count_str, 13, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 14, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 15, \"\")\n    odd_count_str = replace(odd_count_str, 16, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 17, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 18, \"\")\n    odd_count_str = replace(odd_count_str, 19, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 20, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 21, \"\")\n    odd_count_str = replace(odd_count_str, 22, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 23, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 24, \"\")\n    odd_count_str = replace(odd_count_str, 25, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 26, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 27, \"\")\n    odd_count_str = replace(odd_count_str, 28, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 29, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 30, \"\")\n    odd_count_str = replace(odd_count_str, 31, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 32, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 33, \"\")\n    odd_count_str = replace(odd_count_str, 34, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 35, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 36, \"\")\n    odd_count_str = replace(odd_count_str, 37, \"\")\n    odd_count_str\
    \ = replace(odd_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq9a4ykv.jl:51\nin expression starting at\
    \ /tmp/tmptq9a4ykv.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, \" \", \"\"\
    )\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8tg7enun.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8tg7enun.jl:1\n\
    in expression starting at /tmp/tmp8tg7enun.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for s in lst\n        odd_counts\
    \ = append(odd_counts, length(filter(x -> x % 2 != 0, s)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8eaqey_.jl:18\nin expression starting at\
    \ /tmp/tmpj8eaqey_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append!(odd_counts, count_odd_digits(str))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijeskfza.jl:18\nin expression starting at\
    \ /tmp/tmpijeskfza.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojtcrveg.jl:18\nin expression starting at\
    \ /tmp/tmpojtcrveg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 33, length(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ocb_0a9.jl:48\nin expression starting at\
    \ /tmp/tmp7ocb_0a9.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = [odd_count_str % [length(lst[i]) i] for i in 1:length(lst)]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings. Each element of the output should be \"the\
    \ sum of the odd digits in the i'th string of the input.\" where all the i's should\
    \ be replaced by the sum of the odd digits in the i'th string of the input.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp73ums77e.jl:1\nin\
    \ expression starting at /tmp/tmp73ums77e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"(\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \")\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"+\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"-\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"*\", \"\")\n    odd_count_str = replace(odd_count_str, \"/\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"%\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"^\", \"\")\n    odd_count_str = replace(odd_count_str, \"~\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"=\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \".\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"?\", \"\")\n    odd_count_str = replace(odd_count_str, \"!\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"<\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \">\", \"\")\n    odd_count_str = replace(odd_count_str, \";\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \":\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"/\", \"\")\n    odd_count_str = replace(odd_count_str, \"?\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \".\", \"\")\n    odd_count_str = replace(odd_count_str, \"?\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuav_9_0.jl:49\nin expression starting at\
    \ /tmp/tmptuav_9_0.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in\
    \ enumerate(lst)\n        odd_counts[i] = \"the number of odd elements \" + count(digits(s))\
    \ + \n            \" in the str\" + string(digits(s)) + \" of the str\" + string(digits(s))\
    \ + \"nput.\"\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyg_xdfn.jl:20\nin expression starting at\
    \ /tmp/tmpoyg_xdfn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, \" \", \"\"\
    )\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8tg7enun.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8tg7enun.jl:1\n\
    in expression starting at /tmp/tmp8tg7enun.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + count(digits(s)) +\
    \ \n            \" in the str\" + string(digits(s)) + \" of the str\" + string(digits(i))\
    \ + \".\"\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings. Each element of the output should\
    \ be \"the sum of the odd digits in the i'th string of the input.\" where all\
    \ the i's should be replaced by the sum of the odd digits in the i'th string of\
    \ the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzfq9r_5.jl:19\nin expression starting at\
    \ /tmp/tmpjzfq9r_5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of strings and returns\
    \ a vector where each element is the sum of the number of odd digits in each string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz809_qp.jl:18\nin expression starting at\
    \ /tmp/tmpcz809_qp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(i)\n\
    \    end\n    return [\"the number of odd elements \" <> join(map(str,odd_digits))\
    \ <> \" of the \" <> join(map(str,lst)) <> \" of the \" <> join(map(str,lst))\
    \ <> \".\"]\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"1234567\"])\n\
    </cell>\n<code language=julia-1.4>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamtiw3vr.jl:16\nin expression starting at\
    \ /tmp/tmpamtiw3vr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojtcrveg.jl:18\nin expression starting at\
    \ /tmp/tmpojtcrveg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 != 0, s)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings as output.\
    \ \nEach element of the output should be \"the number of even elements in the\
    \ string i of the input.\" where all the i's should be replaced by the number\
    \ of even digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezmbrhfc.jl:18\nin expression starting at\
    \ /tmp/tmpezmbrhfc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\
    \ + length(findall(str, \"9\"))\n    end\n    odd_count_str = odd_count_str +\
    \ length(findall(str, \"0\")) + length(findall(str, \"6\")) + length(findall(str,\
    \ \"7\")) + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"4\")) + length(findall(str, \"3\")) + length(findall(str, \"2\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"0\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"5\"))\n    odd_count_str = odd_count_str + length(findall(str, \"6\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"7\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"8\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"9\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"10\"))\n    odd_count_str = odd_count_str + length(findall(str, \"11\"))\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"12\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"13\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"14\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"15\"))\n    odd_count_str = odd_count_str + length(findall(str, \"16\"))\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"17\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"18\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"19\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"20\"))\n    odd_count_str = odd_count_str + length(findall(str, \"21\"))\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"22\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"23\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"24\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"25\"))\n    odd_count_str = odd_count_str\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps8o2m976.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps8o2m976.jl:1\n\
    in expression starting at /tmp/tmps8o2m976.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_digits = Vector{Int}()\n    \n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    \n    return map(str, odd_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0qc5g6p.jl:21\nin expression starting at\
    \ /tmp/tmpg0qc5g6p.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 != 0, s)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jif61l2.jl:18\nin expression starting at\
    \ /tmp/tmp3jif61l2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdju4v4vm.jl:19\nin expression starting at\
    \ /tmp/tmpdju4v4vm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, [\"n\"], lst.size)\n\
    \    odd_count_str = replace(odd_count_str, [\"str\"], lst.first)\n    odd_count_str\
    \ = replace(odd_count_str, [\"input\"], lst.last)\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of strings.\
    \ Each element of the output should be \"the number of even elements in the string\
    \ i of the input.\" where all the i's should be replaced by the number of even\
    \ digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmprfqm7ei6.jl:1\nin\
    \ expression starting at /tmp/tmprfqm7ei6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 != 0, s)\n    end\n    return [\"the number of odd elements $n the\
    \ str$n of the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hxqmsox.jl:18\nin expression starting at\
    \ /tmp/tmp2hxqmsox.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return [\"the number of odd elements \" <> join(map(str, odd_digits))\
    \ <> \" of the \" <> join(map(str, lst)) <> \" of the \" <> join(map(str, lst))\
    \ <> \".\"]\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_t3bupc.jl:16\nin expression starting at\
    \ /tmp/tmp1_t3bupc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = [odd_count_str % [length(filter(x\
    \ -> x % 2 == 1, str_to_int(s))) for s in lst]]\n    return odd_count_str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpnhyi9670.jl:1\nin\
    \ expression starting at /tmp/tmpnhyi9670.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings as an input and returns a vector of strings as\
    \ an output. The output vector should have the same length as the input vector.\
    \ \nThe function should return a string that describes the number of odd characters\
    \ in the input string. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is empty. \nThe function should return\
    \ \"the number of odd characters in the input string\" if the input vector is\
    \ of length 1. \nThe function should return \"the number of odd characters in\
    \ the input string\" if the input vector is of length 2. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 3. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 4. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 5. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 6. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 7. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 8. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 9. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 10. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 11. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 12. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 13. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 14. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 15. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 16. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 17. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 18. \nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xeqovc_.jl:19\nin expression starting at\
    \ /tmp/tmp1xeqovc_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i, strsplit(i, \"\")))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given a vector of\
    \ strings, where each string consists of only digits, return a vector.\n    Each\
    \ element i of the output should be \"the number of even elements in the\n   \
    \ string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj684ybc0.jl:18\nin expression starting at\
    \ /tmp/tmpj684ybc0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings as input and\
    \ returns a vector of strings where each string consists of only digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_phjfii.jl:20\nin expression starting at\
    \ /tmp/tmpg_phjfii.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings as output.\nEach element of the output vector should\
    \ be \"the number of even elements in the\nstring i of the input.\" where all\
    \ the i's should be replaced by the number\nof even digits in the i'th string\
    \ of the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvng0fkk.jl:18\nin expression starting at\
    \ /tmp/tmpyvng0fkk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = join(map(odd_count, lst))\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"n-1\")\n    odd_count_str = replace(odd_count_str, \"n-1\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n-8\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n-7\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n-6\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n-5\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n-4\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n-3\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n-2\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n-1\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n\", \"n+1\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+1\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+2\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+3\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n+4\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+5\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+6\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+7\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n+8\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+9\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+10\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+11\", \"n\"\
    )\n    odd_count_str = replace(odd_count_str, \"n+12\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+13\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+14\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+15\", \"n\"\
    )\n    odd_count_str = replace(odd_count_str, \"n+16\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+17\", \"n\")\n    odd_count_str = replace(odd_count_\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnx5u5ffa.jl:42\nin expression starting at\
    \ /tmp/tmpnx5u5ffa.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str =\
    \ odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings where\
    \ each string consists of only digits followed by the number of odd digits in\
    \ that string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxarz7y4.jl:19\nin expression starting at\
    \ /tmp/tmplxarz7y4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @view lst |> map(x->split(x,\"0\"))\n    odd_count_str\
    \ = map(x -> length(x),odd_count_str)\n    odd_count_str = map(x -> sum(x),odd_count_str)\n\
    \    odd_count_str = map(x -> x==0 ? 0 : x,odd_count_str)\n    odd_count_str =\
    \ map(x -> x==1 ? 1 : x,odd_count_str)\n    odd_count_str = map(x -> x==2 ? 2\
    \ : x,odd_count_str)\n    odd_count_str = map(x -> x==3 ? 3 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==4 ? 4 : x,odd_count_str)\n    odd_count_str =\
    \ map(x -> x==5 ? 5 : x,odd_count_str)\n    odd_count_str = map(x -> x==6 ? 6\
    \ : x,odd_count_str)\n    odd_count_str = map(x -> x==7 ? 7 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==8 ? 8 : x,odd_count_str)\n    odd_count_str =\
    \ map(x -> x==9 ? 9 : x,odd_count_str)\n    odd_count_str = map(x -> x==10 ? 10\
    \ : x,odd_count_str)\n    odd_count_str = map(x -> x==11 ? 11 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==12 ? 12 : x,odd_count_str)\n    odd_count_str\
    \ = map(x -> x==13 ? 13 : x,odd_count_str)\n    odd_count_str = map(x -> x==14\
    \ ? 14 : x,odd_count_str)\n    odd_count_str = map(x -> x==15 ? 15 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==16 ? 16 : x,odd_count_str)\n    odd_count_str\
    \ = map(x -> x==17 ? 17 : x,odd_count_str)\n    odd_count_str = map(x -> x==18\
    \ ? 18 : x,odd_count_str)\n    odd_count_str = map(x -> x==19 ? 19 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==20 ? 20 : x,odd_count_str)\n    odd_count_str\
    \ = map(x -> x==21 ? 21 : x,odd_count_str)\n    odd_count_str = map(x -> x==22\
    \ ? 22 : x,odd_count_str)\n    odd_count_str = map(\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1n_wu4s8.jl:41\nin expression starting at\
    \ /tmp/tmp1n_wu4s8.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings as input and returns a vector\
    \ where each element is the sum of the number of odd digits in each string.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdza2bii1.jl:19\nin expression starting at\
    \ /tmp/tmpdza2bii1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst)+1)\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst)+2)\n    odd_count_str = replace(odd_count_str, 4, length(lst)+3)\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst)+4)\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst)+5)\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst)+6)\n    odd_count_str = replace(odd_count_str, 8, length(lst)+7)\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst)+8)\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst)+9)\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst)+10)\n    odd_count_str = replace(odd_count_str, 12, length(lst)+11)\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst)+12)\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst)+13)\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst)+14)\n    odd_count_str = replace(odd_count_str, 16, length(lst)+15)\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst)+16)\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst)+17)\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst)+18)\n    odd_count_str = replace(odd_count_str, 20, length(lst)+19)\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst)+20)\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst)+21)\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst)+22)\n    odd_count_str = replace(odd_count_str, 24, length(lst)+23)\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst)+24)\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst)+25)\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst)+26)\n    odd_count_str = replace(odd_count_str, 28, length(lst)+27)\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst)+28)\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst)+29)\n    odd_count_str = replace(od\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq_id1qi.jl:44\nin expression starting at\
    \ /tmp/tmpkq_id1qi.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = append(odd_counts, length(filter(x -> x % 2 != 0, str)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybklbbl9.jl:18\nin expression starting at\
    \ /tmp/tmpybklbbl9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strcount(str, \"1\") + strcount(str, \"8\"))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector where\
    \ each element is the number of odd characters in the i'th string of the input.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_cmgrz4.jl:18\nin expression starting at\
    \ /tmp/tmpy_cmgrz4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    odd_count_str .= str4n(lst[1])\n    odd_count_str\
    \ .= str4n(lst[2])\n    odd_count_str .= str4n(lst[3])\n    odd_count_str .= str4n(lst[4])\n\
    \    odd_count_str .= str4n(lst[5])\n    odd_count_str .= str4n(lst[6])\n    odd_count_str\
    \ .= str4n(lst[7])\n    odd_count_str .= str4n(lst[8])\n    odd_count_str .= str4n(lst[9])\n\
    \    odd_count_str .= str4n(lst[10])\n    odd_count_str .= str4n(lst[11])\n  \
    \  odd_count_str .= str4n(lst[12])\n    odd_count_str .= str4n(lst[13])\n    odd_count_str\
    \ .= str4n(lst[14])\n    odd_count_str .= str4n(lst[15])\n    odd_count_str .=\
    \ str4n(lst[16])\n    odd_count_str .= str4n(lst[17])\n    odd_count_str .= str4n(lst[18])\n\
    \    odd_count_str .= str4n(lst[19])\n    odd_count_str .= str4n(lst[20])\n  \
    \  odd_count_str .= str4n(lst[21])\n    odd_count_str .= str4n(lst[22])\n    odd_count_str\
    \ .= str4n(lst[23])\n    odd_count_str .= str4n(lst[24])\n    odd_count_str .=\
    \ str4n(lst[25])\n    odd_count_str .= str4n(lst[26])\n    odd_count_str .= str4n(lst[27])\n\
    \    odd_count_str .= str4n(lst[28])\n    odd_count_str .= str4n(lst[29])\n  \
    \  odd_count_str .= str4n(lst[30])\n    odd_count_str .= str4n(lst[31])\n    odd_count_str\
    \ .= str4n(lst[32])\n    odd_count_str .= str4n(lst[33])\n    odd_count_str .=\
    \ str4n(lst[34])\n    odd_count_str .= str4n(lst\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvmyfdr5.jl:49\nin expression starting at\
    \ /tmp/tmpsvmyfdr5.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 1))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 2))\n \
    \   odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 3))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 4))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 5))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 6))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 7))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 8))\n \
    \   odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 9))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 10))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 11))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 12))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 13))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 14))\n\
    \    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 15))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 16))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 17))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 18))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 19))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 20))\n\
    \    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 21))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 22))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 23))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 24))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 25))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 26))\n\
    \    od\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5vf8m_6d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5vf8m_6d.jl:1\n\
    in expression starting at /tmp/tmp5vf8m_6d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_strs = Vector{String}(undef, length(lst))\n\
    \    for i in 1:length(lst)\n        odd_count_strs[i] = odd_count_str(length(lst[i]),\
    \ i, length(lst[i]))\n    end\n    return odd_count_strs\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpr60c6toq.jl:1\nin\
    \ expression starting at /tmp/tmpr60c6toq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count_odd_digits(str))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxii755uc.jl:18\nin expression starting at\
    \ /tmp/tmpxii755uc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str -> str == \"1\", str))\n    end\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoa0k7ago.jl:18\nin expression starting at\
    \ /tmp/tmpoa0k7ago.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\"\n    number of odd elements in the str{n}ng n\n\
    \    \"\"\"\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmylw1_t4.jl:47\nin expression starting at\
    \ /tmp/tmpmylw1_t4.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ as input and returns a vector of strings as output.\nThe output vector should\
    \ contain all the strings in the input vector but with the first letter of each\
    \ string capitalized.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp702lrer.jl:18\nin expression starting at\
    \ /tmp/tmpp702lrer.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n    \n   \
    \ return odd_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmput8u7u4u.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmput8u7u4u.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: count_odd_digits not defined\n \
    \ Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmput8u7u4u.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmput8u7u4u.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmput8u7u4u.jl:24\ntest set:\
    \ Error During Test at /tmp/tmput8u7u4u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmput8u7u4u.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmput8u7u4u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmput8u7u4u.jl:24\ntest set:\
    \ Error During Test at /tmp/tmput8u7u4u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ count_odd_digits not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmput8u7u4u.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmput8u7u4u.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = \"\" \n    for i in lst\n        odd_count_str\
    \ <- odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings. Each element of the output should be \"the number of even\
    \ elements in the\nstring i of the input.\" where all the i's should be replaced\
    \ by the number\nof even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpklpyhcfn.jl:1\nin\
    \ expression starting at /tmp/tmpklpyhcfn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp62bnvyaj.jl:1\nin\
    \ expression starting at /tmp/tmp62bnvyaj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd%sof\
    \ the %dd%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h3j3l7b.jl:18\nin expression starting at\
    \ /tmp/tmp5h3j3l7b.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector where\
    \ each element is the number of odd digits in each string. For example, [\"1234567\"\
    , \"311111111\"] should return [\"4\", \"8\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5zrzt5a.jl:18\nin expression starting at\
    \ /tmp/tmpx5zrzt5a.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = \"\".join(map(odd_count_str, map(length,\
    \ lst)))\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpx9ij444p.jl:1\nin\
    \ expression starting at /tmp/tmpx9ij444p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str -> str == '1', str))\n    end\n    \n \
    \   return odd_count_str\nend\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp19m_lagf.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp19m_lagf.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp19m_lagf.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp19m_lagf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19m_lagf.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp19m_lagf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching +(::String, ::Int64)\n  Closest candidates\
    \ are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmp19m_lagf.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro e"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86m0ddcb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86m0ddcb.jl:1\n\
    in expression starting at /tmp/tmp86m0ddcb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings as input and returns a vector of strings where each string consists\
    \ of only odd digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcv1ec113.jl:18\nin expression starting at\
    \ /tmp/tmpcv1ec113.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @view lst |> map(x->split(x,\"n\")) |> map(x->map(x->split(x,\"\
    e\")) |> map(x->map(x->split(x,\"s\")) |> map(x->map(x->split(x,\"t\")) |> map(x->map(x->split(x,\"\
    i\")) |> map(x->map(x->split(x,\"o\")) |> map(x->map(x->split(x,\"d\")) |> map(x->map(x->split(x,\"\
    t\")) |> map(x->map(x->split(x,\"g\")) |> map(x->map(x->split(x,\"r\")) |> map(x->map(x->split(x,\"\
    e\")) |> map(x->map(x->split(x,\"s\")) |> map(x->map(x->split(x,\"t\")) |> map(x->map(x->split(x,\"\
    g\")) |> map(x->map(x->split(x,\"r\")) |> map(x->map(x->split(x,\"e\")) |> map(x->map(x->split(x,\"\
    s\")) |> map(x->map(x->split(x,\"t\")) |> map(x->map(x->split(x,\"g\")) |> map(x->map(x->split(x,\"\
    r\")) |> map(x->map(x->split(x,\"e\")) |> map(x->map(x->split(x,\"s\")) |> map(x->map(x->split(x,\"\
    t\")) |> map(x->map(x->split(x,\"g\")) |> map(x->map(x->split(x,\"r\")) |> map(x->map(x->split(x,\"\
    e\")) |> map(x->map(x->split(x,\"s\")) |> map(x->map(x->split(x,\"t\")) |> map(x->map(x->split(x,\"\
    g\")) |> map(x->map(x->split(x,\"r\")) |> map(x->map(x->split(x,\"e\")) |> map(x->map(x->split(x,\"\
    s\")) |> map(x->map(x->split(x,\"t\")) |> map(x->map(x->split(x,\"g\")) |> map(x->map(x->split(x,\"\
    r\")) |> map(x->map(x->split(x,\"e\")) |> map(x->map(x->split(\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwg5j3vv.jl:15\nin expression starting at\
    \ /tmp/tmpkwg5j3vv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, str1, \"\"\
    )\n    odd_count_str = replace(odd_count_str, str2, \"\")\n    odd_count_str =\
    \ replace(odd_count_str, str3, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str4, \"\")\n    odd_count_str = replace(odd_count_str, str5, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str6, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str7, \"\")\n    odd_count_str = replace(odd_count_str, str8, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str9, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str10, \"\")\n    odd_count_str = replace(odd_count_str, str11, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str12, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str13, \"\")\n    odd_count_str = replace(odd_count_str, str14, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str15, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str16, \"\")\n    odd_count_str = replace(odd_count_str, str17, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str18, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str19, \"\")\n    odd_count_str = replace(odd_count_str, str20, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str21, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str22, \"\")\n    odd_count_str = replace(odd_count_str, str23, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str24, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str25, \"\")\n    odd_count_str = replace(odd_count_str, str26, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str27, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str28, \"\")\n    odd_count_str = replace(odd_count_str, str29, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str30, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str31, \"\")\n    odd_count_str = replace(odd_count_str, str32, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str33, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str34, \"\")\n    odd_count_str = replace(odd_count_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux82d55s.jl:48\nin expression starting at\
    \ /tmp/tmpux82d55s.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + \n            string(count(digits(lst[i])))\
    \ + \" of the \" + \n            string(digits(lst[i])) + \" of the \" + \n  \
    \          string(lst[i]) + \".\"\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxw2iu2kv.jl:22\nin expression starting at\
    \ /tmp/tmpxw2iu2kv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\"\
    \ \n    odd_count_str = [odd_count_str % sum((map(len, lst))) \n        for lst\
    \ in lst]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp83l6g2ke.jl:1\nin\
    \ expression starting at /tmp/tmp83l6g2ke.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = str\n        for n in str\n            if n == '1'\n                odd_count_str\
    \ = odd_count_str + \"n\"\n            else\n                odd_count_str = odd_count_str\
    \ + \"n\"\n            end\n        end\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0_ooscw.jl:28\nin expression starting at\
    \ /tmp/tmpo0_ooscw.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[findall(str, \"\\d\")] .= length(findall(str, \"\\d\"))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Given a vector of strings, where each string consists of only digits, return\
    \ a vector.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpysns9sdx.jl:14\nin expression starting at /tmp/tmpysns9sdx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = odd_counts + count_odd_digits(str)\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvzg1yur.jl:18\nin expression starting at\
    \ /tmp/tmptvzg1yur.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[str2int(str)] = sum(str == \"1\") * \"the number of odd elements\
    \ \" + str + \"n the str\" + str + \"n of the \" + str + \"nput.\"\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.\n\
    using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1m181lmy.jl:18\nin expression starting at\
    \ /tmp/tmp1m181lmy.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepa8u8gu.jl:18\nin expression starting at\
    \ /tmp/tmpepa8u8gu.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxa4noduy.jl:20\nin expression starting at\
    \ /tmp/tmpxa4noduy.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 0, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str, \"(\", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \")\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"+\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"-\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"*\", \"\")\n    odd_count_str = replace(odd_count_str, \"/\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"%\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"^\", \"\")\n    odd_count_str = replace(odd_count_str, \"~\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"=\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\t\", \"\")\n\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t\
    @test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1jr4av5c.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jr4av5c.jl:1\n\
    in expression starting at /tmp/tmp1jr4av5c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = \"\" \n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp3lndq4im.jl:1\nin\
    \ expression starting at /tmp/tmp3lndq4im.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector of integers\
    \ where the ith element of the output is the length of the longest substring of\
    \ the ith string in the input vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpna9xqkfg.jl:18\nin expression starting at\
    \ /tmp/tmpna9xqkfg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9w6hyvb.jl:18\nin expression starting at\
    \ /tmp/tmpp9w6hyvb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ms4uc42.jl:18\nin expression starting at\
    \ /tmp/tmp4ms4uc42.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst[3]))\n    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst[7]))\n    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst[11]))\n    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst[15]))\n    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst[19]))\n    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst[23]))\n    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst[27]))\n    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n\
    \    odd_count_str = replace(\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyevkqy4.jl:46\nin expression starting at\
    \ /tmp/tmpzyevkqy4.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\
    \ + length(findall(str, \"9\"))\n    end\n    \n    return odd_count_str\nend\n\
    </cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscexr8g3.jl:21\nin expression starting at\
    \ /tmp/tmpscexr8g3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for s in lst\n  \
    \      odd_counts[findall(isdigit, s)] .= length(findall(isodd, s))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcn50bkz.jl:18\nin expression starting at\
    \ /tmp/tmpbcn50bkz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $odd_digits\
    \ for the string $i.\" for i in lst]\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nEach element i of the output should be \"the number of even elements\
    \ in the\nstring i of the input.\" where all the i's should be replaced by the\
    \ number\nof even digits in the i'th string of the input.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9qzuxpo.jl:18\nin expression starting at\
    \ /tmp/tmpr9qzuxpo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmphr9lj7ru.jl:1\nin\
    \ expression starting at /tmp/tmphr9lj7ru.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n\
    \        odd_counts[str2int(str)] .= length(findall(str -> str == '1', str))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3qfkncz.jl:18\nin expression starting at\
    \ /tmp/tmpb3qfkncz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = \"\" \n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @sprintf not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp2_0xeepj.jl:1\nin\
    \ expression starting at /tmp/tmp2_0xeepj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\n    Each element i of the output\
    \ should be \"the number of even elements in the\n    string i of the input.\"\
    \ where all the i's should be replaced by the number\n    of even digits in the\
    \ i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg51fo2mw.jl:18\nin expression starting at\
    \ /tmp/tmpg51fo2mw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpaavrffa4.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpaavrffa4.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpaavrffa4.jl:11\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpaavrffa4.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaavrffa4.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaavrffa4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpaavrffa4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching odd_count(::String)\n  Closest candidates\
    \ are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpaavrffa4.jl:11\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpaavrffa4.jl:14\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaavrffa4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaavrffa4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpaavrffa4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Vector{String})\
    \ at /tmp/tmpaavrffa4.jl:11\n  Stacktrace:\n   [1]"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, str, \"the number of odd elements \")\n    end\n   \
    \ odd_count_str = strcat(odd_count_str, \" of the \", length(lst), \" \", string(lst),\
    \ \"nput.\")\n    return odd_count_str\nend\nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq64qbnxa.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpq64qbnxa.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  UndefVarError: strcat not defined\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpq64qbnxa.jl:15\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq64qbnxa.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq64qbnxa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq64qbnxa.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  UndefVarError: strcat not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n\
    \     @ Main /tmp/tmpq64qbnxa.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq64qbnxa.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq64qbnxa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq64qbnxa.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  UndefVarError:\
    \ strcat not defined\n  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n \
    \    @ Main /tmp/tmpq64qbnxa.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq64qbnxa.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str -> str == \"1\", str))\n    end\n    \n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z86bgvz.jl:20\nin expression starting at\
    \ /tmp/tmp_z86bgvz.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for s in lst\n        odd_counts\
    \ = push!(odd_counts, length(filter(x -> x % 2 != 0, s)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.\n    Each element\
    \ i of the output should be \"the number of even elements in the\n    string i\
    \ of the input.\" where all the i's should be replaced by the number\n    of even\
    \ digits in the i'th string of the input.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3pqisqw.jl:18\nin expression starting at\
    \ /tmp/tmpq3pqisqw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdju4v4vm.jl:19\nin expression starting at\
    \ /tmp/tmpdju4v4vm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = @view [odd_count(i) for i in lst]\n    return odd_count_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number\
    \ of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements\
    \ 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmprro8045a.jl:1\nin expression starting at /tmp/tmprro8045a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x\
    \ -> x % 2 != 0, s)\n    end\n    return map(x -> \"the number of odd elements\
    \ \" <> x <> \" of the \" <> x <> \" of the input.\", odd_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_omd6lf.jl:16\nin expression starting at\
    \ /tmp/tmpo_omd6lf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\
    \ + length(findall(str, \"9\"))\n    end\n    odd_count_str = odd_count_str +\
    \ length(findall(str, \"0\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"5\"))\n    odd_count_str = odd_count_str + length(findall(str, \"6\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"7\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"3\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"2\"))\n    odd_count_str = odd_count_str + length(findall(str, \"1\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppuplhbg2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppuplhbg2.jl:1\n\
    in expression starting at /tmp/tmppuplhbg2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 == 1, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ as input and returns a vector of strings as output. \nFor each string in the\
    \ input vector, append the string \"the string \" to the string and append \"\
    is odd\" to the string.\nusing Test\n\n@testset begin\n\ncandidate = odd_count;\n\
    \t@test(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"\
    ]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number\
    \ of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh3ct8nk.jl:18\nin expression starting at\
    \ /tmp/tmpfh3ct8nk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsealsx5.jl:18\nin expression starting at\
    \ /tmp/tmpmsealsx5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp204euznm.jl:18\nin expression starting at\
    \ /tmp/tmp204euznm.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = odd_counts + count_odd_digits(str)\n    end\n    return odd_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvze7whez.jl:18\nin expression starting at\
    \ /tmp/tmpvze7whez.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count_odd_digits(str))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxii755uc.jl:18\nin expression starting at\
    \ /tmp/tmpxii755uc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    \nusing Test\n\n@testset begin\n\n\
    candidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"271\"\
    , \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlgztf6m.jl:1\nin expression starting at /tmp/tmprlgztf6m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpaavrffa4.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpaavrffa4.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpaavrffa4.jl:11\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpaavrffa4.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaavrffa4.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaavrffa4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpaavrffa4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching odd_count(::String)\n  Closest candidates\
    \ are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpaavrffa4.jl:11\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpaavrffa4.jl:14\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaavrffa4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaavrffa4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpaavrffa4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Vector{String})\
    \ at /tmp/tmpaavrffa4.jl:11\n  Stacktrace:\n   [1]"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuhuway5n.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpuhuway5n.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"1234567\"]) == [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n  MethodError: no method matching odd_count(::String)\n\
    \  Closest candidates are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpuhuway5n.jl:11\n\
    \  Stacktrace:\n   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpuhuway5n.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuhuway5n.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuhuway5n.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpuhuway5n.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    ]\n  MethodError: no method matching odd_count(::String)\n  Closest candidates\
    \ are:\n    odd_count(!Matched::Vector{String}) at /tmp/tmpuhuway5n.jl:11\n  Stacktrace:\n\
    \   [1] odd_count(lst::Vector{String})\n     @ Main /tmp/tmpuhuway5n.jl:14\n \
    \  [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuhuway5n.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuhuway5n.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpuhuway5n.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the\
    \ 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n  MethodError:\
    \ no method matching odd_count(::String)\n  Closest candidates are:\n    odd_count(!Matched::Vector{String})\
    \ at /tmp/tmpuhuway5n.jl:11\n  Stacktrace:\n   [1]"
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n    \
    \    odd_counts = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n\
    \    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ as an input and returns a vector of strings where each string consists of only\
    \ digits.\nThe function should return the same vector if the input vector consists\
    \ of only strings.\nThe function should return an empty vector if the input vector\
    \ consists of strings that consist of only digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = odd_count;\n\t@test(candidate([\"1234567\"]) == [\"the number of\
    \ odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2rmr2lx.jl:19\nin expression starting at\
    \ /tmp/tmpp2rmr2lx.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a vector of strings, where each string consists of only digits,\
    \ return a vector.\n    Each element i of the output should be \"the number of\
    \ odd elements in the\n    string i of the input.\" where all the i's should be\
    \ replaced by the number\n    of odd digits in the i'th string of the input.\n\
    \n    >>> odd_count([\"1234567\"])\n    [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
    \ \n    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(x -> \"the number of odd elements $x of the $x string.\"\
    , odd_digits)\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings as an argument\
    \ and returns a vector where each element is the sum of the number of odd digits\
    \ in each string. For example, [\"1234567\", \"3\"] should return [5, 2].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\t@test(candidate([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\n\t@test(candidate([\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr0za_85.jl:18\nin expression starting at\
    \ /tmp/tmpsr0za_85.jl:18\n"
  stdout: ''
