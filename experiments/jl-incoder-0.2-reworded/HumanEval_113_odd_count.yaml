name: HumanEval_113_odd_count
language: jl
prompt: "\"\"\"Given a vector of strings, where each string consists of only digits,\
  \ return a vector.\n    Each element i of the output should be \"the number of odd\
  \ elements in the\n    string i of the input.\" where all the i's should be replaced\
  \ by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count([\"\
  1234567\"])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
  \    >>> odd_count([\"3\", \"11111111\"])\n    [\"the number of odd elements 1n\
  \ the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of\
  \ the 8nput.\"]\n    \"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = odd_count;\n\t@test(candidate([\"\
  1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
  \t@test(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the\
  \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
  \ 8nput.\"])\n\t@test(candidate([\"271\", \"137\", \"314\"]) == [\"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n\
  \ the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of\
  \ the 2nput.\"])\nend\n"
completions: ["    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 != 0, i))\n    end\n    odd_count_str\
    \ = odd_count_str + \" \"\n    return odd_count_str\nend", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = append(odd_counts, count(str, digits(str)))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count(str, '1'))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers where the ith\
    \ element is the number of odd digits in the\nith string of the input. For example,\
    \ if the input vector is [\"1234567\", \"123\", \"111\", \"222\", \"333\", \"\
    4444\", \"555\", \"666\", \"777\", \"8888\", \"9999\"] then the output vector\
    \ should be [5, 3, 1, 1, 2, 1, 1, 2, 1, 1, 1]. Make sure your function works with\
    \ vectors of different lengths.", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = push!(odd_counts,\
    \ length(findall(str -> str == \"1\", str)))\n    end\n    return odd_counts\n\
    end", "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ sum of the number of odd digits in each string of the input.", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(findall(x -> x % 2 != 0, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as input and\
    \ returns a vector of strings as output. Each element of the output should be\
    \ \"the sum of the odd digits in the i'th string of the input.\" where all the\
    \ i's should be replaced by the sum of the odd digits in the i'th string of the\
    \ input.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1,\
    \ length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n \
    \   odd_count_str = replace(odd_count_str, 3, length(lst))\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    odd_counts = Vector{String}(undef,\
    \ 0)\n    for i in lst\n        odd_counts = push!(odd_counts, length(findall(i,\
    \ digits_odd)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dd%sof the %dnput.\" \n    odd_count_str = replace(odd_count_str, [\"n\"\
    =>length(lst)])\n    odd_count_str = replace(odd_count_str, [\"d\"=>digits(lst)])\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.3>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.3>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_strs = Vector{String}(undef, length(lst))\n  \
    \  for (i,s) in enumerate(lst)\n        odd_count_strs[i] = odd_count_str(length(s),\
    \ i, length(s))\n    end\n    return odd_count_strs\nend\n</cell>\n<code language=julia-1.0>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ is the concatenation of all the odd digits in each string. For example, [\"\
    1234567\", \"3\"] should return [\"25\", \"3\"].", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(filter(x\
    \ -> x % 2 != 0, s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of integers where the integers represent the\
    \ number of odd characters in the strings in the input vector.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings as input and returns a vector\
    \ of strings as output.\nEach element of the output should be \"the number of\
    \ even elements in the\nstring i of the input.\" where all the i's should be replaced\
    \ by the number\nof even digits in the i'th string of the input.", "    \n   \
    \ odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strcount(str, \"1\") + strcount(str, \"8\") + strcount(str, \"9\"))\n    end\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.4>", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"1111111\", \"11111111\"])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of strings and returns a vector of strings where\
    \ each string consists of only digits.\n    Each element i of the output should\
    \ be \"the number of even elements in the\n    string i of the input.\" where\
    \ all the i's should be replaced by the number\n    of even digits in the i'th\
    \ string of the input.", "    odd_digits = Vector{Int}()\n    for i in lst\n \
    \       odd_digits += count(digits(i))\n    end\n    return [\"the number of odd\
    \ elements $odd_digits the str$length(odd_digits) of the $length(odd_digits)nput.\"\
    ]\nend\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) ==\
    \ [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings where each string consists of only digits.", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = push!(odd_counts, length(findall(str\
    \ -> str == \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    odd_digits = Vector{String}(undef, 0)\n    for\
    \ str in lst\n        odd_digits += findall(x -> x % 2 == 1, str)\n    end\n \
    \   return odd_digits\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise: Write a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.\n\
    \    Each element i of the output should be \"the number of even elements in the\n\
    \    string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += findall(i .== \"1\", i)\n    end\n  \
    \  return [\"the number of odd elements $odd_digits the str$length(odd_digits)\
    \ of the $length(odd_digits) input.\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings as input and returns a vector of strings as output.\nEach element\
    \ of the output should be \"the number of even elements in the string i of the\
    \ input.\" where all the i's should be replaced by the number of even digits in\
    \ the i'th string of the input.", "    \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dd\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = replace(odd_count_str, ",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = ", "    odd_count_str = @sprintf \"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, lst)\n    return odd_count_str\nend", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 4, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst))\n    odd_count_str = replace(odd_count_str, 8, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst))\n    odd_count_str = replace(odd_count_str, 12, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst))\n    odd_count_str = replace(odd_count_str, 16, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst))\n    odd_count_str = replace(odd_count_str, 20, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst))\n    odd_count_str = replace(odd_count_str, 24, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst))\n    odd_count_str = replace(odd_count_str, 28, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 30, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 31, length(lst))\n    odd_count_str = replace(odd_count_str, 32, length(lst))\n\
    \    odd_count_str = ", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst[1]))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst[2]))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst[3]))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst[4]))\n    odd_count_str = replace(odd_count_str, 6, length(lst[5]))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst[6]))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst[7]))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst[8]))\n    odd_count_str = replace(odd_count_str, 10, length(lst[9]))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst[10]))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst[11]))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst[12]))\n    odd_count_str = replace(odd_count_str, 14, length(lst[13]))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst[14]))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst[15]))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst[16]))\n    odd_count_str = replace(odd_count_str, 18, length(lst[17]))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst[18]))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst[19]))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst[20]))\n    odd_count_str = replace(odd_count_str, 22, length(lst[21]))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst[22]))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst[23]))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst[24]))\n    odd_count_str = replace(odd_count_str, 26, length(lst[25]))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst[26]))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst[27]))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst[28]))\n    odd_count_str = replace(odd_", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = [odd_count_str % \n        sum(map(x -> count(x, \"1\"\
    ), lst)), \n        odd_count_str % \n        sum(map(x -> count(x, \"8\"), lst))]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = ", "    \n    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(filter(x\
    \ -> x % 2 != 0, s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\")) + length(findall(str,\
    \ \"9\"))\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a vector of strings, where each string consists of only digits, return\
    \ a vector.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.", "    \n  \
    \  odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    \n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    odd_count_str = @sprintf \"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for str in lst\n        odd_counts[str] =  length(findall(str\
    \ -> str =~ \"^[0-9]+$\", str))\n    end\n    return odd_counts\nend", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 7, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 0, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \" \")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str, \"'\", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \"(\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \")\", \"\")\n    odd_count_str = replace(odd_count_str, \"[\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"]\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"{\", \"\")\n    odd_count_str = replace(odd_count_str, \"}\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"%\", \"\")\n    odd_count_str = replace(odd_count_str, \"!\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"@\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"#\", \"\")\n    odd_count_str = replace(odd_count_str, \"$\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"%\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"^\", \"\")\n    odd_count_str = replace(odd_count_str, \"&\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"*\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"+\", \"\")\n    odd_count_str = replace(odd_count_str, \",\", \"\")\n", " \
    \   odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n\
    \    odd_count_str = replace(odd_count_str, [\"n\"], map(length, lst))\n    odd_count_str\
    \ = replace(odd_count_str, [\"d\"], map(digits, lst))\n    odd_count_str = replace(odd_count_str,\
    \ [\"str\"], map(str, lst))\n    return odd_count_str\nend", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_strs = Vector{String}(undef, length(lst))\n    for (i,s) in\
    \ enumerate(lst)\n        odd_count_strs[i] = odd_count_str(length(s), i, length(s))\n\
    \    end\n    return odd_count_strs\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = push!(odd_counts,\
    \ count(str, digits))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n\
    \        odd_counts[i] = length(findall(i .== \"1\", lst[i]))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str = join(map(odd_count,\
    \ lst))\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1ns\", \" ns \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1ns\", \" ns \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\"\
    , \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n \
    \   odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str\
    \ = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str,\
    \ r\"\\1n\", \" n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \"\
    \ n \")\n    odd_count_str = replace(odd_count_str, r\"\\1n\", \" n \")\n    odd_",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\")) \n    end\n    return\
    \ [\"the number of odd elements \" + odd_count_str + \".\"]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\n    Each element i of the output should be \"the number\
    \ of even elements in the\n    string i of the input.\" where all the i's should\
    \ be replaced by the number\n    of even digits in the i'th string of the input.",
  "    \n    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_", "    \n    odd_count_str = \"\"\n    for i in lst\n\
    \        odd_count_str = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\n\
    end", "    \n    odd_count_str = \"\"\n    \n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ [\"the number of odd elements \" + odd_count_str + \".\"]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings as an input and returns a vector of strings as\
    \ an output.\nThe output vector should contain the number of times the string\
    \ \"11\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    11111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output vector should contain the number\
    \ of times the string \"1111111\" appears in the input vector.\nThe output vector\
    \ should contain the number of times the string \"1111111\" appears in the input\
    \ vector.\nThe output vector should contain the number of times the string \"\
    1111111\" appears in the input vector.\nThe output ", "    odd_count_str = \"\"\
    \n    for str in lst\n        odd_count_str = strcat(odd_count_str, str, \"the\
    \ number of odd elements \")\n    end\n    odd_count_str = strcat(odd_count_str,\
    \ \" of the \", length(lst), \" \", string(lst), \"nput.\")\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\n    Each element i of the output\
    \ should be \"the number of even elements in the\n    string i of the input.\"\
    \ where all the i's should be replaced by the number\n    of even digits in the\
    \ i'th string of the input.", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(findall(s ==\
    \ \"1\", s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    @test odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@test odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers where the ith\
    \ element is the number of odd digits in string i.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = ", "    \n    odd_count_str = \"\"\n \
    \   \n    for i in lst\n        odd_count_str = odd_count_str + length(findall(i,\
    \ digits)) \n    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings as input and returns a vector where each element of the output is\
    \ the sum of the number of odd digits in each string of the input.", "    \n \
    \   odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(i)\n    end\n    return odd_count_str\nend", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for str in lst\n        odd_counts[str] =  length(findall(str\
    \ -> str == '1', str))\n    end\n    return odd_counts\nend", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(i, digits)\n\
    \    end\n    return map(string, (odd_digits))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number\
    \ of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
    \ 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    \n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = strcat(odd_count_str, str, \"\\n\")\n    end\n    odd_count_str\
    \ = odd_count_str[1:end-1]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector where each element is the length of the longest string in the input.",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    \n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 4, length(lst))\n    odd_count_str = replace(odd_count_str, 5, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 7, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 9, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 10, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 11, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 12, length(lst))\n    odd_count_str = replace(odd_count_str, 13, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 14, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 15, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 16, length(lst))\n    odd_count_str = replace(odd_count_str, 17, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 18, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 19, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 20, length(lst))\n    odd_count_str = replace(odd_count_str, 21, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 22, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 23, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 24, length(lst))\n    odd_count_str = replace(odd_count_str, 25, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 26, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 27, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 28, length(lst))\n    odd_count_str = replace(odd_count_str, 29, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 30, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 31, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 32, length(lst))\n    odd_count_str = ", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = append!(odd_counts, count(str,\
    \ '1'))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(filter(x -> x % 2 == 1, s))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_digits = Vector{String}(undef,\
    \ 0)\n    for s in lst\n        odd_digits += findall(x -> x % 2 != 0, s)\n  \
    \  end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"]\n@assert odd_count([\"3\", \"11111111\"]) == [\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers representing\
    \ the number of odd characters in each string. For example, [\"hello\", \"world\"\
    ] should return [5, 1]. Assume that all strings are valid and contain only digits.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 2, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 3, length(lst))\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.\n    Each element i of the output should be \"the number\
    \ of even elements in the\n    string i of the input.\" where all the i's should\
    \ be replaced by the number\n    of even digits in the i'th string of the input.",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str,\
    \ strcount(str, \"1\") + strcount(str, \"8\"))\n    end\n    odd_count_str = strcat(odd_count_str,\
    \ \".\")\n    return odd_count_str\nend", "    \n    odd_count_str = \"\"\n  \
    \  for i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n \
    \   odd_count_str = \"\" \n    for str in lst\n        odd_count_str = odd_count_str\
    \ + @sprintf \"the str%dd\" str\n    end\n    odd_count_str = odd_count_str[1:end-1]\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector where each element is the sum of the number of odd digits\
    \ in each string.", "    \n    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = \"the number of odd\
    \ elements \" \n        odd_counts[i] += (length(digits(s)) - length(digits(replace(s,\
    \ digits(s), \"0\")))) \n        odd_counts[i] += \" of the \" \n        odd_counts[i]\
    \ += s\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"10000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"10000000000\", \"\
    1111111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"10000000000\", \"1111111111\", \"2222222222\"\
    ])\n</cell>\n<code language=julia-", "    \n    odd_count_str = \"\"\n    for\
    \ str in lst\n        odd_count_str = odd_count_str + length(filter(x -> x % 2\
    \ != 0, str))\n    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, str1,\
    \ lst[1])\n    odd_count_str = replace(odd_count_str, str2, lst[2])\n    odd_count_str\
    \ = replace(odd_count_str, str3, lst[3])\n    odd_count_str = replace(odd_count_str,\
    \ str4, lst[4])\n    odd_count_str = replace(odd_count_str, str5, lst[5])\n  \
    \  odd_count_str = replace(odd_count_str, str6, lst[6])\n    odd_count_str = replace(odd_count_str,\
    \ str7, lst[7])\n    odd_count_str = replace(odd_count_str, str8, lst[8])\n  \
    \  odd_count_str = replace(odd_count_str, str9, lst[9])\n    odd_count_str = replace(odd_count_str,\
    \ str10, lst[10])\n    odd_count_str = replace(odd_count_str, str11, lst[11])\n\
    \    odd_count_str = replace(odd_count_str, str12, lst[12])\n    odd_count_str\
    \ = replace(odd_count_str, str13, lst[13])\n    odd_count_str = replace(odd_count_str,\
    \ str14, lst[14])\n    odd_count_str = replace(odd_count_str, str15, lst[15])\n\
    \    odd_count_str = replace(odd_count_str, str16, lst[16])\n    odd_count_str\
    \ = replace(odd_count_str, str17, lst[17])\n    odd_count_str = replace(odd_count_str,\
    \ str18, lst[18])\n    odd_count_str = replace(odd_count_str, str19, lst[19])\n\
    \    odd_count_str = replace(odd_count_str, str20, lst[20])\n    odd_count_str\
    \ = replace(odd_count_str, str21, lst[21])\n    odd_count_str = replace(odd_count_str,\
    \ str22, lst[22])\n    odd_count_str = replace(odd_count_str, str23, lst[23])\n\
    \    odd_count_str = replace(odd_count_str, str24, lst[24])\n    odd_count_str\
    \ = replace(odd_count_str, str25, lst[25])\n    odd_count_str = replace(odd_count_str,\
    \ str26, lst[26])\n    odd_count_str = replace(odd_count_str, str27, lst[27])\n\
    \    odd_count_str = replace(odd_count_str, str28, lst[28])\n    odd_count_str\
    \ = replace(odd_count_str, str29, lst[29])\n    odd_count_str = replace(odd_",
  "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = odd_counts + count_odd_digits(str)\n    end\n    return odd_counts\nend",
  "    \n    odd_count_str = \"\"\n    for i in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 != 0, i))\n    end\n    odd_count_str = odd_count_str\
    \ + \" \"\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\", \"\
    1000000001\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\", \"1000000001\", \"1000000002\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\", \"100", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(filter(x -> x\
    \ % 2 != 0, s))\n    end\n    return odd_counts\nend", "    \n    odd_counts =\
    \ Vector{String}(undef, length(lst))\n    for str in lst\n        odd_counts[str]\
    \ =  length(findall(str -> str == \"1\", str))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.", "    odd_count_str = @sprintf \"\
    the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert odd_count([\"1234567\"]) == [\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n@assert odd_count([\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings where each string consists of only digits.\nFor example, [\"1\",\
    \ \"2\", \"3\"] should return [\"1\", \"2\", \"3\"].", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = push!(odd_counts, length(filter(x\
    \ -> x % 2 == 1, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\")) + length(findall(str,\
    \ \"9\"))\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.0>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.0>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers representing\
    \ the number of odd characters in each string. For example, if the input vector\
    \ is [\"1\", \"11\", \"111\", \"1111\", \"11111\"], then the output vector should\
    \ be [1, 1, 2, 1, 1, 1].", "    \n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + length(findall(str, \"1\")) + length(findall(str,\
    \ \"8\"))\n    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string, (odd_digits)...)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings as input and returns a vector\
    \ of strings as output. Each element of the output should be \"the number of even\
    \ elements in the string i of the input.\" where all the i's should be replaced\
    \ by the number of even digits in the i'th string of the input.", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.", "    odd_count_str = @sprintf \"\
    the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = [odd_count_str for i in 1:length(lst)]\n    return odd_count_str\nend", " \
    \   odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(string(_), odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_counts = Vector{String}(undef, length(lst))\n    for str\
    \ in lst\n        odd_counts[findall(str, \"\\d\")] .= length(findall(str, \"\\\
    d\"))\n    end\n    return odd_counts\nend", "    odd_digits = Vector{Int}()\n\
    \    for str in lst\n        odd_digits += count_digits(str)\n    end\n    return\
    \ map(str, odd_digits)\nend", "    odd_digits = Vector{Int}()\n    for i in lst\n\
    \        odd_digits += count(digits(i))\n    end\n    return [\"the number of\
    \ odd elements $odd_digits the str$length(odd_digits) of the $length(odd_digits)nput.\"\
    ]\nend\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n\
    <code language=julia-1.3>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings where each string consists of only digits.\n    Each element i of\
    \ the output should be \"the number of even elements in the\n    string i of the\
    \ input.\" where all the i's should be replaced by the number\n    of even digits\
    \ in the i'th string of the input.", "    \n    odd_count_str = \"\"\n    for\
    \ str in lst\n        odd_count_str = strcat(odd_count_str, str, \"the number\
    \ of odd elements \")\n    end\n    odd_count_str = strcat(odd_count_str, \"n\
    \ the str\")\n    odd_count_str = strcat(odd_count_str, length(lst), \"th \")\n\
    \    odd_count_str = strcat(odd_count_str, string(length(lst)))\n    odd_count_str\
    \ = strcat(odd_count_str, \"nput.\")\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    \n    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = strcat(odd_count_str, strcat(\" the number of odd elements\
    \ \", count_odd_digits(str), \" the str\", count_odd_digits(str), \" of the \"\
    , count_odd_digits(str), \" input.\"))\n    end\n    odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    odd_count_str = \"\"\n    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 == 1, str))\n    end\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 == 0, lst))\n    odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x\
    \ % 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x %\
    \ 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2\
    \ == 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 ==\
    \ 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1,\
    \ str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, str))\n\
    \    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1, str))\n  \
    \  odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, str))\n    odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    odd_count_str =\
    \ odd_count_str + length(filter(x -> x % 2 == 0, str))\n    odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, str))\n    odd_count_str = odd_count_str +\
    \ length(filter(x -> x % 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x\
    \ -> x % 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x\
    \ % 2 == 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x %\
    \ 2 == 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2\
    \ == 1, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 ==\
    \ 0, str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 1,\
    \ str))\n    odd_count_str = odd_count_str + length(filter(x -> x % 2 == 0, str))\n\
    \    odd_count_str = od", "    \n    odd_counts = Vector{String}(undef, 0)\n \
    \   for str in lst\n        odd_counts = vcat(odd_counts, count_odd_digits(str))\n\
    \    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_digits\
    \ = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x -> x % 2\
    \ == 1, s)\n    end\n    odd_count = Vector{String}()\n    for s in lst\n    \
    \    odd_count += [\"the number of odd elements \" ^ string(length(odd_digits))\
    \ ^ \"n the str\" ^ string(length(s)) ^ \"n of the \" ^ string(length(s)) ^ \"\
    nput.\"]\n    end\n    return odd_count\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return [\"the number\
    \ of odd elements \" + odd_count_str + \".\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s)\
    \ in enumerate(lst)\n        odd_counts[i] = length(findall(x -> x % 2 != 0, s))\n\
    \    end\n    return odd_counts\nend", "    \n    odd_count_str = \"\"\n    \n\
    \    for str in lst\n        odd_count_str = odd_count_str + length(filter(x ->\
    \ x % 2 == 1, str))\n    end\n    \n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers where the ith\
    \ element of the output is the number of odd digits in string i.", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = length(findall(i .== \"1\"))\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.3>", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(filter(x -> x\
    \ % 2 != 0, s))\n    end\n    return odd_counts\nend", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = push!(odd_counts, length(findall(str\
    \ -> str == \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ 1, length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = \"the number of odd elements \" + \n            length(filter(x\
    \ -> x % 2 != 0, s)) + \" the str\" + \n            length(filter(x -> x % 2 ==\
    \ 0, s)) + \" of the str\" + \n            length(filter(x -> x % 2 == 1, s))\
    \ + \".\"\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\", \"33333333\"\
    , \"44444444\", \"55555555\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"\
    66666666\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\", \"22222222\"\
    , \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\", \"88888888\"\
    , \"999999999\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\", \"22222222\", \"33333333\", \"44444444\", \"55555555\"\
    , \"66666666\", \"77777777\", \"88888888\", \"999999999\", \"1000000000\", \"\
    1000000001\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    , \"22222222\", \"33333333\", \"44444444\", \"55555555\", \"66666666\", \"77777777\"\
    , \"88888888\", \"999999999\", \"1000000000\", \"1000000001\", \"1000000002\"\
    ])\n</cell>\n<code language=julia-", "    odd_count_str = \"\"\n    for i in lst\n\
    \        odd_count_str = odd_count_str + length(filter(x -> x % 2 != 0, i))\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nThe function should return the same vector if the input vector is empty\
    \ or if the input vector consists of only empty strings.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of strings that contain only digits.\nThe function should\
    \ return a vector of strings where each string consists of only digits if the\
    \ input vector consists of ", "    \n    odd_counts = Vector{String}(undef, 0)\n\
    \    for str in lst\n        odd_counts = [odd_counts[i] + str[i] for i in range(len(str))]\n\
    \    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(filter(x -> x % 2 != 0, s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>", "    odd_count_str = \"\"\n    for str\
    \ in lst\n        odd_count_str = strcat(odd_count_str, strcount(str, \"1\") +\
    \ strcount(str, \"8\"))\n    end\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings as input and returns a vector\
    \ where each element is the sum of the number of odd digits in each string.",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dd\" \n \
    \   odd_count_str = \"\" \n    for str in lst\n        odd_count_str = odd_count_str\
    \ * str\n    end\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    \n    odd_counts = Vector{String}(undef, length(lst))\n    for\
    \ i in 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2 != 0,\
    \ lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", '    odd_count_str = @sprintf "the number of odd elements %dn the
    str%dd%sof the %dd%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s',
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of integers representing the number of odd characters\
    \ in each string. For example, if the input vector is [\"1\", \"11\", \"111\"\
    ], then the output vector should be [1, 3, 1].", "    \n    odd_count_str = \"\
    \"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str\
    \ -> str == \"1\", str))\n    end\n    \n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ sum of the number of odd digits in each string in the input.", "    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str\
    \ -> str == \"1\", str))\n    end\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.3>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    odd_counts = Vector{String}(undef, 0)\n    for\
    \ str in lst\n        odd_counts = push!(odd_counts, length(findall(str -> str\
    \ == \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.0>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, lst)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector where each element is the number of even digits in each string of the\
    \ input.", "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n  \
    \      odd_counts = vcat(odd_counts, count(str, digits(str)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.", "    \n   \
    \ odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings as input and returns a vector\
    \ of strings as output.\nEach element of the output should be \"the number of\
    \ even elements in the\nstring i of the input.\" where all the i's should be replaced\
    \ by the number\nof even digits in the i'th string of the input.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd%s\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, \"\")\n    odd_count_str = replace(odd_count_str, 3, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 4, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 5, \"\")\n    odd_count_str = replace(odd_count_str, 6, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 7, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 8, \"\")\n    odd_count_str = replace(odd_count_str, 9, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 10, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 11, \"\")\n    odd_count_str = replace(odd_count_str, 12, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 13, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 14, \"\")\n    odd_count_str = replace(odd_count_str, 15, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 16, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 17, \"\")\n    odd_count_str = replace(odd_count_str, 18, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 19, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 20, \"\")\n    odd_count_str = replace(odd_count_str, 21, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 22, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 23, \"\")\n    odd_count_str = replace(odd_count_str, 24, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 25, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 26, \"\")\n    odd_count_str = replace(odd_count_str, 27, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 28, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 29, \"\")\n    odd_count_str = replace(odd_count_str, 30, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 31, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 32, \"\")\n    odd_count_str = replace(odd_count_str, 33, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 34, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ 35, \"\")\n    odd_count_str = replace(odd_count_str, 36, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, 37, \"\")\n    odd_count_str = replace(odd_", "   \
    \ odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = replace(odd_count_str, \" \", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_",
  "    odd_counts = Vector{String}(undef, 0)\n    for s in lst\n        odd_counts\
    \ = append(odd_counts, length(filter(x -> x % 2 != 0, s)))\n    end\n    return\
    \ odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = append!(odd_counts, count_odd_digits(str))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_counts = Vector{String}(undef, length(lst))\n    for i = 1:length(lst)\n\
    \        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst))\n    odd_count_str = replace(odd_count_str, 3, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 6, length(lst))\n    odd_count_str = replace(odd_count_str, 7, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 9, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 10, length(lst))\n    odd_count_str = replace(odd_count_str, 11, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 12, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 13, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 14, length(lst))\n    odd_count_str = replace(odd_count_str, 15, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 16, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 17, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 18, length(lst))\n    odd_count_str = replace(odd_count_str, 19, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 20, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 21, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 22, length(lst))\n    odd_count_str = replace(odd_count_str, 23, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 24, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 25, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 26, length(lst))\n    odd_count_str = replace(odd_count_str, 27, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 28, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 29, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 30, length(lst))\n    odd_count_str = replace(odd_count_str, 31, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 32, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 33, length(", "    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dd\" \n    odd_count_str = [odd_count_str % [length(lst[i])\
    \ i] for i in 1:length(lst)]\n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings. Each element of the output should\
    \ be \"the sum of the odd digits in the i'th string of the input.\" where all\
    \ the i's should be replaced by the sum of the odd digits in the i'th string of\
    \ the input.", "    odd_count_str = join(map(odd_count_str, lst))\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\\\", \"\")\n    odd_count_str = replace(odd_count_str, \"(\", \"\")\n \
    \   odd_count_str = replace(odd_count_str, \")\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"+\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"-\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"*\", \"\")\n    odd_count_str = replace(odd_count_str, \"/\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"%\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"^\", \"\")\n    odd_count_str = replace(odd_count_str, \"~\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"=\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \".\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"?\", \"\")\n    odd_count_str = replace(odd_count_str, \"!\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"<\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \">\", \"\")\n    odd_count_str = replace(odd_count_str, \";\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \":\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"/\", \"\")\n    odd_count_str = replace(odd_count_str, \"?\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \".\", \"\")\n    odd_count_str = replace(odd_count_str, \"?\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str",
  "    \n    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = \"the number of odd elements \" + count(digits(s)) +\
    \ \n            \" in the str\" + string(digits(s)) + \" of the str\" + string(digits(s))\
    \ + \"nput.\"\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, \"\
    \ \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \" \", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for (i,s) in enumerate(lst)\n        odd_counts[i] = \"the number of odd\
    \ elements \" + count(digits(s)) + \n            \" in the str\" + string(digits(s))\
    \ + \" of the str\" + string(digits(i)) + \".\"\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings.\
    \ Each element of the output should be \"the sum of the odd digits in the i'th\
    \ string of the input.\" where all the i's should be replaced by the sum of the\
    \ odd digits in the i'th string of the input.", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = push!(odd_counts, length(findall(str\
    \ -> str == \"1\", str)))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ sum of the number of odd digits in each string.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(i)\n    end\n    return [\"the\
    \ number of odd elements \" <> join(map(str,odd_digits)) <> \" of the \" <> join(map(str,lst))\
    \ <> \" of the \" <> join(map(str,lst)) <> \".\"]\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_counts = Vector{String}(undef, length(lst))\n    for i =\
    \ 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2 != 0, lst[i]))\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", " \
    \   odd_digits = Vector{String}(undef, 0)\n    for s in lst\n        odd_digits\
    \ += findall(x -> x % 2 != 0, s)\n    end\n    return odd_digits\nend\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings as output.\
    \ \nEach element of the output should be \"the number of even elements in the\
    \ string i of the input.\" where all the i's should be replaced by the number\
    \ of even digits in the i'th string of the input.", "    \n    odd_count_str =\
    \ \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str,\
    \ \"1\")) + length(findall(str, \"8\")) + length(findall(str, \"9\"))\n    end\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"0\")) + length(findall(str,\
    \ \"6\")) + length(findall(str, \"7\")) + length(findall(str, \"5\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"4\")) + length(findall(str, \"3\"))\
    \ + length(findall(str, \"2\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"1\"))\n    odd_count_str = odd_count_str + length(findall(str, \"0\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"7\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"8\"))\n    odd_count_str = odd_count_str + length(findall(str, \"9\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"10\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"11\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"12\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"13\"))\n    odd_count_str = odd_count_str + length(findall(str, \"14\"))\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"15\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"16\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"17\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"18\"))\n    odd_count_str = odd_count_str + length(findall(str, \"19\"))\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"20\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"21\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"22\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"23\"))\n    odd_count_str = odd_count_str + length(findall(str, \"24\"))\n\
    \    odd_count_str = odd_count_str + length(findall(str, \"25\"))\n    odd_count_str\
    \ = odd_count_str", "    \n    odd_digits = Vector{Int}()\n    \n    for i in\
    \ lst\n        odd_digits += count(digits(i))\n    end\n    \n    return map(str,\
    \ odd_digits)\nend\n</cell>\n<code language=julia-1.5>", "    odd_digits = Vector{String}(undef,\
    \ 0)\n    for s in lst\n        odd_digits += findall(x -> x % 2 != 0, s)\n  \
    \  end\n    return odd_digits\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_count_str = @sprintf \"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], lst.size)\n    odd_count_str = replace(odd_count_str, [\"str\"], lst.first)\n\
    \    odd_count_str = replace(odd_count_str, [\"input\"], lst.last)\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings. Each element of the output should be \"the number of even\
    \ elements in the string i of the input.\" where all the i's should be replaced\
    \ by the number of even digits in the i'th string of the input.", "    odd_digits\
    \ = Vector{Int}()\n    for s in lst\n        odd_digits += findall(x -> x % 2\
    \ != 0, s)\n    end\n    return [\"the number of odd elements $n the str$n of\
    \ the $nput.\" for n in odd_digits]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits\
    \ += count(digits(i))\n    end\n    return [\"the number of odd elements \" <>\
    \ join(map(str, odd_digits)) <> \" of the \" <> join(map(str, lst)) <> \" of the\
    \ \" <> join(map(str, lst)) <> \".\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\" \n    odd_count_str = [odd_count_str % [length(filter(x\
    \ -> x % 2 == 1, str_to_int(s))) for s in lst]]\n    return odd_count_str\nend",
  "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(findall(str, \"1\")) + length(findall(str, \"8\"))\n    end\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"\
    11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings as an input and returns a vector of strings as an output. The output\
    \ vector should have the same length as the input vector. \nThe function should\
    \ return a string that describes the number of odd characters in the input string.\
    \ \nThe function should return \"the number of odd characters in the input string\"\
    \ if the input vector is empty. \nThe function should return \"the number of odd\
    \ characters in the input string\" if the input vector is of length 1. \nThe function\
    \ should return \"the number of odd characters in the input string\" if the input\
    \ vector is of length 2. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 3. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 4. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 5. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 6. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 7. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 8. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 9. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 10. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 11. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 12. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 13. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 14. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 15. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 16. \nThe function should return \"the number of odd characters\
    \ in the input string\" if the input vector is of length 17. \nThe function should\
    \ return \"the number of odd characters in the input string\" if the input vector\
    \ is of length 18. \nThe function should ", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_counts[i] = length(findall(i,\
    \ strsplit(i, \"\")))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a vector of strings, where each string consists of only digits, return\
    \ a vector.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.", "    \n  \
    \  odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings as input and returns a vector\
    \ of strings where each string consists of only digits.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(filter(x\
    \ -> x % 2 == 1, s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings as input and returns a vector of strings as output.\nEach element\
    \ of the output vector should be \"the number of even elements in the\nstring\
    \ i of the input.\" where all the i's should be replaced by the number\nof even\
    \ digits in the i'th string of the input.", "    odd_count_str = join(map(odd_count,\
    \ lst))\n    odd_count_str = replace(odd_count_str, \"n\", \"n-1\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n-1\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n-8\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n-7\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n-6\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n-5\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n-4\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n-3\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n-2\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n-1\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n\", \"n+1\")\n    odd_count_str = replace(odd_count_str, \"n+1\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n+2\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+3\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+4\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+5\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n+6\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+7\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+8\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+9\", \"n\")\n\
    \    odd_count_str = replace(odd_count_str, \"n+10\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+11\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+12\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+13\", \"n\"\
    )\n    odd_count_str = replace(odd_count_str, \"n+14\", \"n\")\n    odd_count_str\
    \ = replace(odd_count_str, \"n+15\", \"n\")\n    odd_count_str = replace(odd_count_str,\
    \ \"n+16\", \"n\")\n    odd_count_str = replace(odd_count_str, \"n+17\", \"n\"\
    )\n    odd_count_str = replace(odd_count_", "    \n    odd_count_str = \"\"\n\
    \    for i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n\
    \    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ as input and returns a vector of strings where each string consists of only\
    \ digits followed by the number of odd digits in that string.", "    odd_count_str\
    \ = @view lst |> map(x->split(x,\"0\"))\n    odd_count_str = map(x -> length(x),odd_count_str)\n\
    \    odd_count_str = map(x -> sum(x),odd_count_str)\n    odd_count_str = map(x\
    \ -> x==0 ? 0 : x,odd_count_str)\n    odd_count_str = map(x -> x==1 ? 1 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==2 ? 2 : x,odd_count_str)\n    odd_count_str =\
    \ map(x -> x==3 ? 3 : x,odd_count_str)\n    odd_count_str = map(x -> x==4 ? 4\
    \ : x,odd_count_str)\n    odd_count_str = map(x -> x==5 ? 5 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==6 ? 6 : x,odd_count_str)\n    odd_count_str =\
    \ map(x -> x==7 ? 7 : x,odd_count_str)\n    odd_count_str = map(x -> x==8 ? 8\
    \ : x,odd_count_str)\n    odd_count_str = map(x -> x==9 ? 9 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==10 ? 10 : x,odd_count_str)\n    odd_count_str\
    \ = map(x -> x==11 ? 11 : x,odd_count_str)\n    odd_count_str = map(x -> x==12\
    \ ? 12 : x,odd_count_str)\n    odd_count_str = map(x -> x==13 ? 13 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==14 ? 14 : x,odd_count_str)\n    odd_count_str\
    \ = map(x -> x==15 ? 15 : x,odd_count_str)\n    odd_count_str = map(x -> x==16\
    \ ? 16 : x,odd_count_str)\n    odd_count_str = map(x -> x==17 ? 17 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==18 ? 18 : x,odd_count_str)\n    odd_count_str\
    \ = map(x -> x==19 ? 19 : x,odd_count_str)\n    odd_count_str = map(x -> x==20\
    \ ? 20 : x,odd_count_str)\n    odd_count_str = map(x -> x==21 ? 21 : x,odd_count_str)\n\
    \    odd_count_str = map(x -> x==22 ? 22 : x,odd_count_str)\n    odd_count_str\
    \ = map(", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1,\
    \ length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n \
    \   odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    \n  \
    \  odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns a vector where each element\
    \ is the sum of the number of odd digits in each string.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dd\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst)+1)\n    odd_count_str = replace(odd_count_str, 3, length(lst)+2)\n\
    \    odd_count_str = replace(odd_count_str, 4, length(lst)+3)\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst)+4)\n    odd_count_str = replace(odd_count_str,\
    \ 6, length(lst)+5)\n    odd_count_str = replace(odd_count_str, 7, length(lst)+6)\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst)+7)\n    odd_count_str\
    \ = replace(odd_count_str, 9, length(lst)+8)\n    odd_count_str = replace(odd_count_str,\
    \ 10, length(lst)+9)\n    odd_count_str = replace(odd_count_str, 11, length(lst)+10)\n\
    \    odd_count_str = replace(odd_count_str, 12, length(lst)+11)\n    odd_count_str\
    \ = replace(odd_count_str, 13, length(lst)+12)\n    odd_count_str = replace(odd_count_str,\
    \ 14, length(lst)+13)\n    odd_count_str = replace(odd_count_str, 15, length(lst)+14)\n\
    \    odd_count_str = replace(odd_count_str, 16, length(lst)+15)\n    odd_count_str\
    \ = replace(odd_count_str, 17, length(lst)+16)\n    odd_count_str = replace(odd_count_str,\
    \ 18, length(lst)+17)\n    odd_count_str = replace(odd_count_str, 19, length(lst)+18)\n\
    \    odd_count_str = replace(odd_count_str, 20, length(lst)+19)\n    odd_count_str\
    \ = replace(odd_count_str, 21, length(lst)+20)\n    odd_count_str = replace(odd_count_str,\
    \ 22, length(lst)+21)\n    odd_count_str = replace(odd_count_str, 23, length(lst)+22)\n\
    \    odd_count_str = replace(odd_count_str, 24, length(lst)+23)\n    odd_count_str\
    \ = replace(odd_count_str, 25, length(lst)+24)\n    odd_count_str = replace(odd_count_str,\
    \ 26, length(lst)+25)\n    odd_count_str = replace(odd_count_str, 27, length(lst)+26)\n\
    \    odd_count_str = replace(odd_count_str, 28, length(lst)+27)\n    odd_count_str\
    \ = replace(odd_count_str, 29, length(lst)+28)\n    odd_count_str = replace(odd_count_str,\
    \ 30, length(lst)+29)\n    odd_count_str = replace(od", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = append(odd_counts, length(filter(x\
    \ -> x % 2 != 0, str)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    odd_count_str = @sprintf \"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str, 1,\
    \ length(lst))\n    odd_count_str = replace(odd_count_str, 2, length(lst))\n \
    \   odd_count_str = replace(odd_count_str, 3, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 4, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 5, length(lst))\n    odd_count_str = replace(odd_count_str, 6, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 7, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 8, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 9, length(lst))\n    odd_count_str = replace(odd_count_str, 10, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 11, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 12, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 13, length(lst))\n    odd_count_str = replace(odd_count_str, 14, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 15, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 16, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 17, length(lst))\n    odd_count_str = replace(odd_count_str, 18, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 19, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 20, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 21, length(lst))\n    odd_count_str = replace(odd_count_str, 22, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 23, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 24, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 25, length(lst))\n    odd_count_str = replace(odd_count_str, 26, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 27, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 28, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 29, length(lst))\n    odd_count_str = replace(odd_count_str, 30, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 31, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 32, length(lst))\n    odd_count_str = ", "    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = strcat(odd_count_str, strcount(str,\
    \ \"1\") + strcount(str, \"8\"))\n    end\n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector where each element is the\
    \ number of odd characters in the i'th string of the input.", "    \n    odd_count_str\
    \ = \"\"\n    odd_count_str .= str4n(lst[1])\n    odd_count_str .= str4n(lst[2])\n\
    \    odd_count_str .= str4n(lst[3])\n    odd_count_str .= str4n(lst[4])\n    odd_count_str\
    \ .= str4n(lst[5])\n    odd_count_str .= str4n(lst[6])\n    odd_count_str .= str4n(lst[7])\n\
    \    odd_count_str .= str4n(lst[8])\n    odd_count_str .= str4n(lst[9])\n    odd_count_str\
    \ .= str4n(lst[10])\n    odd_count_str .= str4n(lst[11])\n    odd_count_str .=\
    \ str4n(lst[12])\n    odd_count_str .= str4n(lst[13])\n    odd_count_str .= str4n(lst[14])\n\
    \    odd_count_str .= str4n(lst[15])\n    odd_count_str .= str4n(lst[16])\n  \
    \  odd_count_str .= str4n(lst[17])\n    odd_count_str .= str4n(lst[18])\n    odd_count_str\
    \ .= str4n(lst[19])\n    odd_count_str .= str4n(lst[20])\n    odd_count_str .=\
    \ str4n(lst[21])\n    odd_count_str .= str4n(lst[22])\n    odd_count_str .= str4n(lst[23])\n\
    \    odd_count_str .= str4n(lst[24])\n    odd_count_str .= str4n(lst[25])\n  \
    \  odd_count_str .= str4n(lst[26])\n    odd_count_str .= str4n(lst[27])\n    odd_count_str\
    \ .= str4n(lst[28])\n    odd_count_str .= str4n(lst[29])\n    odd_count_str .=\
    \ str4n(lst[30])\n    odd_count_str .= str4n(lst[31])\n    odd_count_str .= str4n(lst[32])\n\
    \    odd_count_str .= str4n(lst[33])\n    odd_count_str .= str4n(lst[34])\n  \
    \  odd_count_str .= str4n(lst", "    odd_count_str = @sprintf \"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 1))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 2))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 3))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 4))\n \
    \   odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 5))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 6))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 7))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 8))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 9))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 10))\n\
    \    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 11))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 12))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 13))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 14))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 15))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 16))\n\
    \    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 17))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 18))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 19))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 20))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst,\
    \ 21))\n    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 22))\n\
    \    odd_count_str = replace(odd_count_str, [\"n\"], length(lst, 23))\n    odd_count_str\
    \ = replace(odd_count_str, [\"n\"], length(lst, 24))\n    odd_count_str = replace(odd_count_str,\
    \ [\"n\"], length(lst, 25))\n    odd_count_str = replace(odd_count_str, [\"n\"\
    ], length(lst, 26))\n    od", "    \n    odd_count_str = @sprintf \"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_strs = Vector{String}(undef,\
    \ length(lst))\n    for i in 1:length(lst)\n        odd_count_strs[i] = odd_count_str(length(lst[i]),\
    \ i, length(lst[i]))\n    end\n    return odd_count_strs\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    odd_counts = Vector{String}(undef, 0)\n    for str\
    \ in lst\n        odd_counts = vcat(odd_counts, count_odd_digits(str))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = \"\"\n    for str in lst\n        odd_count_str = odd_count_str + length(findall(str\
    \ -> str == \"1\", str))\n    end\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    odd_count_str = \"\"\"\n    number of odd elements\
    \ in the str{n}ng n\n    \"\"\"\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n\
    \    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, str=>lst)\n    odd_count_str = replace(odd_count_str,\
    \ n=>length(lst))\n    odd_count_str = replace(odd_count_str, str=>lst)\n    odd_count_str\
    \ = replace(odd_count_str, n=>length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ str=>lst)\n    odd_count_str = replace(odd_count_str, n=>length(lst))\n    odd_count_str\
    \ = replace(odd_count_", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x -> x % 2\
    \ != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings as input and returns a vector of strings as output.\nThe output vector\
    \ should contain all the strings in the input vector but with the first letter\
    \ of each string capitalized.", "    \n    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = vcat(odd_counts, count_odd_digits(str))\n\
    \    end\n    \n    return odd_counts\nend", "    odd_count_str = @sprintf \"\
    the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = \"\" \n    for i in lst\n        odd_count_str <- odd_count_str + odd_count(i)\n\
    \    end\n    return odd_count_str\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of strings and returns a vector of strings. Each\
    \ element of the output should be \"the number of even elements in the\nstring\
    \ i of the input.\" where all the i's should be replaced by the number\nof even\
    \ digits in the i'th string of the input.", "    odd_count_str = @sprintf \"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, lst)\n    return odd_count_str\nend", '    odd_count_str
    = @sprintf "the number of odd elements %dn the str%dd%sof the %dd%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s',
  "    odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector where\
    \ each element is the number of odd digits in each string. For example, [\"1234567\"\
    , \"311111111\"] should return [\"4\", \"8\"].", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = \"\".join(map(odd_count_str, map(length, lst)))\n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.3>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.3>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\n    Each element i of the output\
    \ should be \"the number of even elements in the\n    string i of the input.\"\
    \ where all the i's should be replaced by the number\n    of even digits in the\
    \ i'th string of the input.", "    \n    odd_count_str = \"\"\n    for str in\
    \ lst\n        odd_count_str = odd_count_str + length(findall(str -> str == '1',\
    \ str))\n    end\n    \n    return odd_count_str\nend", "    odd_count_str = @sprintf\
    \ \"the number of odd elements %dn the str%dng %d of the %dnput.\" \n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst))\n    odd_count_str = replace(odd_count_str, 3, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 6, length(lst))\n    odd_count_str = replace(odd_count_str, 7, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 8, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 9, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 10, length(lst))\n    odd_count_str = replace(odd_count_str, 11, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 12, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 13, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 14, length(lst))\n    odd_count_str = replace(odd_count_str, 15, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 16, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 17, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 18, length(lst))\n    odd_count_str = replace(odd_count_str, 19, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 20, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 21, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 22, length(lst))\n    odd_count_str = replace(odd_count_str, 23, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 24, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 25, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 26, length(lst))\n    odd_count_str = replace(odd_count_str, 27, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 28, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 29, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 30, length(lst))\n    odd_count_str = replace(odd_count_str, 31, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 32, length(lst))\n    odd_count_str\
    \ = ", "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits +=\
    \ count(digits(i))\n    end\n    return map(string, (odd_digits))\nend\n</cell>\n\
    <code language=julia-1.4>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings as input and returns a vector of strings where\
    \ each string consists of only odd digits.", '    odd_count_str = @view lst |>
    map(x->split(x,"n")) |> map(x->map(x->split(x,"e")) |> map(x->map(x->split(x,"s"))
    |> map(x->map(x->split(x,"t")) |> map(x->map(x->split(x,"i")) |> map(x->map(x->split(x,"o"))
    |> map(x->map(x->split(x,"d")) |> map(x->map(x->split(x,"t")) |> map(x->map(x->split(x,"g"))
    |> map(x->map(x->split(x,"r")) |> map(x->map(x->split(x,"e")) |> map(x->map(x->split(x,"s"))
    |> map(x->map(x->split(x,"t")) |> map(x->map(x->split(x,"g")) |> map(x->map(x->split(x,"r"))
    |> map(x->map(x->split(x,"e")) |> map(x->map(x->split(x,"s")) |> map(x->map(x->split(x,"t"))
    |> map(x->map(x->split(x,"g")) |> map(x->map(x->split(x,"r")) |> map(x->map(x->split(x,"e"))
    |> map(x->map(x->split(x,"s")) |> map(x->map(x->split(x,"t")) |> map(x->map(x->split(x,"g"))
    |> map(x->map(x->split(x,"r")) |> map(x->map(x->split(x,"e")) |> map(x->map(x->split(x,"s"))
    |> map(x->map(x->split(x,"t")) |> map(x->map(x->split(x,"g")) |> map(x->map(x->split(x,"r"))
    |> map(x->map(x->split(x,"e")) |> map(x->map(x->split(x,"s")) |> map(x->map(x->split(x,"t"))
    |> map(x->map(x->split(x,"g")) |> map(x->map(x->split(x,"r")) |> map(x->map(x->split(x,"e"))
    |> map(x->map(x->split(', "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = replace(odd_count_str,\
    \ str1, \"\")\n    odd_count_str = replace(odd_count_str, str2, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str3, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str4, \"\")\n    odd_count_str = replace(odd_count_str, str5, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str6, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str7, \"\")\n    odd_count_str = replace(odd_count_str, str8, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str9, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str10, \"\")\n    odd_count_str = replace(odd_count_str, str11, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str12, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str13, \"\")\n    odd_count_str = replace(odd_count_str, str14, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str15, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str16, \"\")\n    odd_count_str = replace(odd_count_str, str17, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str18, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str19, \"\")\n    odd_count_str = replace(odd_count_str, str20, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str21, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str22, \"\")\n    odd_count_str = replace(odd_count_str, str23, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str24, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str25, \"\")\n    odd_count_str = replace(odd_count_str, str26, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str27, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str28, \"\")\n    odd_count_str = replace(odd_count_str, str29, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str30, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str31, \"\")\n    odd_count_str = replace(odd_count_str, str32, \"\")\n    odd_count_str\
    \ = replace(odd_count_str, str33, \"\")\n    odd_count_str = replace(odd_count_str,\
    \ str34, \"\")\n    odd_count_str = replace(odd_count_", "    \n    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for i in 1:length(lst)\n        odd_counts[i]\
    \ = \"the number of odd elements \" + \n            string(count(digits(lst[i])))\
    \ + \" of the \" + \n            string(digits(lst[i])) + \" of the \" + \n  \
    \          string(lst[i]) + \".\"\n    end\n    return odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    odd_count_str = @sprintf \"the number of odd\
    \ elements %dn the str%dd\" \n    odd_count_str = [odd_count_str % sum((map(len,\
    \ lst))) \n        for lst in lst]\n    return odd_count_str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ consists of only digits.", "    \n    odd_count_str = \"\"\n    \n    for str\
    \ in lst\n        odd_count_str = str\n        for n in str\n            if n\
    \ == '1'\n                odd_count_str = odd_count_str + \"n\"\n            else\n\
    \                odd_count_str = odd_count_str + \"n\"\n            end\n    \
    \    end\n    end\n    \n    return odd_count_str\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n     \
    \   odd_counts[findall(str, \"\\d\")] .= length(findall(str, \"\\d\"))\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Given a\
    \ vector of strings, where each string consists of only digits, return a vector.\n\
    \    Each element i of the output should be \"the number of even elements in the\n\
    \    string i of the input.\" where all the i's should be replaced by the number\n\
    \    of even digits in the i'th string of the input.", "    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = odd_counts + count_odd_digits(str)\n\
    \    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_counts = Vector{String}(undef, length(lst))\n    for str in lst\n     \
    \   odd_counts[str2int(str)] = sum(str == \"1\") * \"the number of odd elements\
    \ \" + str + \"n the str\" + str + \"n of the \" + str + \"nput.\"\n    end\n\
    \    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"\
    1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string consists of only digits.",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(str, odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(filter(x -> x % 2 == 1, str))\n    end\n    \n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 4, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 1, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 8, length(lst))\n    odd_count_str = replace(odd_count_str, 7, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 6, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 5, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ 2, length(lst))\n    odd_count_str = replace(odd_count_str, 3, length(lst))\n\
    \    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 0, length(lst))\n    odd_count_str = replace(odd_count_str,\
    \ \" \", \"\")\n    odd_count_str = replace(odd_count_str, \"\\n\", \"\")\n  \
    \  odd_count_str = replace(odd_count_str, \"\\t\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \"\\r\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\\"\", \"\")\n    odd_count_str = replace(odd_count_str, \"\\\\\", \"\")\n\
    \    odd_count_str = replace(odd_count_str, \"(\", \"\")\n    odd_count_str =\
    \ replace(odd_count_str, \")\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"[\", \"\")\n    odd_count_str = replace(odd_count_str, \"]\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"{\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"}\", \"\")\n    odd_count_str = replace(odd_count_str, \"+\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"-\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"*\", \"\")\n    odd_count_str = replace(odd_count_str, \"/\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"%\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"^\", \"\")\n    odd_count_str = replace(odd_count_str, \"~\", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"!\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"=\", \"\")\n    odd_count_str = replace(odd_count_str, \" \", \"\")\n    odd_count_str\
    \ = replace(odd_count_str, \"\\n\", \"\")\n    odd_count_str = replace(odd_count_str,\
    \ \"\\t\", \"\")\n", "    odd_count_str = @sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\" \n    odd_count_str = \"\" \n    for i in\
    \ lst\n        odd_count_str = odd_count_str + odd_count(i)\n    end\n    return\
    \ odd_count_str\nend\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string consists of only digits.", "    odd_counts\
    \ = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n    \
    \    odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of strings and returns a vector of integers\
    \ where the ith element of the output is the length of the longest substring of\
    \ the ith string in the input vector.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for (i,s) in enumerate(lst)\n        odd_counts[i] = length(findall(s\
    \ == \"1\", s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = push!(odd_counts, length(findall(str -> str == \"1\", str)))\n    end\n  \
    \  return odd_counts\nend\n</cell>\n<code language=julia-1.3>", "    \n    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str = replace(odd_count_str, 1, length(lst))\n    odd_count_str\
    \ = replace(odd_count_str, 2, length(lst[1]))\n    odd_count_str = replace(odd_count_str,\
    \ 3, length(lst[2]))\n    odd_count_str = replace(odd_count_str, 4, length(lst[3]))\n\
    \    odd_count_str = replace(odd_count_str, 5, length(lst[4]))\n    odd_count_str\
    \ = replace(odd_count_str, 6, length(lst[5]))\n    odd_count_str = replace(odd_count_str,\
    \ 7, length(lst[6]))\n    odd_count_str = replace(odd_count_str, 8, length(lst[7]))\n\
    \    odd_count_str = replace(odd_count_str, 9, length(lst[8]))\n    odd_count_str\
    \ = replace(odd_count_str, 10, length(lst[9]))\n    odd_count_str = replace(odd_count_str,\
    \ 11, length(lst[10]))\n    odd_count_str = replace(odd_count_str, 12, length(lst[11]))\n\
    \    odd_count_str = replace(odd_count_str, 13, length(lst[12]))\n    odd_count_str\
    \ = replace(odd_count_str, 14, length(lst[13]))\n    odd_count_str = replace(odd_count_str,\
    \ 15, length(lst[14]))\n    odd_count_str = replace(odd_count_str, 16, length(lst[15]))\n\
    \    odd_count_str = replace(odd_count_str, 17, length(lst[16]))\n    odd_count_str\
    \ = replace(odd_count_str, 18, length(lst[17]))\n    odd_count_str = replace(odd_count_str,\
    \ 19, length(lst[18]))\n    odd_count_str = replace(odd_count_str, 20, length(lst[19]))\n\
    \    odd_count_str = replace(odd_count_str, 21, length(lst[20]))\n    odd_count_str\
    \ = replace(odd_count_str, 22, length(lst[21]))\n    odd_count_str = replace(odd_count_str,\
    \ 23, length(lst[22]))\n    odd_count_str = replace(odd_count_str, 24, length(lst[23]))\n\
    \    odd_count_str = replace(odd_count_str, 25, length(lst[24]))\n    odd_count_str\
    \ = replace(odd_count_str, 26, length(lst[25]))\n    odd_count_str = replace(odd_count_str,\
    \ 27, length(lst[26]))\n    odd_count_str = replace(odd_count_str, 28, length(lst[27]))\n\
    \    odd_count_str = replace(odd_count_str, 29, length(lst[28]))\n    odd_count_str\
    \ = replace(", "    \n    odd_count_str = \"\"\n    \n    for str in lst\n   \
    \     odd_count_str = odd_count_str + length(findall(str, \"1\")) + length(findall(str,\
    \ \"8\")) + length(findall(str, \"9\"))\n    end\n    \n    return odd_count_str\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for s in lst\n        odd_counts[findall(isdigit, s)] .= length(findall(isodd,\
    \ s))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.4>",
  "    odd_digits = Vector{Int}()\n    for i in lst\n        odd_digits += findall(i\
    \ .== \"1\", i)\n    end\n    return [\"the number of odd elements $odd_digits\
    \ for the string $i.\" for i in lst]\nend\n</cell>\n<code language=julia-1.4>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\nEach element i of the output should be \"the number of even elements\
    \ in the\nstring i of the input.\" where all the i's should be replaced by the\
    \ number\nof even digits in the i'th string of the input.", "    odd_count_str\
    \ = @sprintf \"the number of odd elements %dn the str%dng %d of the %dnput.\"\
    \ \n    odd_count_str\nend", "    odd_counts = Vector{String}(undef, length(lst))\n\
    \    for str in lst\n        odd_counts[str2int(str)] .= length(findall(str ->\
    \ str == '1', str))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>",
  "    odd_count_str = @sprintf \"the number of odd elements %dn the str%dng %d of\
    \ the %dnput.\" \n    odd_count_str = \"\" \n    for i in lst\n        odd_count_str\
    \ = odd_count_str + odd_count(i)\n    end\n    return odd_count_str\nend", " \
    \   odd_counts = Vector{String}(undef, length(lst))\n    for (i,s) in enumerate(lst)\n\
    \        odd_counts[i] = length(findall(s == \"1\", s))\n    end\n    return odd_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ where each string consists of only digits.\n    Each element i of the output\
    \ should be \"the number of even elements in the\n    string i of the input.\"\
    \ where all the i's should be replaced by the number\n    of even digits in the\
    \ i'th string of the input.", "    odd_count_str = \"\"\n    for str in lst\n\
    \        odd_count_str = odd_count_str + odd_count(str)\n    end\n    return odd_count_str\n\
    end", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = strcat(odd_count_str, str, \"the number of odd elements \")\n    end\n   \
    \ odd_count_str = strcat(odd_count_str, \" of the \", length(lst), \" \", string(lst),\
    \ \"nput.\")\n    return odd_count_str\nend", "    \n    odd_count_str = \"\"\n\
    \    for str in lst\n        odd_count_str = odd_count_str + length(findall(str\
    \ -> str == \"1\", str))\n    end\n    \n    return odd_count_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    odd_counts = Vector{String}(undef, 0)\n    for\
    \ s in lst\n        odd_counts = push!(odd_counts, length(filter(x -> x % 2 !=\
    \ 0, s)))\n    end\n    return odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.\n    Each element i of the output should be \"the number of even elements\
    \ in the\n    string i of the input.\" where all the i's should be replaced by\
    \ the number\n    of even digits in the i'th string of the input.", "    \n  \
    \  odd_counts = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts\
    \ = vcat(odd_counts, count_odd_digits(str))\n    end\n    odd_counts\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    odd_count_str = @view [odd_count(i) for\
    \ i in lst]\n    return odd_count_str\nend", "    odd_digits = Vector{Int}()\n\
    \    for s in lst\n        odd_digits += findall(x -> x % 2 != 0, s)\n    end\n\
    \    return map(x -> \"the number of odd elements \" <> x <> \" of the \" <> x\
    \ <> \" of the input.\", odd_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string consists of only\
    \ digits.", "    \n    odd_count_str = \"\"\n    for str in lst\n        odd_count_str\
    \ = odd_count_str + length(findall(str, \"1\")) + length(findall(str, \"8\"))\
    \ + length(findall(str, \"9\"))\n    end\n    odd_count_str = odd_count_str +\
    \ length(findall(str, \"0\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"5\"))\n    odd_count_str = odd_count_str + length(findall(str, \"6\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"7\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"3\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"2\"))\n    odd_count_str = odd_count_str + length(findall(str, \"1\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"6\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_count_str + length(findall(str, \"2\"))\n \
    \   odd_count_str = odd_count_str + length(findall(str, \"1\"))\n    odd_count_str\
    \ = odd_count_str + length(findall(str, \"5\"))\n    odd_count_str = odd_count_str\
    \ + length(findall(str, \"4\"))\n    odd_count_str = odd_count_str + length(findall(str,\
    \ \"3\"))\n    odd_count_str = odd_", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 == 1, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nodd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"3\", \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings as input and returns a vector of strings as output.\
    \ \nFor each string in the input vector, append the string \"the string \" to\
    \ the string and append \"is odd\" to the string.", "    odd_digits = Vector{Int}()\n\
    \    for i in lst\n        odd_digits += count(digits(i))\n    end\n    return\
    \ odd_digits\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts = Vector{String}(undef,\
    \ length(lst))\n    for i = 1:length(lst)\n        odd_counts[i] = length(findall(x\
    \ -> x % 2 != 0, lst[i]))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    odd_counts = Vector{String}(undef, 0)\n    for str\
    \ in lst\n        odd_counts = odd_counts + count_odd_digits(str)\n    end\n \
    \   return odd_counts\nend\n</cell>\n<code language=julia-1.5>", "    odd_counts\
    \ = Vector{String}(undef, 0)\n    for str in lst\n        odd_counts = vcat(odd_counts,\
    \ count_odd_digits(str))\n    end\n    return odd_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\
    \n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str =\
    \ \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str\
    \ = \"\"\"\n    odd_count_str = \"\"\"\n    odd_count_str = \"\"\"\n    ", " \
    \   odd_count_str = \"\"\n    for str in lst\n        odd_count_str = odd_count_str\
    \ + odd_count(str)\n    end\n    return odd_count_str\nend", "    odd_count_str\
    \ = \"\"\n    for i in lst\n        odd_count_str = odd_count_str + odd_count(i)\n\
    \    end\n    return odd_count_str\nend", "    \n    odd_counts = Vector{String}(undef,\
    \ 0)\n    for str in lst\n        odd_counts = push!(odd_counts, length(findall(str\
    \ -> str == \"1\", str)))\n    end\n    odd_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    odd_count([\"1234567\"])\n</cell>\n<code language=julia-1.5>\nodd_count([\"3\"\
    , \"11111111\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings as an input and returns a vector of strings where each string consists\
    \ of only digits.\nThe function should return the same vector if the input vector\
    \ consists of only strings.\nThe function should return an empty vector if the\
    \ input vector consists of strings that consist of only digits.", "    odd_digits\
    \ = Vector{Int}()\n    for i in lst\n        odd_digits += count(digits(i))\n\
    \    end\n    return map(x -> \"the number of odd elements $x of the $x string.\"\
    , odd_digits)\nend\n</cell>\n<code language=julia-1.4>\nodd_count([\"1234567\"\
    ])\n</cell>\n<code language=julia-1.4>\nodd_count([\"3\", \"11111111\"])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of strings as an argument\
    \ and returns a vector where each element is the sum of the number of odd digits\
    \ in each string. For example, [\"1234567\", \"3\"] should return [5, 2]."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
