name: HumanEval_154_cycpattern_check
language: jl
prompt: "\"\"\"You are given 2 words. You need to return true if the second word or\
  \ any of its rotations is a substring in the first word\n    >>> cycpattern_check(\"\
  abcd\", \"abd\")\n    false\n    >>> cycpattern_check(\"hello\", \"ell\")\n    true\n\
  \    >>> cycpattern_check(\"whassup\", \"psus\")\n    false\n    >>> cycpattern_check(\"\
  abab\", \"baa\")\n    true\n    >>> cycpattern_check(\"efef\", \"eeff\")\n    false\n\
  \    >>> cycpattern_check(\"himenss\", \"simen\")\n    true\n\n    \"\"\"\nfunction\
  \ cycpattern_check(a::String, b::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = cycpattern_check;\n\t@test(candidate(\"\
  xyzw\", \"xyw\") == false)\n\t@test(candidate(\"yello\", \"ell\") == true)\n\t@test(candidate(\"\
  whattup\", \"ptut\") == false)\n\t@test(candidate(\"efef\", \"fee\") == true)\n\t\
  @test(candidate(\"abab\", \"aabb\") == false)\n\t@test(candidate(\"winemtt\", \"\
  tinem\") == true)\nend\n"
completions: ["    if length(a) == 0 || length(b) == 0 \n        return true\n   \
    \ else if length(a) == 1 \n        return b == a\n    else if length(b) == 1 \n\
    \        return a == b\n    else \n        \n        if b == substring(a,1,length(b))\
    \ \n            return true\n        else \n            if substring(a,1,length(b))\
    \ in b \n                return true\n            else \n                if substring(a,length(a),length(b))\
    \ in b \n                    return true\n                else \n            \
    \        if substring(a,length(a),length(b))  in b \n                        return\
    \ true\n                    else \n                        if substring(a,length(a),length(b))\
    \ in substring(a,1,length(b)) \n                            return true\n    \
    \                    else \n                            if substring(a,length(a),length(b))\
    \ in substring(a,length(a),length(b)) \n                                return\
    \ true\n                            else \n                                if\
    \ substring(a,length(a),length(b)) in substring(a,length(a),length(b)) \n    \
    \                                return true\n                               \
    \ else \n                                    if substring(a,length(a),length(b))\
    \ in substring(a,length(a),length(b)) \n                                     \
    \   return true\n                                    else \n                 \
    \                       if substring(a,length(a),length(b)) in substring(a,length(a),length(b))\
    \ \n                                            return true\n                \
    \                        else \n                                            if\
    \ substring(a,length(a),length(b)) in substring(a,length(a),length(b)) \n    \
    \                                            return true\n                   \
    \                         else \n                                            \
    \    if substring(a,length(a),length(b)) in substring(a,length(a),length(b)) \n\
    \                                                    return true\n           \
    \                                     else \n                                \
    \                    if substring(a,length(a),length(b)) in substring(a,length(a),length(b))\
    \ \n                                                        return true\n    \
    \                                                else \n                     \
    \                                   if substring(a,length(a),length(b)) in substring(a,length(a),length(b))\
    \ \n                                                            return true\n\
    \                                                        else \n             \
    \                                               if substring(a,length(a),length(b))\
    \ in substring(a,length(a),length(b)) \n                                     \
    \                           return true\n                                    \
    \                        else \n                                             \
    \                   if substring(a,length(a),length(b)) in substring(a,length(a),length(b))\
    \ \n                                                                    return\
    \ true\n                                                                    else\
    \ \n                                                        if substring(a,length(a),length(b))\
    \ in substring(a,length(a),length(b)) \n                                     \
    \                       return true\n                                        \
    \                else:\n                                                     \
    \       if substring(a,length(a),length(b)) in substring(a,length(a),length(b))\
    \ \n                                                                return true\n\
    \                                                            else \n         \
    \                                                       if substring(a,length(a),length(b))\
    \ in substring(a,length(a),length(b)) \n                                     \
    \                               return true\n                                \
    \                                    else \n                                 \
    \                       if substring(a,length(a),length(b)) in substring(a,length(a),length(b))\
    \ \n                                                            return true\n\
    \                                                        else \n             \
    \                                               ", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if length(a) == length(b) \n    \
    \    then true\n        else false\n    end\n    \n    else if length(a) > length(b)\
    \ \n        then false\n        else true\n    end\n    \n    else if length(a)\
    \ < length(b) \n        then true\n        else false\n    end\n    \n    else\
    \ if length(a) == 0 \n        then true\n        else false\n    end\n    \n \
    \   else if length(a) == 1 \n        then true\n        else false\n    end\n\
    \    \n    else if length(a) == 2 \n        then true\n        else false\n  \
    \  end\n    \n    else if length(a) == 3 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 4 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 5 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 6 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 7 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 8 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 9 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 10 \n        then true\n        else\
    \ false\n    end\n    \n    else if length(a) == 11 \n        then true\n    \
    \    else false\n    end\n    \n    else if length(a) == 12 \n        then true\n\
    \        else false\n    end\n    \n    else if length(a) == 13 \n        then\
    \ true\n        else false\n    end\n    \n    else if length(a) == 14 \n    \
    \    then true\n        else false\n    end\n    \n    else if length(a) == 15\
    \ \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 16 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 17 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 18 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 19 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 20 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 21 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 22 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 23 \n        then true\n", "    if length(a) == length(b) \n        then\
    \ true\n        else false\n    else if length(a) < length(b) \n        then false\n\
    \        else if length(a) == 0 \n            then true\n            else if length(b)\
    \ == 0 \n                then true\n                else if contains(a, b)\n \
    \                   then true\n                    else false\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to know if any of its rotations is a substring in the first word.\n<|/ c |>\n\
    <| c |>\nYes, I missed that part. Thanks for pointing it out. I'll edit my answer.\n\
    <|/ c |>\n<| a tags=string,julia,substring |>\nThe function cycpattern_check is\
    \ defined incorrectly and does not do what you think it does. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String,\
    \ b::String) checks if a is a substring of b. \nThe function cycpattern_check(a::String",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false \n    \n \
    \   if length(a) == 1 \n        return b == a \n    \n    if length(b) == 1 \n\
    \        return b == a \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return true\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) < length(b) \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return true\n    \n    if length(a) == length(b) \n  \
    \      return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return true\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) < length(b) \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return true\n    \n    if length(a) == length(b) \n  \
    \      return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return true\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) < length(b) \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return true\n    \n    if ", "    \n    \n    if length(a) == length(b)\
    \ \n        \n        if a == b\n            return true\n        \n        else\n\
    \            return false\n        \n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    else if length(a) == 1 \n        return true\n    else if length(b)\
    \ == 1 \n        return true\n    else if length(a) == length(b) \n        return\
    \ true\n    else if length(a) > length(b) \n        return false\n    else if\
    \ length(b) > length(a) \n        return false\n    else if b == a \n        return\
    \ true\n    else if b == reverse(tail(a)) \n        return true\n    else if b\
    \ == reverse(tail(b)) \n        return true\n    else if b == reverse(tail(tail(a)))\
    \ \n        return true\n    else if b == reverse(tail(tail(b))) \n        return\
    \ true\n    else if b == reverse(tail(tail(tail(a)))) \n        return true\n\
    \    else if b == reverse(tail(tail(tail(b)))) \n        return true\n    else\
    \ if b == reverse(tail(tail(tail(tail(a)))))\n        return true\n    else if\
    \ b == reverse(tail(tail(tail(tail(b))))) \n        return true\n    else if b\
    \ == reverse(tail(tail(tail(tail(tail(a))))))\n        return true\n    else if\
    \ b == reverse(tail(tail(tail(tail(tail(b))))))\n        return true\n    else\
    \ if b == reverse(tail(tail(tail(tail(tail(tail(a)))))))\n        return true\n\
    \    else if b == reverse(tail(tail(tail(tail(tail(tail(b)))))))\n        return\
    \ true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(a)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(b)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(a)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(b)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(a)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(b)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a)))))))\n\
    \        return true\n    else ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    if length(a) == length(b) \n        then true\n   \
    \     else false\n    end\nend", "    if length(a) == 0 || length(b) == 0 \n \
    \       true \n    else \n        if length(a) == length(b) \n            if a\
    \ == b \n                true \n            else \n                if length(a)\
    \ > length(b) \n                    false \n                else \n          \
    \          let \n                        a1 = substring(a, 1, length(a) - 1) \n\
    \                        b1 = substring(b, 1, length(b) - 1) \n              \
    \          a2 = substring(a, length(a) - 1, length(a)) \n                    \
    \    b2 = substring(b, length(b) - 1, length(b)) \n                    in \n \
    \                       if a1 == b1 \n                            true \n    \
    \                    else \n                            if a2 == b2 \n       \
    \                         true \n                            else \n         \
    \                       if a1 \u2209 a2 \n                                   \
    \ false \n                                else \n                            \
    \        if b1 \u2209 b2 \n                                        false \n  \
    \                                  else \n                                   \
    \     cycpattern_check(a1, b1) || cycpattern_check(a2, b2) \n        else \n \
    \           if length(a) > length(b) \n                false \n            else\
    \ \n                let \n                    a1 = substring(a, 1, length(a) -\
    \ 1) \n                    b1 = substring(b, 1, length(b) - 1) \n            \
    \        a2 = substring(a, length(a) - 1, length(a)) \n                    b2\
    \ = substring(b, length(b) - 1, length(b)) \n                in \n           \
    \         if a1 == b1 \n                        true \n                    else\
    \ \n                        if a2 == b2 \n                            true \n\
    \                        else \n                            if a1 \u2209 a2 \n\
    \                                false \n                            else \n \
    \                               if b1 \u2209 b2 \n                           \
    \         false \n                                else \n                    \
    \                cycpattern_check(a1, b1) || cycpattern_check(a2, b2) \n     \
    \   end\n    end\nend\n</code>\n<|/ a tags=string,pattern-matching,julia |>\n\
    <| a dscore=2 |>\nI wrote a package for Julia called Cyclomatic Complexity that\
    \ does this for you. \n<code>\nusing CyclomaticComplexity", "    \n    if length(a)\
    \ == length(b) \n        then true\n        else false\n    end\nend", "    if\
    \ length(a) == 0 || length(b) == 0 \n        then return false \n    else \n \
    \       local a1 = a:sub(1,length(a)-1)\n        local b1 = b:sub(1,length(b)-1)\n\
    \        local a2 = a:sub(1,length(a)-1)\n        local b2 = b:sub(1,length(b)-1)\n\
    \        local a3 = a:sub(1,length(a)-1)\n        local b3 = b:sub(1,length(b)-1)\n\
    \        local a4 = a:sub(1,length(a)-1)\n        local b4 = b:sub(1,length(b)-1)\n\
    \        local a5 = a:sub(1,length(a)-1)\n        local b5 = b:sub(1,length(b)-1)\n\
    \        local a6 = a:sub(1,length(a)-1)\n        local b6 = b:sub(1,length(b)-1)\n\
    \        local a7 = a:sub(1,length(a)-1)\n        local b7 = b:sub(1,length(b)-1)\n\
    \        local a8 = a:sub(1,length(a)-1)\n        local b8 = b:sub(1,length(b)-1)\n\
    \        local a9 = a:sub(1,length(a)-1)\n        local b9 = b:sub(1,length(b)-1)\n\
    \        local a10 = a:sub(1,length(a)-1)\n        local b10 = b:sub(1,length(b)-1)\n\
    \        local a11 = a:sub(1,length(a)-1)\n        local b11 = b:sub(1,length(b)-1)\n\
    \        local a12 = a:sub(1,length(a)-1)\n        local b12 = b:sub(1,length(b)-1)\n\
    \        local a13 = a:sub(1,length(a)-1)\n        local b13 = b:sub(1,length(b)-1)\n\
    \        local a14 = a:sub(1,length(a)-1)\n        local b14 = b:sub(1,length(b)-1)\n\
    \        local a15 = a:sub(1,length(a)-1)\n        local b15 = b:sub(1,length(b)-1)\n\
    \        local a16 = a:sub(1,length(a)-1)\n        local b16 = b:sub(1,length(b)-1)\n\
    \        local a17 = a:sub(1,length(a)-1)\n        local b17 = b:sub(1,length(b)-1)\n\
    \        local a18 = a:sub(1,length(a)-1)\n        local b18 = b:sub(1,length(b)-1)\n\
    \        local a19 = a:sub(1,length(a)-1)\n        local b19 = b:sub(1,length(b)-1)\n\
    \        local a20 = a:sub(1,length(a)-1)\n        local b20 = b:sub(1,length(b)-1)\n\
    \        local a21 = a:sub(1,length(a)-1)\n        local b21 = b:sub(1,length(b)-1)\n\
    \        local a22 = a:sub(1,length(a)-1)\n        local ", "    \n    if length(a)\
    \ == length(b) \n        \n        if length(a) == 0 \n            return true\n\
    \        \n        if length(b) == 0 \n            return false\n        \n  \
    \      if length(a) == 1 \n            return true\n        \n        if length(b)\
    \ == 1 \n            return false\n        \n        if a[1] == b[1] \n      \
    \      return cycpattern_check(a[2:], b[2:])\n        \n        if a[1] == b[2]\
    \ \n            return cycpattern_check(a[2:], b[:2])\n        \n        if a[2]\
    \ == b[1] \n            return cycpattern_check(a[:2], b[2:])\n        \n    \
    \    if a[2] == b[2] \n            return cycpattern_check(a[:2], b[:2])\n   \
    \     \n        if a[0] == b[0] \n            return cycpattern_check(a[1:], b[1:])\n\
    \        \n        if a[0] == b[1] \n            return cycpattern_check(a[1:],\
    \ b[2:])\n        \n        if a[0] == b[2] \n            return cycpattern_check(a[1:],\
    \ b[:2])\n        \n        if a[1] == b[0] \n            return cycpattern_check(a[2:],\
    \ b[1:])\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[2:])\n        \n        if a[1] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[:2])\n        \n        if a[2] == b[0] \n            return cycpattern_check(a[:2],\
    \ b[1:])\n        \n        if a[2] == b[1] \n            return cycpattern_check(a[:2],\
    \ b[2:])\n        \n        if a[2] == b[2] \n            return cycpattern_check(a[:2],\
    \ b[:2])\n        \n        return false\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"whassup\", \"psus\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\"\
    , \"simen\")\n</cell>\n<code language=julia-1.5>", "    \n    if length(a) ==\
    \ length(b) \n        \n        if length(a) == 0 \n            return true\n\
    \        \n        if length(b) == 0 \n            return false\n        \n  \
    \      if length(a) == 1 \n            return true\n        \n        if length(b)\
    \ == 1 \n            return false\n        \n        if a[1] == b[1] \n      \
    \      return cycpattern_check(a[2:], b[2:])\n        \n        if a[1] == b[2]\
    \ \n            return cycpattern_check(a[2:], b[:2])\n        \n        if a[1]\
    \ == b[3] \n            return cycpattern_check(a[2:], b[:3])\n        \n    \
    \    if a[1] == b[4] \n            return cycpattern_check(a[2:], b[:4])\n   \
    \     \n        if a[1] == b[5] \n            return cycpattern_check(a[2:], b[:5])\n\
    \        \n        if a[1] == b[6] \n            return cycpattern_check(a[2:],\
    \ b[:6])\n        \n        if a[1] == b[7] \n            return cycpattern_check(a[2:],\
    \ b[:7])\n        \n        if a[1] == b[8] \n            return cycpattern_check(a[2:],\
    \ b[:8])\n        \n        if a[1] == b[9] \n            return cycpattern_check(a[2:],\
    \ b[:9])\n        \n        if a[1] == b[10] \n            return cycpattern_check(a[2:],\
    \ b[:10])\n        \n        if a[1] == b[11] \n            return cycpattern_check(a[2:],\
    \ b[:11])\n        \n        if a[1] == b[12] \n            return cycpattern_check(a[2:],\
    \ b[:12])\n        \n        if a[1] == b[13] \n            return cycpattern_check(a[2:],\
    \ b[:13])\n        \n        if a[1] == b[14] \n            return cycpattern_check(a[2:],\
    \ b[:14])\n        \n        if a[1] == b[15] \n            return cycpattern_check(a[2:],\
    \ b[:15])\n        \n        if a[1] == b[16] \n            return cycpattern_check(a[2:],\
    \ b[:16])\n        \n        if a[1] == b[17] \n            return cycpattern_check(a[2:],\
    \ b[:17])\n        \n        if a[1] == b[18] \n            return cycpattern_check(a[2:],\
    \ b[:18])\n        \n        if a[1] == b[19] \n            return cycpattern_check(a[2:],\
    \ b[:19])\n        \n        if a[1] == b[20] \n            return cycpattern_check(a[2:],\
    \ b[:20])\n        \n        if a[1] == b[21] \n            return cycpattern_check(a[2:],\
    \ b[:2", "    \n    \n    \n    if length(a) == length(b) \n    then true\n  \
    \  else false\n    end\nend", "    if length(a) == 0 \n        true\n    elseif\
    \ length(b) == 0 \n        false\n    elseif length(a) == length(b) \n       \
    \ if a == b \n            true\n        elseif contains(b, a) \n            true\n\
    \        else\n            false\n    else\n        if contains(b, a) \n     \
    \       true\n        else\n            false\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false\n    else if length(a) == 1 \n       \
    \ return true\n    else if length(b) == 1 \n        return true\n    else if length(a)\
    \ == length(b) \n        return true\n    else if length(a) > length(b) \n   \
    \     return false\n    else \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n", "    if length(a) == length(b)\
    \ \n        then true\n        else false\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `cycpattern_check(\"abcd\", \"abd\"\
    )`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've edited the answer to\
    \ fix the issue.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm still having\
    \ trouble understanding how this works. Could you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI've added some comments to the code. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I'm still having trouble understanding\
    \ how this works. Could you please explain how this works?\n<|/ c |>\n<| a tags=string,julia,pattern-matching\
    \ |>\n<code>", "    if length(a) == 0 \n        true\n    elseif length(b) ==\
    \ 0 \n        false\n    elseif length(a) == length(b) \n        true\n    elseif\
    \ length(a) > length(b) \n        false\n    elseif length(a) < length(b) \n \
    \       false\n    elseif length(a) == 1 \n        if isupper(a) \n          \
    \  if isupper(b) \n                true\n            else \n                false\n\
    \        else \n            if isupper(b) \n                false\n          \
    \  else \n                true\n    else \n        if isupper(a) \n          \
    \  if isupper(b) \n                false\n            else \n                true\n\
    \        else \n            if isupper(b) \n                true\n           \
    \ else \n                false\n    end \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b)\
    \ \n        return true\n    else \n        return false\n    end\nend", "   \
    \ if length(a) == length(b) \n    then \n        for i in 1:length(a) \n     \
    \   do \n            if a[i] != b[i] \n            then \n                return\
    \ false \n            end \n        end \n        return true \n    else \n  \
    \      return false \n    end \nend \n</code>\n<|/ a tags=string,pattern-matching,julia\
    \ |>\n<| c |>\nThis does not work for me. `cycpattern_check(\"abcd\", \"abd\"\
    )` returns `true` instead of `false`\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2 and it worked fine. Maybe you have a different version?\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 0.6.2 and it worked fine. Maybe you have a different\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it worked fine.\
    \ Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2 and it worked fine. Maybe you have a different version?\n<|/ c |>\n<|\
    \ a dscore=2 |>\nHere's a solution that uses regular expressions:\n<code>\njulia>\
    \ function cycpattern_check(a::String, b::String)\n           return ismatch(a,\
    \ \".*($b)\") && ismatch(b, \".*($a)\")\n       end\ncycpattern_check (generic\
    \ function with 1 method)", "    if length(a) == length(b) \n        then true\n\
    \        else false\n    else if length(a) > length(b) \n        then false\n\
    \        else if length(a) == 0 \n            then true\n            else if length(b)\
    \ == 0 \n                then true\n                else if contains(a, b)\n \
    \                   then true\n                    else false\n    end\nend\n\
    </code>\n<|/ a |>\n<| a |>\n<code>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(a) == 0 \n        then return true\n    else if length(b) == 0 \n\
    \        then return false\n    else if length(a) == 1 \n        then return b\
    \ == substring(a,1,1)\n    else if length(b) == 1 \n        then return a == substring(b,1,1)\n\
    \    else if length(a) == 2 \n        then return b == substring(a,1,2) || b ==\
    \ substring(a,2,1) || b == substring(a,2,2)\n    else if length(b) == 2 \n   \
    \     then return a == substring(b,1,2) || a == substring(b,2,1) || a == substring(b,2,2)\n\
    \    else if length(a) == 3 \n        then return b == substring(a,1,3) || b ==\
    \ substring(a,2,3) || b == substring(a,3,1) || b == substring(a,3,2) || b == substring(a,3,3)\n\
    \    else if length(b) == 3 \n        then return a == substring(b,1,3) || a ==\
    \ substring(b,2,3) || a == substring(b,3,1) || a == substring(b,3,2) || a == substring(b,3,3)\n\
    \    else if length(a) == 4 \n        then return b == substring(a,1,4) || b ==\
    \ substring(a,2,4) || b == substring(a,3,4) || b == substring(a,4,1) || b == substring(a,4,2)\
    \ || b == substring(a,4,3) || b == substring(a,4,4)\n    else if length(b) ==\
    \ 4 \n        then return a == substring(b,1,4) || a == substring(b,2,4) || a\
    \ == substring(b,3,4) || a == substring(b,4,1) || a == substring(b,4,2) || a ==\
    \ substring(b,4,3) || a == substring(b,4,4)\n    else if length(a) == 5 \n   \
    \     then return b == substring(a,1,5) || b == substring(a,2,5) || b == substring(a,3,5)\
    \ || b == substring(a,4,5) || b == substring(a,5,1) || b == substring(a,5,2) ||\
    \ b == substring(a,5,3) || b == substring(a,5,4) || b == substring(a,5,5)\n  \
    \  else if length(b) == 5 \n        then return a == substring(b,1,5) || a ==\
    \ substring(b,2,5) || a == substring(b,3,5) || a == substring(b,4,5) || a == substring(b,5,1)\
    \ || a == substring(b,5,2) || a == substring(b,5,3) || a == substring(b,5,4) ||\
    \ a == substring(b,5,5)\n    else if length(a) == 6 \n        then return b ==\
    \ substring(a,1,6) || b == substring(a,2,6) || b == substring", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 || length(b)\
    \ == 0 \n        true\n    else if length(a) == length(b) \n        true\n   \
    \ else if length(a) > length(b) \n        false\n    else \n        cycpattern_check(b,a)\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27812873)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27812873)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27812873)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27812873)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27812873)\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    if length(a) == 0 then return false\
    \ \n    if length(b) == 0 then return false \n    if length(a) == length(b) then\
    \ return true \n    if length(a) > length(b) then return false \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      return issubstring(a[1:end-1], b[1:end-1]) \nend \n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27859419)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. He asked how to check if a substring is a rotation\
    \ of another substring. He also asked how to check if a substring is a substring\
    \ of another substring. He also asked how to check if a substring is a substring\
    \ of another substring and if that substring is a rotation of another substring.\
    \ He also asked how to check if a substring is a substring of another substring\
    \ and if that substring is a rotation of another substring and if that substring\
    \ is a rotation of another substring. He also asked how to check if a substring\
    \ is a substring of another substring and if that substring is a rotation of another\
    \ substring and if that substring is a rotation of another substring and if that\
    \ substring is a rotation of another substring. He also asked how to check if\
    \ a substring is a substring of another substring and if that substring is a rotation\
    \ of another substring and if that substring is a rotation of another substring\
    \ and if that substring is a rotation of another substring and if that substring\
    \ is a rotation of another substring.\n<|/ c |>\n<| c |>\nHe also asked how to\
    \ check if a substring is a substring of another substring and if that substring\
    \ is a rotation of another substring and if that substring is a rotation of another\
    \ substring and if that substring is a rotation of another substring and if that\
    \ substring is a rotation of another substring and if that substring is a rotation\
    \ of another substring and if that substring is a rotation of another substring\
    \ and if that substring is a rotation of another substring.\n<|/ c |>\n<| c |>\n\
    He also asked how to check if a substring is a substring of another substring\
    \ and if that substring is a rotation of another substring and if that substring\
    \ is a rotation of another substring and if that substring is a rotation of another\
    \ substring and if that substring is a rotation of another substring and if that\
    \ substring is a rotation of another substring and if that substring is a rotation\
    \ of another ", "    if length(a) == length(b) then \n        true\n    else\n\
    \        false\n    end\nend", "    \n    \n    if length(a) == length(b) \n \
    \       \n        if a == b\n            true\n        else\n            false\n\
    \    \n    else\n        false\n    \nend", "    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else if length(a) == 1 \n        return b\
    \ == a \n    else if length(b) == 1 \n        return a == b \n    else \n    \
    \    return b[length(b) - length(a) + 1] in a\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return true\n\
    \    else if length(a) == 1 \n        return true\n    else if length(b) == 1\
    \ \n        return true\n    else if b == a \n        return true\n    else if\
    \ b == reverse(tail(a)) \n        return true\n    else if b == reverse(tail(tail(a)))\
    \ \n        return true\n    else if b == reverse(tail(tail(tail(a)))) \n    \
    \    return true\n    else if b == reverse(tail(tail(tail(tail(a))))) \n     \
    \   return true\n    else if b == reverse(tail(tail(tail(tail(tail(a))))))\n \
    \       return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(a)))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(a))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true\n    else if b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))))\n\
    \        return true", "    if length(a) == length(b) \n        then true\n  \
    \      else false\n    else if length(a) < length(b) \n        then false\n  \
    \      else if length(a) == 0 \n            then true\n            else if length(b)\
    \ == 0 \n                then true\n                else if contains(a, b)\n \
    \                   then true\n                    else false\n    end\nend\n\
    </code>\n<|/ a tags=string,julia,pattern-matching |>\n<| a dscore=0 |>\n<code>",
  "    if length(a) == 0 || length(b) == 0 \n        return true\n    else if length(a)\
    \ == length(b) \n        return true\n    else if length(a) > length(b) \n   \
    \     return false\n    else \n        local i = length(a)\n        local j =\
    \ length(b)\n        local k = length(a) - length(b)\n        local l = length(b)\n\
    \        local m = length(a)\n        local n = length(a)\n        local o = 0\n\
    \        local p = 0\n        local q = 0\n        local r = 0\n        local\
    \ s = 0\n        local t = 0\n        local u = 0\n        local v = 0\n     \
    \   local w = 0\n        local x = 0\n        local y = 0\n        local z = 0\n\
    \        local a = 0\n        local b = 0\n        local c = 0\n        local\
    \ d = 0\n        local e = 0\n        local f = 0\n        local g = 0\n     \
    \   local h = 0\n        local i = 0\n        local j = 0\n        local k = 0\n\
    \        local l = 0\n        local m = 0\n        local n = 0\n        local\
    \ o = 0\n        local p = 0\n        local q = 0\n        local r = 0\n     \
    \   local s = 0\n        local t = 0\n        local u = 0\n        local v = 0\n\
    \        local w = 0\n        local x = 0\n        local y = 0\n        local\
    \ z = 0\n        local a = 0\n        local b = 0\n        local c = 0\n     \
    \   local d = 0\n        local e = 0\n        local f = 0\n        local g = 0\n\
    \        local h = 0\n        local i = 0\n        local j = 0\n        local\
    \ k = 0\n        local l = 0\n        local m = 0\n        local n = 0\n     \
    \   local o = 0\n        local p = 0\n        local q = 0\n        local r = 0\n\
    \        local s = 0\n        local t = 0\n        local u = 0\n        local\
    \ v = 0\n        local w = 0\n        local x = 0\n        local y = 0\n     \
    \   local z = 0\n        local a = 0\n        local b = 0\n        local c = 0\n\
    \        local d = 0\n        local e = 0\n        local f = 0\n        local\
    \ g = 0\n        local h = 0\n        local i = 0\n        local j = 0\n     \
    \   local k = 0\n        local l = 0\n        local m = 0\n        local n = 0\n\
    \        local o = 0\n        local p = 0\n        local q = 0\n        local\
    \ r = 0\n        local s = 0\n        local t = 0\n        local u = 0\n     \
    \   local v = 0\n        local w = 0\n        local x", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n    \
    \    then true\n        else false\n    end\nend", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if length(a) == 0 \n            return true\n\
    \        \n        if length(b) == 0 \n            return false\n        \n  \
    \      if length(a) == 1 \n            return true\n        \n        if length(b)\
    \ == 1 \n            return false\n        \n        if a[1] == b[1] \n      \
    \      return cycpattern_check(a[2:], b[2:])\n        \n        if a[1] == b[2]\
    \ \n            return cycpattern_check(a[2:], b[:2])\n        \n        if a[2]\
    \ == b[1] \n            return cycpattern_check(a[:2], b[2:])\n        \n    \
    \    if a[2] == b[2] \n            return cycpattern_check(a[:2], b[:2])\n   \
    \     \n        if a[0] == b[1] \n            return cycpattern_check(a[1:], b[2:])\n\
    \        \n        if a[0] == b[2] \n            return cycpattern_check(a[1:],\
    \ b[:2])\n        \n        if a[2] == b[0] \n            return cycpattern_check(a[:2],\
    \ b[1:])\n        \n        if a[0] == b[0] \n            return cycpattern_check(a[1:],\
    \ b[1:])\n        \n        return false\n    \n    else \n        return false\n\
    end\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"himenss\", \"simen\")\n</cell>\n<text>\nCyclic Patterns\nA\
    \ cyclic pattern is a pattern that repeats itself. For example, the pattern aba\
    \ is a cyclic pattern because a repeats itself.", "    if length(a) == length(b)\
    \ \n        then true\n        else false\n    else \n        cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end])\nend\n</code>\n<|/ a |>\n\
    <| a |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        cycpattern_check(a[1:length(a)], b[1:length(b)])\nend\n</code>\n<|/\
    \ a tags=string,julia |>\n<| c |>\nThis doesn't work for `cycpattern_check(\"\
    ab\", \"ba\")` which should return `true`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've edited my answer to fix this issue.\n<|/ c |>\n<| c |>\nI still don't\
    \ think this works. Try `cycpattern_check(\"ab\", \"ba\")`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've edited my answer to fix this issue.\n<|/ c |>\n<| c\
    \ |>\nI still don't think this works. Try `cycpattern_check(\"ab\", \"ba\")`.\n\
    <|/ c |>\n<| a tags=string,julia |>\n<code>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b)\
    \ \n        return true\n    else \n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(a) == length(b) \n    then true\n \
    \   else false\n    end\nend", "    if length(a) == length(b) \n        then true\n\
    \        else false\n    else false\nend\n</code>\n<|/ a tags=string,julia |>\n\
    <| a dscore=1 |>\nI wrote a package for string manipulation that does this kind\
    \ of thing:\nhttps://github.com/jrfonseca/StringManipulation\n<code>\njulia> using\
    \ StringManipulation", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if length(a) == length(b) \n        \n        if length(a) == 0 \n  \
    \          return true\n        \n        if length(b) == 0 \n            return\
    \ false\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[2:])\n        \n        if a[1] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[:2])\n        \n        if a[2] == b[1] \n            return cycpattern_check(a[:2],\
    \ b[2:])\n        \n        if a[2] == b[2] \n            return cycpattern_check(a[:2],\
    \ b[:2])\n        \n        return false\n    \n    else \n        return false\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\", \"\
    abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\")\n</cell>\n<text>\n\
    Cyclic Patterns\nA cyclic pattern occurs whenever the same character appears more\
    \ than once in a given string. For example, in the string \"abba\", the pattern\
    \ \"aba\" occurs twice (once at index 0 and once at index 3). Another example\
    \ of a cyclic pattern is \"aba\" which occurs twice (at index 0 and index 3).",
  "    if length(a) == 0 || length(b) == 0 \n        return true\n    else if length(a)\
    \ == 1 \n        return b == a\n    else if length(b) == 1 \n        return a\
    \ == b\n    else \n        return b[length(b) - length(a) + 1] in a\nend", " \
    \   \n    \n    if length(a) == length(b) \n        \n        \n        if issubstring(a,b)\
    \ \n            \n            return true\n            \n        else \n     \
    \       \n            return false\n            \n    else \n        \n      \
    \  return false\n        \nend\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"\
    abcd\", \"abd\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"hello\"\
    , \"ell\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"whassup\",\
    \ \"psus\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    if length(a) == length(b) \n\
    \        \n        if a == b \n            return true\n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        ", "    \n    \n\
    \    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n\
    \        if length(a) == 1 \n            return b == a \n        else \n     \
    \       if length(b) == 1 \n                return b == a || b == rot13(a) \n\
    \            else \n                if b == rot13(a) || b == rot13(rot13(a)) \n\
    \                    return true \n                else \n                   \
    \ return false \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false \n    else \n \
    \       local i::Int = 0 \n        local j::Int = 0 \n        local k::Int = 0\
    \ \n        local l::Int = 0 \n        local m::Int = 0 \n        local n::Int\
    \ = 0 \n        local o::Int = 0 \n        local p::Int = 0 \n        local q::Int\
    \ = 0 \n        local r::Int = 0 \n        local s::Int = 0 \n        local t::Int\
    \ = 0 \n        local u::Int = 0 \n        local v::Int = 0 \n        local w::Int\
    \ = 0 \n        local x::Int = 0 \n        local y::Int = 0 \n        local z::Int\
    \ = 0 \n        local a::Int = 0 \n        local b::Int = 0 \n        local c::Int\
    \ = 0 \n        local d::Int = 0 \n        local e::Int = 0 \n        local f::Int\
    \ = 0 \n        local g::Int = 0 \n        local h::Int = 0 \n        local i::Int\
    \ = 0 \n        local j::Int = 0 \n        local k::Int = 0 \n        local l::Int\
    \ = 0 \n        local m::Int = 0 \n        local n::Int = 0 \n        local o::Int\
    \ = 0 \n        local p::Int = 0 \n        local q::Int = 0 \n        local r::Int\
    \ = 0 \n        local s::Int = 0 \n        local t::Int = 0 \n        local u::Int\
    \ = 0 \n        local v::Int = 0 \n        local w::Int = 0 \n        local x::Int\
    \ = 0 \n        local y::Int = 0 \n        local z::Int = 0 \n        local a::Int\
    \ = 0 \n        local b::Int = 0 \n        local c::Int = 0 \n        local d::Int\
    \ = 0 \n        local e::Int = 0 \n        local f::Int = 0 \n        local g::Int\
    \ = 0 \n        local h::Int = 0 \n        local i::Int = 0 \n        local j::Int\
    \ = 0 \n        local k::Int = 0 \n        local l::Int = 0 \n        local m::Int\
    \ = 0 \n        local n::Int = 0 \n        local o::Int = 0 \n        local p::Int\
    \ = 0 \n        local q::Int = 0 \n        local r::Int = 0 \n        local s::Int\
    \ = 0 \n        local t::Int = 0 \n        local u::Int = 0 \n        local v::Int\
    \ = 0 \n        local w::Int = 0 \n        local x::Int = 0 \n        local y::Int\
    \ = 0 \n        local z::Int = 0 \n        local a::Int = 0 \n        local b::",
  "    if length(a) == 0 || length(b) == 0 \n        return true\n    else if length(a)\
    \ == 1 \n        return true\n    else if length(b) == 1 \n        return true\n\
    \    else if length(a) == length(b) \n        return true\n    else if length(a)\
    \ > length(b) \n        return false\n    else if length(b) > length(a) \n   \
    \     return false\n    else if b == substring(a, 1, length(b)) \n        return\
    \ true\n    else if b == substring(a, 1, length(b)) || b == substring(a, 1, length(b)+1)\
    \ \n        return true\n    else if b == substring(a, 1, length(b)+1) || b ==\
    \ substring(a, 1, length(b)+2) \n        return true\n    else if b == substring(a,\
    \ 1, length(b)+2) || b == substring(a, 1, length(b)+3) \n        return true\n\
    \    else if b == substring(a, 1, length(b)+3) \n        return true\n    else\
    \ if b == substring(a, 1, length(b)+4) \n        return true\n    else if b ==\
    \ substring(a, 1, length(b)+4) || b == substring(a, 1, length(b)+5) \n       \
    \ return true\n    else if b == substring(a, 1, length(b)+5) \n        return\
    \ true\n    else if b == substring(a, 1, length(b)+6) \n        return true\n\
    \    else if b == substring(a, 1, length(b)+6) \n        return true\n    else\
    \ if b == substring(a, 1, length(b)+7) \n        return true\n    else if b ==\
    \ substring(a, 1, length(b)+7) \n        return true\n    else if b == substring(a,\
    \ 1, length(b)+8) \n        return true\n    else if b == substring(a, 1, length(b)+8)\
    \ \n        return true\n    else if b == substring(a, 1, length(b)+9) \n    \
    \    return true\n    else if b == substring(a, 1, length(b)+9) \n        return\
    \ true\n    else if b == substring(a, 1, length(b)+10) \n        return true\n\
    \    else if b == substring(a, 1, length(b)+10) \n        return true\n    else\
    \ if b == substring(a, 1, length(b)+11) \n        return true\n    else if b ==\
    \ substring(a, 1, length(b)+11) \n        return true\n    else if b == substring(a,\
    \ 1, length(b)+12) \n        return true\n    else if b == substring(a, 1, length(b)+12)\
    \ \n        return true\n    else if b == substring(a, 1, length(b)+13) \n   \
    \     return true\n    else if b == substring(a, 1, length(b)+13) \n        return\
    \ true\n    else if b == substring(a, 1, ", "    \n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 2 \n        if (a[1] == b[1]) \n            return\
    \ true\n        else \n            return false\n    \n    if length(a) == 3 \n\
    \        if (a[1] == b[1] and a[2] == b[2]) \n            return true\n      \
    \  else \n            return false\n    \n    if length(a) == 4 \n        if (a[1]\
    \ == b[1] and a[2] == b[2] and a[3] == b[3]) \n            return true\n     \
    \   else \n            return false\n    \n    if length(a) == 5 \n        if\
    \ (a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] == b[4]) \n       \
    \     return true\n        else \n            return false\n    \n    if length(a)\
    \ == 6 \n        if (a[1] == b[1] and a[2] == b[2] and a[3] == b[3] and a[4] ==\
    \ b[4] and a[5] == b[5]) \n            return true\n        else \n          \
    \  return false\n    \n    if length(a) == 7 \n        if (a[1] == b[1] and a[2]\
    \ == b[2] and a[3] == b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6])\
    \ \n            return true\n        else \n            return false\n    \n \
    \   if length(a) == 8 \n        if (a[1] == b[1] and a[2] == b[2] and a[3] ==\
    \ b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6] and a[7] == b[7]) \n\
    \            return true\n        else \n            return false\n    \n    if\
    \ length(a) == 9 \n        if (a[1] == b[1] and a[2] == b[2] and a[3] == b[3]\
    \ and a[4] == b[4] and a[5] == b[5] and a[6] == b[6] and a[7] == b[7] and a[8]\
    \ == b[8]) \n            return true\n        else \n            return false\n\
    \    \n    if length(a) == 10 \n        if (a[1] == b[1] and a[2] == b[2] and\
    \ a[3] == b[3] and a[4] == b[4] and a[5] == b[5] and a[6] == b[6] and a[7] ==\
    \ b[7] and a[8] == b[8] and a[9] == b[9]) \n            return true\n        else\
    \ \n            return false\n    \n    if length(a) == 11 \n        if (a[1]\
    \ == b[1] and a[2] == b[2] and a[3] == b", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    if length(a) == length(b) \n    \
    \    return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 0 \n        return true\n    \n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    \n    if length(a) == length(b) \n\
    \        return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    \n    if length(a) == length(b) \n\
    \        return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    \n    if length(a) == length(b) \n\
    \        return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    \n    if length", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    else if length(a) == 1 \n\
    \        return true\n    else if length(b) == 1 \n        return true\n    else\
    \ if length(a) == length(b) \n        return true\n    else if length(a) > length(b)\
    \ \n        return false\n    else \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        then return false \n    else \n        if length(a)\
    \ == 1 \n            then return b == a \n        else \n            if length(b)\
    \ == 1 \n                then return b == a || b == reverse(a) \n            else\
    \ \n                let c = substring(a,1,length(a)) \n                let d =\
    \ substring(b,1,length(b)) \n                let e = substring(c,1,length(c))\
    \ \n                let f = substring(d,1,length(d)) \n                let g =\
    \ substring(e,1,length(e)) \n                let h = substring(f,1,length(f))\
    \ \n                let i = substring(g,1,length(g)) \n                let j =\
    \ substring(h,1,length(h)) \n                let k = substring(i,1,length(i))\
    \ \n                let l = substring(j,1,length(j)) \n                let m =\
    \ substring(k,1,length(k)) \n                let n = substring(l,1,length(l))\
    \ \n                let o = substring(m,1,length(m)) \n                let p =\
    \ substring(n,1,length(n)) \n                let q = substring(o,1,length(o))\
    \ \n                let r = substring(p,1,length(p)) \n                let s =\
    \ substring(q,1,length(q)) \n                let t = substring(r,1,length(r))\
    \ \n                let u = substring(s,1,length(s)) \n                let v =\
    \ substring(t,1,length(t)) \n                let w = substring(u,1,length(u))\
    \ \n                let x = substring(v,1,length(v)) \n                let y =\
    \ substring(w,1,length(w)) \n                let z = substring(y,1,length(y))\
    \ \n                let a = substring(a,1,length(a)) \n                let b =\
    \ substring(b,1,length(b)) \n                let c = substring(c,1,length(c))\
    \ \n                let d = substring(d,1,length(d)) \n                let e =\
    \ substring(e,1,length(e)) \n                let f = substring(f,1,length(f))\
    \ \n                let g = substring(g,1,length(g)) \n                let h =\
    \ substring(h,1,length(h)) \n                let i = substring(i,1,length(i))\
    \ \n                let j = substring(j,1,length(j)) \n                let k =\
    \ substring(k,1,length(k)) \n                let l = substring(l,1,length(l))\
    \ \n                let m = substring(m,1,length(m)) \n                let n =\
    \ substring(n,1,length(n)) \n                let o = substring(o,1,length(o))\
    \ \n                let p = substring(p,1,length(p)) \n                let q =\
    \ substring(q,1,length(q)) \n                let r = substring(r,1,length(r))\
    \ \n                let s = substring(s,1,length(s)) \n                let t =\
    \ substring(t", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == length(b) \n        return true\n    else \n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.3>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        return true\n \
    \   else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 \n        then\
    \ return false \n    else if length(b) == 0 \n        then return false \n   \
    \ else if length(a) == 1 \n        then return b == a \n    else if length(b)\
    \ == 1 \n        then return b == a \n    else if length(a) == 2 \n        then\
    \ return b == a || b == reverse(a) || b == reverse(reverse(a)) \n    else if length(b)\
    \ == 2 \n        then return b == a || b == reverse(a) || b == reverse(reverse(a))\
    \ \n    else if length(a) == 3 \n        then return b == a || b == reverse(a)\
    \ || b == reverse(reverse(a)) || b == reverse(reverse(reverse(a))) \n    else\
    \ if length(b) == 3 \n        then return b == a || b == reverse(a) || b == reverse(reverse(a))\
    \ || b == reverse(reverse(reverse(a))) \n    else if length(a) == 4 \n       \
    \ then return b == a || b == reverse(a) || b == reverse(reverse(a)) || b == reverse(reverse(reverse(a)))\
    \ || b == reverse(reverse(reverse(reverse(a)))) \n    else if length(b) == 4 \n\
    \        then return b == a || b == reverse(a) || b == reverse(reverse(a)) ||\
    \ b == reverse(reverse(reverse(a))) || b == reverse(reverse(reverse(reverse(a))))\n\
    \    else return false \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \n", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if a == b \n            return true\n     \
    \   \n        else \n            return false\n    \n    else \n        return\
    \ false\n    \nend \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\"\
    , \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\", \"\
    ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\")\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    else \n        if length(a) == 1 \n            return true\n    \
    \    else \n            if length(b) == 1 \n                return true\n    \
    \        else \n                if a[1] == b[1] \n                    return cycpattern_check(a[2:],\
    \ b[2:])\n                else \n                    if a[1] == b[2] \n      \
    \                  return cycpattern_check(a[2:], b[1:])\n                   \
    \ else \n                        if a[2] == b[1] \n                          \
    \  return cycpattern_check(a[1:], b[2:])\n                        else \n    \
    \                        if a[2] == b[2] \n                                return\
    \ cycpattern_check(a[1:], b[1:])\n                            else \n        \
    \                        return false\n</code>\n<|/ a tags=string,pattern-matching,haskell\
    \ |>\n<| c |>\nI see that you are using recursion to solve the problem, but I\
    \ don't think this is an efficient solution. Recursion is great for solving problems,\
    \ but for large problems, it can cause stack overflows. A better solution would\
    \ be to convert the problem into a graph problem and use DFS to solve it.\n<|/\
    \ c |>\n<| c |>\nI agree with you, DFS is more efficient than recursion, especially\
    \ for large problems. But I thought the problem was about checking whether a substring\
    \ is a substring of a string with rotations. So I used recursion to solve the\
    \ problem.\n<|/ c |>\n<| c |>\nI agree with you, DFS is more efficient than recursion,\
    \ especially for large problems. But I thought the problem was about checking\
    \ whether a substring is a substring of a string with rotations. So I used recursion\
    \ to solve the problem.\n<|/ c |>\n<| c |>\nI agree with you, DFS is more efficient\
    \ than recursion, especially for large problems. But I thought the problem was\
    \ about checking whether a substring is a substring of a string with rotations.\
    \ So I used recursion to solve the problem.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ DFS is more efficient than recursion, especially for large problems. But I thought\
    \ the problem was about checking whether a substring is a substring of a string\
    \ with rotations. So I used recursion to solve the problem.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe other answers here are great, but I thought I'd add my own solution,\
    \ which is based on a slightly different approach to my other answer.\n<code>\n\
    import Data.List (elemIndex)\nimport Data.Maybe (fromJust)", "    if length(a)\
    \ == 0 || length(b) == 0 \n        then return false \n    else \n        if length(a)\
    \ == 1 \n            then return b == a \n        else \n            if length(b)\
    \ == 1 \n                then return b == a || b == reverse(a) \n            else\
    \ \n                let c = reverse(a) \n                let d = reverse(b) \n\
    \                let e = c + d \n                let f = c + e \n            \
    \    let g = d + e \n                let h = d + f \n                let i = e\
    \ + f \n                let j = e + g \n                let k = f + g \n     \
    \           let l = f + h \n                let m = g + h \n                let\
    \ n = g + i \n                let o = h + i \n                let p = h + j \n\
    \                let q = i + j \n                let r = i + k \n            \
    \    let s = j + k \n                let t = j + l \n                let u = k\
    \ + l \n                let v = k + m \n                let w = l + m \n     \
    \           let x = l + n \n                let y = m + n \n                let\
    \ z = n + o \n                let A = m + p \n                let B = n + p \n\
    \                let C = n + q \n                let D = o + q \n            \
    \    let E = o + r \n                let F = q + r \n                let G = q\
    \ + s \n                let H = s + s \n                let I = s + t \n     \
    \           let J = t + t \n                let K = t + u \n                let\
    \ L = u + u \n                let M = u + v \n                let N = v + v \n\
    \                let O = v + w \n                let P = w + w \n            \
    \    let Q = w + x \n                let R = x + x \n                let S = x\
    \ + y \n                let T = y + y \n                let U = y + z \n     \
    \           let V = z + z \n                let W = z + A \n                let\
    \ X = A + A \n                let Y = A + B \n                let Z = B + B \n\
    \                let A = A + C \n                let B = B + C \n            \
    \    let C = C + C \n                let D = D + D \n                let E = E\
    \ + E \n                let F = F + F \n                let G = G + G \n     \
    \           let H = H + H \n                let I = I + I \n                let\
    \ J = J + J \n                let K = K + K \n                let L = L + L \n\
    \                let M = M + M \n                let N = N + N \n            \
    \    let O = O + O \n                let P = P + P \n                let Q", " \
    \   \n    \n    if length(a) == length(b) \n        \n        if a == b \n   \
    \         return true\n        \n        else \n            return false\n   \
    \ \n    else \n        return false\n    \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        if length(a) > length(b) \n            then false\n            else\
    \ cycpattern_check(b, a)\n    end \nend \n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26818005)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ check if a substring is a substring of a string. He also asked how to check\
    \ if a substring is a rotation of another string. He also asked how to check if\
    \ a substring is a substring of a rotation of another string. He also asked how\
    \ to check if a substring is a rotation of another string. He also asked how to\
    \ check if a substring is a rotation of another string. He also asked how to check\
    \ if a substring is a rotation of another string. He also asked how to check if\
    \ a substring is a rotation of another string. He also asked how to check if a\
    \ substring is a rotation of another string. He also asked how to check if a substring\
    \ is a rotation of another string. He also asked how to check if a substring is\
    \ a rotation of another string. He also asked how to check if a substring is a\
    \ rotation of another string. He also asked how to check if a substring is a rotation\
    \ of another string. He also asked how to check if a substring is a rotation of\
    \ another string. He also asked how to check if a substring is a rotation of another\
    \ string. He also asked how to check if a substring is a rotation of another string.\
    \ He also asked how to check if a substring is a rotation of another string. He\
    \ also asked how to check if a substring is a rotation of another string. He also\
    \ asked how to check if a substring is a rotation of another string. He also asked\
    \ how to check if a substring is a rotation of another string. He also asked how\
    \ to check if a substring is a rotation of another string. He also asked how to\
    \ check if a substring is a rotation of another string. He also asked how to check\
    \ if a substring is a rotation of another string. He also asked how to check if\
    \ a substring is a rotation of another string. He also asked how to check if a\
    \ substring is a rotation of another string. He also ", "    if length(a) == 0\
    \ || length(b) == 0 \n        return true\n    else if length(a) == 1 \n     \
    \   return b == a\n    else if length(b) == 1 \n        return a == b\n    else\
    \ if length(a) == length(b) \n        return true\n    else \n        return false\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the second\
    \ word is a substring in the first word. Try `cycpattern_check(\"abcd\", \"abd\"\
    )`.\n<|/ c |>\n<| c |>\nI missed that case. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| c |>\nThanks for the answer. I've tried it and it\
    \ works perfectly fine. Thanks again\n<|/ c |>\n<| a tags=string,julia,pattern-matching\
    \ |>\nI believe that this is what you are looking for:\n<code>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n\
    \        return true\n    else \n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(a) == 0 || length(b) == 0 \n      \
    \  return false\n    else \n        if length(a) == 1 \n            return true\n\
    \        else \n            if length(b) == 1 \n                return true\n\
    \            else \n                if a[0..length(a-1)] == b[0..length(b-1)]\
    \ \n                    return true\n                else \n                 \
    \   if cycpattern_check(a[1:length(a)], b[1:length(b)]) \n                   \
    \     return true\n                    else \n                        if cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)]) \n                            return true\n                \
    \        else \n                            if cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)]) \n                                return true\n            \
    \                else \n                                if cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)]) \n                                    return true\n        \
    \                        else \n                                    return false\n\
    \    end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n<| c |>\n\
    Thanks for your answer. Could you please explain how this works?\n<|/ c |>\n<|\
    \ c |>\nI added some explanation\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    \n\
    \    \n    if length(a) == length(b) \n        \n        if a == b\n         \
    \   \n            return true\n            \n        else\n            \n    \
    \        return false\n            \n    else\n        \n        return false\n\
    \        \nend\n    \nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThanks\
    \ for your answer! I tried to run your code, but I got this error:", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        local i::Int = 0 \n        local j::Int = 0 \n        local\
    \ k::Int = 0 \n        local l::Int = 0 \n        local m::Int = 0 \n        local\
    \ n::Int = 0 \n        local o::Int = 0 \n        local p::Int = 0 \n        local\
    \ q::Int = 0 \n        local r::Int = 0 \n        local s::Int = 0 \n        local\
    \ t::Int = 0 \n        local u::Int = 0 \n        local v::Int = 0 \n        local\
    \ w::Int = 0 \n        local x::Int = 0 \n        local y::Int = 0 \n        local\
    \ z::Int = 0 \n        local a::Int = 0 \n        local b::Int = 0 \n        local\
    \ c::Int = 0 \n        local d::Int = 0 \n        local e::Int = 0 \n        local\
    \ f::Int = 0 \n        local g::Int = 0 \n        local h::Int = 0 \n        local\
    \ i::Int = 0 \n        local j::Int = 0 \n        local k::Int = 0 \n        local\
    \ l::Int = 0 \n        local m::Int = 0 \n        local n::Int = 0 \n        local\
    \ o::Int = 0 \n        local p::Int = 0 \n        local q::Int = 0 \n        local\
    \ r::Int = 0 \n        local s::Int = 0 \n        local t::Int = 0 \n        local\
    \ u::Int = 0 \n        local v::Int = 0 \n        local w::Int = 0 \n        local\
    \ x::Int = 0 \n        local y::Int = 0 \n        local z::Int = 0 \n        local\
    \ a::Int = 0 \n        local b::Int = 0 \n        local c::Int = 0 \n        local\
    \ d::Int = 0 \n        local e::Int = 0 \n        local f::Int = 0 \n        local\
    \ g::Int = 0 \n        local h::Int = 0 \n        local i::Int = 0 \n        local\
    \ j::Int = 0 \n        local k::Int = 0 \n        local l::Int = 0 \n        local\
    \ m::Int = 0 \n        local n::Int = 0 \n        local o::Int = 0 \n        local\
    \ p::Int = 0 \n        local q::Int = 0 \n        local r::Int = 0 \n        local\
    \ s::Int = 0 \n        local t::Int = 0 \n        local u::Int = 0 \n        local\
    \ v::Int = 0 \n        local w::Int = 0 \n        local x::Int = 0 \n        local\
    \ y::Int = 0 \n        local z::Int = 0 \n        local a::Int = 0 \n        local\
    \ b::", "    \n    \n    if length(a) == length(b) \n        \n        \n    \
    \    if a == b\n            true\n        else\n            false\n    \n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        cycpattern_check(a[1:length(a)], b[1:length(b)])\nend\n</code>\n<|/\
    \ a tags=recursion,julia,string |>\n<| c |>\nI believe this solution will fail\
    \ for `cycpattern_check(\"ab\", \"ab\")`\n<|/ c |>\n<| c |>\nYes, it will. Thanks\
    \ for pointing that out. I've edited my answer accordingly.\n<|/ c |>\n<| a tags=recursion,julia,string\
    \ |>\nA recursive solution:\n<code>", "    if length(a) == 0 || length(b) == 0\
    \ \n        return false \n    else \n        return (cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1])) \n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if length(a) == length(b) then\
    \ \n        true\n    else\n        false\n    end\nend", "    \n    \n    if\
    \ length(a) == length(b) \n        \n        if a == b\n            true\n   \
    \     else\n            false\n    \n    else\n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    whassup\", \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\"\
    , \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\"\
    , \"simen\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the string appears in the string. \n    \n \
    \   \n    >>> count_substr(\"hello\", \"hell\")\n    2\n    >>> count_substr(\"\
    hello\", \"he\")\n    1\n    >>> count_substr(\"hello\", \"hey\")\n    0\n   \
    \ >>> count_substr(\"hello\", \"hello\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello\", \"helllo\")\n    3\n   \
    \ >>> count_substr(\"hello\", \"helllo\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello\", \"helllo\")\n    3\n   \
    \ >>> count_substr(\"hello\", \"helllo\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello\", \"helllo\")\n    3\n   \
    \ >>> count_substr(\"hello\", \"helllo\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello\", \"helllo\")\n    3\n   \
    \ >>> count_substr(\"hello\", \"helllo\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello\", \"helllo\")\n    3\n   \
    \ >>> count_substr(\"hello\", \"helllo\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello\", \"helllo\")\n    3\n   \
    \ >>> count_substr(\"hello\", \"helllo\")\n    3\n    >>> count_substr(\"hello\"\
    , \"helllo\")\n    3\n    >>> count_substr(\"hello", "    \n    if length(a) ==\
    \ length(b) \n        then true\n        else false\n    else \n        cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)]) || cycpattern_check(a[1:length(a)], b[1:length(b)])\n    end\
    \ \nend \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\")\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string and\
    \ returns the number of characters in the first word of the string. \nWrite a\
    \ function that takes a string and returns the number of words in the first word\
    \ of the string. \nWrite a function that takes a string and returns the number\
    \ of sentences in the first word of the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the second word of the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ second word of the string. \nWrite a function that takes a string and returns\
    \ the number of sentences in the second word of the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the third word of\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ words in the third word of the string. \nWrite a function that takes a string\
    \ and returns the number of sentences in the third word of the string. \nWrite\
    \ a function that takes a string and returns the number of characters in the fourth\
    \ word of the string. \nWrite a function that takes a string and returns the number\
    \ of words in the fourth word of the string. \nWrite a function that takes a string\
    \ and returns the number of sentences in the fourth word of the string. \nWrite\
    \ a function that takes a string and returns the number of characters in the fifth\
    \ word of the string. \nWrite a function that takes a string and returns the number\
    \ of words in the fifth word of the string. \nWrite a function that takes a string\
    \ and returns the number of sentences in the fifth word of the string. \nWrite\
    \ a function that takes a string and returns the number of characters in the sixth\
    \ word of the string. \nWrite a function that takes a string and returns the number\
    \ of words in the sixth word of the ", "    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    else if length(a) == length(b) \n        return\
    \ true\n    else if length(a) > length(b) \n        return false\n    else if\
    \ length(a) < length(b) \n        return false\n    else if contains(b, a) \n\
    \        return true\n    else \n        return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    cycpattern_check(a::String, b::String)::Bool\n    \n    Check if a\
    \ is a substring of b or any of its rotations\n    \n    cycpattern_check(\"abcd\"\
    , \"abd\")\n    false\n    \n    cycpattern_check(\"hello\", \"ell\")\n    true\n\
    \    \n    cycpattern_check(\"whassup\", \"psus\")\n    false\n    \n    cycpattern_check(\"\
    abab\", \"baa\")\n    true\n    \n    cycpattern_check(\"efef\", \"eeff\")\n \
    \   false\n    \n    cycpattern_check(\"himenss\", \"simen\")\n    true\n    \n\
    \"\"\"", "    if length(a) == 0 || length(b) == 0 \n        then return false\n\
    \    else if length(a) == 1 \n        then return true\n    else if length(b)\
    \ == 1 \n        then return true\n    else if length(a) == length(b) \n     \
    \   then return true\n    else if length(a) > length(b) \n        then return\
    \ false\n    else if length(b) > length(a) \n        then return false\n    else\
    \ if length(a) == 1 \n        then return true\n    else if length(b) == 1 \n\
    \        then return true\n    else if length(a) == length(b) \n        then return\
    \ true\n    else if length(a) > length(b) \n        then return false\n    else\
    \ if length(b) > length(a) \n        then return false\n    else if length(a)\
    \ == 1 \n        then return true\n    else if length(b) == 1 \n        then return\
    \ true\n    else if length(a) == length(b) \n        then return true\n    else\
    \ if length(a) > length(b) \n        then return false\n    else if length(b)\
    \ > length(a) \n        then return false\n    else if length(a) == 1 \n     \
    \   then return true\n    else if length(b) == 1 \n        then return true\n\
    \    else if length(a) == length(b) \n        then return true\n    else if length(a)\
    \ > length(b) \n        then return false\n    else if length(b) > length(a) \n\
    \        then return false\n    else if length(a) == 1 \n        then return true\n\
    \    else if length(b) == 1 \n        then return true\n    else if length(a)\
    \ == length(b) \n        then return true\n    else if length(a) > length(b) \n\
    \        then return false\n    else if length(b) > length(a) \n        then return\
    \ false\n    else if length(a) == 1 \n        then return true\n    else if length(b)\
    \ == 1 \n        then return true\n    else if length(a) == length(b) \n     \
    \   then return true\n    else if length(a) > length(b) \n        then return\
    \ false\n    else if length(b) > length(a) \n        then return false\n    else\
    \ if length(a) == 1 \n        then return true\n    else if length(b) == 1 \n\
    \        then return true\n    else if length(a) == length(b) \n        then return\
    \ true\n    else if length(a) > length(b) \n        then return false\n    else\
    \ if length(b) > length(a) \n        then return false\n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        true \n    else \n        if length(a) == 1 \n\
    \            if contains(b, a) \n                true \n            else \n  \
    \              false \n        else \n            if contains(b, a[1:end-1]) \n\
    \                true \n            else \n                false \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend ", "    \n    \n    if length(a) == length(b)\
    \ \n        \n        if a == b \n            return true\n        \n        else\
    \ if length(a) > length(b) \n            return false\n        \n        else\
    \ if length(a) < length(b) \n            return false\n        \n        else\
    \ if length(a) == 0 \n            return true\n        \n        else if length(a)\
    \ == 1 \n            return true\n        \n        else if length(a) == 2 \n\
    \            if contains(a, b)\n                return true\n            else\
    \ \n                return false\n        \n        else \n            return\
    \ false\n    \n    else \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\
    cycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"\
    hello\", \"ell\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"whassup\"\
    , \"psus\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<code language=julia-1.3>", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > 1 \n        return false\n    \n    if length(b)\
    \ > 1 \n        return false\n    \n    if a[1] == b[1] \n        return true\n\
    \    \n    if a[1] == b[2] \n        return true\n    \n    if a[2] == b[1] \n\
    \        return true\n    \n    if a[2] == b[2] \n        return true\n    \n\
    \    if a[0] == b[0] \n        return true\n    \n    if a[0] == b[1] \n     \
    \   return true\n    \n    if a[0] == b[2] \n        return true\n    \n    if\
    \ a[1] == b[0] \n        return true\n    \n    if a[1] == b[1] \n        return\
    \ true\n    \n    if a[1] == b[2] \n        return true\n    \n    if a[2] ==\
    \ b[0] \n        return true\n    \n    if a[2] == b[1] \n        return true\n\
    \    \n    if a[2] == b[2] \n        return true\n    \n    if a[0] == b[0] \n\
    \        return true\n    \n    if a[0] == b[1] \n        return true\n    \n\
    \    if a[0] == b[2] \n        return true\n    \n    if a[1] == b[0] \n     \
    \   return true\n    \n    if a[1] == b[1] \n        return true\n    \n    if\
    \ a[1] == b[2] \n        return true\n    \n    if a[2] == b[0] \n        return\
    \ true\n    \n    if a[2] == b[1] \n        return true\n    \n    if a[2] ==\
    \ b[2] \n        return true\n    \n    if a[0] == b[0] \n        return true\n\
    \    \n    if a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n\
    \        return true\n    \n    if a[1] == b[0] \n        return true\n    \n\
    \    if a[1] == b[1] \n        return true\n    \n    if a[1] == b[2] \n     \
    \   return true\n    \n    if a[2] == b[0] \n        return true\n    \n    if\
    \ a[2] == b[1] \n        return true\n    \n    if a[2] == b[2] \n        return\
    \ true\n    \n    if a[0] == b[0] \n        return true\n    \n    if a[0] ==\
    \ b[1] \n        return true\n    \n    if a[0] == b[2] \n        return true\n\
    \    \n    if a[1] == b[0] \n        return true\n    \n    if a[1] == b[1] \n\
    \        return true\n    \n    if a[1] == b[2] \n        return true\n    \n\
    \    if a[2] == b[0] \n", "    if length(a) == 0 \n        then return true\n\
    \    else if length(b) == 0 \n        then return false\n    else if length(a)\
    \ == 1 \n        then return b == a || b == reverse(a)\n    else if length(b)\
    \ == 1 \n        then return a == b || a == reverse(b)\n    else if length(a)\
    \ == 2 \n        then return b == a || b == reverse(a) || a == reverse(b)\n  \
    \  else if length(b) == 2 \n        then return a == b || a == reverse(b) || b\
    \ == reverse(a)\n    else if length(a) == 3 \n        then return b == a || b\
    \ == reverse(a) || a == reverse(b) || b == reverse(a)\n    else if length(b) ==\
    \ 3 \n        then return a == b || a == reverse(b) || b == reverse(a) || a ==\
    \ reverse(b) || b == reverse(a)\n    else if length(a) == 4 \n        then return\
    \ b == a || b == reverse(a) || a == reverse(b) || b == reverse(a) || a == reverse(b)\
    \ || b == reverse(a)\n    else if length(b) == 4 \n        then return a == b\
    \ || a == reverse(b) || b == reverse(a) || a == reverse(b) || b == reverse(a)\
    \ || a == reverse(b) || b == reverse(a)\n    else if length(a) == 5 \n       \
    \ then return b == a || b == reverse(a) || a == reverse(b) || b == reverse(a)\
    \ || a == reverse(b) || b == reverse(a) || a == reverse(b) || b == reverse(a)\n\
    \    else if length(b) == 5 \n        then return a == b || a == reverse(b) ||\
    \ b == reverse(a) || a == reverse(b) || b == reverse(a) || a == reverse(b) ||\
    \ b == reverse(a) || a == reverse(b) || b == reverse(a)\n    else if length(a)\
    \ == 6 \n        then return b == a || b == reverse(a) || a == reverse(b) || b\
    \ == reverse(a) || a == reverse(b) || b == reverse(a) || a == reverse(b) || b\
    \ == reverse(a) || a == reverse(b) || b == reverse(a)\n    else if length(b) ==\
    \ 6 \n        then return a == b || a == reverse(b) || b == reverse(a) || a ==\
    \ reverse(b) || b == reverse(a) || a == reverse(b) || b == reverse(a) || a ==\
    \ reverse(b) || b == reverse(a) || a == reverse(b) || b == reverse(a)\n    else\
    \ if length(a) == 7 \n        then return b == a || b == reverse(a) || a == reverse(b)\
    \ || b == reverse(a) || a == reverse(b) || b == reverse(a) || a == reverse(b)\
    \ || b == reverse(a) || a == reverse(b) || ", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n      \
    \  return false \n    else \n        return (cycpattern_check_helper(a, b) ==\
    \ true) \nend ", "    if length(a) == 0 || length(b) == 0 \n        return true\n\
    \    else \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[2:])\n        else \n            return cycpattern_check(a[1:], b[1:])\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \n    if length(a)\
    \ == length(b) \n        \n        if a == b \n            return true\n     \
    \   \n        else \n            return false\n        \n    else \n        return\
    \ false\n    \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    cycpattern_check(a::String,\
    \ b::String)", "    if length(a) == length(b) \n        then true\n        else\
    \ false\n    else false\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if the first word is longer than the second word. For example, `cycpattern_check(\"\
    abcd\", \"abd\")` returns `true` when it should return `false`.\n<|/ c |>\n<|\
    \ c |>\nI see what you mean. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| a |>\n<code>", "    if length(a) == 0 || length(b) == 0 \n      \
    \  return false \n    else \n        if length(a) == 1 \n            return b\
    \ == a \n        else \n            if length(b) == 1 \n                return\
    \ b == a || a == b \n            else \n                let \n               \
    \     a1 = substring(a, 1, length(a) - 1) \n                    b1 = substring(b,\
    \ 1, length(b) - 1) \n                    a2 = substring(a, length(a) - 1, length(a))\
    \ \n                    b2 = substring(b, length(b) - 1, length(b)) \n       \
    \         in \n                    cycpattern_check(a1, b1) || cycpattern_check(a2,\
    \ b2) \n            end \n        end \n    end \nend \n</code>\n<|/ a tags=string,pattern-matching,haskell\
    \ |>\n<| a tags=string,pattern-matching,haskell |>\nI came up with this solution:\n\
    <code>\nimport Data.List", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    if length(a) == length(b) \n        \n        if a\
    \ == b \n            return true\n        \n        else \n            return\
    \ false\n        \n    else \n        return false\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(a) == 0 || length(b) == 0 \n        true\
    \ \n    else \n        if b == a \n            true \n        else \n        \
    \    if b[length(b)-1] == a[length(a)-1] \n                cycpattern_check(a[1:length(a)-1],\
    \ b) \n            else \n                false \n        end\n    end\nend\n\
    </code>\n<|/ a tags=string,julia,pattern-matching |>\n<| c |>\nThanks for your\
    \ answer. I am not able to understand your code. Can you please explain it a little\
    \ bit?\n<|/ c |>\n<| c |>\nI added some comments to explain what each line does.\
    \ I hope this helps.\n<|/ c |>\n<| c |>\nThanks for your explanation. I am not\
    \ able to understand your code. Can you please explain it a little bit?\n<|/ c\
    \ |>\n<| c |>\nI added some comments to explain what each line does. I hope this\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your explanation. I am not able to understand\
    \ your code. Can you please explain it a little bit?\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a package called Matching which does this kind of pattern matching.\
    \ \n<code>\njulia> using Matching", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        return (cycpattern_check(b[1:length(b)-1], a) || cycpattern_check(a[1:length(a)-1],\
    \ b)) \nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(a) == length(b) \n        return true\n    else\
    \ \n        return false\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't work if you have a string with repeated characters. For example,\
    \ `cycpattern_check(\"ab\", \"ab\")` returns `true` when it should be `false`\n\
    <|/ c |>\n<| a dscore=2 |>\nI wrote a package for this:\nhttps://github.com/jrfonseca/cycpattern\n\
    <code>\njulia> using CyCPatterns", "    if length(a) == 0 || length(b) == 0 \n\
    \        return false \n    else \n        if length(a) == 1 \n            return\
    \ b == a \n        else \n            if length(b) == 1 \n                return\
    \ b == a || a == b \n            else \n                if b == substring(a,1,length(b))\
    \ \n                    return cycpattern_check(substring(a,2,length(a)),substring(a,1,length(b)))\n\
    \                else \n                    return cycpattern_check(substring(a,1,length(a)),substring(a,2,length(b)))\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't work. Try it with\
    \ `cycpattern_check(\"abab\", \"baa\")`\n<|/ c |>\n<| c |>\nI fixed the code so\
    \ it works with cycpattern_check(\"abab\", \"baa\")\n<|/ c |>\n<| c |>\nI fixed\
    \ the code so it works with cycpattern_check(\"abab\", \"baa\")\n<|/ c |>\n<|\
    \ c |>\nI fixed the code so it works with cycpattern_check(\"abab\", \"baa\")\n\
    <|/ c |>\n<| c |>\nI fixed the code so it works with cycpattern_check(\"abab\"\
    , \"baa\")\n<|/ c |>\n<| a tags=string,julia,pattern-matching |>\nI wrote a package\
    \ for Julia called Match.jl that does exactly this.\n<code>\njulia> using Match",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ length(b) \n        then true\n        else false\n    else if length(a) > length(b)\
    \ \n        then false\n        else if length(a) == 0 \n            then true\n\
    \            else if length(b) == 0 \n                then true\n            \
    \    else if contains(a, b)\n                    then true\n                 \
    \   else false\n    end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching\
    \ |>\n<| c |>\nThis does not work for `cycpattern_check(\"ab\", \"ba\")` because\
    \ `contains` does not consider overlapping substrings.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. I've edited my answer to include a solution that does consider overlapping\
    \ substrings.\n<|/ c |>\n<| a tags=string,julia,pattern-matching |>\nThe answer\
    \ by is correct, but I wanted to point out that you can also use regular expressions\
    \ to solve this problem:\n<code>\njulia> \"hello\" =~ r\"h.*e\"\ntrue", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if a == b\n            true\n        else\n\
    \            false\n    \n    else\n        false\nend\n</cell>\n<code language=julia-1.4>",
  "    if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        cycpattern_check(a[1:length(a)], b[1:length(b)]) || cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)])\nend\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\n\
    I wrote a function that checks if a string is a substring of a longer string.\
    \ \n<code>", "    if length(a) == 0 || length(b) == 0 \n        return false \n\
    \    else \n        return b[1..length(b)-1] in a\nend\n</cell>\n<code language=julia-1.3>\n\
    cycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"\
    hello\", \"ell\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"whassup\"\
    , \"psus\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.3>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nExercise 2", "    \n    \n    if length(a) == length(b) \n\
    \        \n        if a == b \n            return true\n        \n        else\
    \ \n            return false\n        \n    else \n        \n        if length(a)\
    \ > length(b) \n            \n            if contains(b, a) \n               \
    \ return true\n            else \n                return false\n        \n   \
    \     else \n            \n            if contains(a, b) \n                return\
    \ true\n            else \n                return false\n    \nend\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"whassup\", \"psus\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\"\
    , \"simen\")\n</cell>\n<text>\nCyclic Patterns\nA cyclic pattern is a pattern\
    \ that repeats itself in its cycle.", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    if length(a) == length(b) \n    \
    \    \n        if a == b \n            return true\n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        ", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if length(a) == 0 \n            return true\n\
    \        \n        if length(b) == 0 \n            return true\n        \n   \
    \     if length(a) == 1 \n            return b == substring(a,1,1)\n        \n\
    \        if length(b) == 1 \n            return a == substring(b,1,1)\n      \
    \  \n        if length(a) == 2 \n            return b == substring(a,1,2) || b\
    \ == substring(a,2,1)\n        \n        if length(b) == 2 \n            return\
    \ a == substring(b,1,2) || a == substring(b,2,1)\n        \n        if length(a)\
    \ == 3 \n            return b == substring(a,1,3) || b == substring(a,2,3) ||\
    \ b == substring(a,3,1)\n        \n        if length(b) == 3 \n            return\
    \ a == substring(b,1,3) || a == substring(b,2,3) || a == substring(b,3,1)\n  \
    \      \n        if length(a) == 4 \n            return b == substring(a,1,4)\
    \ || b == substring(a,2,4) || b == substring(a,3,4) || b == substring(a,4,1)\n\
    \        \n        if length(b) == 4 \n            return a == substring(b,1,4)\
    \ || a == substring(b,2,4) || a == substring(b,3,4) || a == substring(b,4,1)\n\
    \        \n        if length(a) == 5 \n            return b == substring(a,1,5)\
    \ || b == substring(a,2,5) || b == substring(a,3,5) || b == substring(a,4,5) ||\
    \ b == substring(a,5,1)\n        \n        if length(b) == 5 \n            return\
    \ a == substring(b,1,5) || a == substring(b,2,5) || a == substring(b,3,5) || a\
    \ == substring(b,4,5) || a == substring(b,5,1)\n        \n        if length(a)\
    \ == 6 \n            return b == substring(a,1,6) || b == substring(a,2,6) ||\
    \ b == substring(a,3,6) || b == substring(a,4,6) || b == substring(a,5,6) || b\
    \ == substring(a,6,1)\n        \n        if length(b) == 6 \n            return\
    \ a == substring(b,1,6) || a == substring(b,2,6) || a == substring(b,3,6) || a\
    \ == substring(b,4,6) || a == substring(b,5,6) || a == substring(b,6,1)\n    \
    \    \n        if length(a) == 7 \n            return b == substring(a,1,7) ||\
    \ b == substring(a,2,7) || b == substring(a,3,7) || b == substring(a,4,7) || b\
    \ == substring(a,5,7) || b == substring(a,6,7) || b == substring(a,7,1)\n    \
    \    \n        if length(b) == 7 \n            return a == substring(b,1,7) ||\
    \ a == substring", "    if length(a) == 0 || length(b) == 0 \n        true \n\
    \    else \n        if issubstring(a,b) \n            true \n        else \n \
    \           if issubstring(b,a) \n                true \n            else \n \
    \               if issubstring(a,b[1:end-1]) \n                    true \n   \
    \             else \n                    if issubstring(b[1:end-1],a) \n     \
    \                   true \n                    else \n                       \
    \ false \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n", "   \
    \ if length(a) == length(b) \n        return true\n    else \n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if a == b\n            return true\n      \
    \  \n        else\n            return false\n    \n    else\n        return false\n\
    \    end\nend", "    \n    if length(a) == length(b) \n        then true\n   \
    \     else false\n    end \nend \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string. \nWrite\
    \ a function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of lines in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces. \nWrite a function that takes a string and\
    \ returns the number of words in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces that are not letters. \nWrite a function that\
    \ takes a string and returns the number of words in the string that are not spaces\
    \ that are not letters. \nWrite a function that takes a string and returns the\
    \ number of lines in the string that are not spaces that are not letters. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces that are not letters that are not digits. \nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ spaces that are not letters that are not digits. \nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces that\
    \ are not letters that are not digits. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces that\
    \ are not letters that are not digits that are not punctuation. \nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ spaces that are not letters that are not digits that are not punctuation. \n\
    Write a function that takes a string and returns the number of lines in the string\
    \ that are not spaces that are not letters that are not digits that are not punctuation.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces that are not letters that are not digits that\
    \ are not punctuation that are not in a word. \nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces that\
    \ are not letters that are not digits that are not punctuation that are not in\
    \ a word. \nWrite a function that takes a string and returns the number of lines\
    \ in the string that are not spaces that are not letters that are not digits that\
    \ are not punctuation that are not in a word. \nWrite a function that takes a\
    \ string and returns the number of characters in the string that are not spaces\
    \ that are not letters that are not digits that are not punctuation that are not\
    \ in a word that are not in a line. \nWrite a function that takes a string and\
    \ returns the number of words in the string that are not spaces that are not letters\
    \ that are not digits that are not punctuation that are not in a word that are\
    \ not in a line. \nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces that are not letters that are not\
    \ digits that are not punctuation that are not in a word that are not in a line.\
    \ \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        cycpattern_check(a[1:length(a)-1], b[1:length(b)-1]) || cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-2]) || cycpattern_check(a[1:length(a)-2], b[1:length(b)-1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    cycpattern_check(a::String,\
    \ b::String)::Bool", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false \n    else \n        if length(a)\
    \ == 1 \n            return b == a \n        else \n            if length(b) ==\
    \ 1 \n                return b == a || a == b \n            else \n          \
    \      if b == substring(a,0,length(b)) \n                    return cycpattern_check(substring(a,1,length(a)),substring(b,1,length(b)))\n\
    \                else \n                    return cycpattern_check(substring(a,1,length(a)),substring(b,1,length(b)))\
    \ || cycpattern_check(substring(a,length(a),length(a)),substring(b,1,length(b)))\n\
    \        end\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. I tried your code, but I got an error \"UndefVarError: substring not\
    \ defined\". Do you know why?\n<|/ c |>\n<| c |>\nI fixed the code. Sorry about\
    \ that. Now it should work.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried\
    \ your code, but I got an error \"UndefVarError: substring not defined\". Do you\
    \ know why?\n<|/ c |>\n<| c |>\nI fixed the code. Sorry about that. Now it should\
    \ work.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ an error \"UndefVarError: substring not defined\". Do you know why?\n<|/ c |>\n\
    <| a tags=string,julia,pattern-matching |>\n<code>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n    then true\n\
    \    else false\n    end\nend", "    \n    \n    \n    if length(a) == length(b)\
    \ \n        \n        if length(a) == 0 \n            return true\n        \n\
    \        if length(b) == 0 \n            return true\n        \n        if length(a)\
    \ == 1 \n            return b == substring(a,1,1)\n        \n        if length(b)\
    \ == 1 \n            return a == substring(b,1,1)\n        \n        if length(a)\
    \ == 2 \n            return b == substring(a,1,2) || a == substring(b,1,2)\n \
    \       \n        if length(b) == 2 \n            return a == substring(b,1,2)\
    \ || b == substring(a,1,2)\n        \n        if length(a) == 3 \n           \
    \ return b == substring(a,1,3) || a == substring(b,1,3) || b == substring(a,2,3)\n\
    \        \n        if length(b) == 3 \n            return a == substring(b,1,3)\
    \ || b == substring(a,1,3) || a == substring(b,2,3) || a == substring(b,3,3)\n\
    \        \n        if length(a) == 4 \n            return b == substring(a,1,4)\
    \ || a == substring(b,1,4) || b == substring(a,2,4) || b == substring(a,3,4) ||\
    \ b == substring(a,4,4)\n        \n        if length(b) == 4 \n            return\
    \ a == substring(b,1,4) || b == substring(a,1,4) || a == substring(b,2,4) || a\
    \ == substring(b,3,4) || a == substring(b,4,4)\n        \n        if length(a)\
    \ == 5 \n            return b == substring(a,1,5) || a == substring(b,1,5) ||\
    \ b == substring(a,2,5) || b == substring(a,3,5) || b == substring(a,4,5) || b\
    \ == substring(a,5,5)\n        \n        if length(b) == 5 \n            return\
    \ a == substring(b,1,5) || b == substring(a,1,5) || a == substring(b,2,5) || a\
    \ == substring(b,3,5) || a == substring(b,4,5) || a == substring(b,5,5)\n    \
    \    \n        if length(a) == 6 \n            return b == substring(a,1,6) ||\
    \ a == substring(b,1,6) || b == substring(a,2,6) || b == substring(a,3,6) || b\
    \ == substring(a,4,6) || b == substring(a,5,6) || b == substring(a,6,6)\n    \
    \    \n        if length(b) == 6 \n            return a == substring(b,1,6) ||\
    \ b == substring(a,1,6) || a == substring(b,2,6) || a == substring(b,3,6) || a\
    \ == substring(b,4,6) || a == substring(b,5,6) || a == substring(b,6,6)\n    \
    \    \n        if length(a) == 7 \n            return b == substring(a,1,7) ||\
    \ a == substring(b,1,7) || b == ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    if length(a) == length(b) \n        \n        if a == b \n   \
    \         return true\n        \n        else \n            return false\n   \
    \     \n    else \n        \n        if length(a) > length(b) \n            \n\
    \            if contains(b, a) \n                return true\n            else\
    \ \n                return false\n        \n        else \n            \n    \
    \        if contains(a, b) \n                return true\n            else \n\
    \                return false\n    \nend\n</cell>\n<code language=julia-1.3>",
  "    \n    if length(a) == length(b) \n        \n        for i in 0 .. length(a)\
    \ - 1 \n            \n            if b[i] in a[i..length(a)]\n               \
    \ \n                return true\n            \n            else \n           \
    \     \n                return false\n            \n    else \n        \n    \
    \    return false\n    \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    , \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\
    \ \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nCyclic Patterns", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    if length(a) == length(b) \n        \n      \
    \  for i in 0 .. length(a) - 1 \n            if a[i] != b[i] \n              \
    \  return false \n        \n        return true \n    \n    else \n        return\
    \ false \n    \nend \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    , \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\
    \ \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nFor example, \n    count_chars(\"\
    hello\") should return 5.", "    if length(a) == 0 || length(b) == 0 \n      \
    \  return false\n    else if length(a) == 1 \n        return true\n    else if\
    \ length(b) == 1 \n        return true\n    else if length(a) == length(b) \n\
    \        return true\n    else if length(a) > length(b) \n        return false\n\
    \    else if length(b) > length(a) \n        return false\n    else if length(a)\
    \ == 0 \n        return false\n    else if length(b) == 0 \n        return false\n\
    \    else if length(a) == 1 \n        return true\n    else if length(b) == 1\
    \ \n        return true\n    else if length(a) == length(b) \n        return true\n\
    \    else if length(a) > length(b) \n        return false\n    else if length(b)\
    \ > length(a) \n        return false\n    else if length(a) == 0 \n        return\
    \ false\n    else if length(b) == 0 \n        return false\n    else if length(a)\
    \ == 1 \n        return true\n    else if length(b) == 1 \n        return true\n\
    \    else if length(a) == length(b) \n        return true\n    else if length(a)\
    \ > length(b) \n        return false\n    else if length(b) > length(a) \n   \
    \     return false\n    else if length(a) == 0 \n        return false\n    else\
    \ if length(b) == 0 \n        return false\n    else if length(a) == 1 \n    \
    \    return true\n    else if length(b) == 1 \n        return true\n    else if\
    \ length(a) == length(b) \n        return true\n    else if length(a) > length(b)\
    \ \n        return false\n    else if length(b) > length(a) \n        return false\n\
    \    else if length(a) == 0 \n        return false\n    else if length(b) == 0\
    \ \n        return false\n    else if length(a) == 1 \n        return true\n \
    \   else if length(b) == 1 \n        return true\n    else if length(a) == length(b)\
    \ \n        return true\n    else if length(a) > length(b) \n        return false\n\
    \    else if length(b) > length(a) \n        return false\n    else if length(a)\
    \ == 0 \n        return false\n    else if length(b) == 0 \n        return false\n\
    \    else if length(a) == 1 \n        return true\n    else if length(b) == 1\
    \ \n        return true\n    else if length(a) == length(b) \n        return true\n\
    \    else if length(a) > length(b) \n        return false\n    else if length(b)\
    \ > length(a) \n        return false\n    else if length(a) == 0 \n        return\
    \ false\n    else if length(b) == 0 \n        return false\n    ", "    \n   \
    \ \n    if length(a) == length(b) \n        \n        if a == b\n            true\n\
    \        else\n            false\n            \n    else\n        false\n    \
    \    \n    end\nend", "    if length(a) == length(b) \n        then true\n   \
    \     else false\n    else if length(a) > length(b) \n        then false\n   \
    \     else if length(a) == 0 \n            then true\n            else if length(b)\
    \ == 0 \n                then true\n                else if contains(a, b)\n \
    \                   then true\n                    else false\n    end\nend\n\
    </code>\n<|/ a tags=string,julia,pattern-matching |>\n<| c |>\nThis does not work\
    \ when `a` is longer than `b`.\n<|/ c |>\n<| c |>\nIt does work. `a` is longer\
    \ than `b` because `a` contains `b`\n<|/ c |>\n<| c |>\nYes, but `a` contains\
    \ `b` because `b` contains `a`. Try `cycpattern_check(\"ab\", \"ba\")`.\n<|/ c\
    \ |>\n<| c |>\nAh, I see what you mean. Yes, you're right. I'll fix my answer.\n\
    <|/ c |>\n<| c |>\nI fixed my answer. Thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=string,julia,pattern-matching |>\nI wrote a package for this: JuliaStringMatching.jl\n\
    <code>\njulia> using JuliaStringMatching", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        then return true\n    else \n        if length(a) == length(b)\n\
    \            then return true\n        else if length(a) > length(b)\n       \
    \     then return false\n        else if length(a) < length(b)\n            then\
    \ return false\n        else if contains(b, a)\n            then return true\n\
    \        else if contains(b, substring(a, length(a)))\n            then return\
    \ true\n        else if contains(substring(a, length(a)), b)\n            then\
    \ return true\n        else if contains(substring(a, length(a)), substring(b,\
    \ length(b)))\n            then return true\n        else return false\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n\
    \        return b == a \n    else if length(b) == 1 \n        return a == b\n\
    \    else if length(a) == length(b) \n        return true\n    else \n       \
    \ return false\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/25839423)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He is asking how to\
    \ check if a word is a substring of a word or any of its rotations. He also has\
    \ provided a solution for his own problem. He has also provided a solution for\
    \ his own problem. He has also provided a solution for his own problem. He has\
    \ also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided a solution for his own problem. He\
    \ has also provided a solution for his own problem. He has also provided a solution\
    \ for his own problem. He has also provided ", "    \n    \n    if length(a) ==\
    \ length(b) \n        \n        if a == b \n            return true\n        \n\
    \        else \n            return false\n    \n    else \n        \n        if\
    \ length(a) > length(b) \n            \n            if contains(b, a) \n     \
    \           return true\n            else \n                return false\n   \
    \     \n        else \n            \n            if contains(a, b) \n        \
    \        return true\n            else \n                return false\n    \n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == 0 \n        return true\n    if length(b)\
    \ == 0 \n        return false\n    if length(a) == length(b) \n        return\
    \ true\n    if length(a) > length(b) \n        return false\n    if length(a)\
    \ < length(b) \n        return false\n    if length(a) == 1 \n        return true\n\
    \    if length(a) == 2 \n        return true\n    if length(a) == 3 \n       \
    \ return true\n    if length(a) == 4 \n        return true\n    if length(a) ==\
    \ 5 \n        return true\n    if length(a) == 6 \n        return true\n    if\
    \ length(a) == 7 \n        return true\n    if length(a) == 8 \n        return\
    \ true\n    if length(a) == 9 \n        return true\n    if length(a) == 10 \n\
    \        return true\n    if length(a) == 11 \n        return true\n    if length(a)\
    \ == 12 \n        return true\n    if length(a) == 13 \n        return true\n\
    \    if length(a) == 14 \n        return true\n    if length(a) == 15 \n     \
    \   return true\n    if length(a) == 16 \n        return true\n    if length(a)\
    \ == 17 \n        return true\n    if length(a) == 18 \n        return true\n\
    \    if length(a) == 19 \n        return true\n    if length(a) == 20 \n     \
    \   return true\n    if length(a) == 21 \n        return true\n    if length(a)\
    \ == 22 \n        return true\n    if length(a) == 23 \n        return true\n\
    \    if length(a) == 24 \n        return true\n    if length(a) == 25 \n     \
    \   return true\n    if length(a) == 26 \n        return true\n    if length(a)\
    \ == 27 \n        return true\n    if length(a) == 28 \n        return true\n\
    \    if length(a) == 29 \n        return true\n    if length(a) == 30 \n     \
    \   return true\n    if length(a) == 31 \n        return true\n    if length(a)\
    \ == 32 \n        return true\n    if length(a) == 33 \n        return true\n\
    \    if length(a) == 34 \n        return true\n    if length(a) == 35 \n     \
    \   return true\n    if length(a) == 36 \n        return true\n    if length(a)\
    \ == 37 \n        return true\n    if length(a) == 38 \n        return true\n\
    \    if length(a) == 39 \n        return true\n    if length(a) == 40 \n     \
    \   return true\n    if length(a) == 41 \n        return true\n    if length(a)\
    \ == 42 \n        return true\n    if length(a) == 43 \n        return true\n\
    \    if length(a) == 44 \n        return true\n    if length(a) == 45 \n     \
    \   return true\n    if length(a) == 46 \n        return true\n    if length(a)\
    \ == 47 \n        return true\n    if length(a) == 48 \n        return true\n\
    \    if length(a) == 49 \n        return true\n    if length(a) == 50 \n     \
    \   return true\n    if ", "    \n    if length(a) == 0 || length(b) == 0 \n \
    \       return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if a[0..(length(a)-1)] == b\n\
    \        return true\n    \n    if b[0..(length(b)-1)] == a\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b[0..(length(b)-1)]\n        return true\n\
    \    \n    if b[0..(length(b)-1)] == a[0..(length(a)-1)]\n        return true\n\
    \    \n    if a[0..(length(a)-1)] == b", "    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false \n    else \n        if length(a) == 1 \n         \
    \   return b == a \n        else \n            if length(b) == 1 \n          \
    \      return b == a || a == b \n            else \n                let c = b[1:length(b)]\n\
    \                let d = a[1:length(a)]\n                if c == d \n        \
    \            then cycpattern_check(a[1:length(a)], b) \n                    else\
    \ cycpattern_check(a, c) \n        end\nend\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ true\n    else \n        if length(a) == 1 \n            return b == substring(a,0,1)\n\
    \        else \n            if length(b) == 1 \n                return a == substring(b,0,1)\n\
    \            else \n                let x = substring(a,0,1)\n               \
    \ let y = substring(b,0,1)\n                let z = substring(a,1,length(a))\n\
    \                let w = substring(b,1,length(b))\n                let u = substring(a,length(a),length(a))\n\
    \                let v = substring(b,length(b),length(b))\n                let\
    \ t = substring(a,length(a),1)\n                let s = substring(b,length(b),1)\n\
    \                let r = substring(a,1,length(a))\n                let q = substring(b,1,length(b))\n\
    \                let p = substring(a,length(a),1)\n                let n = substring(b,length(b),1)\n\
    \                let m = substring(a,1,length(a))\n                let l = substring(b,1,length(b))\n\
    \                let k = substring(a,length(a),1)\n                let j = substring(b,length(b),1)\n\
    \                let h = substring(a,1,length(a))\n                let g = substring(b,1,length(b))\n\
    \                let f = substring(a,length(a),1)\n                let e = substring(b,length(b),1)\n\
    \                let d = substring(a,1,length(a))\n                let c = substring(b,1,length(b))\n\
    \                let b = substring(a,length(a),1)\n                let a = substring(b,length(b),1)\n\
    \                let x = substring(a,0,1)\n                let y = substring(b,0,1)\n\
    \                let z = substring(a,1,length(a))\n                let w = substring(b,1,length(b))\n\
    \                let u = substring(a,length(a),length(a))\n                let\
    \ v = substring(b,length(b),length(b))\n                let t = substring(a,length(a),1)\n\
    \                let s = substring(b,length(b),1)\n                let r = substring(a,1,length(a))\n\
    \                let q = substring(b,1,length(b))\n                let p = substring(a,length(a),1)\n\
    \                let n = substring(b,length(b),1)\n                let m = substring(a,1,length(a))\n\
    \                let l = substring(b,1,length(b))\n                let k = substring(a,length(a),1)\n\
    \                let j = substring(b,length(b),1)\n                let h = substring(a,1,length(a))\n\
    \                let g = substring(b,1,length(b))\n                let f = substring(a,length(a),1)\n\
    \                let e = substring(b,length(b),1)\n                let d = substring(a,1,length(a))\n\
    \                let c = ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return ", "    \n \
    \   if length(a) == length(b) \n    then \n        true\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if length(a) == length(b)\
    \ \n        then true\n        else false\n    else false\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a) ==\
    \ length(b) \n        \n        if a == b \n            \n            return true\n\
    \        \n        else \n            \n            return false\n    \n    else\
    \ \n        \n        return false\n    \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return true\n    else if length(a) == length(b)\
    \ \n        return true\n    else if length(a) > length(b) \n        return false\n\
    \    else \n        for i in 1:length(a)\n            if b[(i+1):length(b)] ==\
    \ a[i:(i+length(a))]\n                return true\n            else \n       \
    \         return false\n    end\nend\n</code>\n<|/ a tags=string,julia |>\n<|\
    \ c |>\nThis doesn't work for `cycpattern_check(\"abcd\", \"abd\")`\n<|/ c |>\n\
    <| c |>\nI fixed the bug, thanks for pointing it out\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thanks for pointing it out\n<|/ c |>\n<| a tags=string,julia |>\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false\n    else if length(a) == 1 \n  \
    \      return b == a\n    else if length(b) == 1 \n        return a == b\n   \
    \ else \n        return b[length(b) - length(a) + 1] in a\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if length(a) == length(b) \n  \
    \      then true\n        else false\n    else false\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,julia |>\n<code>", "    \n    if length(a) == length(b)\
    \ \n        then true\n        else false\n    else \n        cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)])\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\nHere is a solution that uses regular expressions:\n<code>\njulia> function\
    \ cycpattern_check(a::String, b::String)\n           return ismatch(r\"\\b$a\\\
    b\", r\"\\b$b\\b\") || cycpattern_check(a[1:length(a)], b[1:length(b)])\n    \
    \   end\ncycpattern_check (generic function with 1 method)", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n\
    \        return b == a \n    else if length(b) == 1 \n        return a == b\n\
    \    else \n        return issubstring(a,b)\n    end\nend", "    if length(a)\
    \ == 0 || length(b) == 0 \n        true \n    else \n        if b == a \n    \
    \        true \n        else \n            if b[length(b) - 1] == a[length(a)\
    \ - 1] \n                cycpattern_check(a[1:length(a)-1], b) \n            else\
    \ \n                false \n        end\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27826825)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question, since it provides the code for the function `cycpattern_check`.\
    \  It also provides the code for the function `cycpattern_check` itself, which\
    \ I believe is what the OP was looking for.  I believe this also answers the question\
    \ of how to implement the function `cycpattern_check` recursively.\n<|/ c |>\n\
    <| c |>\nI believe this does not answer the question, since it only provides the\
    \ code for the function `cycpattern_check`.  It does not provide the code for\
    \ the function `cycpattern_check` itself, which I believe is what the OP was looking\
    \ for.  I believe this also does not answer the question of how to implement the\
    \ function `cycpattern_check` recursively.\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question, since it provides the code for the function `cycpattern_check`.\
    \  It also provides the code for the function `cycpattern_check` itself, which\
    \ I believe is what the OP was looking for.  I believe this also answers the question\
    \ of how to implement the function `cycpattern_check` recursively.\n<|/ c |>\n\
    <| c |>\nI believe this does not answer the question, since it only provides the\
    \ code for the function `cycpattern_check`.  It does not provide the code for\
    \ the function `cycpattern_check` itself, which I believe is what the OP was looking\
    \ for.  I believe this also does not answer the question of how to implement the\
    \ function `cycpattern_check` recursively.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\nThis code will work for any string length and any number of rotations.\n\
    <code>", "    \n    \n    if length(a) == length(b) \n        \n        if a ==\
    \ b\n            \n            return true\n        \n        elseif length(a)\
    \ > length(b)\n            \n            return false\n        \n        elseif\
    \ length(a) < length(b)\n            \n            return false\n        \n  \
    \      elseif length(a) == length(b) && length(a) > 1\n            \n        \
    \    \n            for i in 1..length(a)\n                \n                if\
    \ substr(b, i, 1) == substr(a, i, 1)\n                    \n                 \
    \   return true\n                \n                elseif substr(b, i, 1) != substr(a,\
    \ i, 1)\n                    \n                    return false\n            \
    \    \n                else\n                    \n                    return\
    \ true\n                \n            end\n            \n        elseif length(a)\
    \ == length(b) && length(a) < 1\n            \n            for i in 1..length(b)\n\
    \                \n                if substr(b, i, 1) == substr(a, i, 1)\n   \
    \                 \n                    return true\n                \n      \
    \          elseif substr(b, i, 1) != substr(a, i, 1)\n                    \n \
    \                   return false\n                \n                else\n   \
    \                 \n                    return true\n                \n      \
    \      end\n            \n        elseif length(a) == length(b) && length(a) ==\
    \ 1\n            \n            for i in 1..length(a)\n                \n     \
    \           if substr(b, i, 1) == substr(a, i, 1)\n                    \n    \
    \                return true\n                \n                elseif substr(b,\
    \ i, 1) != substr(a, i, 1)\n                    \n                    return false\n\
    \                \n                else\n                    \n              \
    \      return true\n                \n            end\n            \n        elseif\
    \ length(a) == length(b) && length(a) == 0\n            \n            for i in\
    \ 1..length(b)\n                \n                if substr(b, i, 1) == substr(a,\
    \ i, 1)\n                    \n                    return true\n             \
    \   \n                elseif substr(b, i, 1) != substr(a, i, 1)\n            \
    \        \n                    return false\n                \n              \
    \  else\n                    \n                    return true\n             \
    \   \n            end\n            \n        elseif length(a) == length(b) &&\
    \ length(a) > 0 && length(a) < length(b)\n            \n            for i in 1..length(a)\n\
    \                \n                if substr(b, i, 1) != substr(a, i, 1)\n   \
    \                 \n                    return false\n                \n     \
    \           else\n                    \n                    return true\n    \
    \            \n            end\n            \n        elseif length(a) == length(b)\
    \ && length(a) > 0 && length(a) == length(b)\n            \n            for i\
    \ in 1..length(a)\n                \n                if substr(b, i, 1) != substr(a,\
    \ i, 1)\n                    \n                    return false\n            \
    \    \n                else\n                    \n                    return\
    \ true\n                \n            end\n            \n        elseif length(a)\
    \ == length(b) && length(a) < 0 && length(a) == length(b)\n            \n    \
    \        for i in 1..length(a)\n                \n                if substr(b,\
    \ i, 1) != substr(", "    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ true\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return false\n\
    \    \n    if a[0] == b[0] \n        return true\n    \n    if a[1] == b[1] \n\
    \        return true\n    \n    if a[2] == b[2] \n        return true\n    \n\
    \    if a[3] == b[3] \n        return true\n    \n    if a[4] == b[4] \n     \
    \   return true\n    \n    if a[5] == b[5] \n        return true\n    \n    if\
    \ a[6] == b[6] \n        return true\n    \n    if a[7] == b[7] \n        return\
    \ true\n    \n    if a[8] == b[8] \n        return true\n    \n    if a[9] ==\
    \ b[9] \n        return true\n    \n    if a[10] == b[10] \n        return true\n\
    \    \n    if a[11] == b[11] \n        return true\n    \n    if a[12] == b[12]\
    \ \n        return true\n    \n    if a[13] == b[13] \n        return true\n \
    \   \n    if a[14] == b[14] \n        return true\n    \n    if a[15] == b[15]\
    \ \n        return true\n    \n    if a[16] == b[16] \n        return true\n \
    \   \n    if a[17] == b[17] \n        return true\n    \n    if a[18] == b[18]\
    \ \n        return true\n    \n    if a[19] == b[19] \n        return true\n \
    \   \n    if a[20] == b[20] \n        return true\n    \n    if a[21] == b[21]\
    \ \n        return true\n    \n    if a[22] == b[22] \n        return true\n \
    \   \n    if a[23] == b[23] \n        return true\n    \n    if a[24] == b[24]\
    \ \n        return true\n    \n    if a[25] == b[25] \n        return true\n \
    \   \n    if a[26] == b[26] \n        return true\n    \n    if a[27] == b[27]\
    \ \n        return true\n    \n    if a[28] == b[28] \n        return true\n \
    \   \n    if a[29] == b[29] \n        return true\n    \n    if a[30] == b[30]\
    \ \n        return true\n    \n    if a[31] == b[31] \n        return ", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n   \
    \     return (b in a)\n    else \n        local i::Int = 0 \n        local j::Int\
    \ = 0 \n        local k::Int = 0 \n        local l::Int = 0 \n        local m::Int\
    \ = 0 \n        local n::Int = 0 \n        local o::Int = 0 \n        local p::Int\
    \ = 0 \n        local q::Int = 0 \n        local r::Int = 0 \n        local s::Int\
    \ = 0 \n        local t::Int = 0 \n        local u::Int = 0 \n        local v::Int\
    \ = 0 \n        local w::Int = 0 \n        local x::Int = 0 \n        local y::Int\
    \ = 0 \n        local z::Int = 0 \n        local a::Int = 0 \n        local b::Int\
    \ = 0 \n        local c::Int = 0 \n        local d::Int = 0 \n        local e::Int\
    \ = 0 \n        local f::Int = 0 \n        local g::Int = 0 \n        local h::Int\
    \ = 0 \n        local i::Int = 0 \n        local j::Int = 0 \n        local k::Int\
    \ = 0 \n        local l::Int = 0 \n        local m::Int = 0 \n        local n::Int\
    \ = 0 \n        local o::Int = 0 \n        local p::Int = 0 \n        local q::Int\
    \ = 0 \n        local r::Int = 0 \n        local s::Int = 0 \n        local t::Int\
    \ = 0 \n        local u::Int = 0 \n        local v::Int = 0 \n        local w::Int\
    \ = 0 \n        local x::Int = 0 \n        local y::Int = 0 \n        local z::Int\
    \ = 0 \n        local a::Int = 0 \n        local b::Int = 0 \n        local c::Int\
    \ = 0 \n        local d::Int = 0 \n        local e::Int = 0 \n        local f::Int\
    \ = 0 \n        local g::Int = 0 \n        local h::Int = 0 \n        local i::Int\
    \ = 0 \n        local j::Int = 0 \n        local k::Int = 0 \n        local l::Int\
    \ = 0 \n        local m::Int = 0 \n        local n::Int = 0 \n        local o::Int\
    \ = 0 \n        local p::Int = 0 \n        local q::Int = 0 \n        local r::Int\
    \ = 0 \n        local s::Int = 0 \n        local t::Int = 0 \n        local u::Int\
    \ = 0 \n        local v::Int = 0 \n        local w::Int = 0 \n        local x::Int\
    \ = 0 \n        local y::Int = 0 \n        local z::Int", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then true\n   \
    \     else false\n    end\nend", "    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(a) == 2 \n        if issubstring(a,\
    \ b) \n            return true\n        else \n            return false\n    \n\
    \    if length(a) == 3 \n        if issubstring(a, b) \n            return true\n\
    \        else \n            return false\n    \n    if length(a) == 4 \n     \
    \   if issubstring(a, b) \n            return true\n        else \n          \
    \  return false\n    \n    if length(a) == 5 \n        if issubstring(a, b) \n\
    \            return true\n        else \n            return false\n    \n    if\
    \ length(a) == 6 \n        if issubstring(a, b) \n            return true\n  \
    \      else \n            return false\n    \n    if length(a) == 7 \n       \
    \ if issubstring(a, b) \n            return true\n        else \n            return\
    \ false\n    \n    if length(a) == 8 \n        if issubstring(a, b) \n       \
    \     return true\n        else \n            return false\n    \n    if length(a)\
    \ == 9 \n        if issubstring(a, b) \n            return true\n        else\
    \ \n            return false\n    \n    if length(a) == 10 \n        if issubstring(a,\
    \ b) \n            return true\n        else \n            return false\n    \n\
    \    if length(a) == 11 \n        if issubstring(a, b) \n            return true\n\
    \        else \n            return false\n    \n    if length(a) == 12 \n    \
    \    if issubstring(a, b) \n            return true\n        else \n         \
    \   return false\n    \n    if length(a) == 13 \n        if issubstring(a, b)\
    \ \n            return true\n        else \n            return false\n    \n \
    \   if length(a) == 14 \n        if issubstring(a, b) \n            return true\n\
    \        else \n            return false\n    \n    if length(a) == 15 \n    \
    \    if issubstring(a, b) \n            return true\n        else \n         \
    \   return false\n    \n    if length(a) == 16 \n        if issubstring(a, b)\
    \ \n            return true\n        else \n            return false\n    \n \
    \   if length(a) == 17 \n        if issubstring(a, b) \n            return true\n\
    \        else \n            return false\n    \n    if length(a) == 18 \n    \
    \    if issubstring(a, b) \n            return true\n        else \n         \
    \   return false\n    \n    if length(a) == 19 \n        if issubstring(a, b)\
    \ \n            return true\n        else \n            return false\n    \n \
    \   if length(a) == 20 \n        if issubstring(a, b) \n            return true\n\
    \        else \n            return false\n    \n    if length(a) == 21 \n    \
    \    if issubstring(a, b) \n            return true\n        else \n         \
    \   return false\n    \n    if length(a) == 22 ", "    if length(a) == 0 || length(b)\
    \ == 0 \n        return true\n    else if length(a) == length(b) \n        return\
    \ true\n    else if length(a) > length(b) \n        return false\n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n\
    \        return false \n    else \n        return ( cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)]) \n                || cycpattern_check(a[length(a)-1:1], b[length(b)-1:1])\
    \ ) \nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n<| a dscore=2\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use regular\
    \ expressions to solve this problem:\n<code>\njulia> \"hello\" =~ r\"^h.*e$\"\n\
    true", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(a) == length(b) \n        then true\n        else false\n    else if\
    \ length(a) > length(b) \n        then false\n        else if length(a) == 0 \n\
    \            then true\n            else if length(b) == 0 \n                then\
    \ true\n                else if b[length(b)-1] == a[length(a)-1] \n          \
    \          then cycpattern_check(a[1:length(a)-1], b)\n                    else\
    \ false\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia,pattern-matching\
    \ |>\nThe answer by is correct but can be simplified a bit:\n<code>", "    if\
    \ length(a) == 0 || length(b) == 0 \n        return false \n    else \n      \
    \  return ( \n            ( \n                ( \n                    ( \n   \
    \                     ( \n                            ( \n                   \
    \             ( \n                                    ( \n                   \
    \                     ( \n                                            ( \n   \
    \                                             ( \n                           \
    \                         ( \n                                               \
    \         ( \n                                                            ( \n\
    \                                                                ( \n        \
    \                                                            ( \n            \
    \                                                            ( \n            \
    \                                                                ( \n        \
    \                                                                        ( \n\
    \                                                                            \
    \        ( \n                                                                \
    \                        ( \n                                                \
    \                                            ( \n                            \
    \                                                                    ( \n    \
    \                                                                            \
    \                    ( \n                                                    \
    \                                                    ( \n                    \
    \                                                                            \
    \            ( \n                                                            \
    \                                                    ( \n                    \
    \                                                                            \
    \                    ( \n                                                    \
    \                                                                    ( \n    \
    \                                                                            \
    \                                            ( \n                            \
    \                                                                            \
    \                        ( \n                                                \
    \                                                                            \
    \        ( \n                                                                \
    \                                                                        ( \n\
    \                                                                            \
    \                                                                ( \n        \
    \                                                                            \
    \                                                            ( \n            \
    \                                                                            \
    \                                                            ( \n            \
    \                                                                            \
    \                                                                ( \n        \
    \                                                                            \
    \                                                                        ( \n\
    \                                                                            \
    \                                                                            \
    \        ( \n                                                                \
    \                                                                            \
    \                        ( \n                                                \
    \                                                                            \
    \                                            ( \n                            \
    \                                                                            \
    \                                                                    ( \n    \
    \                                                                            \
    \                                                                            \
    \                    ( \n                                                    \
    \                                                                            \
    \                                                    ( \n                    \
    \                                                                            \
    \                                                                            \
    \            ( \n                                                            \
    \                                                                            \
    \                                                    ( \n                    \
    \                                                                            \
    \                                                                            \
    \                    ( \n                                                    \
    \                                                                            \
    \                                                                    ( \n    \
    \                                                                            \
    \                                                                            \
    \                                            ( \n                            \
    \                                                                            \
    \                                                                            \
    \                        ( \n                                                \
    \                                                                            \
    \                                                                            \
    \    ( \n                                                                    \
    \                                                                            \
    \                                                            ( \n            \
    \                                                                            \
    \                                                                            \
    \                                        ( \n                                \
    \                                                                            \
    \                                                                            \
    \                    ( \n                                                    \
    \                                                                            \
    \                                                                            (\
    \ \n                                                                         \
    \                                                                            \
    \                                                       ( \n                 \
    \                                                                            \
    \                                                                            \
    \                                   ( \n                                     \
    \                                                                            \
    \                                                                            \
    \               ( \n                                                         \
    \                                                                            \
    \                                                                       ( \n \
    \                                                                            \
    \                                                                            \
    \                                                   ( \n                     \
    \                                                                            \
    \                                                                            \
    \                               ( \n                                         \
    \                                                                            \
    \                                                                            \
    \           ( \n                                                             \
    \                                                                            \
    \                                                                   ( \n     \
    \                                                                            \
    \                                                                            \
    \                                               ( \n                         \
    \                                                                            \
    \                                                                            \
    \                           ( \n                                             \
    \                                                                            \
    \                                                                            \
    \       ( \n                                                                 \
    \                                                                            \
    \                                                               ( \n         \
    \                                                                            \
    \                                                                            \
    \                                           ( \n                             \
    \                                                                            \
    \                                                                            \
    \                       ( \n                                                 \
    \                                                                            \
    \                                                                            \
    \   ( \n                                                                     \
    \                                                                            \
    \                                                           ( \n             \
    \                                                                            \
    \                                                                            \
    \                                       ( \n                                 \
    \                                                                            \
    \                                                                            \
    \                   ( \n                                                     \
    \                                                                            \
    \                                                                           (\
    \ \n                                                                         \
    \                                                                            \
    \                                                       ( \n                 \
    \                                                                            \
    \                                                                            \
    \                                   ( \n                                     \
    \                                                                            \
    \                                                                            \
    \               ( \n                                                         \
    \                                                                            \
    \                                                                       ( \n \
    \                                                                            \
    \                                                                            \
    \                                                   ( \n                     \
    \                                                                            \
    \                                                                            \
    \                               ( \n                                         \
    \                                                                            \
    \                                                                            \
    \           ( \n                                                             \
    \                                                                            \
    \                                                                   ( \n     \
    \                                                                            \
    \                                                                            \
    \                                               ( \n                         \
    \                                                                            \
    \                                                                            \
    \                           ( \n                                             \
    \                                                                            \
    \                                                                            \
    \       ( \n                                                                 \
    \                                                                            \
    \                                                               ( \n         \
    \                                                                            \
    \                                                                            \
    \                                           ( \n                             \
    \                                                                            \
    \                                                                            \
    \                       ( \n                                                 \
    \                                                                            \
    \                                                                            \
    \   ( \n                                                                     \
    \                                                                            \
    \                                                           ( \n             \
    \                                                                            \
    \                                                                            \
    \                                       ( \n                                 \
    \                                                                            \
    \                                                                            \
    \                   ( \n                                                     \
    \                                                                            \
    \                                                                           (\
    \ \n                                                                         \
    \                                                                            \
    \                                                       ( \n                 \
    \                                                                            \
    \                                                                            \
    \                                   ( \n                                     \
    \                                                                            \
    \                                                                            \
    \               ( \n                                                         \
    \                                                                            \
    \                                                                       ( \n \
    \                                                                            \
    \                                                                            \
    \                                                   ( \n                     \
    \                                           ", "    if length(a) == length(b)\
    \ \n        then true\n        else false\n    else \n        cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end])\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false \n    else if length(a) == 1 \n        return b == a \n    else \n   \
    \     return b == substring(a, 2, length(a)) || substring(a, 2, length(a)) in\
    \ b \nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(a) == 0 || length(b) == 0 \n        return true\n    else if length(a)\
    \ == 1 \n        return b == a \n    else \n        return b == a || cycpattern_check(substring(a,1,length(a)),substring(b,1,length(b)))\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    \n    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false\n    \n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    \n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    \n    if length(a) == length(b) \n      \
    \  return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) < length(b) ", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(a) == 0 || length(b) == 0 \n        return false\n  \
    \  else \n        return (cycpattern_check(b[1:], a) || cycpattern_check(a[1:],\
    \ b)) \nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false\n    else if length(a) == 1 \n  \
    \      return true\n    else if length(b) == 1 \n        return true\n    else\
    \ if b == substring(a, 1, length(b)) \n        return true\n    else if substring(a,\
    \ length(a), length(a)) in b \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, 1, length(b)) \n        return true\n    else if\
    \ substring(a, length(a), length(a)) in substring(b, length(b), length(b)) \n\
    \        return true\n    else if substring(a, length(a), length(a)) in substring(b,\
    \ length(b), length(b)) \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, length(b), length(b)) \n        return true\n   \
    \ else if substring(a, length(a), length(a)) in substring(b, length(b), length(b))\
    \ \n        return true\n    else if substring(a, length(a), length(a)) in substring(b,\
    \ length(b), length(b)) \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, length(b), length(b)) \n        return true\n   \
    \ else if substring(a, length(a), length(a)) in substring(b, length(b), length(b))\
    \ \n        return true\n    else if substring(a, length(a), length(a)) in substring(b,\
    \ length(b), length(b)) \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, length(b), length(b)) \n        return true\n   \
    \ else if substring(a, length(a), length(a)) in substring(b, length(b), length(b))\
    \ \n        return true\n    else if substring(a, length(a), length(a)) in substring(b,\
    \ length(b), length(b)) \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, length(b), length(b)) \n        return true\n   \
    \ else if substring(a, length(a), length(a)) in substring(b, length(b), length(b))\
    \ \n        return true\n    else if substring(a, length(a), length(a)) in substring(b,\
    \ length(b), length(b)) \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, length(b), length(b)) \n        return true\n   \
    \ else if substring(a, length(a), length(a)) in substring(b, length(b), length(b))\
    \ \n        return true\n    else if substring(a, length(a), length(a)) in substring(b,\
    \ length(b), length(b)) \n        return true\n    else if substring(a, length(a),\
    \ length(a)) in substring(b, length", "    \n    if length(a) == length(b) \n\
    \    then return true\n    else return false\n    end \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(a) == 0 \n  \
    \      then return true\n    else if length(b) == 0 \n        then return false\n\
    \    else if length(a) == length(b) \n        then return true\n    else if length(a)\
    \ > length(b) \n        then return false\n    else if length(a) < length(b) \n\
    \        then return false\n    else if b == \"\"\n        then return true\n\
    \    else if b == \"*\"\n        then return true\n    else if b == \"?\"\n  \
    \      then return true\n    else if b == \"!\"\n        then return true\n  \
    \  else if b == \"^\"\n        then return true\n    else if b == \"$\"\n    \
    \    then return true\n    else if b == \"&\"\n        then return true\n    else\
    \ if b == \"|\"\n        then return true\n    else if b == \"#\"\n        then\
    \ return true\n    else if b == \"$\"\n        then return true\n    else if b\
    \ == \"%\"\n        then return true\n    else if b == \"&\"\n        then return\
    \ true\n    else if b == \"*\"\n        then return true\n    else if b == \"\
    ?\"\n        then return true\n    else if b == \"!\"\n        then return true\n\
    \    else if b == \"^\"\n        then return true\n    else if b == \"$\"\n  \
    \      then return true\n    else if b == \"&\"\n        then return true\n  \
    \  else if b == \"|\"\n        then return true\n    else if b == \"#\"\n    \
    \    then return true\n    else if b == \"$\"\n        then return true\n    else\
    \ if b == \"%\"\n        then return true\n    else if b == \"&\"\n        then\
    \ return true\n    else if b == \"*\"\n        then return true\n    else if b\
    \ == \"?\"\n        then return true\n    else if b == \"!\"\n        then return\
    \ true\n    else if b == \"^\"\n        then return true\n    else if b == \"\
    $\"\n        then return true\n    else if b == \"&\"\n        then return true\n\
    \    else if b == \"|\"\n        then return true\n    else if b == \"#\"\n  \
    \      then return true\n    else if b == \"$\"\n        then return true\n  \
    \  else if b == \"%\"\n        then return true\n    else if b == \"&\"\n    \
    \    then return true\n    else if b == \"*\"\n        then return true\n    else\
    \ if b == \"?\"\n        ", "    if length(a) == length(b) \n        then true\n\
    \        else false\n    end\nend", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    if length(a) == length(b) \n        \n\
    \        if length(a) == 0 \n            return true\n        \n        if length(b)\
    \ == 0 \n            return false\n        \n        if length(a) == 1 \n    \
    \        return true\n        \n        if length(b) == 1 \n            return\
    \ false\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[2:])\n        \n        if a[1] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[:2])\n        \n        if a[2] == b[1] \n            return cycpattern_check(a[:2],\
    \ b[2:])\n        \n        if a[2] == b[2] \n            return cycpattern_check(a[:2],\
    \ b[:2])\n        \n        if a[0] == b[0] \n            return cycpattern_check(a[1:],\
    \ b[1:])\n        \n        if a[0] == b[1] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[2] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[1] == b[0] \n            return cycpattern_check(a[2:],\
    \ b[1:])\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[:1])\n        \n        if a[1] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[:1])\n        \n        if a[2] == b[0] \n            return cycpattern_check(a[:2],\
    \ b[2:])\n        \n        if a[2] == b[1] \n            return cycpattern_check(a[:2],\
    \ b[:1])\n        \n        if a[2] == b[2] \n            return cycpattern_check(a[:2],\
    \ b[:1])\n        \n        if a[0] == b[0] \n            return cycpattern_check(a[1:],\
    \ b[1:])\n        \n        if a[0] == b[1] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[2] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[1] == b[0] \n            return cycpattern_check(a[2:],\
    \ b[1:])\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[:1])\n        \n        if a[1] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[:1])\n        \n        if a[2] == b[0] \n            return cycpattern_check(a[:2],\
    \ b[2:])\n        \n        if a[2] == b[1] \n            return cycpattern_check(a[:2],\
    \ b[:1])\n        \n        if a[2] == b[2] \n            return cycpattern_check(a[:2],\
    \ b[:1])\n        \n        if a[0] == b[0] \n            return cy", "    \n\
    \    if length(a) == length(b) \n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
