name: HumanEval_145_order_by_points
language: jl
prompt: "\"\"\"\n    Write a function which sorts the given vector of integers\n \
  \   in ascending order according to the sum of their digits.\n    Note: if there\
  \ are several items with similar sum of their digits,\n    order them based on their\
  \ index in original vector.\n\n    For example:\n    >>> order_by_points([1, 11,\
  \ -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n\
  \    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    if nums == []\n        return nums\n    \n    digits = nums.map(x\
    \ -> digits(x))\n    \n    sum_digits = digits.reduce(x -> x + x)\n    \n    sorted_nums\
    \ = nums.sort((x, y) -> sum_digits - digits(y) - digits(x))\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <code language=julia-1.5>", "    if length(nums) == 0 \n        return nums \n\
    \    \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort\n    \n    sorted_nums = if sum_digits == 0\
    \ \n                    sorted_nums \n                else\n                 \
    \   nums.map(x -> digit(x) - sum_digits)\n                end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted, nums[sums.index(i)])\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which sorts the given vector of\
    \ integers\nin descending order according to the sum of their digits.\nNote: if\
    \ there are several items with similar sum of their digits,\norder them based\
    \ on their index in original vector.", "    \n    local sum = 0\n    local index\
    \ = 0\n    local result = []\n    for n in nums\n        sum = sum + n\n     \
    \   if sum > 0\n            index = index + 1\n        end\n    end\n    for n\
    \ in nums\n        if sum == n\n            result[index] = n\n            index\
    \ = index + 1\n        end\n        sum = sum - n\n    end\n    return result\n\
    end\n</cell>\n<text>\nQuestion 3\nWrite a function which returns the number of\
    \ elements in the given vector that are less than the given value.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\n    \n   \
    \ sorted_nums = nums[:]\n    \n    i = 0\n    while i < length(sorted_nums) do\
    \ \n        j = i\n        while j < length(sorted_nums) do \n            if sum_of_digits\
    \ > sorted_nums[j] + sorted_nums[j+1] \n                sum_of_digits -= sorted_nums[j]\
    \ + sorted_nums[j+1] \n                sorted_nums[j], sorted_nums[j+1] = sorted_nums[j+1],\
    \ sorted_nums[j] \n            end \n            j += 1\n        end \n      \
    \  i += 1\n    end \n    \n    return sorted_nums \nend ", "    if nums == []\n\
    \        return nums\n    \n    digits = nums.map(x -> digit(x))\n    \n    sums\
    \ = digits.map(x -> sum(x))\n    \n    sorted_sums = sums.sorted()\n    \n   \
    \ sorted_nums = nums.filter(x -> x == sorted_sums[1])\n    \n    sorted_nums =\
    \ sorted_nums.sorted()\n    \n    sorted_nums = sorted_nums.reverse()\n    \n\
    \    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7: Write a function that returns the number of times\
    \ each digit appears in the given vector of integers.", "    if length(nums) ==\
    \ 0 \n        return nums \n    \n    sums = Vector{Int64}()\n    for i in nums\
    \ \n        sums[i] = sum(digits(i)) \n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in nums \n        if sums[i] == 0 \n            sorted_nums.push(i)\
    \ \n        else \n            idx = findfirst(i => sums[i] == sums[idx], sums)\n\
    \            sorted_nums.push(nums[idx])\n        end\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ number appears in a given vector.", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for j in 1:length(sums)\n        push!(sorted_nums, nums[findall(sums\
    \ == sums[j])[1]])\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which sorts the given vector of integers\nin descending order according\
    \ to the sum of their digits.\nNote: if there are several items with similar sum\
    \ of their digits,\norder them based on their index in original vector.", "  \
    \  if length(nums) == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\n\
    \    \n    sorted_nums = nums[:]\n    \n    index_of_first_occurence = findfirst(x\
    \ -> x == sum_of_digits, nums)\n    \n    if index_of_first_occurence == -1 \n\
    \        return nums \n    \n    index_of_last_occurence = findlast(x -> x ==\
    \ sum_of_digits, nums)\n    \n    if index_of_last_occurence == length(nums) \n\
    \        return nums \n    \n    index_of_first_occurence_of_last_occurence =\
    \ findfirst(x -> x == sum_of_digits && x == nums[index_of_last_occurence], nums)\n\
    \    \n    if index_of_first_occurence_of_last_occurence == -1 \n        return\
    \ nums \n    \n    index_of_last_occurence_of_first_occurence = findlast(x ->\
    \ x == sum_of_digits && x == nums[index_of_first_occurence], nums)\n    \n   \
    \ if index_of_last_occurence_of_first_occurence == length(nums) \n        return\
    \ nums \n    \n    index_of_first_occurence_of_last_occurence_of_first_occurence\
    \ = findfirst(x -> x == sum_of_digits && x == nums[index_of_first_occurence] &&\
    \ x == nums[index_of_last_occurence], nums)\n    \n    if index_of_first_occurence_of_last_occurence_of_first_occurence\
    \ == -1 \n        return nums \n    \n    index_of_last_occurence_of_first_occurence_of_last_occurence\
    \ = findlast(x -> x == sum_of_digits && x == nums[index_of_first_occurence] &&\
    \ x == nums[index_of_last_occurence], nums)\n    \n    if index_of_last_occurence_of_first_occurence_of_last_occurence\
    \ == length(nums) \n        return nums \n    \n    index_of_first_occurence_of_last_occurence_of_first_occurence_of_last_occurence\
    \ = findfirst(x -> x == sum_of_digits && x == nums[index_of_first_occurence] &&\
    \ x == nums[index_of_last_occurence] && x == nums[index_of_first_occurence_of_last_occurence],\
    \ nums)\n    \n    if index_of_first_occurence_of_last_occurence_of_first_occurence_of_last_occu",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums.sort!()\n    \n    ans = Vector{Int64}()\n    for i in\
    \ nums\n        push!(ans, i)\n    end\n    \n    for i in sums\n        push!(ans,\
    \ i)\n    end\n    \n    return ans\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> digit(x) - digit(y))\n    \n    sorted_nums\
    \ = if sum_digits == 0 \n                    sorted_nums \n                else\n\
    \                    sorted_nums[digits.index(sum_digits)]\n                end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which sorts the given vector of\
    \ integers\nin descending order according to the sum of their digits.\nNote: if\
    \ there are several items with similar sum of their digits,\norder them based\
    \ on their index in original vector.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort\n    \n    sorted_nums = if sum_digits == 0\
    \ \n                    sorted_nums \n                else \n                \
    \    sorted_nums.map(x -> if x == sum_digits \n                              \
    \          x \n                                    else \n                   \
    \                     digit(x) - digit(sum_digits))\n                end\n   \
    \ \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of integers\
    \ in a vector that have exactly two digits.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n\
    \    \n    order_by_points = []\n    for i in nums\n        push!(order_by_points,\
    \ sums[i])\n    end\n    \n    return order_by_points\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the number of elements\
    \ in the given vector which have value greater than a given value.", "    \n \
    \   sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n\
    \    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the given vector that have the given digit.", "    \n    local sum::Int64\
    \ = 0\n    local index::Int64 = 0\n    local result::Vector{Int64} = Vector{Int64}()\n\
    \    \n    for num in nums do\n        sum = sum + num\n        index = index\
    \ + 1\n        if sum > 0 then\n            result[index] = num\n        end\n\
    \    end\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that have the given digit.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        push!(sorted_nums,\
    \ nums[findfirst(i->sums[i]>sums[end], enumerate(sums))[1]])\n    end\n    \n\
    \    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 9\nWrite a function that returns the number of digits\
    \ in an integer.", "    if length(nums) == 0 \n        return nums \n    \n  \
    \  digits = nums.map(x -> digit(x))\n    \n    sums = digits.reduce(vcat, [])\n\
    \    \n    sums.sort! \n    \n    return sums.map(x -> nums[x])\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of elements in the given vector that are\
    \ less than the given value.", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums = nums \n    \n\
    \    for i = 1:length(nums) \n        digit = nums[i] \n        \n        if sum_of_digits\
    \ == digit \n            sorted_nums[i] = i \n        else \n            sum_of_digits\
    \ > digit \n            \n            digit = sum_of_digits - digit \n       \
    \     \n            sorted_nums[i] = digit \n            sum_of_digits += digit\
    \ \n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n numbers\
    \ of a given vector in ascending order.", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = nums[:]\n\
    \    \n    for idx in 1:length(nums)\n        if sum_of_digits == sum(nums[idx:idx+length(nums)-1])\
    \ \n            sorted_nums[idx] = nums[idx]\n        end\n    end\n    \n   \
    \ return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of items\
    \ in the given vector that have same sum as given number.", "    if nums == []\n\
    \        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of integers in a given vector\nthat have the given digit.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   digits_sum = digits.reduce(+) \n    \n    sorted_nums = nums \n    \n    for\
    \ index in 1:length(nums) \n        digit = digits[index] \n        digit_sum\
    \ = digits_sum - digit \n        if digit_sum < 0 \n            digit_sum = 0\
    \ \n        \n        if digit_sum == 0 \n            sorted_nums[index] = index\
    \ \n        else \n            digit_index = findfirst(x -> x == digit_sum, digits)\
    \ \n            sorted_nums[index] = digits[digit_index] \n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.0>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.0>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which returns the number of integers\
    \ whose digits sum to $n$. \nFor example, given $n = 12$, there are $3$ integers\
    \ whose digits sum to $12$:", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        push!(sums, sum(digits(i)))\n    end\n    \n    idx = Vector{Int64}()\n\
    \    for i in 1:length(sums)\n        if sums[i] == sums[i - 1]\n            push!(idx,\
    \ i)\n        end\n    end\n    \n    idx\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ less than or equal to n that are divisible by k.", "    if length(nums) == 0\
    \ \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n    digits_sum\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.sort((x, y) -> digits_sum\
    \ - digits(x) - digits(y)) \n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which returns the number of digits in an integer. \nFor example,\
    \ given 123, it should return 3.", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n \
    \   \n    for i in nums\n        if sums.==i\n            sums = sums - i\n  \
    \      else\n            sums = sums - i\n            sums = sums + i\n      \
    \  end\n    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the number of integers in the vector that are divisible by 3.",
  "    \n    local sums = Vector{Int64}()\n    for n in nums do \n        push!(sums,\
    \ sum(n))\n    end\n    \n    local sorted_nums = Vector{Int64}()\n    local index\
    \ = 0\n    for n in nums do\n        if sums[n] == 0 then \n            push!(sorted_nums,\
    \ n)\n        elseif sums[n] > 0 then\n            push!(sorted_nums, n)\n   \
    \         push!(sorted_nums, index) \n        end\n        index = index + 1\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function which takes a vector of integers and returns the sum of the squares\
    \ of the integers. \nFor example, order_by_points([1, 11, -1, -11, -12]) should\
    \ return [4, 9, 16, 25, 36].", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = []\n    \n  \
    \  for i in 1:length(sums)\n        push!(sorted, nums[sums.[i]])\n    end\n \
    \   \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector that satisfy a given condition. For example, a vector with elements\
    \ $1, 2, 3$ satisfies the condition $x > 1$. Write a function that returns the\
    \ number of elements in a vector that satisfy a given condition. For example,\
    \ a vector with elements $1, 2, 3$ satisfies the condition $x > 1$. Write a function\
    \ that returns the number of elements in a vector that satisfy a given condition.\
    \ For example, a vector with elements $1, 2, 3$ satisfies the condition $x > 1$.\
    \ Write a function that returns the number of elements in a vector that satisfy\
    \ a given condition. For example, a vector with elements $1, 2, 3$ satisfies the\
    \ condition $x > 1$. Write a function that returns the number of elements in a\
    \ vector that satisfy a given condition. For example, a vector with elements $1,\
    \ 2, 3$ satisfies the condition $x > 1$. Write a function that returns the number\
    \ of elements in a vector that satisfy a given condition. For example, a vector\
    \ with elements $1, 2, 3$ satisfies the condition $x > 1$. Write a function that\
    \ returns the number of elements in a vector that satisfy a given condition. For\
    \ example, a vector with elements $1, 2, 3$ satisfies the condition $x > 1$. Write\
    \ a function that returns the number of elements in a vector that satisfy a given\
    \ condition. For example, a vector with elements $1, 2, 3$ satisfies the condition\
    \ $x > 1$. Write a function that returns the number of elements in a vector that\
    \ satisfy a given condition. For example, a vector with elements $1, 2, 3$ satisfies\
    \ the condition $x > 1$. Write a function that returns the number of elements\
    \ in a vector that satisfy a given condition. For example, a vector with elements\
    \ $1, 2, 3$ satisfies the condition $x > 1$. Write a function that returns the\
    \ number of elements in a vector that satisfy a given condition. For example,\
    \ a vector with elements $1, 2, 3$ satisfies the condition $x > 1$. Write a function\
    \ that returns the number of elements in a vector that satisfy a given condition.\
    \ For example, a vector with elements $1, 2, 3$ satisfies the condition $x > 1$.\
    \ Write a function that returns the number of elements in a vector that satisfy\
    \ a given condition. For example, a vector with ", "    if length(nums) == 0 \n\
    \        return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n\
    \        push!(sums, sum(i)) \n    end\n    \n    sorted_sums = sort(sums)\n \
    \   \n    sorted_nums = Vector{Int64}()\n    for i in nums \n        push!(sorted_nums,\
    \ i) \n    end\n    \n    for i in 1:length(sorted_sums)\n        push!(sorted_nums,\
    \ sorted_nums[findfirst(i -> i == sorted_sums[i], sorted_sums)])\n    end\n  \
    \  \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given number appears in a given vector.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if nums == [] \n        return nums \n    \n\
    \    digits = nums.map(x -> digits(x))\n    digits_sum = digits.reduce(add, 0)\
    \ \n    \n    sorted_nums = nums.sort((x, y) -> digits_sum - digits(y) - digits(x))\n\
    \    \n    return sorted_nums\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a given number is palindrome or not.", "    if length(nums) ==\
    \ 0\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times the given integer appears in the given vector.", "    \n   \
    \ sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n   \
    \ end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted_nums, nums[sums.[i]])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that sorts the given vector of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original vector.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    sum_of_digits = sum(nums) \n    \n    sorted_nums = Vector{Int64}() \n\
    \    \n    for num in nums \n        digits = num % 10 \n        \n        if\
    \ digits == sum_of_digits \n            sorted_nums.push(num) \n        else \n\
    \            index = findfirst(x -> x == digits, nums) \n            \n      \
    \      if index != -1 \n                sorted_nums.push(index) \n           \
    \ end \n        end \n    end \n    \n    return sorted_nums \nend ", "    if\
    \ length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}(length(nums))\n\
    \    for i in 1:length(nums) \n        sums[i] = sum(nums[i])\n    end\n    \n\
    \    sorted_sums = sort(sums)\n    \n    sorted_nums = Vector{Int64}(length(nums))\n\
    \    for i in 1:length(nums) \n        sorted_nums[i] = nums[find(sums == sorted_sums[i])[1]]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the sum of the digits\
    \ of its argument:", "    if nums == []\n        []\n    else\n        sort(nums)\n\
    \        local sum = 0\n        for n in nums\n            sum += n\n        end\n\
    \        local nums_sorted = []\n        for n in nums\n            if sum ==\
    \ n\n                nums_sorted << n\n            else\n                local\
    \ index = findfirst(x -> x == sum, n)\n                if index == length(n)\n\
    \                    nums_sorted << n\n                else\n                \
    \    nums_sorted << n[index]\n                end\n            end\n        end\n\
    \        nums_sorted\n    end\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    end\n    \n    sorted_nums\
    \ = Vector{Int64}() \n    \n    for i in 1:length(sums) \n        j = find(sums\
    \ == sums[i], 1, length(sums)) \n        push!(sorted_nums, nums[j]) \n    end\n\
    \    \n    return sorted_nums \nend\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ which returns the number of items in the given vector which have equal sum.",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits[digits]\n    \n    sorted = sort(sums)\n\
    \    \n    sorted_idx = sorted.indices\n    \n    sorted_nums = nums[sorted_idx]\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ in the vector that are divisible by 3.", "    if length(nums) == 0 \n      \
    \  return nums \n    \n    digits = nums.map(x -> digits(x))\n    \n    digits_sum\
    \ = sum(digits)\n    \n    sorted_nums = nums.sort\n    \n    sorted_nums = if\
    \ digits_sum == 0 \n                    sorted_nums \n                else \n\
    \                    sorted_nums[digits_sum..]\n                end\n    \n  \
    \  return sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n   \
    \ \n    sums = sort(sums)\n    \n    order_by_points = []\n    for i in sums\n\
    \        order_by_points = order_by_points + nums[findfirst(i in nums)]\n    end\n\
    \    \n    return order_by_points\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of elements\
    \ in the given vector which satisfy the condition:", "    if length(nums) == 0\n\
    \        return nums\n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.sort((x, y) -> sum_digits\
    \ - digits(y) - digits(x))\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function which returns the number of integers in the given vector\nthat have\
    \ exactly two digits.", "    if nums == []\n        []\n    else\n        sort(nums)\n\
    \        local sum = 0\n        for n in nums\n            sum += n\n        end\n\
    \        local index = 0\n        local result = Vector{Int64}()\n        for\
    \ n in nums\n            if sum > 0\n                if sum == n\n           \
    \         push!(result, index)\n                end\n            end\n       \
    \     index += 1\n            sum -= n\n        end\n        result\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ elements in the given vector that satisfy the condition $n^2 + n$ is greater\
    \ than $n$. For example:\n>>> count_greater_than([-4, -6, -10, -12, -14, -16,\
    \ -20, -24])\n4\n>>> count_greater_than([-4, -6, -10, -12, -14, -16, -20, -24,\
    \ -26])\n4\n>>> count_greater_than([-4, -6, -10, -12, -14, -16, -20, -24, -26,\
    \ -28])\n4\n>>> count_greater_than([-4, -6, -10, -12, -14, -16, -20, -24, -26,\
    \ -28, -32])\n4\n>>> count_greater_than([-4, -6, -10, -12, -14, -16, -20, -24,\
    \ -26, -28, -32, -34])\n4\n>>> count_greater_than([-4, -6, -10, -12, -14, -16,\
    \ -20, -24, -26, -28, -32, -34, -36])\n4\n>>> count_greater_than([-4, -6, -10,\
    \ -12, -14, -16, -20, -24, -26, -28, -32, -34, -36, -38])\n4\n>>> count_greater_than([-4,\
    \ -6, -10, -12, -14, -16, -20, -24, -26, -28, -32, -34, -36, -38, -42])\n4\n>>>\
    \ count_greater_than([-4, -6, -10, -12, -14, -16, -20, -24, -26, -28, -32, -34,\
    \ -36, -38, -42, -44])\n4\n>>> count_greater_than([-4, -6, -10, -12, -14, -16,\
    \ -20, -24, -26, -28, -32, -34, -36, -38, -42, -44, -46])\n4\n>>> count_greater_than([-4,\
    \ -6, -10, -12, -14, -16, -20, -24, -26, -28, -32, -34, -36, -38", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    sums = digits[digits]\n    \n    order = sortperm(sums)\n    \n    return\
    \ nums[order]\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of elements in the\
    \ given vector that are less than the given value.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sorted_sums\
    \ = sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n    for i in nums\n \
    \       if sums[i] == sorted_sums[i]\n            push!(sorted_nums, i)\n    \
    \    end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that are less than a given value.", "    if nums == [] \n\
    \        return nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n\
    \        push!(sums, sum(i)) \n    end\n    \n    sums = sort(sums)\n    \n  \
    \  ans = Vector{Int64}()\n    for i in nums \n        push!(ans, i) \n    end\n\
    \    \n    for i in sums \n        push!(ans, i) \n    end\n    \n    return ans\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which sorts the given vector of integers\nin descending\
    \ order according to the sum of their digits.\nNote: if there are several items\
    \ with similar sum of their digits,\norder them based on their index in original\
    \ vector.", "    if length(nums) == 0 \n        return nums \n    \n    digits\
    \ = nums.map(x -> digit(x))\n    sums = digits.map(x -> sum(x))\n    \n    sorted_sums\
    \ = sort(sums)\n    \n    sorted_nums = nums.map(x -> find(sorted_sums, x)).collect{x\
    \ -> x}\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.0>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.0>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which returns the number of integers\
    \ in the given vector\nthat have exactly two digits.", "    if length(nums) ==\
    \ 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for n in nums\
    \ \n        push!(sums, sum(n)) \n    end\n    \n    sorted_sums = sort(sums)\n\
    \    \n    sorted_nums = Vector{Int64}() \n    for s in sorted_sums \n       \
    \ push!(sorted_nums, nums[findfirst(x -> x == s, nums)])\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of integers in the\
    \ given vector that are divisible by 7 and are less than 100. \nFor example, given\
    \ [7, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], the function should\
    \ return 8.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort\n\
    \    \n    sorted_nums = if sum_digits == 0 \n        sorted_nums \n    else\n\
    \        sorted_nums.map(x -> if x == sum_digits \n            x \n        else\n\
    \            digits[x] - sum_digits \n        end) \n    end\n    \n    return\
    \ sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ \nFor example, given 123, it should return 3.", "    if nums == []\n       \
    \ []\n    else\n        order_by_points_helper(nums, 0)\n    end\nend", "    if\
    \ nums == []\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    for i in nums\n        if sums.contains(i)\n\
    \            sums = sums - i\n        else\n            sums = sums + i\n    \
    \    end\n    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if nums == []\n        []\n    else\n\
    \        sort(nums) |> sort\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise\nWrite a function that sorts the given vector of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original vector.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    digits = nums.map(x -> digits(x))\n    digits = sort(digits)\n    \n \
    \   sums = digits[end]\n    \n    index = length(nums)\n    \n    while sums !=\
    \ 0 \n        index += 1\n        \n        sums = digits[index] + sums\n    \
    \    \n        if sums > 0 \n            digits[index] = sums\n            \n\
    \            sums = digits[index - 1] + sums\n            \n            if sums\
    \ > 0 \n                digits[index - 1] = sums\n            \n             \
    \   sums = digits[index - 2] + sums\n                \n                if sums\
    \ > 0 \n                    digits[index - 2] = sums\n            \n         \
    \           sums = digits[index - 3] + sums\n                    \n          \
    \          if sums > 0 \n                        digits[index - 3] = sums\n  \
    \          \n                        sums = digits[index - 4] + sums\n       \
    \                 \n                        if sums > 0 \n                   \
    \         digits[index - 4] = sums\n            \n                           \
    \ sums = digits[index - 5] + sums\n                            \n            \
    \                if sums > 0 \n                                digits[index -\
    \ 5] = sums\n            \n                                sums = digits[index\
    \ - 6] + sums\n                                \n                            \
    \    if sums > 0 \n                                    digits[index - 6] = sums\n\
    \            \n                                    sums = digits[index - 7] +\
    \ sums\n                                    \n                               \
    \     if sums > 0 \n                                        digits[index - 7]\
    \ = sums\n            \n                                        sums = digits[index\
    \ - 8] + sums\n                                        \n                    \
    \                    if sums > 0 \n                                          \
    \  digits[index - 8] = sums\n            \n                                  \
    \          sums = digits[index - 9] + sums\n                                 \
    \           \n                                            if sums > 0 \n     \
    \                                           digits[index - 9] = sums\n       \
    \     \n                                                sums = digits[index -\
    \ 10] + sums\n                                                \n             \
    \                                   if sums > 0 \n                           \
    \                         digits[index - 10] = sums\n            \n          \
    \                                          sums = digits[index - 11] + sums\n\
    \                                                    \n                      \
    \                              if sums > 0 \n                                \
    \                        digits[index - 11] = sums\n            \n           \
    \                                             sums = digits[index - 12] + sums\n\
    \                                                        \n                  \
    \                                      if sums > 0 \n                        \
    \                                    digits[index - 12] = sums\n            \n\
    \                                                            sums = digits[index\
    \ - 13] + sums\n                                                            \n\
    \                                                                if sums > 0 \n\
    \                                                                    digits[index\
    \ - 13] = sums\n            \n                                               \
    \                 sums = digits[index - 14] + sums\n                         \
    \                                       \n                                   \
    \                             if sums > 0 \n                                 \
    \                                   digits[index - 14] = sums\n            \n\
    \                                                                sums = digits[index\
    \ - 15] + sums\n                                                             \
    \   \n                                                                ", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x ->\
    \ digit(x))\n    \n    sums = digits[2:end].sum()\n    \n    indices = findall(sums\
    \ .== 0)\n    \n    indices = sort(indices)\n    \n    indices = indices[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[indices]\n    \n    sums\
    \ = sums..-1\n    \n    indices = indices..-1\n    \n    indices = indices..indices\n\
    \    \n    sums = sums[indices]\n    \n    sums = sums..-1\n    \n    indices\
    \ = indices..-1\n    \n    indices = indices..indices\n    \n    sums = sums[indices]\n\
    \    \n    sums = sums..-1\n    \n    indices = indices..-1\n    \n    indices\
    \ = indices..indices\n    \n    sums = sums[indices]\n    \n    sums = sums..-1\n\
    \    \n    indices = indices..-1\n    \n    indices = indices..indices\n    \n\
    \    sums = sums[indices]\n    \n    sums = sums..-1\n    \n    indices = indices..-1\n\
    \    \n    indices = indices..indices\n    \n    sums = sums[indices]\n    \n\
    \    sums = sums..-1\n    \n    indices = indices..-1\n    \n    indices = indices..indices\n\
    \    \n    sums = sums[indices]\n    \n    sums = sums..-1\n    \n    indices\
    \ = indices..-1\n    \n    indices = indices..indices\n    \n    sums = sums[indices]\n\
    \    \n    sums = sums..-1\n    \n    indices = indices..-1\n    \n    indices\
    \ = indices..indices\n    \n    sums = sums[indices]\n    \n    sums = sums..-1\n\
    \    \n    indices = indices..-1\n    \n    indices = indices..indices\n    \n\
    \    sums = sums[indices]\n    \n    sums = sums..-1\n    \n    indices = indices..-1\n\
    \    \n    indices = indices..indices\n    \n    sums = sums[indices]\n    \n\
    \    sums = sums..-1\n    \n    indices = indices..-1\n    \n    indices = indices..indices\n\
    \    \n    sums = sums[indices]\n    \n    sums = sums..-1\n    \n    indices\
    \ = indices..-1\n    \n    indices = indices..indices\n    \n    sums = sums[indices]\n",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums = sums + digits(i) \n    \n    sorted_sums =\
    \ sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n    for i in nums \n  \
    \      if digits(i) == sorted_sums \n            sorted_nums = sorted_nums + i\
    \ \n        else \n            sorted_nums = sorted_nums + i \n    end\n    \n\
    \    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, given 123, it should return 3.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for n in\
    \ nums \n        push!(sums, sum(n)) \n    end\n    \n    sorted = sort(sums)\n\
    \    \n    sorted_nums = Vector{Int64}()\n    \n    for n in sorted \n       \
    \ push!(sorted_nums, nums[findfirst(x -> x == n, nums)])\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the digits of an integer.",
  "    if nums == [] \n        return nums \n    \n    sums = Vector{Int64}() \n \
    \   for n in nums \n        push!(sums, sum(digits(n)) ) \n    \n    sorted_nums\
    \ = nums \n    for n in nums \n        if sum(digits(n)) > 0 \n            push!(sorted_nums,\
    \ n ) \n        end\n    end\n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7: Find all\
    \ numbers with given sum\nWrite a function which finds all numbers with given\
    \ sum.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sorted = []\n    for i in nums\n        if sums[i]\
    \ == sums[end]\n            push!(sorted, i)\n        elseif sums[i] > sums[end]\n\
    \            push!(sorted, i)\n            push!(sorted, nums[end])\n        end\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which takes an array of integers\
    \ and returns an array of the same size with integers sorted from smallest to\
    \ largest.", "    if length(nums) == 0 \n        return nums\n    \n    sums =\
    \ map_reduce(nums, sum, Int64(0), Int64(0), Int64(0), Int64(0), Int64(0))\n  \
    \  \n    sorted_nums = filter((x) -> sums[x] == sums[sums.last], nums)\n    \n\
    \    return sorted_nums\nend\n</cell>\n<code language=julia-1.3>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.3>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of items\
    \ in the given vector that have same sum as given number.", "    if nums == []\n\
    \        []\n    else\n        order_by_points_helper(nums, 0)\n    end\nend",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x))\n    \n    digits_sum = digits.reduce(x -> x + x)\n    \n    digits_sorted\
    \ = sort(digits)\n    \n    digits_sorted = digits_sorted.map(x -> digits_sum\
    \ - x)\n    \n    return digits_sorted\nend", "    if nums == []\n        []\n\
    \    else\n        order_by_points_helper(nums, 0)\n    end\nend", "    if nums\
    \ == []\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 2\nWrite a function which returns the number of elements in the\
    \ given vector that have value less than a given value.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   \n    sum_digits = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x\
    \ -> digit(x) == sum_digits)\n    \n    return sorted_nums\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which returns the number of times the given element\
    \ appears in the given vector.", "    if nums == []\n        return nums\n   \
    \ \n    digits = nums.map(x -> digits(x))\n    \n    sums = digits.map(x -> sum(x))\n\
    \    \n    sorted_sums = sort(sums)\n    \n    sorted_nums = nums.map(x -> x if\
    \ sum(x) == sorted_sums[length(x)] else -1)\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of integers in the given vector\nthat have\
    \ exactly two digits.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> digit(x) - digit(y))\n    \n    sorted_nums\
    \ = if sum_digits == 0 \n        sorted_nums \n    else \n        sorted_nums[1\
    \ : length(sorted_nums) - 1]\n    end\n    \n    return sorted_nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of items in a vector that have same sum as\
    \ given number. For example:\n>>> count_same_sum(10, 10)\n2\n>>> count_same_sum(10,\
    \ 15)\n1\n>>> count_same_sum(10, 20)\n0\n>>> count_same_sum(10, 30)\n1\n>>> count_same_sum(10,\
    \ 40)\n0\n>>> count_same_sum(10, 50)\n1\n>>> count_same_sum(10, 60)\n0\n>>> count_same_sum(10,\
    \ 70)\n1\n>>> count_same_sum(10, 80)\n0\n>>> count_same_sum(10, 90)\n1\n>>> count_same_sum(10,\
    \ 100)\n0\n>>> count_same_sum(10, 110)\n1\n>>> count_same_sum(10, 120)\n0\n>>>\
    \ count_same_sum(10, 130)\n1\n>>> count_same_sum(10, 140)\n0\n>>> count_same_sum(10,\
    \ 150)\n1\n>>> count_same_sum(10, 160)\n0\n>>> count_same_sum(10, 170)\n1\n>>>\
    \ count_same_sum(10, 180)\n0\n>>> count_same_sum(10, 190)\n1\n>>> count_same_sum(10,\
    \ 200)\n0\n>>> count_same_sum(10, 210)\n1\n>>> count_same_sum(10, 220)\n0\n>>>\
    \ count_same_sum(10, 230)\n1\n>>> count_same_sum(10, 240)\n0\n>>> count_same_sum(10,\
    \ 250)\n1\n>>> count_same_sum(10, 260)\n0\n>>> count_same_sum(10, 270)\n1\n>>>\
    \ count_same_sum(10, 280)\n0\n>>> count_same_sum(10, 290)\n1\n>>> count_same_sum(10,\
    \ 300)\n0\n>>> count_same_sum(10, 310)\n1\n>>> count_same_sum(10, 320)\n0\n>>>\
    \ count_same_sum(10, 330)\n1\n>>> count_same_sum(10, 340)\n0\n>>> count_same_sum(10,\
    \ 350)\n1\n>>> count_same_sum(", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    digits = nums.map(x -> digits(x))\n    digits_sum = digits.reduce(add)\n\
    \    \n    sorted_nums = nums.sort\n    \n    sorted_nums = if digits_sum == 0\
    \ \n                    sorted_nums \n                else\n                 \
    \   nums.map(x -> if digits_sum == digits(x)[1] \n                           \
    \        then x \n                                   else digits(x)[1]) \n   \
    \             end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of integers\
    \ in the given vector\nthat have exactly two digits.", "    if length(nums) ==\
    \ 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n\
    \    sums = digits[2:end].+digits[1:end-1] \n    \n    sorted_sums = sort(sums)\
    \ \n    \n    sorted_nums = nums[2:end].+nums[1:end-1] \n    \n    sorted_nums\
    \ = sort(sorted_nums) \n    \n    sorted_nums = nums[2:end].+nums[1:end-1] \n\
    \    \n    sorted_nums = sort(sorted_nums) \n    \n    return sorted_nums \nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sorted_digits\
    \ = sort(digits) \n    \n    sorted_nums = nums.map(x -> digit(x)) \n    \n  \
    \  sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    ", "    if nums == []\n        []\n    else\n        local sum = 0\n \
    \       local index = 0\n        for n in nums\n            sum = sum + n\n  \
    \          index = index + 1\n        end\n        local result = []\n       \
    \ for n in nums\n            if sum == n\n                push!(result, index)\n\
    \            end\n        end\n        order_by_points(result)\n    end\nend\n\
    </cell>\n<text>\nExercise 10\nWrite a function that returns the number of elements\
    \ in the given vector that satisfy the condition $x \\in {1, 2, 3}$. For example,\
    \ $x = 3$ would return 1, because there are only 1 element in the vector that\
    \ satisfies this condition. Write a function that returns the number of elements\
    \ in the given vector that satisfy the condition $x \\in {1, 2, 3}$. For example,\
    \ $x = 2$ would return 2, because there are 2 elements in the vector that satisfies\
    \ this condition. Write a function that returns the number of elements in the\
    \ given vector that satisfy the condition $x \\in {1, 2, 3}$. For example, $x\
    \ = 1$ would return 1, because there are only 1 element in the vector that satisfies\
    \ this condition.", "    \n    sums = Vector{Int64}()\n    for i in nums\n   \
    \     push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n    \n\
    \    for i in 1:length(sums)\n        push!(sorted, nums[sums.[i]])\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which takes a vector of integers\
    \ and returns another vector with unique elements of the first vector.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   \n    sum_digits = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x\
    \ -> digit(x) == sum_digits)\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of digits in an integer.", "    \n    sums\
    \ = Vector{Int64}()\n    for n in nums\n        push!(sums, sum(n))\n    end\n\
    \    \n    sorted = Vector{Int64}()\n    \n    for n in nums\n        push!(sorted,\
    \ n)\n    end\n    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n \
    \       push!(sums, sum(n))\n    end\n    \n    sorted = sort!(sorted)\n    \n\
    \    for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n\
    \    \n    for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted\
    \ = sort!(sorted)\n    \n    for n in sorted\n        push!(sorted, n)\n    end\n\
    \    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n        push!(sorted,\
    \ n)\n    end\n    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n \
    \       push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n    \n  \
    \  for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n\
    \    \n    for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted\
    \ = sort!(sorted)\n    \n    for n in sorted\n        push!(sorted, n)\n    end\n\
    \    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n        push!(sorted,\
    \ n)\n    end\n    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n \
    \       push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n    \n  \
    \  for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n\
    \    \n    for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted\
    \ = sort!(sorted)\n    \n    for n in sorted\n        push!(sorted, n)\n    end\n\
    \    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n        push!(sorted,\
    \ n)\n    end\n    \n    sorted = sort!(sorted)\n    \n    for n in sorted\n \
    \       push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n    \n  \
    \  for n in sorted\n        push!(sorted, n)\n    end\n    \n    sorted = sort!(sorted)\n\
    \    \n    for n in sorted\n        push!(sorted, n)\n    end\n    \n    sor",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers in the\
    \ given vector that are less than the given integer.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits.reduce(add, 0) \n    \n    sorted_nums\
    \ = nums[sortperm(sums)]\n    \n    return sorted_nums\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    order_by_points = []\n    for\
    \ i in nums\n        if sums[i] == sums[end]\n            push!(order_by_points,\
    \ i)\n        else\n            push!(order_by_points, i)\n            push!(order_by_points,\
    \ nums[end])\n        end\n    end\n    \n    return order_by_points\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=juli",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums[i] = sum(i) + i \n    \n    sorted_sums = sort_by_key(sums)\n\
    \    \n    sorted_nums = Vector{Int64}()\n    for i in nums \n        idx = find(sums\
    \ == sorted_sums[i])\n        sorted_nums[idx] = i \n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in the\
    \ given vector that satisfy a given condition. For example, the number of elements\
    \ in the vector that satisfy the condition $x^2 + y^2 = z^2$ is", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\n    \n   \
    \ sorted_nums = nums[:]\n    \n    for idx in 1:length(nums)\n        if sum_of_digits\
    \ == 0 \n            return sorted_nums \n        \n        digit = nums[idx]\
    \ - sum_of_digits\n        \n        if digit < 0 \n            digit = -digit\
    \ \n            \n        sum_of_digits -= digit \n        \n        sorted_nums[idx]\
    \ = digit\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7: Write a function that returns the number of times\
    \ each distinct number appears in the given vector.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sortedsums\
    \ = sort(sums)\n    \n    sortednums = Vector{Int64}()\n    for i in nums\n  \
    \      push!(sortednums, sortedsums.index(sum(i)))\n    end\n    \n    return\
    \ sortednums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 9\nWrite a function that returns the number of elements in the\
    \ given vector\nthat satisfy the condition $x^2 + y^2 = z^2$, where $x, y, z$\
    \ are given\nas arguments.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> digit(x) - digit(y))\n    \n    sorted_nums\
    \ = if sum_digits == 0 \n        sorted_nums \n    else \n        sorted_nums[digits.index(sum_digits)..end]\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, given 123, it should return 3.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    sum_digits = digits[end]\n    \n    idx = 1\n    \n    i = length(nums)\n\
    \    \n    while i > 1 \n        if digits[idx] == sum_digits \n            digits[idx]\
    \ = digits[idx-1]\n            digits[idx-1] = sum_digits \n            \n   \
    \         i -= 1\n            idx -= 1\n            \n        else \n        \
    \    idx += 1\n            \n        i -= 1\n    end\n    \n    return nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x ->\
    \ digits(x))\n    digits_sum = digits.reduce(add, 0) \n    \n    sorted_nums =\
    \ nums.sort((x, y) -> digits_sum - digits(x) - digits(y))\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in the given vector\
    \ that satisfy the condition:", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted, nums[sums.[i]])\n  \
    \  end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the given vector that satisfy the condition:\n$$ \\sum_{i=1}^n x_i = 1 $$\n\
    where $n$ is the length of the vector.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sorted_digits\
    \ = sort(digits) \n    \n    sorted_nums = nums.map(x -> x % 10 + sorted_digits[x\
    \ % 10]) \n    \n    return sorted_nums \nend\n</cell>\n<text>\nLet's test our\
    \ function", "    if length(nums) == 0 \n        return nums \n    \n    digits\
    \ = nums.map(x -> digit(x))\n    \n    sorted_digits = sort(digits)\n    \n  \
    \  sorted_nums = nums.map(x -> x - digit(sorted_digits[x]))\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of elements in the\
    \ given vector that are greater than a given value.", "    if length(nums) ==\
    \ 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n    \n\
    \    digits_sum = digits.reduce(add, 0) \n    \n    sorted_nums = nums.sort((x,\
    \ y) -> digits_sum - digits(x) - digits(y))\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of digits in an integer. For example:\n>>>\
    \ digits(123)\n3\n>>> digits(-123)\n2\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>>\
    \ digits(123456789)\n9\n>>> digits(-123456789)\n10\n>>> digits(1234567890)\n10\n\
    >>> digits(-1234567890)\n10\n>>> digits(123456789000)\n10\n>>> digits(-123456789000)\n\
    10\n>>> digits(12345678900000)\n10\n>>> digits(-12345678900000)\n10\n>>> digits(123456789000000)\n\
    10\n>>> digits(-123456789000000)\n10\n>>> digits(1234567890000000) \n10\n>>> digits(-1234567890000000)\
    \ \n10\n>>> digits(12345678900000000) \n10\n>>> digits(-12345678900000000) \n\
    10\n>>> digits(123456789000000000) \n10\n>>> digits(-123456789000000000) \n10\n\
    >>> digits(1234567890000000000) \n10\n>>> digits(-1234567890000000000) \n10\n\
    >>> digits(12345678900000000000) \n10\n>>> digits(-12345678900000000000) \n10\n\
    >>> digits(123456789000000000000) \n10\n>>> digits(-123456789000000000000) \n\
    10\n>>> digits(1234567890000000000000) \n10\n>>> digits(-1234567890000000000000)\
    \ \n10\n>>> digits(12345678900000000000000) \n10\n>>> digits(-12345678900000000000000)\
    \ \n10\n>>> digits(123456789000000000000000) \n10\n>>> digits(-123456789000000000000000)\
    \ \n10\n>>> digits(1234567890000000000000000) \n10\n>>> digits(-1234567890000000000000000)\
    \ \n10\n>>> digits(12345678900000000000000000) \n10\n>>> digits(-12345678900000000000000000)\
    \ \n10\n>>> digits(123456789000000000000000000) \n10\n>>> digits(-123456789000000000000000000)\
    \ \n10\n>>> digits(1234567890000000000000000000) ", "    if length(nums) == 0\
    \ \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums\
    \ = nums \n    \n    for i = 1:length(nums) \n        digit = nums[i] \n     \
    \   \n        if sum_of_digits > digit \n            sum_of_digits -= digit \n\
    \            sorted_nums[i] = nums[i] \n        else \n            sum_of_digits\
    \ += digit \n            sorted_nums[i] = nums[i] - sum_of_digits \n        end\n\
    \    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that satisfy the condition:", "    \n    local sums = Vector{Int64}()\n\
    \    for n in nums \n        sums = sums + digits(n)\n    end\n    \n    local\
    \ sorted_sums = sort(sums)\n    \n    local result = Vector{Int64}()\n    for\
    \ s in sorted_sums\n        push!(result, nums[s])\n    end\n    \n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <code language=julia-1.5>", "    if nums == [] \n        return nums \n    \n\
    \    digits = nums.map(x -> digit(x)) \n    \n    sorted_digits = sort(digits)\
    \ \n    \n    sorted_nums = nums.map(x -> digit(x)) \n    \n    sorted_nums =\
    \ sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums\
    \ = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums) \n    \n   \
    \ sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums)\
    \ \n    \n", "    if nums == []\n        return nums\n    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    for i in 1:length(sums)\n        if sums[i] < 0\n   \
    \         sorted_nums.push(nums[i])\n        elseif sums[i] > 0\n            sorted_nums.push(sums[i])\n\
    \        else\n            sorted_nums.push(nums[i])\n        end\n    end\n \
    \   \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    if length(nums) == 0 \n        return nums \n    \n  \
    \  digits = nums.map(x -> digit(x))\n    sum_digits = sum(digits)\n    \n    sorted_nums\
    \ = nums.sort((x, y) -> digit(x) - digit(y))\n    \n    sorted_nums = if sum_digits\
    \ == 0 \n        sorted_nums \n    else\n        sorted_nums[: length(nums) -\
    \ 1]\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7: Sort a vector of strings by their length", "    if\
    \ nums == []\n        []\n    else\n        order_by_points_helper(nums, 0)\n\
    \    end\nend", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}() \n    for n in nums \n        push!(sums, sum(n)) \n    end\n\
    \    \n    sorted_nums = Vector{Int64}() \n    \n    for n in nums \n        push!(sorted_nums,\
    \ n) \n    end\n    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in sorted_nums \n        push!(sorted_nums,\
    \ nums[findfirst(x -> x == n, sums)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in the given vector.", "    \n    local sum = 0\n    local index = 0\n    local\
    \ result = []\n    for n in nums do\n        sum = sum + n\n        index = index\
    \ + 1\n        if sum > 0 then\n            result[index] = n\n            sum\
    \ = 0\n        end\n    end\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of integers\
    \ in the given vector\nwhich are divisible by 7 and are greater than or equal\
    \ to 3.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums =\
    \ sums + i\n    end\n    \n    sums = sort(sums)\n    \n    for i in sums\n  \
    \      nums[nums.index(i)] = i\n    end\n    \n    return nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function which takes a vector of integers and returns its lexicographical\
    \ order.", "    \n    local sums = Vector{Int64}()\n    local index = 0\n    for\
    \ n in nums\n        sums[index] = n\n        index = index + 1\n    end\n   \
    \ \n    local sorted_sums = Vector{Int64}()\n    local sorted_index = 0\n    for\
    \ i = 1, length(sums)\n        if sums[i] < 0\n            sorted_sums[sorted_index]\
    \ = sums[i]\n            sorted_index = sorted_index + 1\n        elseif sums[i]\
    \ > 0\n            sorted_sums[sorted_index] = sums[i]\n            sorted_index\
    \ = sorted_index + 1\n        else\n            sorted_sums[sorted_index] = i\n\
    \            sorted_index = sorted_index + 1\n        end\n    end\n    \n   \
    \ return sorted_sums\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the given vector that are greater than a given\
    \ value.", "    \n    local sums = Vector{Int64}()\n    local index = 0\n    \n\
    \    for n in nums do\n        sums[index] = n\n        index = index + 1\n  \
    \  end\n    \n    local sorted_sums = Vector{Int64}()\n    \n    for i = 1, length(sums)\
    \ do\n        local sum = 0\n        for j = 1, i do\n            sum = sum +\
    \ sums[j]\n        end\n        \n        if sum > 0 then\n            sorted_sums[i]\
    \ = sum\n        end\n    end\n    \n    return sorted_sums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if nums == []\n        []\n    else\n        local sum = 0\n        local index\
    \ = 0\n        for n in nums\n            sum += n\n            index = index\
    \ + 1\n        end\n        local sorted_nums = nums\n        for i = 1, index\n\
    \            sorted_nums[i] = sorted_nums[i] - sum\n        end\n        sorted_nums\
    \ = order_by_points(sorted_nums)\n        return sorted_nums\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers in the\
    \ given vector that have exactly two digits.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n\
    \    \n    order_by_points = []\n    for i in sums\n        push!(order_by_points,\
    \ i)\n    end\n    \n    return order_by_points\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which returns the number of items\
    \ in the given vector\nthat have equal sum of the digits. For example:\n>>> count_equal_digits([1,\
    \ 11, -1, -11, -12])\n2\n>>> count_equal_digits([])\n0\n\"\"\"", "    if nums\
    \ == []\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12])\n</cell>\n<text>\nExercise 3\nWrite a function which returns the\
    \ number of items in the given vector which have same sum of their digits.", " \
    \   if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x))\n    \n    sums = digits[2:end].sum()\n    \n    indexes = findfirst(sums.==sums)\n\
    \    \n    indexes = indexes[2:end]\n    \n    indexes = indexes[sortperm(indexes)]\n\
    \    \n    indexes = indexes[2:end]\n    \n    indexes = indexes[sortperm(indexes)]\n\
    \    \n    indexes = indexes[2:end]\n    \n    return nums[indexes]\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector in descending order.", "    if length(nums) == 0\n        return\
    \ nums\n    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in\
    \ 1:length(sums)\n        push!(sorted_nums, nums[sums.index(i)])\n    end\n \
    \   \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of integers\
    \ in the given vector which sum to zero. For example:\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n2\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n1\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero([-1, 0,\
    \ 2, -3, 4])\n0\n>>> count_zero([-1, 0, 2, -3, 4])\n0\n>>> count_zero", "    if\
    \ nums == []\n        []\n    else\n        order_by_points_helper(nums, 0)\n\
    \    end\nend", "    \n    sums = Vector{Int64}()\n    for i in nums\n       \
    \ push!(sums, sum(i))\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n\
    \    for i in 1:length(sums)\n        push!(sorted_nums, nums[findfirst(i->sums[i]>sums[end],\
    \ sums)])\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of items\
    \ in the given vector which have their digits summed up to zero.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digits(x))\n \
    \   \n    sums = digits[2:end].map(sum)\n    \n    index = sums.argsort()\n  \
    \  \n    return nums[index] \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of digits\
    \ in an integer.", "    if length(nums) == 0 \n        return nums \n    \n  \
    \  digits = nums.map(x -> digit(x)) \n    \n    sums = digits.reduce(add, 0) \n\
    \    \n    sorted = nums.filter(x -> x == sums) \n    \n    return sorted \nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function which calculates the sum of all digits in given vector.", "    if\
    \ length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n\
    \    \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort((x, y)\
    \ -> digit(x) - digit(y))\n    \n    sorted_nums = if sum_digits == 0 \n     \
    \               sorted_nums \n                else \n                    sorted_nums[:\
    \ findfirst(x -> digit(x) == sum_digits, sorted_nums)]\n                end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of elements\
    \ in the given vector that are less than a given value.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    sums = digits[2:end].sum()\n    \n    sorted_idx = findfirst(x -> x ==\
    \ sums, digits)\n    \n    sorted_nums = nums[sorted_idx]\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times each digit appears in the\
    \ given vector of integers.", "    if nums == []\n        []\n    else\n     \
    \   sort(nums)\n        local sum = 0\n        local index = 0\n        for n\
    \ in nums\n            sum += n\n            if sum > 0\n                index\
    \ = index + 1\n            end\n        end\n        local result = Vector{Int64}()\n\
    \        for i = 1:length(nums)\n            if nums[i] == sum\n             \
    \   push!(result, nums[i])\n            end\n        end\n        return result\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in nums\n        if sums[i] < 0\n       \
    \     sorted_nums.push(i)\n        elseif sums[i] == 0\n            sorted_nums.push(i)\n\
    \        else\n            sorted_nums.push(sums[i])\n        end\n    end\n \
    \   \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which sorts the given vector of\
    \ integers\nin descending order according to the sum of their digits.\nNote: if\
    \ there are several items with similar sum of their digits,\norder them based\
    \ on their index in original vector.", "    \n    sums = Vector{Int64}()\n   \
    \ for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    ans = Vector{Int64}()\n    for i in nums\n        if sums[i] == sums[end]\
    \ \n            push!(ans, i)\n        end\n    end\n    \n    return ans\nend\n\
    </cell>\n<text>\nLet's test our function", "    \n    local sum = 0\n    local\
    \ index = 0\n    local result = []\n    for n in nums do\n        sum = sum +\
    \ n\n        if sum > 0 then\n            result[index] = n\n            index\
    \ = index + 1\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if nums == []\n        []\n    else\n\
    \        order_by_points_helper(nums, 0)\n    end\nend", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort\n    \n \
    \   sorted_nums = if sum_digits == 0 \n        sorted_nums \n    else\n      \
    \  sorted_nums[digits.index(sum_digits)] \n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that satisfy\
    \ a condition. For example, a vector with positive integers has positive elements\
    \ and a vector with negative integers has negative elements. Write a function\
    \ that returns the number of elements in a vector that satisfy a condition.",
  "    if length(nums) == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\n\
    \    \n    sorted_nums = nums \n    \n    for i = 1:length(nums) \n        if\
    \ sum_of_digits > 0 \n            digit = nums[i] - sum_of_digits \n         \
    \   if digit > 0 \n                sum_of_digits -= digit \n                sorted_nums[i]\
    \ = digit \n            end \n        end \n    end \n    \n    return sorted_nums\
    \ \nend \n</cell>\n<code language=julia-1.3>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.3>\norder_by_points([])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.",
  "    if length(nums) == 0 \n        return nums\n    \n    digits = nums.map(x ->\
    \ digit(x))\n    \n    sums = digits.reduce(add, 0::Int64)\n    \n    sorted_nums\
    \ = nums.filter(x -> sums == digit(x))\n    \n    return sorted_nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function which takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, order_by_points([1, 11, -1, -11, -12]) should return\
    \ -36", "    if length(nums) == 0\n        []\n    else\n        sort(nums)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ number of elements in the given vector that have value less than a given value.",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    end\n    \n    sorted_nums\
    \ = Vector{Int64}() \n    \n    for i in 1:length(sums) \n        push!(sorted_nums,\
    \ nums[sums.index(i)]) \n    end\n    \n    return sorted_nums \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function which returns the sum of the digits of an\
    \ integer.", "    if nums == []\n        []\n    else\n        order_by_points_helper(nums,\
    \ 0)\n    end\nend", "    if nums == []\n        []\n    else\n        local sum\
    \ = 0\n        local index = 0\n        for n in nums\n            sum += n\n\
    \            if sum > 0\n                index = index + 1\n            end\n\
    \        end\n        local result = Vector{Int64}()\n        for n in nums\n\
    \            if sum == n\n                push!(result, index)\n            end\n\
    \        end\n        return result\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) %\
    \ 10\n    end\n    \n    sorted = Vector{Int64}()\n    for i in nums\n       \
    \ push!(sorted, i)\n    end\n    \n    for i in sorted\n        if sums[i] !=\
    \ sums[sorted[i]]\n            push!(sorted, sorted[i])\n        end\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given number appears in a given vector.", "    if length(nums) == 0 \n   \
    \     return nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sorted_digits\
    \ = sort(digits)\n    \n    sorted_nums = nums.map(x -> x + sorted_digits[length(x)])\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that satisfy the condition:", "    if length(nums) == 0\
    \ \n        return nums \n    \n    sums = Vector{Int64}() \n    for n in nums\
    \ \n        push!(sums, sum(n)) \n    end\n    \n    sorted_sums = sort(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for s in sorted_sums \n    \
    \    push!(sorted_nums, nums[findfirst(x -> x == s, nums)])\n    end\n    \n \
    \   return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of times\
    \ a given number appears in a given vector.", "    if length(nums) == 0 \n   \
    \     return nums \n    \n    digits = nums.map(x -> digits(x))\n    \n    sum_digits\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.sort((x, y) -> sum_digits\
    \ - digits(x) - digits(y))\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which returns the number of times each digit appears in the given\
    \ vector of integers.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    sums = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i)\
    \ \n    end", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i]\
    \ = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n    for i in\
    \ 1:length(sums)\n        push!(sorted_nums, nums[find(sums == sums[i])[1]])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i\
    \ in 1:length(sums)\n        push!(sorted_nums, nums[sums.index(i)])\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of times\
    \ a given number appears in a given vector.", "    \n    if length(nums) == 0\
    \ \n        return nums\n    \n    sums = Vector{Int64}()\n    for i in nums \n\
    \        sums[i] = sum(i) + i\n    end\n    \n    sorted_sums = sort!(sums)\n\
    \    \n    sorted_nums = Vector{Int64}()\n    for i in nums \n        if sums[i]\
    \ == sorted_sums[i] \n            push!(sorted_nums, i)\n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that satisfy a given condition. For example:", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  sums = digits.map(x -> sum(x))\n    \n    sorted_sums = sort_by_key(sums)\n\
    \    \n    sorted_nums = nums.map(x -> sorted_sums[x])\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times each digit appears in the\
    \ given vector of integers.", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    digits = nums.map(x -> digits(x))\n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> sum_digits - digits(x) - digits(y))\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. For example, given 123, it should return 3.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n  \
    \  sorted_nums = nums \n    \n    for i = 1:length(nums) \n        \n        if\
    \ nums[i] > sum_of_digits \n            \n            sorted_nums[i] = nums[i]\
    \ \n            \n            sum_of_digits -= nums[i] \n            \n      \
    \  else \n            \n            sum_of_digits += nums[i] \n            \n\
    \            sorted_nums[i] = sum_of_digits \n            \n            sum_of_digits\
    \ = 0 \n            \n        end\n        \n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        push!(sorted_nums,\
    \ nums[findfirst(isequal(sums[i]), sums)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in the given vector\n\
    that satisfy the condition $x^2 + y^2 = z^2$. \nFor example, if the given vector\
    \ is [1, 1, 1], the function should return 3.", "    if length(nums) == 0 \n \
    \       return nums \n    \n    digits = nums.map(x -> digit(x)) \n    digits_sum\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.map(x -> digit(x)) \n\
    \    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums = map(x -> digit(x)\
    \ - digits_sum, sorted_nums) \n    \n    sorted_nums = map(x -> x + 1, sorted_nums)\
    \ \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are less than a given value.", "    if nums == []\n       \
    \ []\n    else\n        local sum = 0\n        local index = 0\n        for n\
    \ in nums\n            sum += n\n            index = index + 1\n        end\n\
    \        local sorted_nums = nums\n        local sorted_index = 0\n        while\
    \ sum > 0\n            local n = nums[sorted_index]\n            local digit =\
    \ n % 10\n            local new_digit = digit + sum % 10\n            sum = (sum\
    \ - digit) / 10\n            sorted_nums[sorted_index] = new_digit\n         \
    \   sorted_index = sorted_index + 1\n        end\n        sorted_nums\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    digits = nums.map(x -> digits(x))\n    \n    sum_digits\
    \ = sum(digits)\n    \n    sorted_nums = nums.sort((x, y) -> sum_digits - digits(x)\
    \ - digits(y))\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given number appears in a given vector.", "    if length(nums) == 0 \n   \
    \     return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n  \
    \      push!(sums, sum(i)) \n    end\n    \n    sorted = Vector{Int64}() \n  \
    \  \n    for i in 1:length(nums) \n        if sums[i] != 0 \n            push!(sorted,\
    \ nums[i]) \n        end\n    end\n    \n    return sorted \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which returns the number of integers whose digits sum to $n$, where\
    \ $n$ is a given integer.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ order_by_points = Vector{Int64}()\n    for i in 1:length(sums)\n        push!(order_by_points,\
    \ nums[sums[i]])\n    end\n    \n    return order_by_points\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer. For example:\n>>>\
    \ count_digits(123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-5)\n-1\n>>>\
    \ count_digits(1234567890)\n9\n>>> count_digits(1234567890123456789)\n10\n>>>\
    \ count_digits(12345678901234567890123456789)\n10\n>>> count_digits(123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789)\n10\n\
    >>> count_digits(12345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789", "    if length(nums) == 0 \n      \
    \  return nums \n    \n    digits = nums.map(x -> digits(x))\n    digits_sum =\
    \ digits.reduce(add, 0) \n    \n    sorted_nums = nums.sortBy(x -> digits_sum\
    \ - digits(x))\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer. For example:\n>>> digits(123)\n\
    3\n>>> digits(-123)\n2\n>>> digits(0)\n1\n>>> digits(-0)\n1\n>>> digits(1.2)\n\
    2\n>>> digits(-1.2)\n2\n>>> digits(1.2e10)\n10\n>>> digits(-1.2e10)\n10\n>>> digits(1.234e-10)\n\
    10\n>>> digits(-1.234e-10)\n10\n>>> digits(1.234e-100)\n100\n>>> digits(-1.234e-100)\n\
    100\n>>> digits(1.234e-1000)\n1000\n>>> digits(-1.234e-1000)\n1000\n>>> digits(1.234e-10000)\n\
    10000\n>>> digits(-1.234e-10000)\n10000\n>>> digits(1.234e-100000)\n100000\n>>>\
    \ digits(-1.234e-100000)\n100000\n>>> digits(1.234e-1000000)\n1000000\n>>> digits(-1.234e-1000000)\n\
    1000000\n>>> digits(1.234e-10000000)\n10000000\n>>> digits(-1.234e-10000000)\n\
    10000000\n>>> digits(1.234e-100000000)\n100000000\n>>> digits(-1.234e-100000000)\n\
    100000000\n>>> digits(1.234e-1000000000)\n1000000000\n>>> digits(-1.234e-1000000000)\n\
    1000000000\n>>> digits(1.234e-10000000000)\n10000000000\n>>> digits(-1.234e-10000000000)\n\
    10000000000\n>>> digits(1.234e-100000000000)\n100000000000\n>>> digits(-1.234e-100000000000)\n\
    100000000000\n>>> digits(1.234e-1000000000000)\n1000000000000\n>>> digits(-1.234e-1000000000000)\n\
    1000000000000\n>>> digits(1.234e-10000000000000)\n10000000000000\n>>> digits(-1.234e-10000000000000)\n\
    10000000000000\n>>> digits(1.234e-100000000000000)\n100000000000000\n>>> digits(-1.234e-100000000000000)\n\
    100000000000000\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = map_reduce(nums,\
    \ sum, init = 0)\n    \n    sorted_nums = nums[findall(sums .== maximum(sums))]\n\
    \    \n    return sorted_nums\nend", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    zipped = zip(nums,\
    \ sums)\n    zipped.sort!\n    \n    zipped.reverse!\n    \n    zipped.map(x->x[1])\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in the given vector\
    \ that have the given digit.", "    \n    sums = Vector{Int64}()\n    for n in\
    \ nums\n        sums = sums + digits(n)\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(sums)\n    \n    sums = sums[:]\n    \n    sums\
    \ = sums[findall(sums \u2260 0)]\n    \n    return sums\nend", "    if nums ==\
    \ []\n        return nums\n    \n    sums = nums.map(x -> sum(x))\n    \n    sorted_sums\
    \ = sort(sums)\n    \n    sorted_nums = nums[sorted_sums]\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which takes as input a vector of integers and returns another\
    \ vector with integers sorted according to their sum.", "    if length(nums) ==\
    \ 0 \n        return nums\n    \n    sums = Vector{Int64}()\n    for i in nums\
    \ \n        sums[i] = sum(i) + i\n    end\n    \n    sorted_sums = sort(sums)\n\
    \    \n    sorted_nums = Vector{Int64}()\n    for i in nums \n        if sums[i]\
    \ == sorted_sums[1] \n            push!(sorted_nums, i)\n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that sorts the given vector of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original vector.", "    if nums == [] \n        return [] \n    \n    sums\
    \ = map_reduce(nums, sum, Int64(0), Int64(0), Int64(0)) \n    \n    sorted_nums\
    \ = filter(i -> sums[i] != 0, nums) \n    \n    sorted_nums = sort_by_key(sorted_nums,\
    \ i -> sums[i]) \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}(length(nums))\n    for i in 1:length(nums)\
    \ \n        sums[i] = sum(nums[i])\n    end\n    \n    sorted_sums = sort(sums)\n\
    \    \n    sorted_nums = Vector{Int64}(length(nums))\n    for i in 1:length(nums)\
    \ \n        sorted_nums[i] = nums[findfirst(x -> x == sorted_sums[i], sums)]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the number of times\
    \ the given number appears in the given vector.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted =\
    \ Vector{Int64}()\n    for i in nums\n        push!(sorted, i)\n    end\n    \n\
    \    for i in sorted\n        sum_idx = sums.index(i)\n        if sum_idx != length(sums)\n\
    \            push!(sorted, sums[sum_idx])\n            sums[sum_idx] = i\n   \
    \     end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sorted_digits\
    \ = sort(digits) \n    \n    sorted_nums = nums.map(x -> x % 10 + sorted_digits[digits(x)])\
    \ \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that are less than a given value.", "    if nums == []\n\
    \        return nums\n    \n    sums = Vector{Int64}()\n    for i in nums\n  \
    \      push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n    \n\
    \    for i in 1:length(sums)\n        push!(sorted, nums[sums.[i]])\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given integer appears in a given vector.", "    if length(nums) == 0\n   \
    \     return nums\n    \n    digits = nums.map(x -> digit(x))\n    \n    digits_sum\
    \ = digits.reduce(add, 0) \n    \n    digits_sorted = sort(digits)\n    \n   \
    \ sorted_nums = digits_sorted.map(x -> x - digits_sum)\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function which returns the number of integers less than or equal\
    \ to a given integer n.", "    if length(nums) == 0 \n        return nums \n \
    \   \n    digits = nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].+digits[1:end-1]\
    \ \n    \n    indices = findall(sums.>0) \n    \n    sorted_indices = sort(indices)\n\
    \    \n    sorted_nums = nums[sorted_indices]\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x ->\
    \ digit(x)) \n    \n    sum_digits = digits[end].(digits) \n    \n    sorted_digits\
    \ = digits[end].(digits)\n    \n    sorted_digits = sort_by_key(digits, sum_digits)\n\
    \    \n    sorted_nums = nums[end]\n    \n    for i = end - 1, j = end - 1; i\
    \ > 0; i--, j--\n        if sorted_digits[i] < sorted_digits[j] \n           \
    \ sorted_nums[i] = nums[j] \n            sorted_nums[j] = nums[i] \n        else\
    \ \n            sorted_nums[i] = nums[i] \n            sorted_nums[j] = nums[j]\
    \ \n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ each digit appears in the given vector.", "    if length(nums) == 0\n      \
    \  []\n    else\n        sort(nums, by = x -> sum(x) % 10)\n    end\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function which returns the number of times the given\
    \ element appears in the given vector.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digits(x))\n    digits_sum = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.sort((x, y) -> digits_sum - digits(y) - digits(x))\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of integers in the given vector that are divisible by 7. \nFor example,\
    \ given [7, 11, 13, 14, 15, 16, 17, 18, 19], return 3.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   \n    sorted_digits = sort(digits)\n    \n    sorted_nums = nums.map(x ->\
    \ digit(x)) \n    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums\
    \ = sorted_nums.map(x -> digit(x)) \n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(", "    \n    sums = Vector{Int64}()\n    for i\
    \ in nums\n        push!(sums, sum(digits(i)))\n    end\n    \n    sorted = sort(sums)\n\
    \    \n    order_by_points = []\n    for i in sorted\n        push!(order_by_points,\
    \ nums[i])\n    end\n    \n    return order_by_points\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which sorts the given vector of\
    \ integers\nin descending order according to the sum of their digits.\nNote: if\
    \ there are several items with similar sum of their digits,\norder them based\
    \ on their index in original vector.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    sums = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.filter(x -> x == sums) \n    \n    return\
    \ order_by_points(sorted_nums)\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([-2,\
    \ -1, 0, 1, 2])\n</cell>\n<text>\nProblem 3\nWrite a function which returns the\
    \ number of integers in the vector that are divisible by 3.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort((x, y) ->\
    \ digit(x) - digit(y))\n    \n    sorted_nums = if sum_digits == 0 \n        sorted_nums\
    \ \n    else \n        sorted_nums[: findfirst(x -> digit(x) == sum_digits, sorted_nums)]\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5, 6])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5, 6, -7, -8])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5, 6, -7, -8, 9])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5, 6, -7, -8,\
    \ 9, 10])\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5,\
    \ 6, -7, -8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 2, 3, -4, -5, 6, -7, -8, 9, 10, 11, 12])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 2, 3, -4, -5, 6, -7, -8, 9, 10, 11, 12, 13])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5, 6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14])\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 2, 3,\
    \ -4, -5, 6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 2, 3, -4, -5, 6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 2, 3, -4, -5, 6, -7, -8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 2, 3, -4, -5, 6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(nums)\
    \ == 0\n        []\n    else\n        sort(nums)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function which returns the number of elements in the given\
    \ vector that are less than a given value.", "    \n    local sums = Vector{Int64}()\n\
    \    local indexes = Vector{Int64}()\n    \n    for n in nums do\n        sums\
    \ = sums + digits(n)\n        indexes = indexes + [sums..sums]\n    end\n    \n\
    \    indexes = indexes[sortperm(indexes)]\n    \n    return nums[indexes]\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\n\
    Write a function which sorts the given vector of integers\nin descending order\
    \ according to the sum of their digits.\nNote: if there are several items with\
    \ similar sum of their digits,\norder them based on their index in original vector.",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits.reduce(add, 0) \n    \n    sorted_nums\
    \ = nums.filter(x -> x == sums) \n    \n    sorted_nums = order_by_points(sorted_nums)\
    \ \n    \n    sorted_nums = sorted_nums.concat(nums.filter(x -> x != sums)) \n\
    \    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.3>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.3>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sorted_digits =\
    \ sort_by_key(digits)\n    \n    sorted_nums = nums.map(x -> x - sorted_digits[digits(x)])\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given vector that are greater than a given value.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   digits_sum = digits.reduce(add, 0) \n    \n    sorted_nums = nums.map(x ->\
    \ x if digits_sum == digit(x) else digits_sum) \n    \n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.3>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<text>\nProblem 7: Write a function which sorts the given vector\
    \ of integers\n    in descending order according to the sum of their digits.\n\
    \    Note: if there are several items with similar sum of their digits,\n    order\
    \ them based on their index in original vector.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sortedsums\
    \ = sort(sums)\n    \n    sortednums = Vector{Int64}()\n    for i in nums\n  \
    \      push!(sortednums, sortedsums.index(sum(i)))\n    end\n    \n    return\
    \ sortednums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of digits in an integer.\
    \ For example:\n>>> count_digits(123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n\
    1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n\
    0\n>>> count_digits(-10)\n1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n\
    3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n1\n>>> count_digits(123456789)\n\
    9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n\
    1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n\
    0\n>>> count_digits(-10)\n1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n\
    3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n1\n>>> count_digits(123456789)\n\
    9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n\
    1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n\
    0\n>>> count_digits(-10)\n1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n\
    3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n1\n>>> count_digits(123456789)\n\
    9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-10)\n\
    1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123)\n3\n>>> count_digits(0)\n\
    0\n>>> count_digits(-10)\n1\n>>> ", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = []\n   \
    \ for i in nums\n        if sums[i] == 0 && sums[i] != 0\n            push!(sorted,\
    \ i)\n        elseif sums[i] > 0\n            push!(sorted, i)\n        elseif\
    \ sums[i] < 0\n            push!(sorted, i)\n        end\n    end\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers in the\
    \ vector that have exactly two digits.", "    if nums == []\n        []\n    else\n\
    \        order_by_points_helper(nums, 0)\n    end\nend", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    digits_sum = digits.reduce(add, 0) \n    \n    digits_sums = digits_sum.zip(digits)\n\
    \    \n    digits_sums.sort!((a, b) -> a[1] - b[1])\n    \n    digits_sums.reverse!()\n\
    \    \n    digits_sums.map(x -> x[1])\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sorted_digits = sort(digits) \n    \n    sorted_nums\
    \ = nums.map(x -> x - digits(x)[1]) \n    \n    return sorted_nums + sorted_digits\
    \ \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which sorts the given vector of integers\nin descending\
    \ order according to the sum of their digits.\nNote: if there are several items\
    \ with similar sum of their digits,\norder them based on their index in original\
    \ vector.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i]\
    \ = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for\
    \ i in 1:length(sums)\n        sorted_nums[i] = nums[findfirst(i->sums[i] == sums)]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ less than or equal to a given integer n.", "    if length(nums) == 0 \n    \
    \    return nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits\
    \ = sum(digits)\n    \n    sorted_nums = nums.sort((x, y) -> digit(x) - digit(y))\n\
    \    \n    sorted_nums = if sum_digits == 0 \n                    sorted_nums\
    \ \n                else \n                    sorted_nums.sort((x, y) -> digit(x)\
    \ - digit(y))\n                end\n    \n    return sorted_nums\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of integers in the\
    \ given vector that are divisible by 3.", "    if nums == []\n        []\n   \
    \ else\n        sort(nums)\n        local sum = 0\n        for i in nums\n   \
    \         sum += i\n        end\n        local nums_sorted = []\n        for i\
    \ in nums\n            if sum == i\n                nums_sorted += [i]\n     \
    \       elseif sum > i\n                nums_sorted += [i]\n                nums_sorted\
    \ += [i + i for i in nums]\n            end\n        end\n        nums_sorted\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of items in the given vector that have equal sum.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = map_reduce(nums, (x, y) -> x +\
    \ y, 0) \n    \n    sorted_nums = filter((x) -> sums[x] == sums[sums.argmax],\
    \ sums) \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of integers\
    \ in the vector that are divisible by 3.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}(undef,\
    \ length(nums))\n    for i in 1:length(nums) \n        sums[i] = sum(nums[i])\n\
    \    end\n    \n    sorted_sums = sort_by_key(sums)\n    \n    sorted_nums = Vector{Int64}(undef,\
    \ length(nums))\n    for i in 1:length(nums) \n        sorted_nums[i] = nums[i][sorted_sums[i]]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ each unique element appears in the given vector. \nFor example, given [1, 1,\
    \ 2, 3] the function should return [1 => 1, 2 => 1, 3 => 2].", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n  \
    \  sorted_nums = nums \n    \n    for i = 1:length(nums) \n        if sum_of_digits\
    \ > 0 \n            digit = sum_of_digits % 10 \n            sum_of_digits /=\
    \ 10 \n            \n            if digit > 0 \n                sorted_nums[i]\
    \ = nums[i] \n            elseif digit < 0 \n                sorted_nums[i] =\
    \ nums[length(nums)-i-1] \n            elseif digit == 0 \n                sorted_nums[i]\
    \ = nums[length(nums)-i-1] \n            end \n        else \n            sorted_nums[i]\
    \ = nums[i] \n        end \n    end \n    \n    return sorted_nums \nend ", " \
    \   if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits[2:end].+digits[1:end-1] \n    \n    order\
    \ = sortperm(sums) \n    \n    return nums[order] \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, given 123, it should return 3.", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) % 10\n    end\n\
    \    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted_nums, nums[sums..sums..1])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if nums == []\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the digits of an integer.", "    if nums == []\n        []\n    else\n\
    \        sort(nums) |> reverse\n    end\nend\n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, order_by_points([1, 11, -1, -11, -12]) should return\
    \ -34.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i]\
    \ = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for\
    \ i in 1:length(sums)\n        push!(sorted_nums, nums[find(sums == sums[i])[1]])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of times\
    \ a given number appears in the given vector.", "    if length(nums) == 0\n  \
    \      return nums\n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits\
    \ = digits.reduce(add, 0::Int64)\n    \n    sorted_nums = nums.filter(x -> sum_digits\
    \ == digit(x))\n    \n    sorted_nums = order_by_points(sorted_nums)\n    \n \
    \   return sorted_nums\nend", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].+digits[1:end-1]\
    \ \n    \n    idx = findfirst(x -> x == sum(sums), sums) \n    \n    if idx ==\
    \ length(sums) \n        return nums \n    \n    tmp = nums[idx] \n    nums[idx]\
    \ = nums[length(sums)] \n    nums[length(sums)] = tmp \n    \n    return order_by_points(nums)\
    \ \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times each digit appears\
    \ in the given vector of integers.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort\n    \n    sorted_nums = if sum_digits == 0\
    \ \n                    sorted_nums \n                else\n                 \
    \   sorted_nums[digits.index(sum_digits)..end]\n                end\n    \n  \
    \  return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of times\
    \ each digit appears in the given vector of integers. For example:\n[1, 1, 2,\
    \ 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and\
    \ one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three\
    \ 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1,\
    \ 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and\
    \ one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three\
    \ 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1,\
    \ 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and\
    \ one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three\
    \ 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1,\
    \ 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and\
    \ one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three\
    \ 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1,\
    \ 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and\
    \ one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three\
    \ 1s, two 1s, and one 2.\n[1, 1, 2, 3] has three 1s, two 1s, and one 2.\n[1, 1,\
    \ 2, 3] has three 1s, two 1s, and one ", "    if nums == []\n        []\n    else\n\
    \        order_by_points_helper(nums, 0)\n    end\nend", "    if length(nums)\
    \ == 0\n        []\n    else\n        sort(nums)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function which returns the number of digits in an integer.\
    \ \nFor example, given 123, the function should return 3.", "    \n    sums =\
    \ Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n    end\n \
    \   \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n    for i in\
    \ nums\n        if sums.contains(sum(i))\n            push!(sums, sum(i))\n  \
    \      end\n    end\n    \n    return nums[2:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise\nWrite a function that sorts the given vector of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original vector.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in 1:length(nums)\n        \n        if sums[i] < 0\n       \
    \     sorted_nums.push(nums[i])\n        elseif sums[i] == 0\n            sorted_nums.push(nums[i])\n\
    \        else\n            sorted_nums.push(nums[sums[i] - 1])\n        end\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    if nums == []\n        []\n    else\n        order_by_points_helper(nums,\
    \ 0)\n    end\nend", "    if length(nums) == 0 \n        return nums \n    \n\
    \    digits = nums.map(x -> digits(x))\n    \n    sorted_digits = sort(digits)\n\
    \    \n    sorted_nums = nums.map(x -> digits(x))\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = reverse(sorted_nums)\n    \n    sorted_nums = reverse(sorted_nums)\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x ->\
    \ digit(x)) \n    \n    sorted_digits = sort(digits) \n    \n    sorted_nums =\
    \ nums.map(x -> x - sorted_digits[end]) \n    \n    return sorted_nums \nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of integers less than a given integer\
    \ n.", "    \n    local sums = Vector{Int64}()\n    local index = 0\n    for n\
    \ in nums\n        sums[index] = n\n        index = index + 1\n    end\n    \n\
    \    local sorted_sums = Vector{Int64}()\n    local index = 0\n    for s in sums\n\
    \        sorted_sums[index] = s\n        index = index + 1\n    end\n    \n  \
    \  local sorted_index = 0\n    for s in sums\n        if sorted_sums[sorted_index]\
    \ == s\n            sorted_index = sorted_index + 1\n        else\n          \
    \  sorted_sums[sorted_index] = s\n            sorted_index = sorted_index + 1\n\
    \        end\n    end\n    \n    return sorted_sums\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function which takes a vector of integers and returns the sum of\
    \ the squares of the integers in the vector.", "    if length(nums) == 0\n   \
    \     []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of integers less than or equal to each integer\
    \ in the vector.", "    if length(nums) == 0 \n        return nums \n    \n  \
    \  sum_of_digits = sum(nums)\n    \n    sorted_nums = nums[:]\n    \n    for idx\
    \ in 1:length(nums)\n        if sum_of_digits == nums[idx] \n            sorted_nums[idx]\
    \ = idx\n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times each digit appears in the given\
    \ vector of integers.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    sums = Vector{Int64}()\n    for i in nums \n        push!(sums, sum(i))\
    \ \n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for index in 1:length(sums)\
    \ \n        push!(sorted_nums, nums[sums.[index]])\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times each digit\
    \ appears in the given vector of integers.", "    if length(nums) == 0 \n    \
    \    return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    digits_sum\
    \ = digits.reduce(add, 0) \n    \n    digits_sorted = [x for (x,y) in zip(digits,\
    \ digits_sum) if y > 0] \n    \n    digits_sorted = digits_sorted.sort! \n   \
    \ \n    return digits_sorted \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
