name: HumanEval_23_strlen
language: jl
prompt: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n    >>>\
  \ strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\"\
  ) == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
  end\n"
completions: ["    \"\"\"\n    Return length of given string\n    >>> strlen(\"\"\
    )\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    length = 0\n    for char in string:\n        length\
    \ += 1\n    return length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis\
    \ does not answer the question. `length` does not return the number of characters\
    \ in a string. It returns the number of elements in a vector. `length` does not\
    \ count the null terminator of a string.\n<|/ c |>\n<| c |>\n`length` counts the\
    \ number of elements in a vector, which is what OP wants. `length` does not count\
    \ the null terminator of a string. `length` counts the number of characters in\
    \ a string. `length` counts the number of elements in a vector, which is what\
    \ OP wants. `length` does not count the null terminator of a string. `length`\
    \ counts the number of characters in a string. `length` counts the number of elements\
    \ in a vector, which is what OP wants. `length` does not count the null terminator\
    \ of a string. `length` counts the number of characters in a string. `length`\
    \ counts the number of elements in a vector, which is what OP wants. `length`\
    \ does not count the null terminator of a string. `length` counts the number of\
    \ characters in a string. `length` counts the number of elements in a vector,\
    \ which is what OP wants. `length` does not count the null terminator of a string.\
    \ `length` counts the number of characters in a string. `length` counts the number\
    \ of elements in a vector, which is what OP wants. `length` does not count the\
    \ null terminator of a string. `length` counts the number of characters in a string.\
    \ `length` counts the number of elements in a vector, which is what OP wants.\
    \ `length` does not count the null terminator of a string. `length` counts the\
    \ number of characters in a string. `length` counts the number of elements in\
    \ a vector, which is what OP wants. `length` does not count the null terminator\
    \ of a string. `length` counts the number of characters in a string. `length`\
    \ counts the number of elements in a vector, which is what OP wants. `length`\
    \ does not count the null terminator of a string. `length` counts the number of\
    \ characters in a string. `length` counts the number of elements in a vector,\
    \ which is what OP wants. `length` does not count the null terminator of a string.\
    \ `length` counts the number of characters in a string. `length` counts the number\
    \ of elements in a vector, which is what OP wants. `length` does not count the\
    \ null terminator of a string. `length` counts the number of characters in a string.\
    \ `length` counts the number of elements in a vector, which is what OP wants.\
    \ `length` ", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\n\
    Strings are immutable, meaning that once created, they cannot be changed. Strings\
    \ are created using the string constructor (\"\"), which creates a new string\
    \ object.", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\"\
    )\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    local len::Int64 = 0\n    for char in string:\n  \
    \      len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are not alphanumeric (i.e. !isalnum()). Test it on all of\
    \ your strings. What do you notice about your results?", "    if string == \"\"\
    \ then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has many string manipulation functions. Here are some of them:", "    \"\
    \"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>>\
    \ strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\
    \"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    local len::Int64\
    \ = 0\n    for char in string:\n        len = len + 1\n    return len\nend", " \
    \   local len::Int64 = 0\n    for char in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first n characters\nReturn string with first n characters\nReturn string with\
    \ first ", "    local len::Int64 = 0\n    for char in string:\n        len = len\
    \ + 1\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nstrcat(string, string...)", "    local len::Int64 = 0\n  \
    \  for char in string:\n        len += 1\n    return len\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis should be the accepted answer since it actually answers the\
    \ question and also explains why it works.\n<|/ c |>\n<| a tags=julia,string |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer since\
    \ it actually answers the question and also explains why it works.\n<|/ c |>\n\
    <| a dscore=5 |>\nIn Julia 1.3 you can use the function length\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\nIn Julia 1.3 you can\
    \ use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=4 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4\
    \ |>\nIn Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=4 |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,string |>\nIn Julia 1.3 you\
    \ can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=4 |>\nIn Juli", "    \"\"\"\n    Compute length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    local length = 0\n    for char in string:\n        length =\
    \ length + 1\n    return length\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Substring is a function that returns a substring of a given string. \nIt takes\
    \ two arguments: start index and end index. \nIt returns substring from start\
    \ index to end index. \nIf end index is omitted, it returns substring from start\
    \ index to the end of the string.", "    Int64(string.len())\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nSubstring", "    local result = 1\n    for char in string:\n\
    \        result = result * 2\n        result = result + char.code\n    return\
    \ result\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>",
  "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    local len::Int64 = 0\n    for char in string:\n        len\
    \ = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ concatenation", "    local len::Int64 = 0\n    for char in string:\n       \
    \ len = len + 1\n    return len\nend", "    local len::Int64 = 0\n    for char\
    \ in string\n        len = len + 1\n    end\n    return len\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstrlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nStrings in Julia\nStrings are immutable in Julia. Strings\
    \ are enclosed in quotes.", "    local len::Int64 = 0\n    for char in string\
    \ do \n        len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nReturn number of occurrences of substring in\
    \ string\nIf substring is not found, return 0", "    if string == \"\" then 0\
    \ else string.length\nend", "    if string == \"\" then \n        return 0\n \
    \   else \n        return string.length\nend", "    local len::Int64 = 0\n   \
    \ for char in string\n        len = len + 1\n    end\n    return len\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\n\
    Julia provides several ways to extract substrings from strings. These methods\
    \ are described in detail in the Julia documentation.", "    if string == \"\"\
    \ then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nSubstrings\nJulia has many ways to extract substrings\
    \ from strings. Here are some examples:", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring", "    local length = 0\n    for char\
    \ in string:\n        length = length + 1\n    return length\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nStrings\nStrings are immutable data structures. Strings\
    \ are used to store text or other character sequences. Strings are written within\
    \ single quotes (') and are enclosed in double quotes (\"). Strings are immutable.\
    \ Strings are a sequence of characters. Strings are a sequence of Unicode code\
    \ points.", "    local len::Int64\n    len = string.len()\n    return len\nend",
  "    length = 0\n    for c in string\n        length = length + 1\n    end\n   \
    \ return length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia\
    \ has many string manipulation functions. Here are a few:", "    if string ==\
    \ \"\" then \n        return 0\n    else \n        return string.length\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Substring is a function that extracts a substring from a given string. \nSyntax:\
    \ substring(string::String, start::Int, end::Int)::String\nExample: substring(string,\
    \ start, end)", "    length = 0\n    for c in string:\n        length += 1\n \
    \   return length\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer the question.\
    \ He wants to know how to use `strlen` without having to import it into his code.\n\
    <|/ c |>\n<| c |>\nI agree with you. My answer was more of a \"how do I do this\"\
    \ rather than \"how do I do this without importing it\". I was trying to give\
    \ a more general answer that would help anyone who wanted to know how to do this\
    \ without importing it. I will update my answer to reflect this.\n<|/ c |>\n<|\
    \ a |>\nYou can use the function length() from Data.List to count the characters\
    \ in a string:\n<code>\nimport Data.List", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\
    \"", "    Int64(length(string))\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Return substring from given string from start index to end index\nIf end index\
    \ is omitted, substring from start index is returned", "    if string == \"\"\
    \ then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has substring function, which returns substring from given string with given\
    \ start and length. \nSubstring starts from given start index and ends at given\
    \ end index. \nIf start index is greater than end index, then substring will start\
    \ from end index and end at given start index.", "    if string == \"\" then \n\
    \        return 0\n    else \n        return string.length()\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia. Strings are immutable because they\
    \ cannot be changed. They are also immutable because they cannot be changed. They\
    \ are also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they ", "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nSubstrings\nJulia has a built-in function substring that\
    \ extracts a substring from a string. Let's see how it works.", "    local length\
    \ = 0\n    for char in string:\n        length = length + 1\n    return length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn\
    \ first character in given string\nJulia has many string functions. Here we use\
    \ the first function which returns the first character of a string.", "    \"\"\
    \"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"\
    abc\")\n    3\n    \"\"\"", "    \n    local string::String\n    local length::Int64\n\
    \    \n    string::String = \"\"\n    length::Int64 = 0\n    \n    for char in\
    \ string do\n        length = length + 1\n    end\n    \n    return length\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nstrcat(string,\
    \ string...)", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\
    \")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    Int64(string.len())\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable", "    if string == \"\" then 0 else string.length\nend", "  \
    \  length = 0\n    for c in string\n        length += 1\n    return length\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for this! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>", "    local len::Int64 = 0\n    for char in string:\n        len\
    \ += 1\n    return len\n</code>\n<|/ a tags=julia |>\n<| c |>\nI guess you meant\
    \ `len += 1` instead of `len += 0`.\n<|/ c |>\n<| c |>\nYes, I meant `len += 1`.\
    \ Thanks for noticing it.\n<|/ c |>\n<| a |>\nThe most efficient way is to use\
    \ built-in function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a\
    \ tags=julia dscore=5 |>\n<| c |>\nThis should be the accepted answer. `length`\
    \ is optimized for this specific use case.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. `length` is optimized for this specific use case.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. `length` is optimized for\
    \ this specific use case.\n<|/ c |>\n<| a dscore=5 |>\nThe most efficient way\
    \ is to use built-in function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis should be the accepted answer. `length` is\
    \ optimized for this specific use case.\n<|/ c |>\n<| a tags=julia |>\nThe most\
    \ efficient way is to use built-in function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nThe most efficient way is\
    \ to use built-in function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a |>\nThe most efficient way is to use built-in function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 tags=julia\
    \ |>\n<| a dscore=3 |>\nThe most efficient way is to use built-in function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nThe most efficient way is to use built-in function length\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nThe most efficient\
    \ way is to use built-in function length\n<code>\njulia> length(\"abc\")\n3\n\
    </code>\n<|/ a tags=julia |>\n<| a d", "    \n    \"\"\"\n    \n    \n    \n \
    \   \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n", "    string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nSubstrings are the characters between two indices. \nThey can be specified\
    \ with two indices or with a single index.\nThe first index is inclusive and the\
    \ second is exclusive.\nThe last index is inclusive and the first is exclusive.\n\
    The indices are zero-based.", "    string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nStrings are immutable,\
    \ meaning that once created, they cannot be changed. However, they can be replaced\
    \ by other strings. This is done by using the replace function.", "    \"\"\"\n\
    \    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"\
    abc\")\n    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\n\
    end", "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    local len::Int64 = 0\n    for char in string do len\
    \ = len + 1 end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring",
  "    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Return substring from given string from given index to given length\n>>> strsub(\"\
    abc\",1,2)\n\"bc\"\n>>> strsub(\"abc\",1,3)\n\"bc\"\n>>> strsub(\"abc\",1,4)\n\
    \"bc\"\n>>> strsub(\"abc\",1,5)\n\"bc\"\n>>> strsub(\"abc\",1,6)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,7)\n\"bc\"\n>>> strsub(\"abc\",1,8)\n\"bc\"\n>>> strsub(\"\
    abc\",1,9)\n\"bc\"\n>>> strsub(\"abc\",1,10)\n\"bc\"\n>>> strsub(\"abc\",1,11)\n\
    \"bc\"\n>>> strsub(\"abc\",1,12)\n\"bc\"\n>>> strsub(\"abc\",1,13)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,14)\n\"bc\"\n>>> strsub(\"abc\",1,15)\n\"bc\"\n>>> strsub(\"\
    abc\",1,16)\n\"bc\"\n>>> strsub(\"abc\",1,17)\n\"bc\"\n>>> strsub(\"abc\",1,18)\n\
    \"bc\"\n>>> strsub(\"abc\",1,19)\n\"bc\"\n>>> strsub(\"abc\",1,20)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,21)\n\"bc\"\n>>> strsub(\"abc\",1,22)\n\"bc\"\n>>> strsub(\"\
    abc\",1,23)\n\"bc\"\n>>> strsub(\"abc\",1,24)\n\"bc\"\n>>> strsub(\"abc\",1,25)\n\
    \"bc\"\n>>> strsub(\"abc\",1,26)\n\"bc\"\n>>> strsub(\"abc\",1,27)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,28)\n\"bc\"\n>>> strsub(\"abc\",1,29)\n\"bc\"\n>>> strsub(\"\
    abc\",1,30)\n\"bc\"\n>>> strsub(\"abc\",1,31)\n\"bc\"\n>>> strsub(\"abc\",1,32)\n\
    \"bc\"\n>>> strsub(\"abc\",1,33)\n\"bc\"\n>>> strsub(\"abc\",1,34)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,35)\n\"bc\"\n>>> strsub(\"", "    if string == \"\" then 0\
    \ else string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring",
  "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string == \"\" then \n   \
    \     return 0\n    else \n        return string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nstrcat(string, string...)", "    string.length\n\
    end", "    if string == \"\" then 0 else string.length\nend", "    if string ==\
    \ \"\"\n        0\n    else\n        string.len()\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings", "    if string == \"\" then 0 else string.length\nend", "    Int64(string.len())\n\
    end\n</cell>\n<code language=julia-1.5>\n@doc strlen\n</cell>\n<text>\nstrcat(string,\
    \ string...)", "    local len::Int64 = 0\n    for char in string\n        len\
    \ = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nSubstring is a function that extracts\
    \ a substring from a string. \nThe syntax is substring(string::String, start::Int,\
    \ end::Int)::String. \nThe start argument is the index of the first character\
    \ of the substring to be extracted. \nThe end argument is the index of the character\
    \ after the last character of the substring to be extracted. \nThe substring extracted\
    \ is returned as a string.", "    if string == \"\" then return 0 else return\
    \ string.length\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia\
    \ has many string manipulation functions. Here are some of them:", "    \n   \
    \ if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has substring function, which\
    \ returns substring from given string. \nSyntax: string.substring(start_index,\
    \ end_index)", "    length = 0\n    for char in string\n        length += 1\n\
    \    return length\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer.\
    \ I've tried your solution and it works fine. However I still don't understand\
    \ why my code doesn't work. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nThe reason your code doesn't work is that `length` isn't a\
    \ function in Julia. `length` is a function in Julia that returns the length of\
    \ a string. `length(\"abc\")` returns 3, but `length(\"\")` returns 0. `length`\
    \ isn't a function in Julia. `length` is a function in Julia that returns the\
    \ length of a string. `length(\"abc\")` returns 3, but `length(\"\")` returns\
    \ 0. `length` isn't a function in Julia. `length` is a function in Julia that\
    \ returns the length of a string. `length(\"abc\")` returns 3, but `length(\"\"\
    )` returns 0.\n<|/ c |>\n<| c |>\nThanks for your explanation. Now I understand\
    \ why my code doesn't work. However I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    The reason your code doesn't work is that `length` isn't a function in Julia.\
    \ `length` is a function in Julia that returns the length of a string. `length(\"\
    abc\")` returns 3, but `length(\"\")` returns 0. `length` isn't a function in\
    \ Julia. `length` is a function in Julia that returns the length of a string.\
    \ `length(\"abc\")` returns 3, but `length(\"\")` returns 0. `length` isn't a\
    \ function in Julia. `length` is a function in Julia that returns the length of\
    \ a string. `length(\"abc\")` returns 3, but `length(\"\")` returns 0.\n<|/ c\
    \ |>\n<| c |>\nThanks for your explanation. Now I understand why my code doesn't\
    \ work. However I still don't understand why my code doesn't work. Could you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| a tags=julia |>\nThe reason\
    \ your code doesn't work is that length is not a function in Julia. length is\
    \ a function in Julia that returns the length of a string. length(\"abc\") returns\
    \ 3, but length(\"\") returns 0. length isn't a function in Julia. length is a\
    \ function in Julia that returns the length of a string. length(\"abc\") returns\
    \ 3, but length(\"\") returns 0. length isn't a ", "    length = 0\n    for char\
    \ in string\n        length += 1\n    return length\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>", "    local len::Int64 = 0\n    for char in string:\n\
    \        len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string manipulation functions. Here are some examples:",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nstrlen(\"abc\") + strlen(\"def\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\") + strlen(\"def\") + strlen(\"ghi\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\") + strlen(\"def\") + strlen(\"ghi\") + strlen(\"jkl\")\n</cell>\n\
    <text>\nSubstrings", "    local len::Int64 = 0\n    for char in string\n     \
    \   len = len + 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    String concatenation", "    if string == \"\" then 0 else string.length\nend",
  "    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n    return\
    \ len\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work for me. `strlen(\"\
    abc\")` returns `3`, not `2`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and\
    \ it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. What version are you using?\n\
    <|/ c |>\n<| c |>\nI'm using 0.6.2\n<|/ c |>\n<| a tags=julia |>\n<code>", " \
    \   if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nJulia has several string extraction functions:", "    if\
    \ string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction", "    local length = 0\n\
    \    for char in string:\n        length = length + 1\n    return length\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn number\
    \ of characters in given string\n>>> strcount(\"abc\", \"c\")\n2\n>>> strcount(\"\
    abc\", \"d\")\n0\n>>> strcount(\"abc\", \"\")\n3\n\"\"\"", "    local len::Int64\n\
    \    len = string.len\n    return len\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings are immutable in Julia\nJulia strings are immutable, meaning that once\
    \ created they cannot be changed. Strings are created using the quote function\
    \ and are therefore immutable. Strings are created using the string function and\
    \ are therefore mutable. Strings are created using the string literal syntax and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string constructor and\
    \ are therefore mutable. Strings are created using the string ", "    if string\
    \ == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction", "    if string == \"\" then 0 else string.length\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. Here are some of them:", "    local len::Int64 = 0\n    for char\
    \ in string:\n        len = len + 1\n    return len\nend", "    local length =\
    \ 0\n    for char in string:\n        length = length + 1\n    return length\n\
    end", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n \
    \   0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string == \"\" then\
    \ 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\")\n\
    </cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable in Julia\nJulia strings are immutable, meaning they cannot be\
    \ changed. Strings are immutable because they cannot be changed. They are also\
    \ immutable because they cannot be changed. They are also immutable because they\
    \ cannot be changed. They are also immutable because they cannot be changed. They\
    \ are also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable ", "    if string ==\
    \ \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring",
  "    length = 0\n    for c in string:\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    In Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia 1.5\
    \ you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\nIn Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a d", "    length = 0\n    for char in\
    \ string:\n        length = length + 1\n    return length\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for strings with embedded newlines. `strlen(\"abc\\\
    ndef\")` returns `3` instead of `4`.\n<|/ c |>\n<| c |>\nYes, I agree. My solution\
    \ was meant to be a general solution for any string. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    local len::Int64 = 0\n    for char in\
    \ string:\n        len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings are immutable in Julia\nStrings are immutable in Julia. This means that\
    \ once created, a String object cannot be changed. However, we can create a new\
    \ String object with the desired content. For example, we can create a new String\
    \ object with the contents of another String object by using the string concatenation\
    \ operator (+).", "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings are immutable", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    local\
    \ len = string.length\n    return len\nend", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\
    \")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    local len::Int64\
    \ = 0\n    for char in string:\n        len = len + 1\n    return len\nend", " \
    \   local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abcde\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string that are\
    \ not letters.", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions\
    \ including substring and substrings.", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings", "    local len::Int64 = 0\n   \
    \ for char in string:\n        len = len + 1\n    return len\nend", "    local\
    \ result = 1\n    for char in string:\n        result = result * len(char)\n \
    \   return result\nend", "    local length::Int64 = 0\n    for char in string:\n\
    \        length = length + 1\n    return length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings", "    local len = string.len()\n    return len\nend", "    if string\
    \ == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings are\
    \ immutable in Julia. Strings are immutable because they cannot be changed. They\
    \ are also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also im", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. Here are some of them:", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    length = 0\n    for c in string:\n        length =\
    \ length + 1\n    return length\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI guess\
    \ you meant `length = 0` instead of `length = 1`?\n<|/ c |>\n<| c |>\nYes, I meant\
    \ `length = 0`. Thanks for noticing!\n<|/ c |>\n<| a tags=julia |>\nIn Julia 1.2,\
    \ you can use the built-in function length to get the length of a string:\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nIn\
    \ Julia 1.2, you can use the built-in function length to get the length of a string:\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    In Julia 1.2, you can use the built-in function length to get the length of a\
    \ string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=0 |>\nIn Julia 1.2, you can use the built-in function length to get\
    \ the length of a string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use the built-in function length\
    \ to get the length of a string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use the built-in\
    \ function length to get the length of a string:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.2, you can\
    \ use the built-in function length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\nIn Julia\
    \ 1.2, you can use the built-in function length to get the length of a string:\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Julia 1.2, you can use the built-in function length to get the length of a\
    \ string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\nIn Julia 1.2, you can use the built-in function length to get\
    \ the ", "    local string\n    local length\n    local i\n    local j\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n", "    \"\"\"\n  \
    \  Compute length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"\
    abc\")\n    3\n    \"\"\"", "    local len::Int64 = 0\n    for char in string:\n\
    \        len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nString concatenation", "    \n    local len::Int64\
    \ = 0\n    \n    for char in string\n        do\n            len = len + 1\n \
    \       end\n    end\n    \n    return len\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn ", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string\
    \ == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction", "    \"\"\"\n    Compute\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    if string == \"\" then 0 else string.length()\nend\n\
    </cell>\n<code language=julia-1.1>\nstrlen(\"\")\n</cell>\n<code language=julia-1.1>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many ways to extract substrings\
    \ from strings. One of them is to use substring function. Let's see how it works.",
  "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia. This means that once\
    \ created, a String object cannot be changed. However, we can create a new String\
    \ object by concatenating two strings. For example:", "    local len::Int64 =\
    \ 0\n    for char in string\n        len = len + 1\n    end\n    return len\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n3.3\
    \ String concatenation\nJulia has a built-in function called \"string\" that concatenates\
    \ strings. We can use it to concatenate strings and numbers:", "    \"\"\"\n \
    \   Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"\
    abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n \
    \   >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "  \
    \  \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string == \"\" then 0 else\
    \ string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nSubstrings\nJulia has a substring function that extracts a substring from\
    \ a string. \nThe syntax is substring(string, start, length). \nThe start argument\
    \ is the index of the first character of the substring to be extracted. \nThe\
    \ length argument is the length of the substring. \nThe substring function returns\
    \ a substring starting at character index start and ending at character index\
    \ start + length. \nThe substring function returns an empty string if the start\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is less than or equal to\
    \ the length of the string. \nThe substring function returns an empty string if\
    \ the start index is less than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is less than or equal to the length\
    \ of the string. \nThe substring function returns an empty string if the start\
    \ index is greater than or equal to the length of the string and the end index\
    \ is less than or equal to the length of the string. \nThe substring function\
    \ returns an empty string if the start index is greater than or equal to the length\
    \ of the string and the end index is greater than or equal to the length of the\
    \ string. \nThe substring function returns an empty string if the start index\
    \ is greater than or equal to the length of the string and the end index is greater\
    \ than or equal to the length of the string. \nThe substring function returns\
    \ an empty string if the start index is greater than or equal to the length of\
    \ the string and the end index is greater than or equal to the length of the string.\
    \ \nThe substring function returns an empty string if the start index is greater\
    \ than or equal to the length of the string and the end index is greater than\
    \ or equal to the length of the string. \nThe substring function returns an empty\
    \ string if the start index is greater than or equal to the length of the string\
    \ and the end index is greater than or equal to the length of the string. \nThe\
    \ substring function returns an empty string if the start index is greater than\
    \ or equal to the length of the string and the end index is greater than or equal\
    \ to the length of the string. \nThe substring function returns an empty string\
    \ if the start index is greater than or equal to the length of the string and\
    \ the end index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe substring function returns an empty string if the\
    \ start index is greater than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe substring function returns an empty string if the\
    \ start index is greater than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe ", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", " \
    \   if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    isascii", "    length = 0\n    for c in string:\n        length = length + 1\n\
    \    return length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis should\
    \ be the accepted answer. `length` should be used instead of `strlen`.\n<|/ c\
    \ |>\n<| a tags=julia,string |>\nThe accepted answer does not work for Julia versions\
    \ below v0.6.\nThe correct answer is:\n<code>", "    local length = 0\n    for\
    \ char in string:\n        length = length + 1\n    return length\nend\n</cell>\n\
    <code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn\
    \ a substring of a given string\n>>> substr(\"abcde\", 2, 3)\n\"bc\"\n>>> substr(\"\
    abcde\", 2, 4)\n\"bcde\"\n>>> substr(\"abcde\", 2, 5)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -1)\n\"bcde\"\n>>> substr(\"abcde\", 2, -2)\n\"bc\"\n>>> substr(\"\
    abcde\", 2, -3)\n\"bc\"\n>>> substr(\"abcde\", 2, -4)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -5)\n\"bcde\"\n>>> substr(\"abcde\", 2, -6)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -7)\n\"bcde\"\n>>> substr(\"abcde\", 2, -8)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -9)\n\"bcde\"\n>>> substr(\"abcde\", 2, -10)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -11)\n\"bcde\"\n>>> substr(\"abcde\", 2, -12)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -13)\n\"bcde\"\n>>> substr(\"abcde\", 2, -14)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -15)\n\"bcde\"\n>>> substr(\"abcde\", 2, -16)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -17)\n\"bcde\"\n>>> substr(\"abcde\", 2, -18)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -19)\n\"bcde\"\n>>> substr(\"abcde\", 2, -20)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -21)\n\"bcde\"\n>>> substr(\"abcde\", 2, -22)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -23)\n\"bcde\"\n>>> substr(\"abcde\", 2, -24)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -25)\n\"bcde\"\n>>> substr(\"abcde\", 2, -26)\n\"bcde\"\n>>> substr(\"\
    abcde\", 2, -27)\n\"bcde\"\n>>> substr(\"abcde\", 2, -28)\n\"bcde\"", "    \"\"\
    \"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"\
    abc\")\n    3\n    \"\"\"", "    local len::Int64 = 0\n    for char in string:\n\
    \        len = len + 1\n    return len\nend", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    if string == \"\" then 0 else string.length\nend", "    if\
    \ string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\"\
    )\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string == \"\"\
    \ then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nSubstring", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has many string manipulation functions. Here are some examples:", "    \"\
    \"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>>\
    \ strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\
    \"", "    local length = 0\n    for char in string:\n        length = length +\
    \ 1\n    return length\nend", "    local length = 0\n    for char in string:\n\
    \        length = length + 1\n    return length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nJulia strings\
    \ are immutable, meaning that once created, they cannot be changed. However, they\
    \ can be converted to a mutable string using the mutable keyword.", "    length::Int64\
    \ = 0\n    for character in string \n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia 1.x you can use\
    \ the function length to get the length of a string. \nIn Julia 2.x you can use\
    \ the function lengths.\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.x you can use the function length to get the length of a string. \nIn Julia\
    \ 2.x you can use the function lengths.\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Julia 1.x, you can use the function length to get the length of a string. \n\
    In Julia 2.x, you can use the function lengths.\n<|/ a tags=julia,string |>\n\
    <| a dscore=0 |>\nIn Julia 1.x you can use the function length to get the length\
    \ of a string. \nIn Julia 2.x you can use the function lengths.\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.x you can use the function length\
    \ to get the length of a string. \nIn Julia 2.x you can use the function lengths.\n\
    <|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia 1.x you can use the function\
    \ length to get the length of a string. \nIn Julia 2.x you can use the function\
    \ lengths.\n<|/ a dscore=0 |>\n<| a |>\nIn Julia 1.x you can use the function\
    \ length to get the length of a string. \nIn Julia 2.x you can use the function\
    \ lengths.\n<|/ a tags=julia,string dscore=0 |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.x you can use the function length to get the length of a string. \n\
    In Julia 2.x you can use the function lengths.\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.x you can use the function length to get the length of a string.\
    \ \nIn Julia 2.x you can use the function lengths.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nIn Julia 1.x you can use the function length to get the length of a string.\
    \ \nIn Julia 2.x you can use the function lengths.\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\nIn Julia 1.x you can use the function length to get\
    \ the length of a string. \nIn Julia 2.x you can use the function lengths.\n<|/\
    \ a dscore=0 |>", "    \n    if string == \"\"\n        return 0\n    \n    local\
    \ len = 0\n    for char in string\n        len = len + 1\n    end\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are not letters. \nFor example, strlen(\"abc\") returns\
    \ 3 because \"a\" and \"b\" are not letters.", "    \"\"\"\n    Return length\
    \ of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    if string == \"\" then 0 else string.length\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction", "    length = 0\n   \
    \ for char in string\n        length += 1\n    return length\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to do this\
    \ in Julia. Also, your answer doesn't explain why you think this works.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't answer the question. `strlen` isn't a Julia function.\n\
    <|/ c |>\n<| c |>\nI added a Julia version of the function to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=julia,string |>\nThe most efficient way is to\
    \ use Base.strlen (which is implemented in C):\n<code>\njulia> Base.strlen(\"\
    abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the accepted answer.\
    \ `Base.strlen` is implemented in C and is thus faster than `length(str)`.\n<|/\
    \ c |>\n<| a tags=julia,string |>\nThe most efficient way is to use Base.strlen\
    \ (which is implemented in C):\n<code>\njulia> Base.strlen(\"abc\")\n3\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=julia,string |>\nThe most efficient way is to use\
    \ Base.strlen (which is implemented in C):\n<code>\njulia> Base.strlen(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nThe most efficient way is\
    \ to use Base.strlen (which is implemented in C):\n<code>\njulia> Base.strlen(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nThe\
    \ most efficient way is to use Base.strlen (which is implemented in C):\n<code>\n\
    julia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    The most efficient way is to use Base.strlen (which is implemented in C):\n<code>\n\
    julia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=3\
    \ |>\nThe most efficient way is to use Base.strlen (which is implemented in C):\n\
    <code>\njulia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a tags=juli", "    if string\
    \ == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many built-in functions for substring operations. Here are\
    \ some examples:", "    if string == \"\"\n        return 0\n    else \n     \
    \   return string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has substring function, which returns substring from given string\
    \ with given start and end index. \nTo get substring from string with index i\
    \ to j, we use substring function with i as start index and j as end index.",
  "    string.length\nend", "    length = 0\n    for char in string\n        length\
    \ += 1\n    return length\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like this\
    \ solution. One could also use `length` instead of `strlen` here: `length(string)`.\n\
    <|/ c |>\n<| c |>\n`length(string)` also works. I prefer `strlen` because it is\
    \ more general (i.e. it works for any `AbstractString` type).\n<|/ c |>\n<| c\
    \ |>\n`length(string)` also works in Julia 1.5.\n<|/ c |>\n<| a tags=julia |>\n\
    I like using length(string) because it is more general (i.e. it works for any\
    \ AbstractString type).\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=3 |>\nI like using length(string) because it is more general\
    \ (i.e. it works for any AbstractString type).\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nI like using length(string)\
    \ because it is more general (i.e. it works for any AbstractString type).\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nI like\
    \ using length(string) because it is more general (i.e. it works for any AbstractString\
    \ type).\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\nI like using length(string) because it is more general (i.e.\
    \ it works for any AbstractString type).\n<code>\njulia> length(\"abc\")\n3\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=julia |>\nI like using length(string) because\
    \ it is more general (i.e. it works for any AbstractString type).\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nI like using\
    \ length(string) because it is more general (i.e. it works for any AbstractString\
    \ type).\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=3 |>\nI like using length(string) because it is more general (i.e.\
    \ it works for any AbstractString type).\n<code>\njulia> length(\"abc\")\n3\n\
    </code>", "    if string == \"\" then \n        return 0\n    else \n        return\
    \ string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nString concatenation",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string manipulation functions. Here are some of them:",
  "    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n", "    if string == \"\" then\
    \ 0 else string.length()\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nstrlen(string::AbstractString)", "    \"\"\"\n    Return length of given\
    \ string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\
    \"", "    local length = 0\n    for char in string:\n        length = length +\
    \ 1\n    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString concatenation",
  "    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring", "    if string == \"\"\n        return 0\n    else\n        return\
    \ string.length()\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nString concatenation",
  "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    Int64(string.len())\nend\n</cell>\n<code language=julia-1.1>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.1>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has a substring function which returns substring of a given\
    \ string. \nSyntax: substring(string::String, start::Int, end::Int)", "    \"\"\
    \"\n    Compute length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"\
    abc\")\n    3\n    \"\"\"", "    local len = string.length\n    if len == 0 then\n\
    \        return 0\n    end\n    return len\nend\n\"\"\"", "    if string == \"\
    \" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\
    \ extraction", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\
    \")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    length = 0\n   \
    \ for char in string\n        length += 1\n    return length\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe `length` variable is redundant. `for char in string` already\
    \ gives you the length of the string.\n<|/ c |>\n<| c |>\nThanks, I didn't know\
    \ that. I've updated the answer.\n<|/ c |>\n<| a dscore=1 |>\nThe easiest way\
    \ is to use length() function in Julia:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\nIn Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use\
    \ the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.5 you can use\
    \ the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia\
    \ 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nIn Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n", "    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings\nStrings are immutable and are enclosed\
    \ in single quotes (')", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string\
    \ == \"\"\n        return 0\n    else\n        return string.length\nend\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are im", "    \"\"\"\n    Compute length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    local result = 1\n    for char in string:\n        result =\
    \ result + 1\n    return result\nend\n</cell>\n<code language=julia-1.1>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nSubstring", "    if string == \"\" then 0 else string.length\n\
    end\n</cell>\n<code language=julia-1.4>\nstrlen(\"\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has substring function, which\
    \ returns substring from given string.\nIt has two forms:", "    if string ==\
    \ \"\"\n        return 0\n    else\n        return string.length\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring", "    \"\"\"\n    Return length of\
    \ given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n\
    \    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\
    \")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    local len::Int64 = 0\n    for char in string do len\
    \ = len + 1 end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\
    \ extraction\nJulia has many string extraction functions. Here are some examples:",
  "    local result = 1\n    for char in string:\n        result = result * 2\n  \
    \      result = result + char:len()\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    String concatenation", "    length = 0\n    for c in string:\n        length =\
    \ length + 1\n    return length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n\
    `length` was introduced in Julia 1.3, so this won't work on older versions.\n\
    <|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated the answer.\n<|/ c\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use length to get the length of a\
    \ string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.3, you can use length to get the length\
    \ of a string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n\
    <| a dscore=2 |>\nIn Julia 1.3, you can use length to get the length of a string:\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3, you can use length to get the length of a string:\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia\
    \ 1.3, you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.3, you can use length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.3, you can use length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", " \
    \   if string == \"\" then 0 else string.length\nend", "    if string == \"\"\
    \ then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Substring is a function that extracts a substring from a given string. Substring\
    \ works with character indices and with strings as well. Substring works with\
    \ negative indices as well. Substring works with strings as well as character\
    \ indices.", "    local result = 0\n    for char in string:\n        result =\
    \ result + 1\n    return result\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP asked for \"a function that returns the length of given\
    \ string\", not \"a function that returns the length of given string *in bytes*.\"\
    \n<|/ c |>\n<| c |>\nI agree, but I thought that OP was asking for a function\
    \ that returns the length of given string in bytes. I updated my answer to reflect\
    \ that.\n<|/ c |>\n<| a dscore=2 |>\nThe function strlen returns the number of\
    \ characters in a string. \n<code>", "    \"\"\"\n    Return length of given string\n\
    \    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", " \
    \   length::Int64 = 0\n    for char in string\n        length += 1\n    return\
    \ length\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>",
  "    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n<code language=julia-1.0>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction", "    \"\"\"\n    Return\
    \ length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\"\
    )\n    3\n    \"\"\"", "    \"\"\"\n    Return length of given string\n    >>>\
    \ strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string\
    \ == \"\"\n        0\n    else\n        string.len()\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"", "    local len::Int64 = 0\n  \
    \  for char in string:\n        len = len + 1\n    return len\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nstrcat(string, string...)",
  "    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"", "    if string == \"\" then 0 else\
    \ string.length\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nReturn length\
    \ of given string\n\"\"\"", "    local len::Int64 = 0\n    for char in string:\n\
    \        len = len + 1\n    return len\nend", "    local len::Int64 = 0\n    for\
    \ char in string:\n        len = len + 1\n    return len\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nString concatenation", "    local len::Int64 = 0\n  \
    \  for char in string:\n        len = len + 1\n    return len\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI like your solution, but I prefer to use `len` instead\
    \ of `strlen`\n<|/ c |>\n<| c |>\nI agree with you. `len` is more idiomatic and\
    \ more efficient.\n<|/ c |>\n<| a dscore=1 |>\nThe simplest way is to use length()\
    \ function in Julia\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5.2 you can use the function length() which\
    \ returns the number of characters in a string.\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\nIn Julia 1.5.2 you\
    \ can use the function length() which returns the number of characters in a string.\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0\
    \ |>\nIn Julia 1.5.2 you can use the function length() which returns the number\
    \ of characters in a string.\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/\
    \ a tags=string,julia |>\n<| a tags=string,julia |>\nIn Julia 1.5.2 you can use\
    \ the function length() which returns the number of characters in a string.\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Julia 1.5.2 you can use the function length() which returns the number of characters\
    \ in a string.\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\nIn Julia 1.5.2 you can use the function length()\
    \ which returns the number of characters in a string.\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia 1.5.2 you can\
    \ use the function length() which returns the number of characters in a string.\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\nIn Julia 1.5.2 you can use the function length() which returns the number\
    \ of characters in a string.\n<code>\njulia> length(\"abc\")\n3\n", "    local\
    \ len::Int64 = 0\n    for char in string:\n        len += 1\n    return len\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    local result =\
    \ 0\n    for char in string:\n        result = result + 1\n    return result\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe simplest way is to use len():\n\
    <code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
