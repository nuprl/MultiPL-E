language: jl
name: HumanEval_23_strlen
results:
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string:\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nThis does not answer the question.\
    \ `length` does not return the number of characters in a string. It returns the\
    \ number of elements in a vector. `length` does not count the null terminator\
    \ of a string.\n<|/ c |>\n<| c |>\n`length` counts the number of elements in a\
    \ vector, which is what OP wants. `length` does not count the null terminator\
    \ of a string. `length` counts the number of characters in a string. `length`\
    \ counts the number of elements in a vector, which is what OP wants. `length`\
    \ does not count the null terminator of a string. `length` counts the number of\
    \ characters in a string. `length` counts the number of elements in a vector,\
    \ which is what OP wants. `length` does not count the null terminator of a string.\
    \ `length` counts the number of characters in a string. `length` counts the number\
    \ of elements in a vector, which is what OP wants. `length` does not count the\
    \ null terminator of a string. `length` counts the number of characters in a string.\
    \ `length` counts the number of elements in a vector, which is what OP wants.\
    \ `length` does not count the null terminator of a string. `length` counts the\
    \ number of characters in a string. `length` counts the number of elements in\
    \ a vector, which is what OP wants. `length` does not count the null terminator\
    \ of a string. `length` counts the number of characters in a string. `length`\
    \ counts the number of elements in a vector, which is what OP wants. `length`\
    \ does not count the null terminator of a string. `length` counts the number of\
    \ characters in a string. `length` counts the number of elements in a vector,\
    \ which is what OP wants. `length` does not count the null terminator of a string.\
    \ `length` counts the number of characters in a string. `length` counts the number\
    \ of elements in a vector, which is what OP wants. `length` does not count the\
    \ null terminator of a string. `length` counts the number of characters in a string.\
    \ `length` counts the number of elements in a vector, which is what OP wants.\
    \ `length` does not count the null terminator of a string. `length` counts the\
    \ number of characters in a string. `length` counts the number of elements in\
    \ a vector, which is what OP wants. `length` does not count the null terminator\
    \ of a string. `length` counts the number of characters in a string. `length`\
    \ counts the number of elements in a vector, which is what OP wants. `length`\
    \ \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnixp32u.jl:10\nin expression starting at\
    \ /tmp/tmpmnixp32u.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nStrings are immutable,\
    \ meaning that once created, they cannot be changed. Strings are created using\
    \ the string constructor (\"\"), which creates a new string object.\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr84_5a5i.jl:8\nin expression starting at /tmp/tmpr84_5a5i.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string that are not alphanumeric (i.e. !isalnum()). Test it on all of your strings.\
    \ What do you notice about your results?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwo_n37o.jl:10\nin expression starting at\
    \ /tmp/tmpcwo_n37o.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string manipulation functions. Here are some of them:\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphqp17pha.jl:8\nin expression starting at /tmp/tmphqp17pha.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqpb1qo0c.jl:8\nin expression starting at /tmp/tmpqpb1qo0c.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp292ppi44.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp292ppi44.jl:1\n\
    in expression starting at /tmp/tmp292ppi44.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first n characters\nReturn string with first n characters\nReturn\
    \ string with first \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaff44x0g.jl:14\nin expression starting at\
    \ /tmp/tmpaff44x0g.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nstrcat(string, string...)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m1v856z.jl:10\nin expression starting at\
    \ /tmp/tmp0m1v856z.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis should be the accepted\
    \ answer since it actually answers the question and also explains why it works.\n\
    <|/ c |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer since it actually answers the question and also explains\
    \ why it works.\n<|/ c |>\n<| a dscore=5 |>\nIn Julia 1.3 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=4 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4\
    \ |>\nIn Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\nIn Julia 1.3 you\
    \ can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/\
    \ a tags=julia,string |>\n<| a dscore=4 |>\nIn Julia 1.3 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia 1.3\
    \ you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a\
    \ dscore=4 |>\nIn Juli\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbjl61_v.jl:10\nin expression starting at\
    \ /tmp/tmpdbjl61_v.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Compute length of given string\n    >>> strlen(\"\")\n   \
    \ 0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10oaadmv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp10oaadmv.jl:1\n\
    in expression starting at /tmp/tmp10oaadmv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\nSubstring\
    \ is a function that returns a substring of a given string. \nIt takes two arguments:\
    \ start index and end index. \nIt returns substring from start index to end index.\
    \ \nIf end index is omitted, it returns substring from start index to the end\
    \ of the string.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzua2v063.jl:10\nin expression starting at\
    \ /tmp/tmpzua2v063.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgs5p5p1.jl:10\nin expression starting at\
    \ /tmp/tmpwgs5p5p1.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local result = 1\n    for char in string:\n        result = result * 2\n\
    \        result = result + char.code\n    return result\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3x_jbbu.jl:10\nin expression starting at\
    \ /tmp/tmpm3x_jbbu.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString concatenation\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyqfxzc1.jl:10\nin expression starting at\
    \ /tmp/tmpoyqfxzc1.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ in Julia\nStrings are immutable in Julia. Strings are enclosed in quotes.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmcg5f846.jl:14\nin expression starting at\
    \ /tmp/tmpmcg5f846.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string do \n        len = len +\
    \ 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nReturn number of occurrences of substring in string\n\
    If substring is not found, return 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy58ryv2k.jl:9\nin expression starting at /tmp/tmpy58ryv2k.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqta5q50h.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqta5q50h.jl:1\n\
    in expression starting at /tmp/tmpqta5q50h.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring extraction\nJulia provides several ways to extract\
    \ substrings from strings. These methods are described in detail in the Julia\
    \ documentation.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiegkreih.jl:14\nin expression starting at\
    \ /tmp/tmpiegkreih.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many ways to extract substrings\
    \ from strings. Here are some examples:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjuympms2.jl:8\nin expression starting at /tmp/tmpjuympms2.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpomomf26s.jl:8\nin expression starting at /tmp/tmpomomf26s.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\nStrings\
    \ are immutable data structures. Strings are used to store text or other character\
    \ sequences. Strings are written within single quotes (') and are enclosed in\
    \ double quotes (\"). Strings are immutable. Strings are a sequence of characters.\
    \ Strings are a sequence of Unicode code points.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uq_pem3.jl:10\nin expression starting at\
    \ /tmp/tmp1uq_pem3.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64\n    len = string.len()\n    return len\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpezpksbli.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpezpksbli.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpezpksbli.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpezpksbli.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpezpksbli.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpezpksbli.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpezpksbli.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpezpksbli.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpezpksbli.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpezpksbli.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpezpksbli.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpezpksbli.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpezpksbli.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string\n        length = length + 1\n    end\n\
    \    return length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia\
    \ has many string manipulation functions. Here are a few:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp925j9pu1.jl:14\nin expression starting at\
    \ /tmp/tmp925j9pu1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Substring is a function that extracts a substring from a given string. \nSyntax:\
    \ substring(string::String, start::Int, end::Int)::String\nExample: substring(string,\
    \ start, end)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9loyl1f.jl:13\nin expression starting at\
    \ /tmp/tmpj9loyl1f.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string:\n        length += 1\n    return length\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't answer the question. He wants to know\
    \ how to use `strlen` without having to import it into his code.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. My answer was more of a \"how do I do this\" rather\
    \ than \"how do I do this without importing it\". I was trying to give a more\
    \ general answer that would help anyone who wanted to know how to do this without\
    \ importing it. I will update my answer to reflect this.\n<|/ c |>\n<| a |>\n\
    You can use the function length() from Data.List to count the characters in a\
    \ string:\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bziadyo.jl:10\nin expression starting at\
    \ /tmp/tmp0bziadyo.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(length(string))\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Return substring from given string from start index to end index\nIf end index\
    \ is omitted, substring from start index is returned\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pyluses.jl:10\nin expression starting at\
    \ /tmp/tmp7pyluses.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has substring function, which returns substring from given string\
    \ with given start and length. \nSubstring starts from given start index and ends\
    \ at given end index. \nIf start index is greater than end index, then substring\
    \ will start from end index and end at given start index.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tbqxvi5.jl:8\nin expression starting at /tmp/tmp7tbqxvi5.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia. Strings are immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2_4aih2.jl:13\nin expression starting at\
    \ /tmp/tmpx2_4aih2.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has a built-in function substring that extracts a substring\
    \ from a string. Let's see how it works.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4z_btm3k.jl:8\nin expression starting at /tmp/tmp4z_btm3k.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nReturn first character in given string\nJulia has many string\
    \ functions. Here we use the first function which returns the first character\
    \ of a string.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rndnp61.jl:10\nin expression starting at\
    \ /tmp/tmp6rndnp61.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    local string::String\n    local length::Int64\n    \n    string::String\
    \ = \"\"\n    length::Int64 = 0\n    \n    for char in string do\n        length\
    \ = length + 1\n    end\n    \n    return length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nstrcat(string, string...)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw7q_hp5u.jl:15\nin expression starting at /tmp/tmpw7q_hp5u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nStrings are immutable\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptsmey5pp.jl:10\nin expression starting at\
    \ /tmp/tmptsmey5pp.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for this! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7f3dn6de.jl:12\nin expression starting at\
    \ /tmp/tmp7f3dn6de.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a tags=julia |>\n<| c |>\nI guess you meant `len += 1` instead\
    \ of `len += 0`.\n<|/ c |>\n<| c |>\nYes, I meant `len += 1`. Thanks for noticing\
    \ it.\n<|/ c |>\n<| a |>\nThe most efficient way is to use built-in function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia dscore=5 |>\n<| c\
    \ |>\nThis should be the accepted answer. `length` is optimized for this specific\
    \ use case.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `length` is\
    \ optimized for this specific use case.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. `length` is optimized for this specific use case.\n<|/ c |>\n\
    <| a dscore=5 |>\nThe most efficient way is to use built-in function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis\
    \ should be the accepted answer. `length` is optimized for this specific use case.\n\
    <|/ c |>\n<| a tags=julia |>\nThe most efficient way is to use built-in function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a\
    \ dscore=4 |>\nThe most efficient way is to use built-in function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a |>\nThe most efficient\
    \ way is to use built-in function length\n<code>\njulia> length(\"abc\")\n3\n\
    </code>\n<|/ a dscore=4 tags=julia |>\n<| a dscore=3 |>\nThe most efficient way\
    \ is to use built-in function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nThe most efficient way is to use built-in\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\nThe most efficient way is to use built-in function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a d\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5x0xq12.jl:10\nin expression starting at\
    \ /tmp/tmpf5x0xq12.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp292ppi44.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp292ppi44.jl:1\n\
    in expression starting at /tmp/tmp292ppi44.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Substrings are the characters between two indices. \nThey can be specified with\
    \ two indices or with a single index.\nThe first index is inclusive and the second\
    \ is exclusive.\nThe last index is inclusive and the first is exclusive.\nThe\
    \ indices are zero-based.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw38wh51e.jl:10\nin expression starting at\
    \ /tmp/tmpw38wh51e.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nStrings are immutable\nStrings are immutable, meaning that\
    \ once created, they cannot be changed. However, they can be replaced by other\
    \ strings. This is done by using the replace function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77k_nvtj.jl:10\nin expression starting at\
    \ /tmp/tmp77k_nvtj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp292ppi44.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp292ppi44.jl:1\n\
    in expression starting at /tmp/tmp292ppi44.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string do len = len + 1 end\n  \
    \  return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgz1cutne.jl:9\nin expression starting at /tmp/tmpgz1cutne.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Return substring from given string from given index to given length\n>>> strsub(\"\
    abc\",1,2)\n\"bc\"\n>>> strsub(\"abc\",1,3)\n\"bc\"\n>>> strsub(\"abc\",1,4)\n\
    \"bc\"\n>>> strsub(\"abc\",1,5)\n\"bc\"\n>>> strsub(\"abc\",1,6)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,7)\n\"bc\"\n>>> strsub(\"abc\",1,8)\n\"bc\"\n>>> strsub(\"\
    abc\",1,9)\n\"bc\"\n>>> strsub(\"abc\",1,10)\n\"bc\"\n>>> strsub(\"abc\",1,11)\n\
    \"bc\"\n>>> strsub(\"abc\",1,12)\n\"bc\"\n>>> strsub(\"abc\",1,13)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,14)\n\"bc\"\n>>> strsub(\"abc\",1,15)\n\"bc\"\n>>> strsub(\"\
    abc\",1,16)\n\"bc\"\n>>> strsub(\"abc\",1,17)\n\"bc\"\n>>> strsub(\"abc\",1,18)\n\
    \"bc\"\n>>> strsub(\"abc\",1,19)\n\"bc\"\n>>> strsub(\"abc\",1,20)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,21)\n\"bc\"\n>>> strsub(\"abc\",1,22)\n\"bc\"\n>>> strsub(\"\
    abc\",1,23)\n\"bc\"\n>>> strsub(\"abc\",1,24)\n\"bc\"\n>>> strsub(\"abc\",1,25)\n\
    \"bc\"\n>>> strsub(\"abc\",1,26)\n\"bc\"\n>>> strsub(\"abc\",1,27)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,28)\n\"bc\"\n>>> strsub(\"abc\",1,29)\n\"bc\"\n>>> strsub(\"\
    abc\",1,30)\n\"bc\"\n>>> strsub(\"abc\",1,31)\n\"bc\"\n>>> strsub(\"abc\",1,32)\n\
    \"bc\"\n>>> strsub(\"abc\",1,33)\n\"bc\"\n>>> strsub(\"abc\",1,34)\n\"bc\"\n>>>\
    \ strsub(\"abc\",1,35)\n\"bc\"\n>>> strsub(\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq90mj6q5.jl:13\nin expression starting at\
    \ /tmp/tmpq90mj6q5.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpomomf26s.jl:8\nin expression starting at /tmp/tmpomomf26s.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nstrcat(string,\
    \ string...)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gzb2c6g.jl:13\nin expression starting at\
    \ /tmp/tmp9gzb2c6g.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string.length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpagy9yqm0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpagy9yqm0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpagy9yqm0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpagy9yqm0.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpagy9yqm0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpagy9yqm0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field length\n  Stacktrace:\n  \
    \ [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpagy9yqm0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpagy9yqm0.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpagy9yqm0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpagy9yqm0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpagy9yqm0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpagy9yqm0.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpagy9yqm0.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p0rptju.jl:13\nin expression starting at\
    \ /tmp/tmp9p0rptju.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(string.len())\nend\n</cell>\n<code language=julia-1.5>\n@doc strlen\n\
    </cell>\n<text>\nstrcat(string, string...)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdzz7ah1.jl:10\nin expression starting at\
    \ /tmp/tmpgdzz7ah1.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring\nSubstring is a function that extracts a substring\
    \ from a string. \nThe syntax is substring(string::String, start::Int, end::Int)::String.\
    \ \nThe start argument is the index of the first character of the substring to\
    \ be extracted. \nThe end argument is the index of the character after the last\
    \ character of the substring to be extracted. \nThe substring extracted is returned\
    \ as a string.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmymdiph.jl:14\nin expression starting at\
    \ /tmp/tmpnmymdiph.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then return 0 else return string.length\nend\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. Here are some of them:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_laji5a7.jl:8\nin expression starting at /tmp/tmp_laji5a7.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    if string == \"\" then \n        return 0\n    else \n        return\
    \ string.length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia\
    \ has substring function, which returns substring from given string. \nSyntax:\
    \ string.substring(start_index, end_index)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e6qasro.jl:14\nin expression starting at\
    \ /tmp/tmp5e6qasro.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer. I've tried your\
    \ solution and it works fine. However I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    The reason your code doesn't work is that `length` isn't a function in Julia.\
    \ `length` is a function in Julia that returns the length of a string. `length(\"\
    abc\")` returns 3, but `length(\"\")` returns 0. `length` isn't a function in\
    \ Julia. `length` is a function in Julia that returns the length of a string.\
    \ `length(\"abc\")` returns 3, but `length(\"\")` returns 0. `length` isn't a\
    \ function in Julia. `length` is a function in Julia that returns the length of\
    \ a string. `length(\"abc\")` returns 3, but `length(\"\")` returns 0.\n<|/ c\
    \ |>\n<| c |>\nThanks for your explanation. Now I understand why my code doesn't\
    \ work. However I still don't understand why my code doesn't work. Could you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nThe reason your code doesn't\
    \ work is that `length` isn't a function in Julia. `length` is a function in Julia\
    \ that returns the length of a string. `length(\"abc\")` returns 3, but `length(\"\
    \")` returns 0. `length` isn't a function in Julia. `length` is a function in\
    \ Julia that returns the length of a string. `length(\"abc\")` returns 3, but\
    \ `length(\"\")` returns 0. `length` isn't a function in Julia. `length` is a\
    \ function in Julia that returns the length of a string. `length(\"abc\")` returns\
    \ 3, but `length(\"\")` returns 0.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Now I understand why my code doesn't work. However I still don't understand\
    \ why my code doesn't work. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| a tags=julia |>\nThe reason your code doesn't work is that length\
    \ is not a function in Julia. length is a function in Julia that returns the length\
    \ of a string. length(\"abc\") returns 3, but length(\"\") returns 0. length isn't\
    \ a function in Julia. length is a function in Julia that returns the length of\
    \ a string. length(\"abc\") returns 3, but length(\"\") returns 0. length isn't\
    \ a \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpad_frjti.jl:12\nin expression starting at\
    \ /tmp/tmpad_frjti.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepyqzzr0.jl:12\nin expression starting at\
    \ /tmp/tmpepyqzzr0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia\
    \ has many string manipulation functions. Here are some examples:\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqld_099.jl:10\nin expression starting at\
    \ /tmp/tmpdqld_099.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nstrlen(\"abc\") + strlen(\"def\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\") + strlen(\"def\") + strlen(\"ghi\")\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\") + strlen(\"def\") + strlen(\"ghi\") + strlen(\"jkl\")\n</cell>\n\
    <text>\nSubstrings\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxv_6jlez.jl:8\nin expression starting at /tmp/tmpxv_6jlez.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ concatenation\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_g9b0byi.jl:14\nin expression starting at\
    \ /tmp/tmp_g9b0byi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work for\
    \ me. `strlen(\"abc\")` returns `3`, not `2`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2 and it works. What version are you using?\n<|/ c |>\n<| c |>\n\
    I'm using 0.6.2\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. What version\
    \ are you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.2\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6puoqqa.jl:10\nin expression starting at\
    \ /tmp/tmpv6puoqqa.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nJulia has several string extraction functions:\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfkoje1p8.jl:8\nin expression starting at /tmp/tmpfkoje1p8.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp38es0re2.jl:8\nin expression starting at /tmp/tmp38es0re2.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nReturn number of characters in given string\n>>> strcount(\"\
    abc\", \"c\")\n2\n>>> strcount(\"abc\", \"d\")\n0\n>>> strcount(\"abc\", \"\"\
    )\n3\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeo81rza3.jl:10\nin expression starting at\
    \ /tmp/tmpeo81rza3.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64\n    len = string.len\n    return len\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nJulia strings\
    \ are immutable, meaning that once created they cannot be changed. Strings are\
    \ created using the quote function and are therefore immutable. Strings are created\
    \ using the string function and are therefore mutable. Strings are created using\
    \ the string literal syntax and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string constructor and are therefore mutable. Strings are created using\
    \ the string \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9slpi35.jl:12\nin expression starting at\
    \ /tmp/tmpl9slpi35.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpet7qh7bh.jl:8\nin expression starting at /tmp/tmpet7qh7bh.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string manipulation functions. Here are some of them:\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphqp17pha.jl:8\nin expression starting at /tmp/tmphqp17pha.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpl0ru68.jl:10\nin expression starting at\
    \ /tmp/tmpnpl0ru68.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings are immutable in Julia\nJulia strings are immutable, meaning they cannot\
    \ be changed. Strings are immutable because they cannot be changed. They are also\
    \ immutable because they cannot be changed. They are also immutable because they\
    \ cannot be changed. They are also immutable because they cannot be changed. They\
    \ are also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable \nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppwbzqza5.jl:8\nin expression starting at /tmp/tmppwbzqza5.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9phhvvm2.jl:8\nin expression starting at /tmp/tmp9phhvvm2.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string:\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    In Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia 1.5\
    \ you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\nIn Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a d\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekikyfjk.jl:10\nin expression starting at\
    \ /tmp/tmpekikyfjk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string:\n        length = length + 1\n   \
    \ return length\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for strings with\
    \ embedded newlines. `strlen(\"abc\\ndef\")` returns `3` instead of `4`.\n<|/\
    \ c |>\n<| c |>\nYes, I agree. My solution was meant to be a general solution\
    \ for any string. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6gqjznr.jl:10\nin expression starting at\
    \ /tmp/tmpa6gqjznr.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia. This means that once created, a String\
    \ object cannot be changed. However, we can create a new String object with the\
    \ desired content. For example, we can create a new String object with the contents\
    \ of another String object by using the string concatenation operator (+).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq28tlans.jl:10\nin expression starting at\
    \ /tmp/tmpq28tlans.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(string.len())\nend\n</cell>\n<code language=julia-1.4>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1otc0ws.jl:10\nin expression starting at\
    \ /tmp/tmp_1otc0ws.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len = string.length\n    return len\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz_vq891s.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpz_vq891s.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpz_vq891s.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz_vq891s.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz_vq891s.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpz_vq891s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field length\n  Stacktrace:\n  \
    \ [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpz_vq891s.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz_vq891s.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz_vq891s.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpz_vq891s.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpz_vq891s.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz_vq891s.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz_vq891s.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string do \n        len = len +\
    \ 1\n    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abcde\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string that are\
    \ not letters.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph2jdxd8l.jl:9\nin expression starting at /tmp/tmph2jdxd8l.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string functions including substring and substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2g0k55r.jl:8\nin expression starting at /tmp/tmpi2g0k55r.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_mp2vwrc.jl:8\nin expression starting at /tmp/tmp_mp2vwrc.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmf2tkssd.jl:10\nin expression starting at\
    \ /tmp/tmpmf2tkssd.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length::Int64 = 0\n    for char in string:\n        length = length\
    \ + 1\n    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_ora58t.jl:10\nin expression starting at\
    \ /tmp/tmp5_ora58t.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len = string.len()\n    return len\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpezcp8xg1.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpezcp8xg1.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpezcp8xg1.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpezcp8xg1.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpezcp8xg1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpezcp8xg1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpezcp8xg1.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpezcp8xg1.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpezcp8xg1.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpezcp8xg1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpezcp8xg1.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpezcp8xg1.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpezcp8xg1.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings are\
    \ immutable in Julia. Strings are immutable because they cannot be changed. They\
    \ are also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also immutable because they cannot be changed. They are also immutable\
    \ because they cannot be changed. They are also immutable because they cannot\
    \ be changed. They are also immutable because they cannot be changed. They are\
    \ also immutable because they cannot be changed. They are also immutable because\
    \ they cannot be changed. They are also immutable because they cannot be changed.\
    \ They are also im\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkl0j_i95.jl:8\nin expression starting at /tmp/tmpkl0j_i95.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string manipulation functions. Here are some of them:\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphqp17pha.jl:8\nin expression starting at /tmp/tmphqp17pha.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Strings are immutable\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9c26zanp.jl:8\nin expression starting at /tmp/tmp9c26zanp.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI guess you meant `length = 0`\
    \ instead of `length = 1`?\n<|/ c |>\n<| c |>\nYes, I meant `length = 0`. Thanks\
    \ for noticing!\n<|/ c |>\n<| a tags=julia |>\nIn Julia 1.2, you can use the built-in\
    \ function length to get the length of a string:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use\
    \ the built-in function length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nIn Julia 1.2,\
    \ you can use the built-in function length to get the length of a string:\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.2, you can use the built-in function length to get the length of a string:\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\nIn Julia 1.2, you can use the built-in function length to get the length\
    \ of a string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=0 |>\nIn Julia 1.2, you can use the built-in function length to get\
    \ the length of a string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nIn Julia 1.2, you can use the built-in function length\
    \ to get the length of a string:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use the built-in\
    \ function length to get the length of a string:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use\
    \ the built-in function length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia\
    \ 1.2, you can use the built-in function length to get the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ug341hx.jl:10\nin expression starting at\
    \ /tmp/tmp3ug341hx.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local string\n    local length\n    local i\n    local j\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn7bregs8.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn7bregs8.jl:1\n\
    in expression starting at /tmp/tmpn7bregs8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Compute length of given string\n    >>> strlen(\"\")\n   \
    \ 0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10oaadmv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp10oaadmv.jl:1\n\
    in expression starting at /tmp/tmp10oaadmv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nString concatenation\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5so1u62o.jl:10\nin expression starting at\
    \ /tmp/tmp5so1u62o.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    local len::Int64 = 0\n    \n    for char in string\n        do\n\
    \            len = len + 1\n        end\n    end\n    \n    return len\nend\n\
    </cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjl70fdj_.jl:12\nin expression starting at /tmp/tmpjl70fdj_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgc1qweef.jl:8\nin expression starting at /tmp/tmpgc1qweef.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpet7qh7bh.jl:8\nin expression starting at /tmp/tmpet7qh7bh.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpet7qh7bh.jl:8\nin expression starting at /tmp/tmpet7qh7bh.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Compute length of given string\n    >>> strlen(\"\")\n   \
    \ 0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10oaadmv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp10oaadmv.jl:1\n\
    in expression starting at /tmp/tmp10oaadmv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.1>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.1>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many ways to extract substrings from strings. One of them\
    \ is to use substring function. Let's see how it works.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpihtor5ud.jl:8\nin expression starting at /tmp/tmpihtor5ud.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(string.len())\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia. This means that once\
    \ created, a String object cannot be changed. However, we can create a new String\
    \ object by concatenating two strings. For example:\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzpg2l8n.jl:10\nin expression starting at\
    \ /tmp/tmpqzpg2l8n.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\n3.3 String concatenation\nJulia has a built-in function called\
    \ \"string\" that concatenates strings. We can use it to concatenate strings and\
    \ numbers:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqdjg2e2.jl:14\nin expression starting at\
    \ /tmp/tmpxqdjg2e2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has a substring function that\
    \ extracts a substring from a string. \nThe syntax is substring(string, start,\
    \ length). \nThe start argument is the index of the first character of the substring\
    \ to be extracted. \nThe length argument is the length of the substring. \nThe\
    \ substring function returns a substring starting at character index start and\
    \ ending at character index start + length. \nThe substring function returns an\
    \ empty string if the start index is greater than or equal to the length of the\
    \ string. \nThe substring function returns an empty string if the start index\
    \ is less than or equal to the length of the string. \nThe substring function\
    \ returns an empty string if the start index is less than or equal to the length\
    \ of the string and the end index is greater than or equal to the length of the\
    \ string. \nThe substring function returns an empty string if the start index\
    \ is greater than or equal to the length of the string and the end index is less\
    \ than or equal to the length of the string. \nThe substring function returns\
    \ an empty string if the start index is greater than or equal to the length of\
    \ the string and the end index is less than or equal to the length of the string.\
    \ \nThe substring function returns an empty string if the start index is greater\
    \ than or equal to the length of the string and the end index is greater than\
    \ or equal to the length of the string. \nThe substring function returns an empty\
    \ string if the start index is greater than or equal to the length of the string\
    \ and the end index is greater than or equal to the length of the string. \nThe\
    \ substring function returns an empty string if the start index is greater than\
    \ or equal to the length of the string and the end index is greater than or equal\
    \ to the length of the string. \nThe substring function returns an empty string\
    \ if the start index is greater than or equal to the length of the string and\
    \ the end index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe substring function returns an empty string if the\
    \ start index is greater than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe substring function returns an empty string if the\
    \ start index is greater than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe substring function returns an empty string if the\
    \ start index is greater than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe substring\
    \ function returns an empty string if the start index is greater than or equal\
    \ to the length of the string and the end index is greater than or equal to the\
    \ length of the string. \nThe substring function returns an empty string if the\
    \ start index is greater than or equal to the length of the string and the end\
    \ index is greater than or equal to the length of the string. \nThe \nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpufy8enql.jl:8\nin expression starting at /tmp/tmpufy8enql.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    isascii\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcopytd9m.jl:8\nin expression starting at /tmp/tmpcopytd9m.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis should be the accepted\
    \ answer. `length` should be used instead of `strlen`.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nThe accepted answer does not work for Julia versions below v0.6.\nThe correct\
    \ answer is:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi64rzs40.jl:10\nin expression starting at\
    \ /tmp/tmpi64rzs40.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nReturn a substring of a given string\n>>> substr(\"\
    abcde\", 2, 3)\n\"bc\"\n>>> substr(\"abcde\", 2, 4)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, 5)\n\"bcde\"\n>>> substr(\"abcde\", 2, -1)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -2)\n\"bc\"\n>>> substr(\"abcde\", 2, -3)\n\"bc\"\n>>> substr(\"abcde\",\
    \ 2, -4)\n\"bcde\"\n>>> substr(\"abcde\", 2, -5)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -6)\n\"bcde\"\n>>> substr(\"abcde\", 2, -7)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -8)\n\"bcde\"\n>>> substr(\"abcde\", 2, -9)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -10)\n\"bcde\"\n>>> substr(\"abcde\", 2, -11)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -12)\n\"bcde\"\n>>> substr(\"abcde\", 2, -13)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -14)\n\"bcde\"\n>>> substr(\"abcde\", 2, -15)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -16)\n\"bcde\"\n>>> substr(\"abcde\", 2, -17)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -18)\n\"bcde\"\n>>> substr(\"abcde\", 2, -19)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -20)\n\"bcde\"\n>>> substr(\"abcde\", 2, -21)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -22)\n\"bcde\"\n>>> substr(\"abcde\", 2, -23)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -24)\n\"bcde\"\n>>> substr(\"abcde\", 2, -25)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -26)\n\"bcde\"\n>>> substr(\"abcde\", 2, -27)\n\"bcde\"\n>>> substr(\"abcde\"\
    , 2, -28)\n\"bcde\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tmsvh9e.jl:10\nin expression starting at\
    \ /tmp/tmp0tmsvh9e.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpomomf26s.jl:8\nin expression starting at /tmp/tmpomomf26s.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpac16bp86.jl:8\nin expression starting at /tmp/tmpac16bp86.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. Here are some examples:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp51ch901o.jl:8\nin expression starting at /tmp/tmp51ch901o.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpl0ru68.jl:10\nin expression starting at\
    \ /tmp/tmpnpl0ru68.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable in Julia\nJulia strings are immutable,\
    \ meaning that once created, they cannot be changed. However, they can be converted\
    \ to a mutable string using the mutable keyword.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn8al26b.jl:10\nin expression starting at\
    \ /tmp/tmptn8al26b.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length::Int64 = 0\n    for character in string \n        length += 1\n\
    \    return length\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.x you can use the function length to get the length of a string. \n\
    In Julia 2.x you can use the function lengths.\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.x you can use the function length to get the length of a string.\
    \ \nIn Julia 2.x you can use the function lengths.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nIn Julia 1.x, you can use the function length to get the length of a string.\
    \ \nIn Julia 2.x, you can use the function lengths.\n<|/ a tags=julia,string |>\n\
    <| a dscore=0 |>\nIn Julia 1.x you can use the function length to get the length\
    \ of a string. \nIn Julia 2.x you can use the function lengths.\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.x you can use the function length\
    \ to get the length of a string. \nIn Julia 2.x you can use the function lengths.\n\
    <|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia 1.x you can use the function\
    \ length to get the length of a string. \nIn Julia 2.x you can use the function\
    \ lengths.\n<|/ a dscore=0 |>\n<| a |>\nIn Julia 1.x you can use the function\
    \ length to get the length of a string. \nIn Julia 2.x you can use the function\
    \ lengths.\n<|/ a tags=julia,string dscore=0 |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.x you can use the function length to get the length of a string. \n\
    In Julia 2.x you can use the function lengths.\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.x you can use the function length to get the length of a string.\
    \ \nIn Julia 2.x you can use the function lengths.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nIn Julia 1.x you can use the function length to get the length of a string.\
    \ \nIn Julia 2.x you can use the function lengths.\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\nIn Julia 1.x you can use the function length to get\
    \ the length of a string. \nIn Julia 2.x you can use the function lengths.\n<|/\
    \ a dscore=0 |>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8wzqxx4.jl:12\nin expression starting at\
    \ /tmp/tmpg8wzqxx4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    if string == \"\"\n        return 0\n    \n    local len = 0\n \
    \   for char in string\n        len = len + 1\n    end\n    return len\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are not letters. \nFor example, strlen(\"abc\") returns\
    \ 3 because \"a\" and \"b\" are not letters.\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwaszu07.jl:18\nin expression starting at\
    \ /tmp/tmprwaszu07.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbusb6drg.jl:8\nin expression starting at /tmp/tmpbusb6drg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to do this in Julia. Also, your answer doesn't explain why\
    \ you think this works.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThis answer doesn't answer the question.\
    \ `strlen` isn't a Julia function.\n<|/ c |>\n<| c |>\nI added a Julia version\
    \ of the function to the answer. Hope it helps.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nThe most efficient way is to use Base.strlen (which is implemented in C):\n\
    <code>\njulia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This should be the accepted answer. `Base.strlen` is implemented in C and is thus\
    \ faster than `length(str)`.\n<|/ c |>\n<| a tags=julia,string |>\nThe most efficient\
    \ way is to use Base.strlen (which is implemented in C):\n<code>\njulia> Base.strlen(\"\
    abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,string |>\nThe most efficient\
    \ way is to use Base.strlen (which is implemented in C):\n<code>\njulia> Base.strlen(\"\
    abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nThe most efficient way\
    \ is to use Base.strlen (which is implemented in C):\n<code>\njulia> Base.strlen(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nThe\
    \ most efficient way is to use Base.strlen (which is implemented in C):\n<code>\n\
    julia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    The most efficient way is to use Base.strlen (which is implemented in C):\n<code>\n\
    julia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=3\
    \ |>\nThe most efficient way is to use Base.strlen (which is implemented in C):\n\
    <code>\njulia> Base.strlen(\"abc\")\n3\n</code>\n<|/ a tags=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91j6wdh7.jl:12\nin expression starting at\
    \ /tmp/tmp91j6wdh7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many built-in functions for substring operations. Here are\
    \ some examples:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwki5j0ij.jl:8\nin expression starting at /tmp/tmpwki5j0ij.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1xmz_0l.jl:13\nin expression starting at\
    \ /tmp/tmpi1xmz_0l.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has substring function, which returns substring from given string\
    \ with given start and end index. \nTo get substring from string with index i\
    \ to j, we use substring function with i as start index and j as end index.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzwi8u4s9.jl:8\nin expression starting at /tmp/tmpzwi8u4s9.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    string.length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpagy9yqm0.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpagy9yqm0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpagy9yqm0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpagy9yqm0.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpagy9yqm0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpagy9yqm0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field length\n  Stacktrace:\n  \
    \ [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpagy9yqm0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpagy9yqm0.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpagy9yqm0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpagy9yqm0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpagy9yqm0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpagy9yqm0.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpagy9yqm0.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nI like this solution. One could also use\
    \ `length` instead of `strlen` here: `length(string)`.\n<|/ c |>\n<| c |>\n`length(string)`\
    \ also works. I prefer `strlen` because it is more general (i.e. it works for\
    \ any `AbstractString` type).\n<|/ c |>\n<| c |>\n`length(string)` also works\
    \ in Julia 1.5.\n<|/ c |>\n<| a tags=julia |>\nI like using length(string) because\
    \ it is more general (i.e. it works for any AbstractString type).\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nI like using\
    \ length(string) because it is more general (i.e. it works for any AbstractString\
    \ type).\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=3 |>\nI like using length(string) because it is more general (i.e.\
    \ it works for any AbstractString type).\n<code>\njulia> length(\"abc\")\n3\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nI like using length(string) because\
    \ it is more general (i.e. it works for any AbstractString type).\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI like\
    \ using length(string) because it is more general (i.e. it works for any AbstractString\
    \ type).\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ tags=julia |>\nI like using length(string) because it is more general (i.e.\
    \ it works for any AbstractString type).\n<code>\njulia> length(\"abc\")\n3\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nI like using length(string) because\
    \ it is more general (i.e. it works for any AbstractString type).\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nI like using\
    \ length(string) because it is more general (i.e. it works for any AbstractString\
    \ type).\n<code>\njulia> length(\"abc\")\n3\n</code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdgi6f9_.jl:12\nin expression starting at\
    \ /tmp/tmpmdgi6f9_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nString concatenation\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3okbyuv_.jl:13\nin expression starting at\
    \ /tmp/tmp3okbyuv_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has many string manipulation functions. Here are some of them:\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8hczrnfn.jl:8\nin expression starting at /tmp/tmp8hczrnfn.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\
    \"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp292ppi44.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp292ppi44.jl:1\n\
    in expression starting at /tmp/tmp292ppi44.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphyqfj9m5.jl:8\nin expression starting at /tmp/tmphyqfj9m5.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nstrlen(string::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaemmtlzc.jl:8\nin expression starting at /tmp/tmpaemmtlzc.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString concatenation\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexfw2e3s.jl:10\nin expression starting at\
    \ /tmp/tmpexfw2e3s.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpomomf26s.jl:8\nin expression starting at /tmp/tmpomomf26s.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nString concatenation\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyrf3xs2.jl:13\nin expression starting at\
    \ /tmp/tmpuyrf3xs2.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    Int64(string.len())\nend\n</cell>\n<code language=julia-1.1>\nstrlen(\"\
    \")\n</cell>\n<code language=julia-1.1>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has a substring function which returns substring of a given string. \nSyntax:\
    \ substring(string::String, start::Int, end::Int)\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoootx8qz.jl:10\nin expression starting at\
    \ /tmp/tmpoootx8qz.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Compute length of given string\n    >>> strlen(\"\")\n   \
    \ 0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10oaadmv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp10oaadmv.jl:1\n\
    in expression starting at /tmp/tmp10oaadmv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len = string.length\n    if len == 0 then\n        return 0\n  \
    \  end\n    return len\nend\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zymookb.jl:14\nin expression starting at\
    \ /tmp/tmp9zymookb.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring extraction\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbusb6drg.jl:8\nin expression starting at /tmp/tmpbusb6drg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThe `length` variable is redundant. `for\
    \ char in string` already gives you the length of the string.\n<|/ c |>\n<| c\
    \ |>\nThanks, I didn't know that. I've updated the answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe easiest way is to use length() function in Julia:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nIn Julia 1.5 you can\
    \ use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    In Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\nIn Julia 1.5 you can use the\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.5 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.5 you can use\
    \ the function length\n<code>\njulia> length(\"abc\")\n3\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9fsvct_.jl:12\nin expression starting at\
    \ /tmp/tmpk9fsvct_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings\nStrings are immutable and are enclosed\
    \ in single quotes (')\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn33nsh3r.jl:13\nin expression starting at\
    \ /tmp/tmpn33nsh3r.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are im\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2chtthz7.jl:13\nin expression starting at\
    \ /tmp/tmp2chtthz7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Compute length of given string\n    >>> strlen(\"\")\n   \
    \ 0\n    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10oaadmv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp10oaadmv.jl:1\n\
    in expression starting at /tmp/tmp10oaadmv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local result = 1\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.1>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcat97hja.jl:10\nin expression starting at\
    \ /tmp/tmpcat97hja.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substrings\nJulia has substring function, which returns substring from given string.\n\
    It has two forms:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8b0mbb0t.jl:8\nin expression starting at /tmp/tmp8b0mbb0t.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0h05ee2.jl:13\nin expression starting at\
    \ /tmp/tmpk0h05ee2.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string do len = len + 1 end\n  \
    \  return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\n\
    Julia has many string extraction functions. Here are some examples:\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbr_we7k3.jl:9\nin expression starting at /tmp/tmpbr_we7k3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local result = 1\n    for char in string:\n        result = result * 2\n\
    \        result = result + char:len()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nString concatenation\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9vsbq8k.jl:10\nin expression starting at\
    \ /tmp/tmpf9vsbq8k.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n`length` was introduced\
    \ in Julia 1.3, so this won't work on older versions.\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know that. I've updated the answer.\n<|/ c |>\n<| a dscore=3 |>\nIn\
    \ Julia 1.3 you can use length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3, you can use length to get the length of a string:\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nIn Julia\
    \ 1.3, you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.3, you can use length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.3, you can use length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn\
    \ Julia 1.3, you can use length to get the length of a string:\n<code>\njulia>\
    \ length(\"abc\")\n3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.3,\
    \ you can use length to get the length of a string:\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ccvxcah.jl:10\nin expression starting at\
    \ /tmp/tmp7ccvxcah.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjudqsiuj.jl:8\nin expression starting at /tmp/tmpjudqsiuj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nSubstring is a function that extracts a substring from a given string.\
    \ Substring works with character indices and with strings as well. Substring works\
    \ with negative indices as well. Substring works with strings as well as character\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0a09x1q0.jl:8\nin expression starting at /tmp/tmp0a09x1q0.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP asked for \"a function that returns the length of given string\"\
    , not \"a function that returns the length of given string *in bytes*.\"\n<|/\
    \ c |>\n<| c |>\nI agree, but I thought that OP was asking for a function that\
    \ returns the length of given string in bytes. I updated my answer to reflect\
    \ that.\n<|/ c |>\n<| a dscore=2 |>\nThe function strlen returns the number of\
    \ characters in a string. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstlzpmrx.jl:10\nin expression starting at\
    \ /tmp/tmpstlzpmrx.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    length::Int64 = 0\n    for char in string\n        length += 1\n    return\
    \ length\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p95q4sj.jl:12\nin expression starting at\
    \ /tmp/tmp6p95q4sj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n<code language=julia-1.0>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxa7mavq.jl:13\nin expression starting at\
    \ /tmp/tmpyxa7mavq.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\"\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\nReturn length of given string\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69hqucbh.jl:13\nin expression starting at\
    \ /tmp/tmp69hqucbh.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nstrcat(string, string...)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m1v856z.jl:10\nin expression starting at\
    \ /tmp/tmp0m1v856z.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    \"\"\"\n    Return length of given string\n    >>> strlen(\"\")\n    0\n\
    \    >>> strlen(\"abc\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s720a_3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s720a_3.jl:1\n\
    in expression starting at /tmp/tmp3s720a_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7vmws1c.jl:8\nin expression starting at /tmp/tmpt7vmws1c.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2exzjc8f.jl:10\nin expression starting at\
    \ /tmp/tmp2exzjc8f.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nString concatenation\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98ar7etu.jl:10\nin expression starting at\
    \ /tmp/tmp98ar7etu.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n\
    \    return len\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but\
    \ I prefer to use `len` instead of `strlen`\n<|/ c |>\n<| c |>\nI agree with you.\
    \ `len` is more idiomatic and more efficient.\n<|/ c |>\n<| a dscore=1 |>\nThe\
    \ simplest way is to use length() function in Julia\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\nIn Julia 1.5.2\
    \ you can use the function length() which returns the number of characters in\
    \ a string.\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5.2 you can use the function length() which\
    \ returns the number of characters in a string.\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\nIn Julia 1.5.2 you\
    \ can use the function length() which returns the number of characters in a string.\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\nIn Julia 1.5.2 you can use the function length() which returns the number\
    \ of characters in a string.\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia 1.5.2 you can use the function length()\
    \ which returns the number of characters in a string.\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\nIn\
    \ Julia 1.5.2 you can use the function length() which returns the number of characters\
    \ in a string.\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nIn Julia 1.5.2 you can use the function length() which returns\
    \ the number of characters in a string.\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a tags=string,julia |>\n<| a tags=string,julia |>\nIn Julia 1.5.2 you can\
    \ use the function length() which returns the number of characters in a string.\n\
    <code>\njulia> length(\"abc\")\n3\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp207ftgeu.jl:10\nin expression starting at\
    \ /tmp/tmp207ftgeu.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwroc7n9h.jl:10\nin expression starting at\
    \ /tmp/tmpwroc7n9h.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return length of given string\n    >>> strlen(\"\")\n    0\n  \
    \  >>> strlen(\"abc\")\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64\
    \ \n    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe simplest\
    \ way is to use len():\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ha391nu.jl:10\nin expression starting at\
    \ /tmp/tmp_ha391nu.jl:10\n"
  stdout: ''
