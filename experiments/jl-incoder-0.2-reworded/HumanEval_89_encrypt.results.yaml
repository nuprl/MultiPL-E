language: jl
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9v7rm0j.jl:1\nin expression starting at /tmp/tmpo9v7rm0j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxz54zol.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxz54zol.jl:1\n\
    in expression starting at /tmp/tmprxz54zol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphg6j0t5q.jl:19\nin expression\
    \ starting at /tmp/tmphg6j0t5q.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps4ihy5d8.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps4ihy5d8.jl:1\n\
    in expression starting at /tmp/tmps4ihy5d8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppel3cfn5.jl:17\n\
    in expression starting at /tmp/tmppel3cfn5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxz54zol.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxz54zol.jl:1\n\
    in expression starting at /tmp/tmprxz54zol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet)%26:] + alphabet[:alphabet.index(alphabet)%26]\n\
    \    \n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet)%26:]\
    \ + rotated_alphabet[:rotated_alphabet.index(rotated_alphabet)%26]\n    \n   \
    \ rotated_alphabet = rotated_alphabet[rotated_alphab\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.index(alphabet)\
    \ % 26):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm_e14yhb.jl:19\n\
    in expression starting at /tmp/tmpm_e14yhb.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1gagp6a5.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1gagp6a5.jl:1\n\
    in expression starting at /tmp/tmp1gagp6a5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string = \"\"\n    \n\
    \    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd9ntnmol.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9ntnmol.jl:1\n\
    in expression starting at /tmp/tmpd9ntnmol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"Create a function decrypt that takes a string as an argument and\n \
    \   returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"\
    hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"ix\"\
    )\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiw4vmz6e.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiw4vmz6e.jl:1\n\
    in expression starting at /tmp/tmpiw4vmz6e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_g3qvt3.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_g3qvt3.jl:1\n\
    in expression starting at /tmp/tmpk_g3qvt3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_ai3xyu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_ai3xyu.jl:1\n\
    in expression starting at /tmp/tmpx_ai3xyu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplklj7jdy.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplklj7jdy.jl:1\n\
    in expression starting at /tmp/tmplklj7jdy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptig9tmn9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptig9tmn9.jl:1\n\
    in expression starting at /tmp/tmptig9tmn9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5fwfqgg.jl:17\n\
    in expression starting at /tmp/tmpk5fwfqgg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphjcpfd5l.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphjcpfd5l.jl:1\n\
    in expression starting at /tmp/tmphjcpfd5l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 27\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnfnw0jc.jl:17\nin expression starting at\
    \ /tmp/tmphnfnw0jc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \"\"\"\n    Create a function decrypt that takes a\
    \ string as an argument and\n    returns a string decrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
    \    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\
    \n    >>> decrypt(\"ix\")\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpxczebqte.jl:15 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxczebqte.jl:20\n\
    in expression starting at /tmp/tmpxczebqte.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8r2eylc.jl:17\n\
    in expression starting at /tmp/tmpr8r2eylc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4a7izv7p.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a7izv7p.jl:1\n\
    in expression starting at /tmp/tmp4a7izv7p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    l = length(s)\n\
    \    \n    cipher = \"\"\n    \n    for i in alphabet\n        \n        if i\
    \ == alphabet[l % length(\"abcdefghijklmnopqrstuvwxyz\")] \n            \n   \
    \         cipher += i\n            \n        else \n            \n           \
    \ cipher += alphabet[(l % length(\"abcdefghijklmnopqrstuvwxyz\")) + 2]\n     \
    \       \n        l += 1\n        \n    return cipher\n    \nend # end of function\
    \ encrypt\n</cell>\n<code language=julia-1.5>\n# Test the function\nencrypt(\"\
    hi\")\n</cell>\n<text>\nExercise 3\nWrite a function decrypt that takes a string\
    \ as an argument and returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters shift\
    \ down by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"ix\")\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8qgxx6w.jl:38\nin expression starting at\
    \ /tmp/tmpm8qgxx6w.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5fwfqgg.jl:17\n\
    in expression starting at /tmp/tmpk5fwfqgg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ mod 2:alphabet.length]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2:alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuor3txk_.jl:1\nin expression starting at /tmp/tmpuor3txk_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(letters)\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfnur3jnu.jl:89\nin expression starting at\
    \ /tmp/tmpfnur3jnu.jl:89\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppel3cfn5.jl:17\n\
    in expression starting at /tmp/tmppel3cfn5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \n\"\"\"\n    Create a function decrypt that takes\
    \ a string as an argument and\n    returns a string decrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
    \    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\
    \n    >>> decrypt(\"ix\")\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpoavoub6c.jl:15 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoavoub6c.jl:21\n\
    in expression starting at /tmp/tmpoavoub6c.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4a7izv7p.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a7izv7p.jl:1\n\
    in expression starting at /tmp/tmp4a7izv7p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz2kk_s5c.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2kk_s5c.jl:1\n\
    in expression starting at /tmp/tmpz2kk_s5c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_cv2c6z.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_cv2c6z.jl:1\n\
    in expression starting at /tmp/tmp8_cv2c6z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5fwfqgg.jl:17\n\
    in expression starting at /tmp/tmpk5fwfqgg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpso5jnxpm.jl:19\nin expression\
    \ starting at /tmp/tmpso5jnxpm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc0jjk4eq.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc0jjk4eq.jl:1\n\
    in expression starting at /tmp/tmpc0jjk4eq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n    \n    alphabet\
    \ = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n\
    \    \n    alphabet = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet\
    \ = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n    \n    alphabet\
    \ = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n\
    \    \n    alphabet = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet\
    \ = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n    \n    alphabet\
    \ = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n\
    \    \n    alphabet = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet\
    \ = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n    \n    alphabet\
    \ = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n\
    \    \n    alphabet = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet\
    \ = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n    \n    alphabet\
    \ = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n\
    \    \n    alphabet = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet\
    \ = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n    \n    alphabet\
    \ = alphabet.chars.map { |c| c.to_i(36) }\n    \n    alphabet = alphabet[alphabet.len()-alphabet.length+2:alphabet.length]\n\
    \    \n    alphabet = alphabet.chars.map { |c| c.to_i(36) }\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"alphabet.chars.map\
    \ {\" at /tmp/tmpz6l_s8h6.jl:21\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6l_s8h6.jl:21\n\
    in expression starting at /tmp/tmpz6l_s8h6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgqls9g4r.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgqls9g4r.jl:1\n\
    in expression starting at /tmp/tmpgqls9g4r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    rotated_alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    \n    encrypted_string = String.empty\n    \n    for c in s\n        encrypted_string\
    \ += rotated_alphabet[alphabet.index(c)]\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8p4g17bk.jl:28\nin expression starting at\
    \ /tmp/tmp8p4g17bk.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[::-1]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpra0mlc2w.jl:17\nin expression\
    \ starting at /tmp/tmpra0mlc2w.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet)..alphabet.index(alphabet)+2]\n\
    \    return rotated_alphabet[alphabet.index(s)..alphabet.index(s)+2]\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_x6d9ek.jl:20\nin expression starting at\
    \ /tmp/tmpj_x6d9ek.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n  \
    \  alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[0:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[2:] + alphabet[0:2]\n    \n \
    \   \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp87atfwi3.jl:19\nin expression\
    \ starting at /tmp/tmp87atfwi3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n\"\"\"Create a function decrypt that takes a string as an argument and\n\
    \    returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"\
    hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"ix\"\
    )\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9p703jd.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9p703jd.jl:1\n\
    in expression starting at /tmp/tmpr9p703jd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet)-2:]+alphabet[:alphabet.index(alphabet)-2]\n\
    \    encrypted_string = \"\"\n    for c in s\n        encrypted_string += rotated_alphabet[alphabet.index(c)+2]\n\
    \    end\n    return encrypted_string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.index(alphabet)\
    \ - 2):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1cw6j46l.jl:17\n\
    in expression starting at /tmp/tmp1cw6j46l.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet_rotated\
    \ = Array(\"nopqrstuvwxyzabcdefghijklm\")\n    \n    encrypted_string = \"\"\n\
    \    \n    for character in s do \n        encrypted_string += alphabet[alphabet.index(character)%alphabet_rotated.length]\
    \ + alphabet[alphabet_rotated.index(character)%alphabet_rotated.length]\n    end\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5v0dx1xj.jl:21\nin expression starting at /tmp/tmp5v0dx1xj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string = String.empty\n\
    \    \n    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptr2if0b0.jl:29\nin expression starting at\
    \ /tmp/tmptr2if0b0.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7gsg2ren.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gsg2ren.jl:1\n\
    in expression starting at /tmp/tmp7gsg2ren.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    enc = \"\"\n    for i in alphabet\n     \
    \   enc = enc + alphabet[(alphabet.index(i) + 2) % 26]\n    \n    return enc\n\
    \    \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q4c38rs.jl:26\nin expression starting at\
    \ /tmp/tmp1q4c38rs.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    rotated_alphabet = alphabet[1::2] + alphabet[::2]\n \
    \   encrypted_string = \"\"\n    for character in s\n        encrypted_string\
    \ += rotated_alphabet[alphabet.index(character)]\n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43vrk93n.jl:23\nin expression starting at\
    \ /tmp/tmp43vrk93n.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[0:2]\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8th75s7z.jl:17\nin expression\
    \ starting at /tmp/tmp8th75s7z.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n    \n \
    \   alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:1]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppyj9ukrd.jl:19\nin expression\
    \ starting at /tmp/tmppyj9ukrd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    return rotated_alphabet[alphabet.index(s)] + rotated_alphabet[alphabet.index(s)+1]\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_i3o6kth.jl:20\nin expression starting at\
    \ /tmp/tmp_i3o6kth.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    rotated_alphabet =\
    \ alphabet[1::2] + alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[::2]\n    \n    rotated_alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzy6wlion.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzy6wlion.jl:1\n\
    in expression starting at /tmp/tmpzy6wlion.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatrkyn6k.jl:1\nin expression starting at /tmp/tmpatrkyn6k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyt1dm0a2.jl:17\nin expression\
    \ starting at /tmp/tmpyt1dm0a2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzzkjb7kk.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzzkjb7kk.jl:1\n\
    in expression starting at /tmp/tmpzzkjb7kk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 1::-2]\n    \n    alphabet = alphabet[alphabet.size - 2::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 1::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2::-2]\n    \n    alphabet = alphabet[alphabet.size - 1::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 1::-2]\n    \n    alphabet = alphabet[alphabet.size - 2::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 1::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2::-2]\n    \n    alphabet = alphabet[alphabet.size - 1::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 1::-2]\n    \n    alphabet = alphabet[alphabet.size - 2::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 1::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2::-2]\n    \n    alphabet = alphabet[alphabet.size - 1::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 1::-2]\n    \n    alphabet = alphabet[alphabet.size - 2::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 1::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2::-2]\n    \n    alphabet = alphabet[alphabet.size - 1::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 1::-2]\n    \n    alphabet = alphabet[alphabet.size - 2::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 1::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2::-2]\n    \n    alphabet = alphabet[alphabet.size - 1::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 1::-2]\n    \n    alphabet = alphabet[alphabet.size - 2::-2]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 1::-2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2::-2]\n    \n    alphabet = alphabet[alphabet.size - 1::-2]\n    \n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)2\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpbap_o6m3.jl:19\nin expression starting at /tmp/tmpbap_o6m3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgb58spvd.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgb58spvd.jl:1\n\
    in expression starting at /tmp/tmpgb58spvd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6tmfvm2k.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6tmfvm2k.jl:1\n\
    in expression starting at /tmp/tmp6tmfvm2k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4waprlj1.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4waprlj1.jl:1\n\
    in expression starting at /tmp/tmp4waprlj1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    rotated_alphabet = alphabet[1::2]\n    \n\
    \    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rot\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7i04f6aa.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7i04f6aa.jl:1\n\
    in expression starting at /tmp/tmp7i04f6aa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp08ozkn_p.jl:19\nin expression\
    \ starting at /tmp/tmp08ozkn_p.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplklj7jdy.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplklj7jdy.jl:1\n\
    in expression starting at /tmp/tmplklj7jdy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n\"\"\"Create a function decrypt that takes a string as an argument and\n\
    \    returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"\
    hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"ix\"\
    )\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9p703jd.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9p703jd.jl:1\n\
    in expression starting at /tmp/tmpr9p703jd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyu69pu9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyu69pu9.jl:1\n\
    in expression starting at /tmp/tmpjyu69pu9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    \n    alphabet = alphabet[1::2] + alphabet[::2]\n    \n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpps8j_66x.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpps8j_66x.jl:1\n\
    in expression starting at /tmp/tmpps8j_66x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx1_h7vmg.jl:19\nin expression\
    \ starting at /tmp/tmpx1_h7vmg.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7brg7do.jl:1\nin expression starting at /tmp/tmpm7brg7do.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6_z6wxua.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_z6wxua.jl:1\n\
    in expression starting at /tmp/tmp6_z6wxua.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyu69pu9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyu69pu9.jl:1\n\
    in expression starting at /tmp/tmpjyu69pu9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"Create a function encrypt that takes a string as an argument and\n \
    \   returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt8ta0pib.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt8ta0pib.jl:1\n\
    in expression starting at /tmp/tmpt8ta0pib.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b5h2e6g.jl:1\nin expression starting at /tmp/tmp3b5h2e6g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyt1dm0a2.jl:17\nin expression\
    \ starting at /tmp/tmpyt1dm0a2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n  \
    \  alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n \
    \   alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size - 2:]\n   \
    \ alphabet = alphabet[1:alphabet.size]\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size]\n\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuvrwrzv0.jl:17\n\
    in expression starting at /tmp/tmpuvrwrzv0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n \
    \   alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphybujd38.jl:19\nin expression\
    \ starting at /tmp/tmphybujd38.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_cv2c6z.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_cv2c6z.jl:1\n\
    in expression starting at /tmp/tmp8_cv2c6z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxz54zol.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxz54zol.jl:1\n\
    in expression starting at /tmp/tmprxz54zol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n    rotated_alphabet\
    \ = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h7oz0ys.jl:1\nin expression starting at /tmp/tmp9h7oz0ys.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[alphabet.index(\"a\")+2:] + alphabet[alphabet.index(\"\
    a\")+2:]\n    alphabet = alphabet[alphabet.index(\"b\")+2:] + alphabet[alphabet.index(\"\
    b\")+2:]\n    alphabet = alphabet[alphabet.index(\"c\")+2:] + alphabet[alphabet.index(\"\
    c\")+2:]\n    alphabet = alphabet[alphabet.index(\"d\")+2:] + alphabet[alphabet.index(\"\
    d\")+2:]\n    alphabet = alphabet[alphabet.index(\"e\")+2:] + alphabet[alphabet.index(\"\
    e\")+2:]\n    alphabet = alphabet[alphabet.index(\"f\")+2:] + alphabet[alphabet.index(\"\
    f\")+2:]\n    alphabet = alphabet[alphabet.index(\"g\")+2:] + alphabet[alphabet.index(\"\
    g\")+2:]\n    alphabet = alphabet[alphabet.index(\"h\")+2:] + alphabet[alphabet.index(\"\
    h\")+2:]\n    alphabet = alphabet[alphabet.index(\"i\")+2:] + alphabet[alphabet.index(\"\
    i\")+2:]\n    alphabet = alphabet[alphabet.index(\"j\")+2:] + alphabet[alphabet.index(\"\
    j\")+2:]\n    alphabet = alphabet[alphabet.index(\"k\")+2:] + alphabet[alphabet.index(\"\
    k\")+2:]\n    alphabet = alphabet[alphabet.index(\"l\")+2:] + alphabet[alphabet.index(\"\
    l\")+2:]\n    alphabet = alphabet[alphabet.index(\"m\")+2:] + alphabet[alphabet.index(\"\
    m\")+2:]\n    alphabet = alphabet[alphabet.index(\"n\")+2:] + alphabet[alphabet.index(\"\
    n\")+2:]\n    alphabet = alphabet[alphabet.index(\"o\")+2:] + alphabet[alphabet.index(\"\
    o\")+2:]\n    alphabet = alphabet[alphabet.index(\"p\")+2:] + alphabet[alphabet.index(\"\
    p\")+2:]\n    alphabet = alphabet[alphabet.index(\"q\")+2:] + alphabet[alphabet.index(\"\
    q\")+2:]\n    alphabet = alphabet[alphabet.index(\"r\")+2:] + alphabet[alphabet.index(\"\
    r\")+\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9avl20h.jl:17\nin expression\
    \ starting at /tmp/tmpb9avl20h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppp0qlsuw.jl:18\nin expression\
    \ starting at /tmp/tmppp0qlsuw.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppel3cfn5.jl:17\n\
    in expression starting at /tmp/tmppel3cfn5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[2:] + alphabet[0:2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2]\
    \ + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[0:1]\n    alphabet = alphabet[1::2] + alphabet[0:1]\n\
    \    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuyq0a8mx.jl:17\nin expression\
    \ starting at /tmp/tmpuyq0a8mx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70urbjib.jl:1\nin expression starting at /tmp/tmp70urbjib.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[1:alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet * 2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhgpm9r8.jl:19\n\
    in expression starting at /tmp/tmplhgpm9r8.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatrkyn6k.jl:1\nin expression starting at /tmp/tmpatrkyn6k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wko8oz5.jl:18\nin expression starting at\
    \ /tmp/tmp6wko8oz5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ + 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size + 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptf2y8490.jl:1\nin expression starting at /tmp/tmptf2y8490.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp93jh1jl.jl:1\nin expression starting at /tmp/tmpp93jh1jl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    rotated_alphabet = alphabet[1::2] + alphabet[0::2]\n\
    \    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n\
    \    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n\
    \    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n\
    \    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n\
    \    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n\
    \    rotated_alphabet = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2] + rotated_alphabet[0::2]\n    rotated_alphabet = rotated_alphabet[1::2]\
    \ + rotated_alphabet[0::2]\n    rotated_alphabet\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3dznx3z3.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3dznx3z3.jl:1\n\
    in expression starting at /tmp/tmp3dznx3z3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzzkjb7kk.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzzkjb7kk.jl:1\n\
    in expression starting at /tmp/tmpzzkjb7kk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp8_k0ujf.jl:17\nin expression\
    \ starting at /tmp/tmpp8_k0ujf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \"\"\"\n    Create a function decrypt that takes a\
    \ string as an argument and\n    returns a string decrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
    \    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\
    \n    >>> decrypt(\"ix\")\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpxczebqte.jl:15 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxczebqte.jl:20\n\
    in expression starting at /tmp/tmpxczebqte.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet[alphabet.index(\"\
    a\")+1])+1:alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphabet.index(rotated_alphabet[rotated_alphabet.index(\"\
    a\")+1])+1:rotated_alphabet.index(\"z\")]\n    rotated_alphabet = rotated_alphabet[rotated_alphab\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mvo8znl.jl:1\nin expression starting at /tmp/tmp6mvo8znl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    enc = \"\"\n    for c in s:\n        enc\
    \ = enc + alphabet[alphabet.index(c)+2]\n    return enc\n    \n\"\"\"Create a\
    \ function decrypt that takes a string as an argument and\n    returns a string\
    \ decrypted with the alphabet being rotated. \n    The alphabet should be rotated\
    \ in a manner such that the letters \n    shift down by two multiplied to two\
    \ places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"\
    ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"ix\")\n    \"et\"\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprr2o7gyr.jl:21\nin expression starting at\
    \ /tmp/tmprr2o7gyr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp93jh1jl.jl:1\nin expression starting at /tmp/tmpp93jh1jl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    rotated_alphabet\
    \ = Array(\"zyxwvutsrqponmlkjihgfedcba\")\n    \n    encrypted_string = \"\"\n\
    \    for letter in s do \n        encrypted_string += rotated_alphabet[alphabet.index(letter)%alphabet.size]\n\
    \    end\n    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsg7gpmax.jl:20\nin expression starting at /tmp/tmpsg7gpmax.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7brg7do.jl:1\nin expression starting at /tmp/tmpm7brg7do.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7gsg2ren.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gsg2ren.jl:1\n\
    in expression starting at /tmp/tmp7gsg2ren.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[2:] + alphabet[0:2]\n    \n    encrypted_string = \"\"\n    \n  \
    \  for character in s do \n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    end\n    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm06n4whv.jl:19\nin expression\
    \ starting at /tmp/tmpm06n4whv.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n    alphabet.rotate(2)\n\
    \    alphabet.rotate(2)\n    alphab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplklj7jdy.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplklj7jdy.jl:1\n\
    in expression starting at /tmp/tmplklj7jdy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for character in s\n        \n        encrypted_string +=\
    \ alphabet[(alphabet.index(character) + 2) % 26]\n        \n    return encrypted_string\n\
    </code>\n<|/ a tags=string,encryption,python |>\n<| c |>\nThis doesn't seem to\
    \ work. Try encrypting \"abc\".\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used the example you gave in the question. Try it yourself and see if it works.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the example you gave in the\
    \ question. Try it yourself and see if it works.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the example you gave in the question. Try it yourself\
    \ and see if it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the\
    \ example you gave in the question. Try it yourself and see if it works.\n<|/\
    \ c |>\n<| a tags=string,encryption,python |>\n<code>\ndef encrypt(s):\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string = \"\"\n    for character\
    \ in s:\n        encrypted_string += alphabet[(alphabet.index(character) + 2)\
    \ % 26]\n    return encrypted_string\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,encryption,python\
    \ |>\n<code>\ndef encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    encrypted_string = \"\"\n    for character in s:\n        encrypted_string\
    \ += alphabet[(alphabet.index(character) + 2) % 26]\n    return encrypted_string\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\ndef encrypt(s):\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string = \"\"\n    for character\
    \ in s:\n        encrypted_string += alphabet[(alphabet.index(character) + 2)\
    \ % 26]\n    return encrypted_string\n</code>\n<|/ a tags=string,encryption,python\
    \ |>\n<| a tags=string,encryption,python |>\n<code>\ndef encrypt(s):\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio41ovmg.jl:26\nin expression starting at\
    \ /tmp/tmpio41ovmg.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5fwfqgg.jl:17\n\
    in expression starting at /tmp/tmpk5fwfqgg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5fwfqgg.jl:17\n\
    in expression starting at /tmp/tmpk5fwfqgg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptcdc_zlx.jl:17\nin expression\
    \ starting at /tmp/tmptcdc_zlx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7gsg2ren.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gsg2ren.jl:1\n\
    in expression starting at /tmp/tmp7gsg2ren.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string = String.empty\n\
    \    \n    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwc9u0ca7.jl:28\nin expression starting at\
    \ /tmp/tmpwc9u0ca7.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()/2:(alphabet.len()/2+alphabet.len()%2)]\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:alphabet.len()-1]\n    alphabet = alphabet*2\n    alphabet\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk7_242cf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk7_242cf.jl:1\n\
    in expression starting at /tmp/tmpk7_242cf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6_z6wxua.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6_z6wxua.jl:1\n\
    in expression starting at /tmp/tmp6_z6wxua.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[0])::-1] + alphabet[alphabet.index(alphabet[0])::-1]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1:] + rotated_alphabet[:1]\n  \
    \  \n    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet[0])::-1]\
    \ + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1:] + rotated_alphabet[:1]\n    \n    rotated_alphabet =\
    \ rotated_alphabet[alphabet.index(alphabet[0])::-1] + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1:] + rotated_alphabet[:1]\n  \
    \  \n    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet[0])::-1]\
    \ + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1:] + rotated_alphabet[:1]\n    \n    rotated_alphabet =\
    \ rotated_alphabet[alphabet.index(alphabet[0])::-1] + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1:] + rotated_alphabet[:1]\n  \
    \  \n    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet[0])::-1]\
    \ + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1:] + rotated_alphabet[:1]\n    \n    rotated_alphabet =\
    \ rotated_alphabet[alphabet.index(alphabet[0])::-1] + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1:] + rotated_alphabet[:1]\n  \
    \  \n    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet[0])::-1]\
    \ + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1:] + rotated_alphabet[:1]\n    \n    rotated_alphabet =\
    \ rotated_alphabet[alphabet.index(alphabet[0])::-1] + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1:] + rotated_alphabet[:1]\n  \
    \  \n    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet[0])::-1]\
    \ + rotated_alphabet[alphabet.index(alphabet[0])::-1]\n    \n    rotated_alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"alphabet.index(alphabet[0])::-1\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpyywct7hl.jl:19\nin expression starting at /tmp/tmpyywct7hl.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6y_orwad.jl:17\nin expression\
    \ starting at /tmp/tmp6y_orwad.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    rotated_alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    \n    encrypted_string = \"\"\n    \n    for character in s\n        encrypted_string\
    \ += rotated_alphabet[alphabet.index(character)]\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ucp59cx.jl:28\nin expression starting at\
    \ /tmp/tmp9ucp59cx.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_cv2c6z.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_cv2c6z.jl:1\n\
    in expression starting at /tmp/tmp8_cv2c6z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_ai3xyu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_ai3xyu.jl:1\n\
    in expression starting at /tmp/tmpx_ai3xyu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n\"\"\"Create a function decrypt that takes a string as an argument and\n\
    \    returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"\
    hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"ix\"\
    )\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9p703jd.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9p703jd.jl:1\n\
    in expression starting at /tmp/tmpr9p703jd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2] + alphabet[::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2]\n    alphabet = alphabet[1::\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6y_orwad.jl:17\nin expression\
    \ starting at /tmp/tmp6y_orwad.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70urbjib.jl:1\nin expression starting at /tmp/tmp70urbjib.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    rotated_alphabet = alphabet[1::2]\n    \n\
    \    encrypted_string = \"\"\n    \n    for letter in s do \n        encrypted_string\
    \ += rotated_alphabet[alphabet.index(letter)]\n    end\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxw_wk1fj.jl:23\nin expression starting at /tmp/tmpxw_wk1fj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_ai3xyu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_ai3xyu.jl:1\n\
    in expression starting at /tmp/tmpx_ai3xyu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3qusq7jm.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3qusq7jm.jl:1\n\
    in expression starting at /tmp/tmp3qusq7jm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet)-2)]\n    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n\
    \    \n    alphabet = alphabet[1..(length(alphabet)-2)]\n    \n    alphabet =\
    \ alphabet[1..(length(alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrgd_sfr.jl:80\nin expression starting at\
    \ /tmp/tmpqrgd_sfr.jl:80\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyo8_jxb.jl:1\nin expression starting at /tmp/tmpoyo8_jxb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_ai3xyu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_ai3xyu.jl:1\n\
    in expression starting at /tmp/tmpx_ai3xyu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb_3xypft.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb_3xypft.jl:1\n\
    in expression starting at /tmp/tmpb_3xypft.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_ai3xyu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_ai3xyu.jl:1\n\
    in expression starting at /tmp/tmpx_ai3xyu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet += string.ascii_uppercase\n\
    \    alphabet += string.digits\n    alphabet += string.punctuation\n    alphabet\
    \ += string.whitespace\n    alphabet += string.ascii_lowercase\n    alphabet +=\
    \ string.ascii_uppercase\n    alphabet += string.digits\n    alphabet += string.punctuation\n\
    \    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n \
    \   alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe42ie262.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe42ie262.jl:1\n\
    in expression starting at /tmp/tmpe42ie262.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyo8_jxb.jl:1\nin expression starting at /tmp/tmpoyo8_jxb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet .rotate_left(2)\n    alphabet\
    \ .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"alphabet\
    \ .\" at /tmp/tmp197746ja.jl:17\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp197746ja.jl:17\n\
    in expression starting at /tmp/tmp197746ja.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6tmfvm2k.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6tmfvm2k.jl:1\n\
    in expression starting at /tmp/tmp6tmfvm2k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatrkyn6k.jl:1\nin expression starting at /tmp/tmpatrkyn6k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxz54zol.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxz54zol.jl:1\n\
    in expression starting at /tmp/tmprxz54zol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet .rotate_left(2)\n    alphabet\
    \ .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n\
    \    alphabet .rotate_left(2)\n    alphabet .rotate_left(2)\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"alphabet\
    \ .\" at /tmp/tmp197746ja.jl:17\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp197746ja.jl:17\n\
    in expression starting at /tmp/tmp197746ja.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2 .. length(alphabet)]\
    \ \n    alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[1\
    \ .. length(alphabet)] \n    alphabet = alphabet[2 .. length(alphabet)] \n   \
    \ alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)]\
    \ \n    alphabet = alphabet[2 .. length(alphabet)] \n    alphabet = alphabet[1\
    \ .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)] \n   \
    \ alphabet = alphabet[2 .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)]\
    \ \n    alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[2\
    \ .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)] \n   \
    \ alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[2 .. length(alphabet)]\
    \ \n    alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[1\
    \ .. length(alphabet)] \n    alphabet = alphabet[2 .. length(alphabet)] \n   \
    \ alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)]\
    \ \n    alphabet = alphabet[2 .. length(alphabet)] \n    alphabet = alphabet[1\
    \ .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)] \n   \
    \ alphabet = alphabet[2 .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)]\
    \ \n    alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[2\
    \ .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)] \n   \
    \ alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[2 .. length(alphabet)]\
    \ \n    alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[1\
    \ .. length(alphabet)] \n    alphabet = alphabet[2 .. length(alphabet)] \n   \
    \ alphabet = alphabet[1 .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)]\
    \ \n    alphabet = alphabet[2 .. length(alphabet)] \n    alphabet = alphabet[1\
    \ .. length(alphabet)] \n    alphabet = alphabet[1 .. length(alphabet)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp43ajmf.jl:1\nin expression starting at /tmp/tmpnp43ajmf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6tmfvm2k.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6tmfvm2k.jl:1\n\
    in expression starting at /tmp/tmp6tmfvm2k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatrkyn6k.jl:1\nin expression starting at /tmp/tmpatrkyn6k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet * 2\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpu4qzg_.jl:1\nin expression starting at /tmp/tmpvpu4qzg_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoh7cudyh.jl:17\nin expression\
    \ starting at /tmp/tmpoh7cudyh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 27\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnfnw0jc.jl:17\nin expression starting at\
    \ /tmp/tmphnfnw0jc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn9bob5i8.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn9bob5i8.jl:1\n\
    in expression starting at /tmp/tmpn9bob5i8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp93jh1jl.jl:1\nin expression starting at /tmp/tmpp93jh1jl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzuzdub7a.jl:19\nin expression\
    \ starting at /tmp/tmpzuzdub7a.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    rotated_alphabet = alphabet[1::2]\n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr3etx1bb.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr3etx1bb.jl:1\n\
    in expression starting at /tmp/tmpr3etx1bb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    rotated_alphabet\
    \ = Array(\"bcdefghijklmnopqrstuvwxyzab\")\n    \n    encrypted_string = \"\"\n\
    \    \n    for i in s\n        encrypted_string += alphabet[alphabet.index(i)\
    \ + alphabet.index(rotated_alphabet[alphabet.index(i)])]\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2fvkdhz.jl:26\nin expression starting at\
    \ /tmp/tmpm2fvkdhz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgqls9g4r.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgqls9g4r.jl:1\n\
    in expression starting at /tmp/tmpgqls9g4r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.index(alphabet)-alphabet.index(\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9i8qame.jl:40\nin expression starting at\
    \ /tmp/tmpo9i8qame.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfuos0nu6.jl:17\n\
    in expression starting at /tmp/tmpfuos0nu6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ozs0mhd.jl:17\nin expression\
    \ starting at /tmp/tmp1ozs0mhd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet_rotated\
    \ = Array(\"nopqrstuvwxyzabcdefghijklm\")\n    \n    encrypted_string = String()\n\
    \    \n    for character in s\n        encrypted_string += alphabet[alphabet.index(character)%alphabet.size]\n\
    \        \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yh_90tn.jl:26\nin expression starting at\
    \ /tmp/tmp1yh_90tn.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4a7izv7p.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a7izv7p.jl:1\n\
    in expression starting at /tmp/tmp4a7izv7p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk2p9na9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2p9na9y.jl:1\n\
    in expression starting at /tmp/tmpk2p9na9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzzkjb7kk.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzzkjb7kk.jl:1\n\
    in expression starting at /tmp/tmpzzkjb7kk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.length\
    \ mod 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2\
    \ :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2\
    \ :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2\
    \ :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2\
    \ :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2\
    \ :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2\
    \ :: Int]\n    rotated_alphabet = rotated_alphabet[alphabet.length \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybb4maa7.jl:1\nin expression starting at /tmp/tmpybb4maa7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3dzyqx7q.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3dzyqx7q.jl:1\n\
    in expression starting at /tmp/tmp3dzyqx7q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n\
    \    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rot\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbd6qopu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbd6qopu.jl:1\n\
    in expression starting at /tmp/tmpdbd6qopu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string = \"\"\n    \n\
    \    for i in s\n        encrypted_string += rotated_alphabet[alphabet.index(i)]\n\
    \    \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx41rrgtl.jl:29\nin expression starting at\
    \ /tmp/tmpx41rrgtl.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70urbjib.jl:1\nin expression starting at /tmp/tmp70urbjib.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoh7cudyh.jl:17\nin expression\
    \ starting at /tmp/tmpoh7cudyh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbo_cphuw.jl:17\nin expression\
    \ starting at /tmp/tmpbo_cphuw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet)%26:alphabet.index(alphabet)+26]\n\
    \    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"z\")+1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.index(\"\
    z\")+1]\n    rotated_alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgr7n9niq.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgr7n9niq.jl:1\n\
    in expression starting at /tmp/tmpgr7n9niq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyt1dm0a2.jl:17\nin expression\
    \ starting at /tmp/tmpyt1dm0a2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    enc = \"\"\n    \n    for c in s\n      \
    \  \n        if c in alphabet\n            \n            index = alphabet.index(c)\n\
    \            \n            enc += alphabet[(index+2)%26]\n            \n     \
    \   else\n            \n            enc += c\n            \n        end\n    \
    \    \n    end\n    \n    return enc\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88mh0ji2.jl:39\nin expression starting at\
    \ /tmp/tmp88mh0ji2.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfrg18j26.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfrg18j26.jl:1\n\
    in expression starting at /tmp/tmpfrg18j26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wko8oz5.jl:18\nin expression starting at\
    \ /tmp/tmp6wko8oz5.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzzkjb7kk.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzzkjb7kk.jl:1\n\
    in expression starting at /tmp/tmpzzkjb7kk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9v7rm0j.jl:1\nin expression starting at /tmp/tmpo9v7rm0j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"\
    ,\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\"\
    ,\"w\",\"x\",\"y\",\"z\"]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet =\
    \ alphabet[1::2] + alphabet[-1::-2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphrx68a9u.jl:19\nin expression\
    \ starting at /tmp/tmphrx68a9u.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n\
    \    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n\
    \    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n\
    \    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n\
    \    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n\
    \    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n\
    \    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n\
    \    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n\
    \    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n\
    \    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n\
    \    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n\
    \    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n\
    \    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet\
    \ = alphabet[1..]\n    \n    alphabet = alphabet[1..]\n    \n    alphabet = alphabet[1\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplu1z1b58.jl:19\nin expression starting at /tmp/tmplu1z1b58.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n \
    \   \n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprt79ah_e.jl:19\nin expression\
    \ starting at /tmp/tmprt79ah_e.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdk2k9ibt.jl:18\nin expression\
    \ starting at /tmp/tmpdk2k9ibt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_cv2c6z.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_cv2c6z.jl:1\n\
    in expression starting at /tmp/tmp8_cv2c6z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppel3cfn5.jl:17\n\
    in expression starting at /tmp/tmppel3cfn5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n \
    \   alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n   \
    \ \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwbra1qde.jl:18\nin expression\
    \ starting at /tmp/tmpwbra1qde.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4n18blwj.jl:17\nin expression\
    \ starting at /tmp/tmp4n18blwj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2] # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2]\
    \ # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate\
    \ the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n\
    \    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2]\
    \ # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate\
    \ the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n\
    \    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2]\
    \ # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate\
    \ the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n\
    \    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2]\
    \ # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate\
    \ the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n\
    \    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet\
    \ = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2]\
    \ + alphabet[::2] # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2]\
    \ # rotate the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate\
    \ the alphabet\n    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n\
    \    alphabet = alphabet[1::2] + alphabet[::2] # rotate the alphabet\n    alphabet\
    \ = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0230mc_3.jl:17\nin expression\
    \ starting at /tmp/tmp0230mc_3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxz54zol.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxz54zol.jl:1\n\
    in expression starting at /tmp/tmprxz54zol.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyo8_jxb.jl:1\nin expression starting at /tmp/tmpoyo8_jxb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n\"\"\"Create a function decrypt that takes a string as an argument and\n\
    \    returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"\
    hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"ix\"\
    )\n    \"et\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9p703jd.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9p703jd.jl:1\n\
    in expression starting at /tmp/tmpr9p703jd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:1]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpio65hwga.jl:17\nin expression\
    \ starting at /tmp/tmpio65hwga.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    rotated_alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    encrypted_string = \"\"\n    for character in s\n      \
    \  encrypted_string += rotated_alphabet[alphabet.index(character)]\n    return\
    \ encrypted_string\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpykwv1stm.jl:17\nin expression\
    \ starting at /tmp/tmpykwv1stm.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26]\n    \n   \
    \ encrypted_string = s\n    \n    for i in encrypted_string\n        encrypted_string\
    \ = encrypted_string.replace(i, rotated_alphabet)\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1po4v4s.jl:28\nin expression starting at\
    \ /tmp/tmpn1po4v4s.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9v7rm0j.jl:1\nin expression starting at /tmp/tmpo9v7rm0j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n \
    \   alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphybujd38.jl:19\nin expression\
    \ starting at /tmp/tmphybujd38.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdwowljw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdwowljw.jl:1\n\
    in expression starting at /tmp/tmprdwowljw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.index(alphabet[1::2]))::2]\n\
    \    rotated_alphabet = rotated_alphabet[(alphab\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsz1fgi3y.jl:43\nin expression starting at\
    \ /tmp/tmpsz1fgi3y.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppel3cfn5.jl:17\n\
    in expression starting at /tmp/tmppel3cfn5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoh7cudyh.jl:17\nin expression\
    \ starting at /tmp/tmpoh7cudyh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"\
    lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\"\
    )\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70urbjib.jl:1\nin expression starting at /tmp/tmp70urbjib.jl:1\n"
  stdout: ''
