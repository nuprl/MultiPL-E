name: HumanEval_139_special_factorial
language: jl
prompt: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>>\
  \ special_factorial(4)\n    288\n\n    The function will receive an integer as input\
  \ and should return the special\n    factorial of this integer.\n    \"\"\"\nfunction\
  \ special_factorial(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
  \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
  \t@test(candidate(1) == 1)\nend\n"
completions: ["    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)::Int64",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n# Tests\n@test special_factorial(1) == factorial(1)\n\
    @test special_factorial(2) == factorial(2)\n@test special_factorial(3) == factorial(3)\n\
    @test special_factorial(4) == factorial(4)\n@test special_factorial(5) == factorial(5)\n\
    @test special_factorial(6) == factorial(6)\n@test special_factorial(7) == factorial(7)\n\
    @test special_factorial(8) == factorial(8)\n@test special_factorial(9) == factorial(9)\n\
    @test special_factorial(10) == factorial(10)\n@test special_factorial(11) == factorial(11)\n\
    @test special_factorial(12) == factorial(12)\n@test special_factorial(13) == factorial(13)\n\
    @test special_factorial(14) == factorial(14)\n@test special_factorial(15) == factorial(15)\n\
    @test special_factorial(16) == factorial(16)\n@test special_factorial(17) == factorial(17)\n\
    @test special_factorial(18) == factorial(18)\n@test special_factorial(19) == factorial(19)\n\
    @test special_factorial(20) == factorial(20)\n@test special_factorial(21) == factorial(21)\n\
    @test special_factorial(22) == factorial(22)\n@test special_factorial(23) == factorial(23)\n\
    @test special_factorial(24) == factorial(24)\n@test special_factorial(25) == factorial(25)\n\
    @test special_factorial(26) == factorial(26)\n@test special_factorial(27) == factorial(27)\n\
    @test special_factorial(28) == factorial(28)\n@test special_factorial(29) == factorial(29)\n\
    @test special_factorial(30) == factorial(30)\n@test special_factorial(31) == factorial(31)\n\
    @test special_factorial(32) == factorial(32)\n@test special_factorial(33) == factorial(33)\n\
    @test special_factorial(34) == factorial(34)\n@test special_factorial(35) == factorial(35)\n\
    @test special_factorial(36) == factorial(36)\n@test special_factorial(37) == factorial(37)\n\
    @test special_factorial(38) == factorial(38)\n@test special_factorial(39) == factorial(39)\n\
    @test special_factorial(40) == factorial(40)\n@test special_factorial(41) == factorial(41)\n\
    @test special_factorial(42) == factorial(42)\n@test special_", "    if n == 0\
    \ \n        1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that computes the factorial of a number given as an input argument. The function\
    \ should raise an error if the input is not positive.", "    if n == 0\n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial_series(n::Int64)", "    if n <= 1\n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend", "    if n == 0 \n        1\n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        factorial(n) * special_factorial(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will receive a number\
    \ as input and return the factorial of this number.", "    if n == 0\n       \
    \ 1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n# Test\nspecial_factorial(4)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)!\
    \ * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    factorial_series(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  special_factorial(n - 1) * n\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the factorial of a given number using recursion.", " \
    \   if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number. Your function should receive a number as input and should\
    \ return the factorial of this number.", "    if n == 0\n        1\n    else\n\
    \        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number given as\
    \ an input parameter and returns the factorial as a Float64. Test your function\
    \ with different numbers. What happens if you pass it a negative number? What\
    \ happens if you pass it a number larger than the maximum representable number\
    \ in Float64?", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<text>\nExercise 4\nWrite a function that calculates\
    \ the factorial of a given number. Your function should receive an integer as\
    \ input and should return the factorial of this integer.", "    if n == 0 \n \
    \       1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    The factorial function will receive an integer as input and should return the\
    \ factorial of this integer.", "    if n == 0\n        1\n    else\n        n\
    \ * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number given as an input parameter and returns\
    \ the factorial as a Float64. Test your function with several examples:", "  \
    \  if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# Testing the function\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a number given as an input argument.", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        special_factorial(n-1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\n    \n    Calculates the factorial\
    \ series up to n.\n    \n    For example:\n    >>> factorial_series(4)\n    2432902008176640000\n\
    \    \n    The function will receive an integer as input and should return the\
    \ factorial\n    series of this integer.\n    \"\"\"", "    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@time factorial(10000);\n</cell>\n<code language=julia-1.4>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the factorial of a number using recursion.", "    if n == 0\n   \
    \     1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if n == 0 \n\
    \        1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The factorial of a number n is defined as:\n    factorial(n)\
    \ = n!\n    where n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        special_factorial(n - 1)\
    \ * n\nend\n</cell>\n<code language=julia-1.4>\n# Test the function\nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number using recursion.", "    if n == 0\n        1\n    else\n      \
    \  n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        1\n    else \n        special_factorial(n-1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0 \n        1\n    else \n        n * special_factorial(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n\
    end\n</cell>\n<code language=julia-1.0>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that computes the factorial of a\
    \ given number using recursion.", "    if n == 0 \n        1 \n    else \n   \
    \     special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0 \n        1\n    else \n  \
    \      special_factorial(n-1) * n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\
    \ \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nspecial_factorial(4)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number. \nThe function should receive an integer as input and should\
    \ return the factorial of this integer.", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the factorial of a number using recursion.",
  "    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ number using recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0 \n        1\n    else\n   \
    \     n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that calculates the factorial of a number using recursion.", "    if\
    \ n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the factorial of a given number\
    \ using recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a number using recursion.", "    if n < 0\n        error(\"Negative factorial\
    \ is not defined\")\n    elseif n == 0\n        1\n    else\n        factorial(n)\
    \ * special_factorial(n - 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the factorial of a given number. Your function should\
    \ receive an integer as input and should return the factorial of this integer.",
  "    if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)", " \
    \   if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that calculates the factorial\
    \ of a number using recursion.", "    if n == 0\n        1\n    else\n       \
    \ n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the factorial of a number using recursion.", "    if n == 0\n   \
    \     1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will calculate the factorial of a number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)::Int64",
  "    if n == 0 \n        1\n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0 \n        1\n    else\n        special_factorial(n - 1) * n\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that calculates the factorial\
    \ of a number. Test your function with several different inputs. What happens\
    \ if you enter a negative number? What happens if you enter a number that is too\
    \ big to fit into an Int64?", "    if n == 0 \n        1 \n    else \n       \
    \ special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n        n! *\
    \ (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the factorial of a given number using recursion.", "    if n ==\
    \ 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n\
    \    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0 \n        1\n    else \n        special_factorial(n-1) * n\nend\n\
    </cell>\n<code language=julia-1.3>\nspecial_factorial(4)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a number using recursion.",
  "    if n == 0 \n        1\n    else \n        special_factorial(n-1) * n\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)::Int64", " \
    \   if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.3>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<text>\nThe function special_factorial is recursive,\
    \ meaning that it calls itself until it reaches the base case (when n = 0). In\
    \ this case, the base case is when n = 0. Thus, special_factorial will always\
    \ return 1.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        factorial(n) * (n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the factorial of a number using recursion.", "    if n == 0\n        1\n   \
    \ else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that computes the factorial of a given number\
    \ using recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n\
    \ - 1))\nend\n</cell>\n<text>\nExercise 9\nWrite a function that calculates the\
    \ factorial of a number using recursion.", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64", "    if n == 0\n        1\n  \
    \  else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n   \
    \     n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n        n\
    \ * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"The factorial of a number is the product of all the numbers from 1 to that\
    \ number. \nThe factorial of 0 is 1.", "    if n == 0\n        1\n    else\n \
    \       n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        special_factorial(n - 1) * n\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.3>", " \
    \   if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"The factorial of a number\
    \ n is defined as:\n    factorial(n) = n!\n    where n > 0", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number given as an input parameter. \nThe function should receive a number as\
    \ input parameter and should return the factorial of this number.", "    if n\
    \ == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product\
    \ of all the numbers from 1 to that number.\nFor example, factorial(5) = product(1,2,3,4,5)\
    \ = 1*2*3*4*5 = 120.\n\"\"\"", "    if n == 0\n        1\n    else\n        factorial(n)\
    \ * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0\n        1\n    else\n        n *\
    \ special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    The factorial of a number is the product of all the numbers from 1 to that number.\n\
    The factorial of a negative number is defined as the product of the negative number\n\
    with the factorial of the positive number.", "    if n == 0 \n        1 \n   \
    \ else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\
    \ \n        1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <code language=julia-1.3>\n@time factorial(10000);\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function with the above example\n@assert special_factorial(4) == 288\n\
    </cell>\n<text>\nTask 3\nWrite a function that calculates the sum of all integers\
    \ up to and including n.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"The factorial of a\
    \ number is the product of all positive integers less than or equal to it.\n \
    \   For example:\n    >>> factorial(5)\n    120\n    \n    The function will receive\
    \ an integer as input and should return the factorial of this integer.\n    \"\
    \"\"", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n\
    <text>\nExercise 2.1\nWrite a function that calculates the factorial of a given\
    \ integer n using recursion.", "    if n == 0\n        1\n    else\n        n\
    \ * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given integer $n$. \nThe function should\
    \ receive an integer as input and should return the factorial of this integer.",
  "    if n == 0 \n        1\n    else\n        n * (special_factorial(n - 1))\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0 \n        1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ using recursion.", "    if n <= 1\n        1\n    else\n        n * (special_factorial(n-1))\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ factorial of a number using recursion.", "    if n <= 1\n        1\n    else\n\
    \        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nThe factorial of a number is the product of its digits, starting from\
    \ 1 \nand ending with 9. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\n\
    \"\"\"", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will calculate the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        factorial(n) * special_factorial(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n    else\n\
    \        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000)\n</cell>\n<code language=julia-1.5>\n@time factorial(1000000)\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000000)\n</cell>\n<code language=julia-1.5>\n@time factorial(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(1000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ factorial(10000000000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time special_factorial(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(1000000000000000000", "    if n ==\
    \ 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend", "    if\
    \ n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.", "    if n == 0\n        1\n    else\n        n *\
    \ (special_factorial(n-1))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else if n\
    \ == 1 \n        1\n    else if n == 2 \n        2\n    else if n == 3 \n    \
    \    6\n    else if n == 4 \n        24\n    else if n == 5 \n        120\n  \
    \  else if n == 6 \n        720\n    else if n == 7 \n        5040\n    else if\
    \ n == 8 \n        40320\n    else if n == 9 \n        362880\n    else if n ==\
    \ 10 \n        3628800\n    else if n == 11 \n        39916800\n    else if n\
    \ == 12 \n        479001600\n    else if n == 13 \n        6227020800\n    else\
    \ if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        263130836933693530167218012160000000\n    else if n == 33 \n        8683317618811886495518194401280000000\n\
    \    else if n == 34 \n        295232799039604140847618609643520000000\n    else\
    \ if n == ", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0\n        1\n    else\n \
    \       n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64", "    if n == 0\n        1\n  \
    \  else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. Recall that factorial is defined\
    \ as:", "    if n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else\
    \ \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)", "    if n\
    \ == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else\
    \ \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.3>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.3>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.", "    if n == 0\n        1\n    else\n    \
    \    n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nThe factorial of a number is the product of all positive integers less\
    \ than or equal to that number.\nThe factorial of a number n is defined as:\n\
    \    factorial(n) = n!\n    where n > 0", "    if n == 0\n        1\n    else\n\
    \        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)",
  "    if n <= 1\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        1\n    else\n  \
    \      n * special_factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"The factorial of a number is the product of all numbers from 1 to that number\n\
    (inclusive). The factorial of a negative number is the product of all numbers\
    \ from 1 to\nthat negative number (inclusive). The factorial of 0 is 1.", "  \
    \  if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend\n</cell>\n<text>\nExercise 7: Write a function that calculates the\
    \ factorial of a given number using recursion.", "    if n <= 1\n        1\n \
    \   else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that returns the factorial of a number using recursion.",
  "    if n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n\
    <code language=julia-1.5>\n@time special_factorial(10000);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number using\
    \ recursion.", "    if n == 0\n        1\n    else\n        special_factorial(n-1)\
    \ * n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n-1) * n\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n == 0\n        1\n    else\n\
    \        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\n    Computes the factorial series\
    \ up to n.", "    if n == 0\n        1\n    else\n        n * (special_factorial(n\
    \ - 1))\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    factorial_series(n::Int64)::Int64",
  "    if n < 0\n        error(\"Negative factorial is not defined\")\n    elseif\
    \ n == 0\n        1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ factorial of a given number. \nThe function should receive an integer as input\
    \ and should return the factorial of this integer.", "    if n == 0 \n       \
    \ 1\n    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else\
    \ if n == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n\
    \        120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        1764607523034234804210512590720000000\n    else if n == 33 \n       \
    \ 35184372088824009143985093056640000000\n    else if n == 34 \n        703687441776648028677463972509",
  "    if n == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number. \nThe function should receive a number as input and should return\
    \ the factorial of this number.", "    if n == 0 \n        1\n    else \n    \
    \    special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! *\
    \ (n-1)! * (n-2)! * ... * 1!\n    where n > 0", "    if n == 0\n        1\n  \
    \  else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)", "    if n == 0 \n        1\n    else\
    \ \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n# Tests\n\
    @test special_factorial(4) == 288\n@test special_factorial(5) == 120\n@test special_factorial(6)\
    \ == 720\n@test special_factorial(7) == 5040\n@test special_factorial(8) == 40320\n\
    @test special_factorial(9) == 362880\n@test special_factorial(10) == 3628800\n\
    @test special_factorial(11) == 39916800\n@test special_factorial(12) == 479001600\n\
    @test special_factorial(13) == 6227020800\n@test special_factorial(14) == 87178291200\n\
    @test special_factorial(15) == 1307674368000\n@test special_factorial(16) == 20922789888000\n\
    @test special_factorial(17) == 355687428096000\n@test special_factorial(18) ==\
    \ 6402373705728000\n@test special_factorial(19) == 121645100408832000\n@test special_factorial(20)\
    \ == 2432902008176640000\n@test special_factorial(21) == 51090942171709440000\n\
    @test special_factorial(22) == 1124000727777607680000\n@test special_factorial(23)\
    \ == 25852016738884976640000\n@test special_factorial(24) == 620448401733239439360000\n\
    @test special_factorial(25) == 15511210043330985984000000\n@test special_factorial(26)\
    \ == 403291461126605635584000000\n@test special_factorial(27) == 10888869450418352160768000000\n\
    @test special_factorial(28) == 304888344611713860501504000000\n@test special_factorial(29)\
    \ == 8841761993739701954543616000000\n@test special_factorial(30) == 265252859812191058636308480000000\n\
    @test special_factorial(31) == 8222838654177922817725562880000000\n@test special_factorial(32)\
    \ == 263130836933693530167218012160000000\n@test special_factorial(33) == 8683317618811886495518194401280000000\n\
    @test special_factorial(34) == 30055048221625332791556221320000000\n@test special_factorial(35)\
    \ == 6658219", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Array{Int64}\n\
    \    \n    Calculates the factorial series up to n\n    \n    Arguments:\n   \
    \ \n    - `n` - an integer\n    \n    Returns:\n    \n    - `factorial_series`\
    \ - an array of integers containing the factorial series up to n\n    \n    Usage:\n\
    \    \n    ```julia\n    factorial_series(10)\n    ```\n    \"\"\"", "    if n\
    \ == 0 \n        1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number.\
    \ Your function should receive an integer as input and should return the factorial\
    \ of this integer.", "    if n < 0\n        error(\"factorial function only accepts\
    \ positive integers\")\n    elseif n == 0\n        return 1\n    else\n      \
    \  return factorial(n) * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)", "    if n == 0\n        1\n    else\n      \
    \  special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the factorial of a given number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The factorial of a number is the product of all\
    \ positive integers less than or equal to it.", "    if n == 0 \n        1 \n\
    \    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(1000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(1000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.", "    if n\
    \ == 0\n        1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.", "    if n <= 0\n        error(\"n must be positive\")\n    else\
    \ if n == 1\n        1\n    else\n        special_factorial(n - 1) * n\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    factorial(n::Int64)", "    if\
    \ n == 0\n        1\n    else\n        n * special_factorial(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined\
    \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where\
    \ n > 0", "    if n == 0 \n        1\n    else \n        special_factorial(n -\
    \ 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"The factorial of a number\
    \ is the product of all positive integers less than or equal to that number. \n\
    \    For example:\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n\
    \    >>> factorial(10)\n    3628800\n    >>> factorial(100)\n    3628800\n\"\"\
    \"", "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code\
    \ language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the factorial of a given number using recursion.",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)", " \
    \   if n == 0\n        1\n    else\n        n * (special_factorial(n-1))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 4\nWrite a function that calculates the factorial of a given\
    \ integer $n$. Your function should receive an integer as input and should return\
    \ the factorial of this integer.", "    if n == 0 \n        1\n    else\n    \
    \    n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # TEST special_factorial (5b)\n@test special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number multiplied\
    \ by itself n times.", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The factorial of a\
    \ number is the product of all positive integers less than or equal to it.\n \
    \   For example:\n    >>> factorial(5)\n    120\n    \n    The function will receive\
    \ an integer as input and should return the factorial of this integer.\n    \"\
    \"\"", "    if n < 0\n        error(\"Negative factorial not allowed\")\n    elseif\
    \ n == 0\n        1\n    else\n        factorial(n) * special_factorial(n - 1)\n\
    \    end\nend", "    if n == 0\n        1\n    else\n        special_factorial(n\
    \ - 1) * n\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert special_factorial(4)\
    \ == 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial\
    \ of a given number using recursion.", "    if n == 0 \n        1 \n    else \n\
    \        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\nThe factorial of a number is the product of its\
    \ digits. For example, the\nfactorial of 7 is 1*2*3*4*5*6*7 = 72.", "    if n\
    \ == 0\n        1\n    else\n        factorial(n) * (n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <text>\nThe factorial function will receive an integer as input and should return\
    \ the factorial of this integer.", "    if n == 0\n        1\n    else\n     \
    \   n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0\n        1\n    else\n        n * (special_factorial(n - 1))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n\
    \    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0",
  "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\n\
    end\n</cell>\n<text>\nThe factorial function will receive an integer as input\
    \ and should return the factorial of this integer.", "    if n <= 1\n        1\n\
    \    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64", "    if\
    \ n == 0 \n        1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    factorial(n::Int64)", "    if n == 0\n\
    \        1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Exercise 3\n\"\"\"The factorial of a number n is defined\
    \ as:\n    factorial(n) = n!\n    where n > 0", "    if n == 0\n        1\n  \
    \  else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function with different inputs\n@test special_factorial(4) == 288\n\
    @test special_factorial(5) == 720\n@test special_factorial(6) == 5040\n@test special_factorial(7)\
    \ == 40320\n@test special_factorial(8) == 362880\n@test special_factorial(9) ==\
    \ 3628800\n@test special_factorial(10) == 39916800\n@test special_factorial(11)\
    \ == 479001600\n@test special_factorial(12) == 6227020800\n@test special_factorial(13)\
    \ == 87178291200\n@test special_factorial(14) == 1307674368000\n@test special_factorial(15)\
    \ == 20922789888000\n@test special_factorial(16) == 355687428096000\n@test special_factorial(17)\
    \ == 6402373705728000\n@test special_factorial(18) == 121645100408832000\n@test\
    \ special_factorial(19) == 2432902008176640000\n@test special_factorial(20) ==\
    \ 51090942171709440000\n@test special_factorial(21) == 1124000727777607680000\n\
    @test special_factorial(22) == 25852016738884976640000\n@test special_factorial(23)\
    \ == 620448401733239439360000\n@test special_factorial(24) == 15511210043330985984000000\n\
    @test special_factorial(25) == 403291461126605635584000000\n@test special_factorial(26)\
    \ == 10888869450418352160768000000\n@test special_factorial(27) == 304888344611713860501504000000\n\
    @test special_factorial(28) == 8841761993739701954543616000000\n@test special_factorial(29)\
    \ == 265252859812191058636308480000000\n@test special_factorial(30) == 8222838654177922817725562880000000\n\
    @test special_factorial(31) == 263130836933693530167218012160000000\n@test special_factorial(32)\
    \ == 82228386541779228177255628800000000\n@test special_factorial(33) == 2631308369336935301672180121600000000\n\
    @test special_factorial(34) == 82228386541779228177255", "    if n == 0 \n   \
    \     1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        1 \n    else \n        special_factorial(n\
    \ - 1) * n \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "    if n == 0\n        1\n    else\n        n * special_factorial(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\n        1\n\
    \    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
