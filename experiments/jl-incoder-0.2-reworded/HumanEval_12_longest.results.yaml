language: jl
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    lengths = Vector{Int}()\n    for s in\
    \ strings\n        push!(lengths, length(s))\n    end\n    longest = strings[argmax(lengths)]\n\
    \    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's\
    \ a Julia 1.5 solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s8wnqfx.jl:19\nin expression starting at\
    \ /tmp/tmp8s8wnqfx.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for s in strings \n  \
    \          if length(s) == length(longest) \n                longest = s \n  \
    \          end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\", \"lll\", \"mmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nn\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoohkkbin.jl:23\nin expression starting at\
    \ /tmp/tmpoohkkbin.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    lengths = Vector{Int}()\n    for s in\
    \ strings\n        push!(lengths, length(s))\n        if lengths == length\n \
    \           longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps2v4etxc.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmps2v4etxc.jl:27\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: nothing == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps2v4etxc.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2v4etxc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps2v4etxc.jl:28\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: nothing == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps2v4etxc.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2v4etxc.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for s in strings \n  \
    \          if length(s) == length(longest) \n                longest = s \n  \
    \          end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome or not.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kfp9wh8.jl:23\nin expression starting at\
    \ /tmp/tmp0kfp9wh8.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    if length(strings) == 0\n      \
    \  return nothing\n    end\n    \n    longest = strings[end][1]\n    for string\
    \ in strings\n        if string[1] > longest\n            longest = string[1]\n\
    \        end\n    end\n    \n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns the sum of the integers\
    \ corresponding to each string in the input vector. For example, if the input\
    \ vector is [\"a\", \"b\", \"c\"] and the integers vector is [10, 20, 30], the\
    \ function should return 60.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzro72qlu.jl:26\nin expression starting at\
    \ /tmp/tmpzro72qlu.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end]\n        for s in strings[2:end]\n            if length(longest)\
    \ > length(s)\n                longest = s\n            end\n        end\n   \
    \ end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps4pj3yeu.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmps4pj3yeu.jl:28\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps4pj3yeu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps4pj3yeu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps4pj3yeu.jl:29\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"abc\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps4pj3yeu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps4pj3yeu.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    max_length = maximum(strings,\
    \ lengths)\n    max_length == nothing ? return nothing : max_length\n    max_length\
    \ == lengths(strings) ? return strings[1] : longest(strings[2:end])\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ the longest string in that vector, followed by the number of characters in that\
    \ string. For example,\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdxzgkjr.jl:14\nin expression starting at\
    \ /tmp/tmpsdxzgkjr.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[argmax(lengths(strings))]\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of strings. \nThe function should return nothing in case\
    \ the two vectors are empty or have different lengths.\nThe function should return\
    \ nothing in case the two vectors are empty or have different lengths.\nThe function\
    \ should return nothing in case the two vectors are empty or have different lengths.\n\
    The function should return nothing in case the two vectors are empty or have different\
    \ lengths.\nThe function should return nothing in case the two vectors are empty\
    \ or have different lengths.\nThe function should return nothing in case the two\
    \ vectors are empty or have different lengths.\nThe function should return nothing\
    \ in case the two vectors are empty or have different lengths.\nThe function should\
    \ return nothing in case the two vectors are empty or have different lengths.\n\
    The function should return nothing in case the two vectors are empty or have different\
    \ lengths.\nThe function should return nothing in case the two vectors are empty\
    \ or have different lengths.\nThe function should return nothing in case the two\
    \ vectors are empty or have different lengths.\nThe function should return nothing\
    \ in case the two vectors are empty or have different lengths.\nThe function should\
    \ return nothing in case the two vectors are empty or have different lengths.\n\
    The function should return nothing in case the two vectors are empty or have different\
    \ lengths.\nThe function should return nothing in case the two vectors are empty\
    \ or have different lengths.\nThe function should return nothing in case the two\
    \ vectors are empty or have different lengths.\nThe function should return nothing\
    \ in case the two vectors are empty or have different lengths.\nThe function should\
    \ return nothing in case the two vectors are empty or have different lengths.\n\
    The function should return nothing in case the two vectors are empty or have different\
    \ lengths.\nThe function should return nothing in case the two vectors are empty\
    \ or have different lengths.\nThe function should return nothing in case the two\
    \ vectors are empty or have different lengths.\nThe function should return nothing\
    \ in case the two vectors are empty or have different lengths.\nThe function should\
    \ return nothing in case the two vectors are empty or have different lengths.\n\
    The function should return nothing in case the two vectors are empty or have different\
    \ lengths.\nThe function should return nothing in case the two vectors are empty\
    \ or have different lengths.\nThe function should return nothing in case the two\
    \ vectors are empty or have different lengths.\nThe function should return nothing\
    \ in case the two vectors are empty or have different lengths.\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplj0xq6qy.jl:17\nin expression starting at\
    \ /tmp/tmplj0xq6qy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string <- strings[length(strings)-1] \n        for string in\
    \ strings \n            if length(string) > length(longest_string) \n        \
    \        longest_string <- string \n        return longest_string \nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of strings and a vector\
    \ of integers and returns a vector of strings where each string is the concatenation\
    \ of the integer vector with the string in the input vector. For example, if the\
    \ input vector is [\"a\", \"b\", \"c\"] and the integer vector is [1,2,3], the\
    \ output should be [\"1a\", \"2b\", \"3c\"].\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4oxe3j6.jl:20\nin expression starting at\
    \ /tmp/tmpi4oxe3j6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    for s in strings\n        if longest\
    \ == nothing || length(longest) > length(s) \n            longest = s\n      \
    \  end\n    end\n    \n    return longest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpug4fs7mq.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpug4fs7mq.jl:28\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpug4fs7mq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpug4fs7mq.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if length(strings) > 0 \n        longest\
    \ = strings[length(strings)-1]\n        for s in strings[2:length(strings)-1]\n\
    \            if length(s) > length(longest)\n                longest = s\n   \
    \         end\n        end\n    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the longest string in an array of strings.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjc4o6o8.jl:22\nin expression starting at\
    \ /tmp/tmpxjc4o6o8.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of characters in a string. \n    >>> count_chars(\"a\")\n    1\n\
    \    >>> count_chars(\"ab\")\n    2\n    >>> count_chars(\"abbb\")\n    3\n  \
    \  >>> count_chars(\"abbbb\")\n    4\n    >>> count_chars(\"abbbbc\")\n    5\n\
    \    >>> count_chars(\"abbbbcde\")\n    6\n    >>> count_chars(\"abbbbcdef\")\n\
    \    7\n    >>> count_chars(\"abbbbcdefgh\")\n    8\n    >>> count_chars(\"abbbbcdefghij\"\
    )\n    9\n    >>> count_chars(\"abbbbcdefghijk\")\n    10\n    >>> count_chars(\"\
    abbbbcdefghijklm\")\n    11\n    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n\
    \    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\"\
    )\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"\
    abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n   \
    \ 12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"\
    abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n   \
    \ 12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"\
    abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n   \
    \ 12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"\
    abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n   \
    \ 12\n    >>> count_chars(\"abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"\
    abbbbcdefghijklmn\")\n    12\n    >>> count_chars(\"abbbbcdefghijklmn\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xspl2a8.jl:19\nin expression starting at\
    \ /tmp/tmp2xspl2a8.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for string in strings\n        if longest\
    \ == nothing || length(longest) > length(string)\n            longest = string\n\
    \        end\n    end\n    return longest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_09b9g1l.jl:19\nin expression starting at\
    \ /tmp/tmp_09b9g1l.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of strings where each string in the input vector is replaced\
    \ by the corresponding integer in the input vector. For example, if the input\
    \ vector is [\"a\", \"b\", \"c\"] and the input vector is [2, 1, 3], the output\
    \ vector should be [\"a\", \"2\", \"3\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhobysxr.jl:15\nin expression\
    \ starting at /tmp/tmpxhobysxr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[end]\n        for string in strings\n            if length(string)\
    \ > length(longest)\n                longest = string\n        end\n        longest\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj4e4eh3p.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj4e4eh3p.jl:1\n\
    in expression starting at /tmp/tmpj4e4eh3p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the vector\
    \ is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ozitcct.jl:15\nin expression\
    \ starting at /tmp/tmp8ozitcct.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for s in strings \n  \
    \          if length(s) == length(longest) \n                longest = s \n  \
    \          end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which takes a vector of strings and returns the longest\
    \ string in that vector. Return nothing in case the vector is empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgf6gjq1.jl:23\nin expression starting at\
    \ /tmp/tmppgf6gjq1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    longest_string = filter(x -> x == max_length, strings)\n\
    \    if length(longest_string) == 1\n        return longest_string\n    else\n\
    \        return longest(longest_string)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of strings and returns a vector of strings where each string is the\
    \ concatenation of all the strings in the input vector, separated by spaces.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv02uy3a.jl:21\nin expression starting at\
    \ /tmp/tmpyv02uy3a.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_length = length(strings) \n        longest_string = strings[1]\
    \ \n        for string in strings[2:] \n            if length(longest_string)\
    \ > length(string) \n                longest_string = string \n            end\
    \ \n        end \n        return longest_string \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7bf64un4.jl:16\nin expression\
    \ starting at /tmp/tmp7bf64un4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings\n            if length(s) >= length(longest)\n\
    \                longest = s\n            end\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5lhizzu9.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp5lhizzu9.jl:28\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lhizzu9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lhizzu9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5lhizzu9.jl:29\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lhizzu9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lhizzu9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest <- strings[[1]]\n        for string in strings[2:length(strings)]\
    \ \n            if length(longest) < length(string) \n                longest\
    \ <- string \n        return longest \n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of strings where each string in the original vector is\
    \ replaced by the corresponding integer in the second vector. For example, if\
    \ the input vector is [\"a\", \"b\", \"c\"] and the second vector is [4, 2, 3],\
    \ then the output vector should be [\"4\", \"2\", \"3\"].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa04u5g7g.jl:21\nin expression starting at\
    \ /tmp/tmpa04u5g7g.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a given string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg08982gl.jl:15\nin expression\
    \ starting at /tmp/tmpg08982gl.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5tc0hsru.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp5tc0hsru.jl:26\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tc0hsru.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tc0hsru.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    if length(strings) == 0\n      \
    \  return nothing\n    end\n    \n    longest = strings[end]\n    for s in strings[2:end]\n\
    \        if length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    \n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns the longest string in that vector.\
    \ Return nothing in case the vector is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx9r1lcm.jl:26\nin expression starting at\
    \ /tmp/tmpxx9r1lcm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings) \n        longest = strings[max_length]\
    \ \n        for s in strings[2:] \n            if length(s) > max_length \n  \
    \              max_length = length(s) \n                longest = s \n       \
    \     end \n        end \n        return longest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not. \nFor example, \n>>>\
    \ is_palindrome([\"a\", \"b\", \"c\", \"d\", \"a\"])\n[True, True, False, True,\
    \ False]\n>>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\"])\n[False, False,\
    \ False, False, False]\n>>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"a\"])\n[True, False, False, False, True]\n>>> is_palindrome([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"a\", \"a\"])\n[True, False, False, False, True, True]\n\
    >>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\", \"a\", \"a\", \"a\"])\n\
    [True, False, False, False, True, True, True]\n>>> is_palindrome([\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"a\", \"a\", \"a\", \"a\"])\n[True, False, False, False,\
    \ True, True, True, True]\n>>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\"])\n[True, False, False, False, True, True,\
    \ True, True, True]\n>>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"])\n[True, False, False, False, True, True,\
    \ True, True, True, True]\n>>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"])\n[True, False, False, False,\
    \ True, True, True, True, True, True, True]\n>>> is_palindrome([\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    ])\n[True, False, False, False, True, True, True, True, True, True, True, True]\n\
    >>> is_palindrome([\"a\", \"b\", \"c\", \"d\", \"e\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"])\n[True, False, False, False, True,\
    \ True, True, True, True, True, True, True, True]\n>>> is_palindrome([\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\"])\n[True, False, False, False, True, True, True, True,\
    \ True, True, True, True, True, True, True]\n>>> is_palindrome([\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\"])\n[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3btvigdy.jl:16\nin expression\
    \ starting at /tmp/tmp3btvigdy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    max_length_idx = find(strings, max_length)\n    if max_length_idx\
    \ == length(strings)\n        return nothing\n    else\n        return strings[max_length_idx]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function which takes a vector of\
    \ strings and a vector of integers and returns the sum of the integers corresponding\
    \ to each string in the vector.\n    >>> sum_of_ints([1, 2, 3], [4, 5, 6])\n \
    \   12\n    >>> sum_of_ints([\"a\", \"bb\", \"ccc\"], [4, 5, 6])\n    12\n   \
    \ >>> sum_of_ints([\"a\", \"bb\", \"ccc\"], [4, 5, 7])\n    nothing\n    >>> sum_of_ints([\"\
    a\", \"bb\", \"ccc\"], [4, 5, 8])\n    nothing\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ch13y88.jl:21\nin expression starting at\
    \ /tmp/tmp7ch13y88.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string <- strings[length(strings)-1] \n        for string in\
    \ strings \n            if length(longest_string) < length(string) \n        \
    \        longest_string <- string \n        return longest_string \nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise\nWrite a function which returns the longest string in a vector of strings.\
    \ Use a for loop to iterate over the vector, and append the longest string to\
    \ a new vector. Return this new vector at the end of the function.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx905jhbn.jl:20\nin expression starting at\
    \ /tmp/tmpx905jhbn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for string in strings\
    \ \n            if string.length > longest.length \n                longest =\
    \ string \n        return longest \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp581zteuh.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp581zteuh.jl:1\n\
    in expression starting at /tmp/tmp581zteuh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing \n    longest_string <-\
    \ strings[length(strings)-1]\n    for string in strings \n        if length(string)\
    \ > length(longest_string) \n            longest_string <- string\n    end\n \
    \   return longest_string\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of strings as inputs and returns\
    \ a vector of booleans indicating whether each string in the input vector is contained\
    \ in the input vector of strings. Return nothing in case the input vectors are\
    \ empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu240ui08.jl:19\nin expression starting at\
    \ /tmp/tmpu240ui08.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and returns the longest string\
    \ in the vector with its length. Return nothing in case the vector is empty.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphx_7uqvp.jl:15\nin expression\
    \ starting at /tmp/tmphx_7uqvp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    longest_string =\
    \ strings[end]\n    for string in strings\n        if length(longest_string) >\
    \ length(string)\n            longest_string = string\n        end\n    end\n\
    \    return longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3: Write a function that returns\
    \ the index of the longest string in a vector of strings. Return the first one\
    \ in case of multiple strings of the same length. Return nothing in case the input\
    \ vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"a\",\
    \ \"b\", \"c\"])\n    1\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    3\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7q74oms.jl:20\nin expression starting at\
    \ /tmp/tmpq7q74oms.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    longest = strings[1] if length(strings)\
    \ == 1 \n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a vector\
    \ of strings as arguments and returns a vector of the same length with all strings\
    \ replaced by \"nothing\".\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are empty.\nThe function should return nothing in case the two\
    \ vectors are of different lengths.\nThe function should return nothing in case\
    \ the two vectors are \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpy9m271rg.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9m271rg.jl:12\n\
    in expression starting at /tmp/tmpy9m271rg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[length(strings)-1]\n        for s in strings \n        \
    \    if length(s) > length(longest) \n                longest = s \n         \
    \   end \n        end \n        longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the longest string in an array of strings. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjdz07zd.jl:23\nin expression starting at\
    \ /tmp/tmpvjdz07zd.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if input vectors are [\"a\", \"bb\", \"ccc\"\
    ] and [1,2,3], the output should be [\"a\", \"bb\", \"ccc\"] and [\"a\", \"bb\"\
    , \"ccc\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnbhhrjv.jl:19\nin expression starting at\
    \ /tmp/tmpcnbhhrjv.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string = strings[1] \n        for string in strings \n      \
    \      if string.len > longest_string.len \n                longest_string = string\
    \ \n        return longest_string \n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of strings and a vector of integers and returns\
    \ a vector of strings where each string in the input vector is replaced by the\
    \ corresponding integer in the input vector. For example, if the input vector\
    \ is [\"a\", \"b\", \"c\"] and the integer vector is [5, 10, 15], the output vector\
    \ should be [\"5\", \"10\", \"15\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgw7any7j.jl:21\nin expression starting at\
    \ /tmp/tmpgw7any7j.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = 0\n    max_length_string = nothing\n    for s in strings\n        if length(s)\
    \ > max_length\n            max_length = length(s)\n            max_length_string\
    \ = s\n        end\n    end\n    return max_length_string\nend\n</cell>\n<code\
    \ language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ with the first letter of each string capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrhtpo0u.jl:23\nin expression starting at\
    \ /tmp/tmpfrhtpo0u.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphsxmybdv.jl:15\nin expression\
    \ starting at /tmp/tmphsxmybdv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string = strings[length(strings)-1] \n        for string in strings\
    \ \n            if string == longest_string \n                return longest_string\
    \ \n            else \n                longest_string = string \n        return\
    \ longest_string \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    b\", \"c\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and a vector of integers and returns a vector of strings where each\
    \ string in the input vector is replaced by the corresponding integer in the input\
    \ vector. For example, if the input vector is [\"a\", \"b\", \"c\"] and the input\
    \ vector is [2, 1, 3], the output vector should be [\"a\", \"b\", \"c\"]. Make\
    \ sure your function works with empty vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3yjbs3c.jl:22\nin expression starting at\
    \ /tmp/tmpf3yjbs3c.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings) \n        longest_string = strings[max_length]\
    \ \n        for string in strings \n            if length(string) == max_length\
    \ \n                longest_string = string \n            end \n        end \n\
    \        return longest_string \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\"]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"]) == longest([\"a\"\
    , \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\"]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"\
    , \"gggg\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    ]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    ]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\"]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"\
    , \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"]) == longest([\"a\"\
    , \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\"]) == longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"]) == longest([\"\
    a\", \"bb\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lhsfvvt.jl:24\nin expression starting at\
    \ /tmp/tmp2lhsfvvt.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string = strings[1] \n        for string in strings[2:] \n  \
    \          if string.len() > longest_string.len() \n                longest_string\
    \ = string \n        return longest_string \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns the vector\
    \ with the integers replaced by the strings. \nFor example, [\"a\", \"b\", \"\
    c\", 3] should return [\"a\", \"b\", \"c\", \"3\"].\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns the vector with the\
    \ integers replaced by the strings. \nFor example, [\"a\", \"b\", \"c\", 3] should\
    \ return [\"a\", \"b\", \"c\", \"3\"].\nWrite a function that takes a vector of\
    \ strings and a vector of integers and returns the vector with the integers replaced\
    \ by the strings. \nFor example, [\"a\", \"b\", \"c\", 3] should return [\"a\"\
    , \"b\", \"c\", \"3\"].\nWrite a function that takes a vector of strings and a\
    \ vector of integers and returns the vector with the integers replaced by the\
    \ strings. \nFor example, [\"a\", \"b\", \"c\", 3] should return [\"a\", \"b\"\
    , \"c\", \"3\"].\nWrite a function that takes a vector of strings and a vector\
    \ of integers and returns the vector with the integers replaced by the strings.\
    \ \nFor example, [\"a\", \"b\", \"c\", 3] should return [\"a\", \"b\", \"c\",\
    \ \"3\"].\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns the vector with the integers replaced by the strings. \nFor example,\
    \ [\"a\", \"b\", \"c\", 3] should return [\"a\", \"b\", \"c\", \"3\"].\nWrite\
    \ a function that takes a vector of strings and a vector of integers and returns\
    \ the vector with the integers replaced by the strings. \nFor example, [\"a\"\
    , \"b\", \"c\", 3] should return [\"a\", \"b\", \"c\", \"3\"].\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns the vector\
    \ with the integers replaced by the strings. \nFor example, [\"a\", \"b\", \"\
    c\", 3] should return [\"a\", \"b\", \"c\", \"3\"].\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns the vector with the\
    \ integers replaced by the strings. \nFor example, [\"a\", \"b\", \"c\", 3] should\
    \ return [\"a\", \"b\", \"c\", \"3\"].\nWrite a function that takes a vector of\
    \ strings and a vector of integers and returns the vector with the integers replaced\
    \ by the strings. \nFor example, [\"a\", \"b\", \"c\", 3] should return [\"a\"\
    , \"b\", \"c\", \"3\"].\nWrite a function that takes a vector of strings and a\
    \ vector of integers and returns the vector with the integers replaced by the\
    \ strings. \nFor example, [\"a\", \"b\", \"c\", 3] should return [\"a\", \"b\"\
    , \"c\", \"3\"].\nWrite a function that takes a vector of strings and a vector\
    \ of integers and returns the vector with the integers replaced by the strings.\
    \ \nFor example, [\"a\", \"b\", \"c\", \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx3pbp7rr.jl:15\nin expression\
    \ starting at /tmp/tmpx3pbp7rr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[length(strings)-1] \n        for s in strings \n       \
    \     if length(s) == length(longest) \n                longest := s \n      \
    \      end \n        end \n        longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns the number\
    \ of strings in the vector that have the corresponding integer in the second vector.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptoeivzho.jl:1\nin expression starting at /tmp/tmptoeivzho.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if length(strings) == 0 \n        return\
    \ nothing\n    else \n        longest = strings[length(strings)-1]\n        for\
    \ s in strings[2:end]\n            if length(s) > length(longest)\n          \
    \      longest = s\n            end\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome or not.\
    \ \nThe function should return nothing in case the input vector is empty.\nThe\
    \ function should return nothing in case the vector contains only empty strings.\n\
    The function should return nothing in case the vector contains only strings of\
    \ length 1.\nThe function should return nothing in case the vector contains only\
    \ strings of length greater than 1.\nThe function should return nothing in case\
    \ the vector contains only strings that are not palindromes.\nThe function should\
    \ return nothing in case the vector contains only strings that are palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkd01qnun.jl:24\nin expression starting at\
    \ /tmp/tmpkd01qnun.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    longest = strings[end-1] if length(strings)\
    \ > 0 \n    for s in strings\n        if length(s) > length(longest)\n       \
    \     longest = s\n        end\n    end\n    return longest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpu_egwu5t.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu_egwu5t.jl:12\n\
    in expression starting at /tmp/tmpu_egwu5t.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for string in strings \n            if\
    \ string.length > longest.length \n                longest = string \n       \
    \ return longest \nend\n</cell>\n<text>\nExercise 10\nWrite a function that takes\
    \ a vector of strings and returns a vector of booleans indicating whether each\
    \ string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8whe7jct.jl:20\nin expression starting at\
    \ /tmp/tmp8whe7jct.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if the input vector is [\"a\", \"bb\", \"\
    ccc\"] and the integer vector is [2, 1, 3], the output vector should be [\"a\"\
    , \"2\", \"3\", \"bb\", \"2\", \"3\", \"ccc\"]. Assume that the input vector is\
    \ non-empty and the integer vector is non-empty.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6k6c0gl2.jl:19\nin expression starting at\
    \ /tmp/tmp6k6c0gl2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for i in length(strings)-1:-1:1\
    \ \n            if strings[i] == longest \n                return strings[i] \n\
    \            else \n                longest = strings[i] \n        endfor \n \
    \       return nothing \n    end\nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and a vector of integers and returns a vector of strings where each\
    \ string in the input vector is replaced by the corresponding integer in the input\
    \ vector. For example, if the input vector is [\"a\", \"b\", \"c\"] and the input\
    \ vector is [2, 1, 3], then the output vector should be [\"a\", \"b\", \"c\"].\
    \ Write a function that takes two vectors of strings and a vector of integers\
    \ and returns a vector of strings where each string in the input vector is replaced\
    \ by the corresponding integer in the input vector. For example, if the input\
    \ vector is [\"a\", \"b\", \"c\"] and the input vector is [2, 1, 3], then the\
    \ output vector should be [\"a\", \"2\", \"3\"]. Write a function that takes three\
    \ vectors of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if the input vector is [\"a\", \"b\", \"c\"\
    ] and the input vector is [2, 1, 3], then the output vector should be [\"a\",\
    \ \"2\", \"3\"]. Write a function that takes four vectors of strings and a vector\
    \ of integers and returns a vector of strings where each string in the input vector\
    \ is replaced by the corresponding integer in the input vector. For example, if\
    \ the input vector is [\"a\", \"b\", \"c\"] and the input vector is [2, 1, 3],\
    \ then the output vector should be [\"a\", \"2\", \"3\"]. Write a function that\
    \ takes five vectors of strings and a vector of integers and returns a vector\
    \ of strings where each string in the input vector is replaced by the corresponding\
    \ integer in the input vector. For example, if the input vector is [\"a\", \"\
    b\", \"c\"] and the input vector is [2, 1, 3], then the output vector should be\
    \ [\"a\", \"2\", \"3\"]. Write a function that takes six vectors of strings and\
    \ a vector of integers and returns a vector of strings where each string in the\
    \ input vector is replaced by the corresponding integer in the input vector. For\
    \ example, if the input vector is [\"a\", \"b\", \"c\"] and the input vector is\
    \ [2, 1, 3], then the output vector should be [\"a\", \"2\", \"3\"]. Write a function\
    \ that takes seven vectors of strings and a vector of integers and returns a vector\
    \ of strings where each string in the input vector is replaced by the corresponding\
    \ integer in the input vector. For example, if the input vector is [\"a\", \"\
    b\", \"c\"] and the input vector is [2, 1, 3], then the output vector should be\
    \ [\"a\", \"2\", \"3\"]\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputw439kr.jl:24\nin expression starting at\
    \ /tmp/tmputw439kr.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest := strings[1] \n        for string in strings \n            if\
    \ string.length > longest.length \n                longest := string \n      \
    \  return longest \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the longest string in a vector of strings. Use this function to find the longest\
    \ string in a vector of strings.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9s3__km.jl:20\nin expression starting at\
    \ /tmp/tmps9s3__km.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    for string in strings\n        if\
    \ longest == nothing || length(longest) > length(string)\n            longest\
    \ = string\n        end\n    end\n    \n    return longest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpflq0f56n.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpflq0f56n.jl:28\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpflq0f56n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpflq0f56n.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string <- strings[length(strings)-1] \n        for string in\
    \ strings \n            if string == longest_string \n                continue\
    \ \n            else \n                return longest_string \n        return\
    \ longest_string \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function which takes as\
    \ input a vector of strings and returns the number of strings which contain \"\
    b\" in the last position. \nWrite a second function which takes as input a vector\
    \ of strings and returns the number of strings which contain \"a\" in the first\
    \ position. \nWrite a third function which takes as input a vector of strings\
    \ and returns the number of strings which contain both \"a\" and \"b\" in the\
    \ first and last positions. \nWrite a fourth function which takes as input a vector\
    \ of strings and returns the number of strings which contain \"a\" in the first\
    \ position and \"b\" in the last positions. \nWrite a fifth function which takes\
    \ as input a vector of strings and returns the number of strings which contain\
    \ \"a\" in the first position and \"b\" in the last positions. \nWrite a sixth\
    \ function which takes as input a vector of strings and returns the number of\
    \ strings which contain \"a\" in the first position and \"b\" in the last positions.\
    \ \nWrite a seventh function which takes as input a vector of strings and returns\
    \ the number of strings which contain \"a\" in the first position and \"b\" in\
    \ the last positions. \nWrite a eighth function which takes as input a vector\
    \ of strings and returns the number of strings which contain \"a\" in the first\
    \ position and \"b\" in the last positions. \nWrite a ninth function which takes\
    \ as input a vector of strings and returns the number of strings which contain\
    \ \"a\" in the first position and \"b\" in the last positions. \nWrite a tenth\
    \ function which takes as input a vector of strings and returns the number of\
    \ strings which contain \"a\" in the first position and \"b\" in the last positions.\
    \ \nWrite a eleventh function which takes as input a vector of strings and returns\
    \ the number of strings which contain \"a\" in the first position and \"b\" in\
    \ the last positions. \nWrite a twelfth function which takes as input a vector\
    \ of strings and returns the number of strings which contain \"a\" in the first\
    \ position and \"b\" in the last positions. \nWrite a thirteenth function which\
    \ takes as input a vector of strings and returns the number of strings which contain\
    \ \"a\" in the first position and \"b\" in the last positions. \nWrite a fourteenth\
    \ function which takes as input a vector of strings and \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00hn37t0.jl:22\nin expression starting at\
    \ /tmp/tmp00hn37t0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum([length(s) for s in strings]) \n        longest_strings\
    \ = [s for s in strings if length(s) == max_length] \n        if length(longest_strings)\
    \ == 1 \n            return longest_strings[0] \n        else \n            return\
    \ longest_strings[argmax(longest_strings)] \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not. \nThe function should\
    \ ignore case when comparing strings.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43foh0po.jl:22\nin expression starting at\
    \ /tmp/tmp43foh0po.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings \n  \
    \      if length(s) == max_length \n            longest_string = s\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5tnou2v9.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5tnou2v9.jl:1\n\
    in expression starting at /tmp/tmp5tnou2v9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum([length(s) for s in strings]) \n        for s in\
    \ strings \n            if length(s) == max_length \n                return s\
    \ \n            else \n                max_length = max_length \n        return\
    \ nothing \nend\n</cell>\n<text>\nExercise 3: Write a function that takes a vector\
    \ of strings and returns a vector of booleans indicating whether each string is\
    \ a palindrome or not. For example, [\"racecar\", \"racecar\", \"racecar\"] should\
    \ return [true, false, true].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7877mi3r.jl:22\nin expression starting at\
    \ /tmp/tmp7877mi3r.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum(strings) \n        for string in strings \n    \
    \        if length(string) == max_length \n                return string \n  \
    \          else \n                max_length = maximum(max_length, length(string))\
    \ \n        return nothing \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which takes a vector of strings and returns the longest string in that vector.\
    \ Return nothing in case the vector is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp266lt4rn.jl:23\nin expression starting at\
    \ /tmp/tmp266lt4rn.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of strings and returns the longest string in that vector.\
    \ Return nothing in case the vector is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_u5or4u7.jl:15\nin expression\
    \ starting at /tmp/tmp_u5or4u7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for string in strings \n            if\
    \ string.length() > longest.length() \n                longest = string \n   \
    \     return longest \nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if the input vector is [\"a\", \"b\", \"c\"\
    ] and the input vector is [2, 1, 3], the output vector should be [\"a\", \"2\"\
    , \"3\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7ejtnui.jl:20\nin expression starting at\
    \ /tmp/tmpw7ejtnui.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have multiple strings of the same length. Try `longest([\"a\", \"\
    b\", \"c\", \"b\"])`.\n<|/ c |>\n<| c |>\nI added a version that works with multiple\
    \ strings of the same length\n<|/ c |>\n<| c |>\nThanks, I didn't know about `length`\
    \ being an O(1) operation. That's a nice improvement over the naive approach.\n\
    <|/ c |>\n<| c |>\nI added a version that works with multiple strings of the same\
    \ length\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using mapcat:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1cy9xks.jl:19\nin expression starting at\
    \ /tmp/tmpx1cy9xks.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    elseif length(strings)\
    \ == 1\n        strings[1]\n    else\n        longest(sort(strings, by=length))[1]\n\
    \    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4r1ppuv.jl:19\nin expression starting at\
    \ /tmp/tmpy4r1ppuv.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings[2:end]\n            if isequal(longest,\
    \ s)\n                longest = s\n            else\n                break\n \
    \       end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_9r_nbg4.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_9r_nbg4.jl:1\n\
    in expression starting at /tmp/tmp_9r_nbg4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not. \nThe function should return nothing in\
    \ case the vector is empty.\nThe function should return nothing in case the vector\
    \ contains only empty strings.\nThe function should return nothing in case the\
    \ vector contains only strings that are not palindromes.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are palindromes but are of\
    \ different lengths.\nThe function should return nothing in case the vector contains\
    \ strings that are palindromes but are of different lengths.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are p\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp24dzzvx.jl:15\nin expression\
    \ starting at /tmp/tmpp24dzzvx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest := strings[1] \n        for string in strings[2:] \n        \
    \    if string.length > longest.length \n                longest := string \n\
    \            end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ the number of unique strings in the vector. \nFor example, if the input vector\
    \ is [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], the function should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpslbw4wuv.jl:15\nin expression\
    \ starting at /tmp/tmpslbw4wuv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of strings and returns a vector of integers representing the number\
    \ of times each string appears in the vector. For example, the following input\
    \ vector should produce the following output:\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kivf9hn.jl:19\nin expression starting at\
    \ /tmp/tmp2kivf9hn.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end]\n        for s in strings[2:end]\n            if length(s) >\
    \ length(longest)\n                longest = s\n        end\n    end\n    return\
    \ longest\nend\n</code>\n<|/ a tags=julia,string,arrays,max |>\n<| c |>\nThank\
    \ you for posting your solution! Could you please add some comments to your code?\
    \ It would be very helpful for other people who are looking for a similar solution.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstaf5n98.jl:21\nin expression starting at\
    \ /tmp/tmpstaf5n98.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if the input vector is [\"a\", \"bb\", \"\
    ccc\"] and the input vector is [1,2,3], the output vector should be [\"a\", \"\
    bb\", \"ccc\"]. Do not use map!.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprc1tpvl3.jl:16\nin expression starting at\
    \ /tmp/tmprc1tpvl3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string = strings[1] \n        for string in strings \n      \
    \      if string.length() > longest_string.length() \n                longest_string\
    \ = string \n        return longest_string \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a substring appears in a given string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8j2ewtm.jl:20\nin expression starting at\
    \ /tmp/tmpi8j2ewtm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    longest_strings = filter(x -> length(x) == max_length,\
    \ strings)\n    if length(longest_strings) > 0\n        return longest_strings[1]\n\
    \    else\n        return nothing\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the longest string in a vector of strings. Use this function to\
    \ find the longest string in a vector of strings.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp539ycpme.jl:21\nin expression starting at\
    \ /tmp/tmp539ycpme.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    longest_string = filter(x -> x == max_length, strings)\n\
    \    if length(longest_string) == 1\n        return longest_string[0]\n    else\n\
    \        return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rzvqpka.jl:1\nin expression starting at /tmp/tmp6rzvqpka.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[length(strings)-1] \n        for s in strings \n       \
    \     if length(longest) < length(s) \n                longest = s \n        \
    \    end \n        end \n    end \nend \n</cell>\n<text>\nExercise 7\nWrite a\
    \ function that takes a vector of strings and returns the longest string in that\
    \ vector. Return nothing in case the vector is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_453mfb5.jl:22\nin expression starting at\
    \ /tmp/tmp_453mfb5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings \n            if length(longest)\
    \ < length(s) \n                longest = s \n        return longest \nend \n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns the vector with the integers replaced by the strings from the first\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2apkmyl.jl:20\nin expression starting at\
    \ /tmp/tmpq2apkmyl.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings) \n        longest_string = strings[max_length]\
    \ \n        for s in strings[2:] \n            if length(s) == max_length \n \
    \               longest_string = s \n            end \n        end \n        return\
    \ longest_string \n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\"])\n</cell>\n<text>\nExercise: Write a function that returns the longest\
    \ string in a vector of strings. Return nothing in case the input vector is empty.\n\
    Hint: Use longest.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9w1hg7c2.jl:16\nin expression\
    \ starting at /tmp/tmp9w1hg7c2.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum([length(string) for string in strings])\n    longest_strings = [string\
    \ for string in strings if length(string) == max_length]\n    if length(longest_strings)\
    \ > 1\n        return longest_strings[1]\n    else\n        return longest_strings[0]\n\
    \    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a vector\
    \ of strings and a vector of strings as input, and returns a vector of booleans\
    \ indicating whether each string in the first vector is contained in the second\
    \ vector. Return nothing in case the two vectors are empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_kaxh8j.jl:21\nin expression starting at\
    \ /tmp/tmp6_kaxh8j.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns the vector\
    \ with the integers replaced by the strings from the first vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98yqfckx.jl:15\nin expression\
    \ starting at /tmp/tmp98yqfckx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    elseif length(strings)\
    \ == 1\n        strings[1]\n    else\n        longest(sort(strings, by=length))[1]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and a vector of integers and returns a vector of strings where each\
    \ string in the input vector is replaced by the corresponding integer in the input\
    \ vector. For example, if the input vector is [\"a\", \"b\", \"c\"] and the input\
    \ integer vector is [2, 1, 3], the output vector should be [\"a\", \"2\", \"3\"\
    , \"c\"]. Write a test for this function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4kbq2ll.jl:19\nin expression starting at\
    \ /tmp/tmpb4kbq2ll.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[end-1] \n        for s in strings \n            if length(longest)\
    \ < length(s) \n                longest = s \n            end \n        end \n\
    \        longest \n    end \nend \n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome. \nThe function should return nothing in case the\
    \ input vector is empty.\nThe function should return nothing in case the strings\
    \ are not palindromes.\nThe function should return nothing in case the strings\
    \ are palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the strings are palindromes of different lengths.\nThe function should\
    \ return nothing in case the strings are palindromes of different lengths.\nThe\
    \ function should return nothing in case the strings are palindromes of different\
    \ lengths.\nThe function should return nothing in case the strings are palindromes\
    \ of different lengths.\nThe function should return nothing in case the strings\
    \ are palindromes of different lengths.\nThe function should return nothing in\
    \ case the strings are palindromes of different lengths.\nThe function should\
    \ return nothing in case the strings are palindromes of different lengths.\nThe\
    \ function should return nothing in case the strings are palindromes of different\
    \ lengths.\nThe function should return nothing in case the strings are palindromes\
    \ of different lengths.\nThe function should return nothing in case the strings\
    \ are palindromes of different lengths.\nThe function should return nothing in\
    \ case the strings are palindromes of different lengths.\nThe function should\
    \ return nothing in case the strings are palindromes of different lengths.\nThe\
    \ function should return nothing in case the strings are palindromes of different\
    \ lengths.\nThe function should return nothing in case the strings are palindromes\
    \ of different lengths.\nThe function should return nothing in case the strings\
    \ are palindromes of different lengths.\nThe function should return nothing in\
    \ case the strings are palindromes of different lengths.\nThe function should\
    \ return nothing in case the strings are palindromes of different lengths.\nThe\
    \ function should return nothing in case the strings are palindromes of different\
    \ lengths.\nThe function should return nothing in case the strings are palindromes\
    \ of different lengths.\nThe function should return nothing in case the strings\
    \ are palindromes of different lengths.\nThe function should return nothing in\
    \ case the strings are palindromes of different lengths.\nThe function should\
    \ return \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiy7s2jtz.jl:23\nin expression starting at\
    \ /tmp/tmpiy7s2jtz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return max(strings, key = length) \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8kh2ofey.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8kh2ofey.jl:1\n\
    in expression starting at /tmp/tmp8kh2ofey.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for s in strings[2:end] \n            if length(s) < longest_len \n\
    \                longest_len = length(s) \n                longest_str = s \n\
    \            end \n        end \n        return longest_str \n    end \nend \n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of strings and\
    \ a vector of integers and returns a vector of integers representing the number\
    \ of times a string appears in the input vector. \nFor example, if the input vector\
    \ is [\"a\", \"b\", \"c\", \"d\"] and the vector of integers is [1, 1, 2, 2],\
    \ the function should return [1, 1, 2, 2]. \nIf the input vector is [\"a\", \"\
    b\", \"c\", \"d\"] and the vector of integers is [1, 1, 2, 3], the function should\
    \ return [1, 1, 0, 0].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0rus_9f.jl:25\nin expression starting at\
    \ /tmp/tmpk0rus_9f.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[length(strings)-1]\n        for s in strings\n            if length(s)\
    \ > length(longest)\n                longest = s\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of integers and returns a vector of integers containing the indices of the strings\
    \ in the first vector that correspond to the integers in the second vector.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mcnvnxs.jl:21\nin expression starting at\
    \ /tmp/tmp_mcnvnxs.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum(strings)\n        longest_string = filter(x -> x\
    \ == max_length, strings)\n        if length(longest_string) == 1 \n         \
    \   return longest_string[0] \n        else \n            return nothing \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest string\
    \ in a vector of strings and a vector of strings. Return nothing in case the vector\
    \ is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lthxsxn.jl:22\nin expression starting at\
    \ /tmp/tmp1lthxsxn.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5tc0hsru.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp5tc0hsru.jl:26\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tc0hsru.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tc0hsru.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of the integers corresponding to each string in the input\
    \ vector. \nFor example, if the input vector is [\"a\", \"b\", \"c\"] and the\
    \ integer vector is [1,2,3], the function should return [1,2,3]. \nIf the input\
    \ vector is [\"a\", \"b\", \"c\"] and the integer vector is [1,2,3], the function\
    \ should return [2,3,4].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3zm9gpa.jl:15\nin expression\
    \ starting at /tmp/tmpp3zm9gpa.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wzsko47.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wzsko47.jl:1\n\
    in expression starting at /tmp/tmp9wzsko47.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for i in 1:length(longest_str) \n            if longest_str[i] !=\
    \ longest_str[longest_len] \n                longest_str = longest_str[1:i] \n\
    \                break \n            end \n        end \n        return longest_str\
    \ \n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\"\
    , \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    ffff\", \"ggggg\", \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpks27h52z.jl:25\nin expression starting at\
    \ /tmp/tmpks27h52z.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string = strings[1] \n        for string in strings \n      \
    \      if string == longest_string \n                continue \n            elseif\
    \ length(longest_string) > length(string) \n                longest_string = string\
    \ \n        longest_string \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings of\
    \ the same length but with each string repeated a number of times equal to the\
    \ string length.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmifk8l1b.jl:23\nin expression starting at\
    \ /tmp/tmpmifk8l1b.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    longest_str = strings[length(strings)-1]\n\
    \    for str in strings\n        if str == longest_str\n            return longest_str\n\
    \        end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp78v771mf.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp78v771mf.jl:1\n\
    in expression starting at /tmp/tmp78v771mf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing \n    longest_string <-\
    \ strings[1] \n    for string in strings[2:length(strings)] \n        if length(longest_string)\
    \ < length(string) \n            longest_string <- string \n    longest_string\
    \ \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that returns the longest string\
    \ in an array of strings. Write a test that checks if it works.\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj25jk1i3.jl:18\nin expression starting at\
    \ /tmp/tmpj25jk1i3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[argmax(lengths(strings))]\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not. For example, [\"racecar\"\
    , \"racecar\", \"racecar\"] should return [true, false, true].\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmd83zq7.jl:17\nin expression starting at\
    \ /tmp/tmpkmd83zq7.jl:17\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    for s in strings\n        if longest\
    \ == nothing\n            longest = s\n        elseif length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    \n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wzsko47.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wzsko47.jl:1\n\
    in expression starting at /tmp/tmp9wzsko47.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    longest = strings[end-1] if length(strings)\
    \ > 0 \n    longest = strings[1] if length(longest) == 0 \n    longest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the longest string\
    \ in a vector of strings. Use this function in the previous exercise to find the\
    \ longest string in a vector of strings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp7y4yyz7v.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7y4yyz7v.jl:12\n\
    in expression starting at /tmp/tmp7y4yyz7v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) < length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns the longest string in reverse order. Return nothing in\
    \ case the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"c\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"bb\"\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9608pf8b.jl:19\nin expression starting at\
    \ /tmp/tmp9608pf8b.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not. For example, [\"racecar\", \"racecar\",\
    \ \"racecar\"] should return [true, false, true].\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbg5ks9zf.jl:19\nin expression starting at\
    \ /tmp/tmpbg5ks9zf.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns the number of times each string occurs\
    \ in the vector.\nFor example, for the input [\"a\", \"bb\", \"ccc\"], your function\
    \ should return [(\"a\", 1), (\"bb\", 2), (\"ccc\", 3)]\nHint: Use a dictionary\
    \ to store the counts\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngty948h.jl:15\nin expression\
    \ starting at /tmp/tmpngty948h.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1rf1u6d2.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1rf1u6d2.jl:26\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rf1u6d2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rf1u6d2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[argmax(lengths(strings))]\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which takes a vector of strings and a vector of integers\
    \ and returns a vector of the same length with each element of the new vector\
    \ being the product of the corresponding elements of the first two vectors.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuee9cmq.jl:17\nin expression starting at\
    \ /tmp/tmpuuee9cmq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsoillopw.jl:19\nin expression starting at\
    \ /tmp/tmpsoillopw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum([length(s) for s in strings]) \n        longest_string\
    \ = nothing\n        for s in strings \n            if length(s) == max_length\
    \ \n                longest_string = s \n                break \n            end\
    \ \n        end \n        return longest_string \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not. \nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the strings are not palindromes.\nThe function should return\
    \ nothing in case the strings are all palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not palindromes.\nThe function should return\
    \ nothing in case the strings are all not p\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnys7zwx.jl:25\nin expression starting at\
    \ /tmp/tmplnys7zwx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum(strings) \n        longest_string = filter(x ->\
    \ x == max_length, strings) \n        return longest_string[1] \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of booleans indicating whether each string is a palindrome\
    \ or not.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptao6ijmm.jl:19\nin expression starting at\
    \ /tmp/tmptao6ijmm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum(strings) \n        longest_string = filter(x ->\
    \ x == max_length, strings) \n        if length(longest_string) == 1 \n      \
    \      return longest_string[0] \n        else \n            return nothing \n\
    end \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of booleans indicating\
    \ whether each string is a palindrome or not.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavv3eu3w.jl:21\nin expression starting at\
    \ /tmp/tmpavv3eu3w.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    for s in strings\n        if longest\
    \ == nothing || length(longest) > length(s)\n            longest = s\n       \
    \ end\n    end\n    \n    return longest\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of booleans indicating\
    \ whether each string is a palindrome or not.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuj72_gh.jl:21\nin expression starting at\
    \ /tmp/tmpwuj72_gh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest := strings[length(strings)-1] \n        for i in length(strings)-2\
    \ \n            if strings[i] == longest \n                longest := strings[i]\
    \ \n            end \n        end \n        return longest \n    end \nend \n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of strings and\
    \ returns a vector of booleans indicating whether each string is a palindrome\
    \ or not. \nThe function should return nothing in case the vector is empty.\n\
    The function should return nothing in case the vector contains only empty strings.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are palindromes.\nThe function should return nothing\
    \ in case the vector contains only strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains only strings that are palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains only strings that are not palindromes.\n\
    The function should return nothing in case the vector contains only strings that\
    \ are not palindromes.\nThe function should return nothing in case the vector\
    \ contains only strings that are not palindrome\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3neys8u2.jl:1\nin expression starting at /tmp/tmp3neys8u2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing in case the input vector is empty.\nWrite a function that returns the\
    \ longest string in a vector of strings. Return nothing in case the input vector\
    \ is empty.\nWrite a function that returns the longest string in a vector of strings.\
    \ Return nothing in case the input vector is empty.\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing in case the input vector is empty.\nWrite a function that returns the\
    \ longest string in a vector of strings. Return nothing in case the input vector\
    \ is empty.\nWrite a function that returns the longest string in a vector of strings.\
    \ Return nothing in case the input vector is empty.\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing in case the input vector is empty.\nWrite a function that returns the\
    \ longest string in a vector of strings. Return nothing in case the input vector\
    \ is empty.\nWrite a function that returns the longest string in a vector of strings.\
    \ Return nothing in case the input vector is empty.\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return \nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkzg5g1wq.jl:15\nin expression\
    \ starting at /tmp/tmpkzg5g1wq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk7enljd_.jl:15\nin expression\
    \ starting at /tmp/tmpk7enljd_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for string in strings \n            if\
    \ string.length() > longest.length() \n                longest = string \n   \
    \     return longest \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oj16zax.jl:20\nin expression starting at\
    \ /tmp/tmp4oj16zax.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    longest_string = filter(x -> x == max_length, strings)\n\
    \    if length(longest_string) == 1\n        return longest_string\n    else\n\
    \        return nothing\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of booleans indicating whether each\
    \ string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7njym96.jl:20\nin expression starting at\
    \ /tmp/tmpm7njym96.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for s in strings \n  \
    \          if length(s) == length(longest) \n                longest = s \n  \
    \          end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a vector\
    \ of integers and returns a vector of booleans indicating which strings are in\
    \ the vector and which aren't. For example, if the input vector is [\"a\", \"\
    b\", \"c\"] and the input vector is [2, 1, 3], the output should be [false, true,\
    \ false].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprog9pa5h.jl:23\nin expression starting at\
    \ /tmp/tmprog9pa5h.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[length(strings)-1]\n        for s in strings\n            if length(s)\
    \ == length(longest)\n                longest = s\n            else\n        \
    \        break\n        end\n    end\n    return longest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and a vector of integers,\
    \ and returns a vector of the strings that correspond to the integers in the second\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ns5gg8b.jl:24\nin expression starting at\
    \ /tmp/tmp0ns5gg8b.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for string in strings \n            if\
    \ string.length > longest.length \n                longest = string \n       \
    \ return longest \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a given string appears in a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn4kqwhm.jl:20\nin expression starting at\
    \ /tmp/tmppn4kqwhm.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of integers, and returns a vector\
    \ of integers representing the number of times each string appears in the input\
    \ vector. For example, if the input vector is [\"a\", \"bb\", \"ccc\"] and the\
    \ input vector is [1, 1, 2], the output vector should be [1, 1, 2].\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3v9ht5ni.jl:15\nin expression\
    \ starting at /tmp/tmp3v9ht5ni.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9wbi1bf.jl:15\nin expression\
    \ starting at /tmp/tmpy9wbi1bf.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[end]\n        for s in strings\n            if length(s) > length(longest)\n\
    \                longest = s\n        end\n        longest\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of strings and returns\
    \ a vector of integers where the integers represent the number of times the string\
    \ \"a\" appears in the input vector. Return nothing in case the input vector is\
    \ empty.\n>>> count_a([\"a\", \"b\", \"c\"])\n[2, 1]\n>>> count_a([\"a\", \"b\"\
    , \"c\"])\nnothing\n>>> count_a([\"a\", \"b\", \"c\", \"a\"])\n[1, 1]\n>>> count_a([\"\
    a\", \"b\", \"c\", \"a\"])\nnothing\n>>> count_a([\"a\", \"b\", \"c\", \"a\",\
    \ \"a\"])\n[1, 1]\n>>> count_a([\"a\", \"b\", \"c\", \"a\", \"a\"])\nnothing\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2972ec3q.jl:22\nin expression starting at\
    \ /tmp/tmp2972ec3q.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string is the concatenation of the integer vector and the string\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5a5ogwz_.jl:16\nin expression starting at\
    \ /tmp/tmp5a5ogwz_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[length(strings)-1]\n        for s in strings\n            if length(longest)\
    \ < length(s) \n                longest = s\n            end\n        end\n  \
    \      return longest\n    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the longest string in a vector of strings. Use longest.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkogs4l00.jl:23\nin expression starting at\
    \ /tmp/tmpkogs4l00.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing\n            longest = s\n        elseif length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and a vector of integers\
    \ and returns a vector of strings where each string is the concatenation of all\
    \ strings in the input vector except the one at index i. For example, if the input\
    \ vector is [\"a\", \"bb\", \"ccc\"] and the input vector is [1,2,3], the output\
    \ vector would be [\"a\", \"bb\", \"ccc\", \"1\", \"2\", \"3\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_h88cbz.jl:21\nin expression starting at\
    \ /tmp/tmpz_h88cbz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jng7nni.jl:19\nin expression starting at\
    \ /tmp/tmp9jng7nni.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a vector of strings as arguments and returns a vector\
    \ of the same length with all strings replaced by the longest string in the second\
    \ vector. Return nothing in case the second vector is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlj1xa9e.jl:19\nin expression starting at\
    \ /tmp/tmpvlj1xa9e.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings \n            if length(str) == longest_len \n\
    \                return str \n            else \n                longest_len =\
    \ length(str) \n                longest_str = str \n        nothing \n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of strings\
    \ and a vector of integers and returns a vector of strings where each string in\
    \ the input vector is replaced by the corresponding integer in the input vector.\
    \ For example, if the input vector is [\"a\", \"b\", \"c\"] and the input vector\
    \ is [2, 1, 3], the output vector should be [\"a\", \"2\", \"3\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jgdbcqf.jl:25\nin expression starting at\
    \ /tmp/tmp8jgdbcqf.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[end-1]\n        for s in strings\n            if length(s) > length(longest)\n\
    \                longest = s\n        end\n        longest\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function which takes a vector of strings and a vector\
    \ of integers and returns a vector of the same length with strings replaced by\
    \ the corresponding integers. For example, if the input vector is [\"a\", \"b\"\
    , \"c\"] and the integer vector is [5, 10, 15], the output should be [\"5\", \"\
    10\", \"15\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwtuj77v.jl:22\nin expression starting at\
    \ /tmp/tmpcwtuj77v.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns a vector\
    \ of strings where each string in the input vector is replaced by the corresponding\
    \ integer in the input vector. For example, if the input vector is [\"a\", \"\
    bb\", \"ccc\"] and the integer vector is [10, 20, 30], the output vector should\
    \ be [\"a\", \"bb\", \"ccc\"] and the output vector should be [\"10\", \"20\"\
    , \"30\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_keqzwu3.jl:15\nin expression\
    \ starting at /tmp/tmp_keqzwu3.jl:15\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing\n            longest = s\n        elseif length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[length(strings)-1] \n        for s in strings \n       \
    \     if length(s) > length(longest) \n                longest = s \n        endfor\
    \ \n    endif \n    return longest \nendfunction \n</cell>\n<text>\nExercise 7:\
    \ Write a function that takes a vector of strings and a vector of integers and\
    \ returns a vector of strings where each string in the input vector is replaced\
    \ by the corresponding integer in the input vector. For example, if the input\
    \ vector is [\"a\", \"b\", \"c\"] and the input vector is [2, 1, 3], the output\
    \ vector should be [\"a\", \"2\", \"3\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6tzholl.jl:22\nin expression starting at\
    \ /tmp/tmpw6tzholl.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that takes a vector of strings and returns a vector of booleans indicating which\
    \ strings are unique.\n    For example, [\"a\", \"b\", \"c\"] should return [false,\
    \ true, false].\n    \n    You can use the function unique.\n    \n    >>> unique([\"\
    a\", \"b\", \"c\"])\n    [false, true, false]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0mcvlzw.jl:16\nin expression starting at\
    \ /tmp/tmpq0mcvlzw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphsxmybdv.jl:15\nin expression\
    \ starting at /tmp/tmphsxmybdv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    max_length = maximum(strings)\n\
    \    longest_string = filter(x -> x == max_length, strings)\n    if length(longest_string)\
    \ == 0 return nothing\n    return longest_string[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni48lmof.jl:17\nin expression starting at\
    \ /tmp/tmpni48lmof.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the longest\
    \ string in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing in case the input vector is empty.\nWrite a function that returns the\
    \ longest string in a vector of strings. Return nothing in case the input vector\
    \ is empty.\nWrite a function that returns the longest string in a vector of strings.\
    \ Return nothing in case the input vector is empty.\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing in case the input vector is empty.\nWrite a function that returns the\
    \ longest string in a vector of strings. Return nothing in case the input vector\
    \ is empty.\nWrite a function that returns the longest string in a vector of strings.\
    \ Return nothing in case the input vector is empty.\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing in case the input vector is empty.\nWrite a function that returns the\
    \ longest string in a vector of strings. Return nothing in case the input vector\
    \ is empty.\nWrite a function that returns the longest string in a vector of strings.\
    \ Return nothing in case the input vector is empty.\nWrite a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the input\
    \ vector is empty.\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the input vector is empty.\n\
    Write a function that returns the longest string in a vector of strings. Return\
    \ nothing \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzvi9fgq.jl:19\nin expression starting at\
    \ /tmp/tmpwzvi9fgq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    longest_string <-\
    \ strings[[1]]\n    for string in strings[2:end]\n        if length(longest_string)\
    \ > length(string)\n            longest_string <- string\n        end\n    end\n\
    \    return longest_string\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    The most efficient way is probably to use an IntSet:\n<code>\njulia> using Statistics\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql84s3k3.jl:20\nin expression starting at\
    \ /tmp/tmpql84s3k3.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the longest string in an array of strings. Return nothing in case\
    \ the input vector is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkk6ctque.jl:15\nin expression\
    \ starting at /tmp/tmpkk6ctque.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpru2imk8e.jl:15\nin expression\
    \ starting at /tmp/tmpru2imk8e.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            longest_string = string\n     \
    \   end\n    end\n    return longest_string\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx2o48ez.jl:21\nin expression starting at\
    \ /tmp/tmpcx2o48ez.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for i in length(strings)-1:-1:1\
    \ \n            if strings[i] == longest\n                longest = strings[i]\
    \ \n            else\n                break\n        end\n        return longest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"b\", \"c\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the longest string in a vector\
    \ of strings. If the vector is empty, return nothing. Otherwise, return the longest\
    \ string in the vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdyq1tw5.jl:24\nin expression starting at\
    \ /tmp/tmpwdyq1tw5.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[length(strings)-1] \n        for s in strings \n       \
    \     if length(s) > length(longest) \n                longest = s \n        \
    \    end \n        end \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the longest string in a vector of strings. Return nothing in case\
    \ the input vector is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppxxkhzmi.jl:22\nin expression starting at\
    \ /tmp/tmppxxkhzmi.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the longest string in a vector of strings. Use longest.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6mwqs71v.jl:15\nin expression\
    \ starting at /tmp/tmp6mwqs71v.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise: Write a function that returns the longest\
    \ string in a vector of strings. Use a for loop.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp849zdd4q.jl:19\nin expression starting at\
    \ /tmp/tmp849zdd4q.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest := strings[1] \n        for string in strings[2:] \n        \
    \    if length(longest) < length(string) \n                longest := string \n\
    \            end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of strings and returns a vector\
    \ of strings that only contain letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp743vr17m.jl:15\nin expression\
    \ starting at /tmp/tmp743vr17m.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nI wanted to add this as a comment to 's answer, but I don't have enough\
    \ reputation to do so. \nI wanted to add that in Julia 1.1 you can now use island\
    \ to find the longest string in a vector:\n<code>\njulia> island(longest, [\"\
    a\", \"bb\", \"ccc\"])\n\"ccc\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n\
    The shortest solution I can think of is this:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5mrz8rp.jl:19\nin expression starting at\
    \ /tmp/tmpa5mrz8rp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wzsko47.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wzsko47.jl:1\n\
    in expression starting at /tmp/tmp9wzsko47.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    max_length = 0\n\
    \    max_length_string =  strings[1]\n    for string in strings\n        if length(string)\
    \ > max_length\n            max_length = length(string)\n            max_length_string\
    \ = string\n        end\n    end\n    return max_length_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq6b7hvbx.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq6b7hvbx.jl:1\n\
    in expression starting at /tmp/tmpq6b7hvbx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings[2:] \n            if length(longest_str) < length(str)\n\
    \                longest_str = str \n            end \n        end \n        return\
    \ longest_str \n    end \nend \n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of booleans indicating whether each\
    \ string starts with \"a\".\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuqnf0d3f.jl:16\nin expression\
    \ starting at /tmp/tmpuqnf0d3f.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings\n            if length(s) > length(longest)\n\
    \                longest = s\n            end\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppwkdyih_.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmppwkdyih_.jl:28\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwkdyih_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwkdyih_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppwkdyih_.jl:29\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwkdyih_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwkdyih_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string <- strings[length(strings)-1] \n        for string in\
    \ strings \n            if length(string) > length(longest_string) \n        \
    \        longest_string <- string \n        longest_string \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nHint: use longest.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwzib_do.jl:21\nin expression starting at\
    \ /tmp/tmpcwzib_do.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings[2:] \n            if length(str) == longest_len\
    \ \n                longest_str = str \n            end \n        end \n     \
    \   return longest_str \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of strings as inputs and returns\
    \ a vector of booleans indicating whether each string in the first vector is contained\
    \ in the second vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpon0gc711.jl:16\nin expression\
    \ starting at /tmp/tmpon0gc711.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end]\n        for s in strings[2:end]\n            if length(s) >\
    \ length(longest)\n                longest = s\n        end\n    end\n    return\
    \ longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gul8aal.jl:21\nin expression starting at\
    \ /tmp/tmp6gul8aal.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[length(strings)-1] \n        for string in strings\
    \ \n            if string.length() > longest.length() \n                longest\
    \ = string \n        return longest \nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings with the same\
    \ length as the input, but with each string repeated twice (e.g., \"abc\" -> \"\
    abcabc\").\n    >>> repeated([\"a\", \"bb\", \"ccc\"])\n    [\"abcabc\", \"abcabc\"\
    , \"abcabc\"]\n    >>> repeated([\"a\", \"bb\", \"ccc\", \"ddd\"])\n    [\"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\", \"abcabc\"\
    , \"abcabc\", \"ab\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljiu06y_.jl:20\nin expression starting at\
    \ /tmp/tmpljiu06y_.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string <- strings[1] \n        for string in strings \n     \
    \       if length(longest_string) > length(string) \n                longest_string\
    \ <- string \n        return longest_string \nend \n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of integers, and returns a vector of\
    \ the same length with strings replaced by the corresponding integers. For example,\
    \ if the input vector is [\"a\", \"b\", \"c\"] and the integer vector is [10,\
    \ 20, 30], the output vector should be [\"10\", \"20\", \"30\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpasb72cr9.jl:20\nin expression starting at\
    \ /tmp/tmpasb72cr9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    longest = strings[end-1] if length(strings)\
    \ > 0 \n    longest = nothing if longest == nothing \n    longest = nothing if\
    \ longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing if longest == nothing \n    longest = nothing\
    \ if longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing if longest == nothing \n    longest = nothing\
    \ if longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing if longest == nothing \n    longest = nothing\
    \ if longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing if longest == nothing \n    longest = nothing\
    \ if longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing if longest == nothing \n    longest = nothing\
    \ if longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing if longest == nothing \n    longest = nothing\
    \ if longest == nothing \n    longest = nothing if longest == nothing \n    longest\
    \ = nothing if longest == nothing \n    longest = nothing if longest == nothing\
    \ \n    longest = nothing if longest == nothing \n    longest = nothing if longest\
    \ == nothing \n    longest = nothing \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmprqy0wkqj.jl:10 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprqy0wkqj.jl:12\n\
    in expression starting at /tmp/tmprqy0wkqj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = 0\n    max_length_str = \"\"\n    for s in strings\n        if length(s) >\
    \ max_length\n            max_length = length(s)\n            max_length_str =\
    \ s\n        end\n    end\n    return max_length_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuejkprnu.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuejkprnu.jl:1\n\
    in expression starting at /tmp/tmpuejkprnu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if length(strings) == 0\n        return\
    \ nothing\n    else\n        longest = strings[1]\n        for string in strings\n\
    \            if string.length() > longest.length()\n                longest =\
    \ string\n            end\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the longest string in an array of strings.\
    \ Return nothing in case the input vector is empty.\n    >>> longest([])\n   \
    \ nothing\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegxj4ooa.jl:24\nin expression starting at\
    \ /tmp/tmpegxj4ooa.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum([length(s) for s in strings]) \n        longest_strings\
    \ = [s for s in strings if length(s) == max_length] \n        if length(longest_strings)\
    \ == 1 \n            return longest_strings[0] \n        else \n            return\
    \ longest_strings[end] \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of strings and returns the number of times each string appears\
    \ in the vector.\nFor example, for the input [\"a\", \"b\", \"c\", \"a\"] you\
    \ should return the dictionary {\"a\":2, \"b\":1, \"c\":1}.\nThe function should\
    \ ignore case when counting.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6pi06d9.jl:22\nin expression starting at\
    \ /tmp/tmpg6pi06d9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        nothing \n    else \n     \
    \   longest = strings[length(strings)-1]\n        for s in strings \n        \
    \    if length(s) == length(longest) \n                longest := s \n       \
    \     else \n                break\n        end\n        longest\n    end\nend\n\
    </cell>\n<text>\nExercise 9\nWrite a function that returns the longest string\
    \ in a vector of strings. Return nothing in case the vector is empty.\n>>> longest([])\n\
    nothing\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\"\
    , \"ccc\"])\n\"ccc\"\n>>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n\"dddd\"\
    \n>>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n\"eeee\"\n>>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n\"ffff\"\n>>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n\"gggg\"\n>>>\
    \ longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"\
    hhhh\"])\n\"hhhh\"\n>>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n\"iiii\"\n>>> longest([\"a\", \"bb\",\
    \ \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    ])\n\"jjjj\"\n>>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"\
    , \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n\"kkkk\"\n>>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\"])\n\"llll\"\n>>> longest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\"])\n\"mmmm\"\n>>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\", \"nnnn\"])\n\"nnnn\"\n>>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\", \"nnnn\", \"oooo\"])\n\"oooo\"\n>>> longest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgf4xsu6.jl:24\nin expression starting at\
    \ /tmp/tmpzgf4xsu6.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings \n            if length(longest)\
    \ < length(s) \n                longest = s \n        return longest \nend\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of booleans indicating whether each string is a palindrome or not. \nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the vector contains strings that are not palindromes.\n\
    The function should return nothing in case the vector contains strings that are\
    \ not palindromes.\nThe function should return nothing in case the vector contains\
    \ strings that are not palindromes.\nThe function should return nothing in case\
    \ the vector contains strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains strings that are not palindromes.\n\
    The function should return nothing in case the vector contains strings that are\
    \ not palindromes.\nThe function should return nothing in case the vector contains\
    \ strings that are not palindromes.\nThe function should return nothing in case\
    \ the vector contains strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains strings that are not palindromes.\n\
    The function should return nothing in case the vector contains strings that are\
    \ not palindromes.\nThe function should return nothing in case the vector contains\
    \ strings that are not palindromes.\nThe function should return nothing in case\
    \ the vector contains strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains strings that are not palindromes.\n\
    The function should return nothing in case the vector contains strings that are\
    \ not palindromes.\nThe function should return nothing in case the vector contains\
    \ strings that are not palindromes.\nThe function should return nothing in case\
    \ the vector contains strings that are not palindromes.\nThe function should return\
    \ nothing in case the vector contains strings that are not palindromes.\nThe function\
    \ should return nothing in case the vector contains strings that are not palindromes.\n\
    The function should return nothing in case the vector contains strings that are\
    \ not palindromes.\nThe function should return nothing in case the vector contains\
    \ strings that are not \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqgh013n.jl:20\nin expression starting at\
    \ /tmp/tmphqgh013n.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function which takes\
    \ a vector of strings and a vector of integers and returns the sum of the integers\
    \ in the vector. \nThe function should return nothing in case the vector is empty.\n\
    The function should return nothing in case the vector has more than one element.\n\
    The function should return nothing in case the vector has more than one element\
    \ and the first element is not an integer.\nThe function should return nothing\
    \ in case the vector has more than one element and the first element is an integer.\n\
    The function should return nothing in case the vector has more than one element\
    \ and the first element is an integer and the second element is not an integer.\n\
    The function should return nothing in case the vector has more than one element\
    \ and the first element is an integer and the second element is an integer.\n\
    The function should return nothing in case the vector has more than one element\
    \ and the first element is an integer and the second element is an integer and\
    \ the third element is not an integer.\nThe function should return nothing in\
    \ case the vector has more than one element and the first element is an integer\
    \ and the second element is an integer and the third element is an integer.\n\
    The function should return nothing in case the vector has more than one element\
    \ and the first element is an integer and the second element is an integer and\
    \ the third element is an integer and the fourth element is not an integer.\n\
    The function should return nothing in case the vector has more than one element\
    \ and the first element is an integer and the second element is an integer and\
    \ the third element is an integer and the fourth element is an integer.\nThe function\
    \ should return nothing in case the vector has more than one element and the first\
    \ element is an integer and the second element is an integer and the third element\
    \ is an integer and the fourth element is an integer and the fifth element is\
    \ not an integer.\nThe function should return nothing in case the vector has more\
    \ than one element and the first element is an integer and the second element\
    \ is an integer and the third element is an integer and the fourth element is\
    \ an integer and the fifth element is an integer.\nThe function should return\
    \ nothing in case the vector has more than one element and the first element is\
    \ an integer and the second element is an integer and the third element is an\
    \ integer and the fourth element is an integer and the fifth element is an integer\
    \ and the sixth element is not an integer.\nThe function should return nothing\
    \ in case the vector has more than one element and the first element is an integer\
    \ and the second element is an integer and the third element is an integer and\
    \ the fourth element is an integer and the fifth element is an integer and the\
    \ sixth element is an integer.\nThe function should return nothing in case the\
    \ vector has more than one element and the first element is an integer and the\
    \ second element is an integer and the third element is an integer and the fourth\
    \ element is an integer and the fif\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpkgch7d.jl:19\nin expression starting at\
    \ /tmp/tmpdpkgch7d.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphsxmybdv.jl:15\nin expression\
    \ starting at /tmp/tmphsxmybdv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings[2:end]\n            if isequal(longest,\
    \ s)\n                longest = s\n            else\n                break\n \
    \       end\n    end\n    return longest\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nA simple and efficient solution:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10luj9vm.jl:23\nin expression starting at\
    \ /tmp/tmp10luj9vm.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for s in strings[2:] \n            if length(s) == longest_len \n\
    \                longest_str = s \n            end \n        end \n        return\
    \ longest_str \n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if the input vector is [\"a\", \"bb\", \"\
    ccc\"] and the input vector is [2, 3, 4], then the output vector should be [\"\
    a\", \"bb\", \"ccc\"]. Do not use map!.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx80xvky3.jl:16\nin expression\
    \ starting at /tmp/tmpx80xvky3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    \n    if length(strings) == 0\n      \
    \  return nothing\n    end\n    \n    longest = strings[end]\n    for s in strings[2:end]\n\
    \        if length(s) < length(longest)\n            longest = s\n        end\n\
    \    end\n    \n    return longest\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ is the concatenation of all the strings in the input vector. Return nothing\
    \ in case the input vector is empty.\n>>> concat_vec([])\n>>> concat_vec([\"a\"\
    , \"b\", \"c\"])\n[\"a\", \"b\", \"c\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\"\
    ])\n[\"a\", \"bb\", \"ccc\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\", \"ddd\"\
    ])\n[\"a\", \"bb\", \"ccc\", \"ddd\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\"])\n[\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"]\n>>> concat_vec([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n[\"a\", \"bb\", \"ccc\", \"\
    ddd\", \"eee\", \"fff\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\", \"ddd\", \"\
    eee\", \"fff\", \"ggg\"])\n[\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\", \"hhh\"])\n[\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\", \"hhh\", \"iii\"])\n[\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\", \"hhh\", \"iii\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n[\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"]\n>>> concat_vec([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\"])\n[\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\"]\n>>> concat_vec([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\", \"ggg\", \"hh\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n3h8cgm.jl:26\nin expression starting at\
    \ /tmp/tmp0n3h8cgm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuf6d6bm8.jl:15\nin expression\
    \ starting at /tmp/tmpuf6d6bm8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = maximum(strings, length) \n        longest_string = filter(x\
    \ -> length(x) == max_length, strings) \n        if length(longest_string) ==\
    \ 1 \n            return longest_string[0] \n        else \n            return\
    \ longest_string\nend\n</cell>\n<text>\nExercise 10\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings where each string is the\
    \ concatenation of all the strings in the original vector, except the longest\
    \ one. For example, if the input vector is [\"a\", \"bb\", \"ccc\"], then the\
    \ output vector should be [\"a\", \"bb\", \"cc\", \"ccc\"].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92awf_2y.jl:21\nin expression starting at\
    \ /tmp/tmp92awf_2y.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings)\n        longest_string = strings[max_length]\n\
    \        for string in strings \n            if length(string) == max_length \n\
    \                longest_string = string \n            end \n        end \n  \
    \      return longest_string \n    end \nend \n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of strings and a vector of integers and returns\
    \ a vector of strings where each string in the input vector is replaced by the\
    \ corresponding integer in the input vector. For example, if the input vector\
    \ is [\"a\", \"b\", \"c\"] and the input vector is [2, 1, 3], the output vector\
    \ should be [\"a\", \"2\", \"3\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy87si4s.jl:24\nin expression starting at\
    \ /tmp/tmpsy87si4s.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) < length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis\
    \ doesn't work if you have multiple strings of the same length. Try `longest([\"\
    a\", \"bb\", \"ccc\"])`.\n<|/ c |>\n<| c |>\nYes, you're right. I've edited my\
    \ answer to include a version that works with multiple strings of the same length.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple strings of the same\
    \ length. Try `longest([\"a\", \"bb\", \"ccc\"])`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn491yo2u.jl:19\nin expression starting at\
    \ /tmp/tmpn491yo2u.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1rf1u6d2.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1rf1u6d2.jl:26\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rf1u6d2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rf1u6d2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    longest_string = filter(x -> x == max_length, strings)\n\
    \    if length(longest_string) == 1\n        return longest_string[1]\n    else\n\
    \        return nothing\n    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the longest string in a vector of strings. Return nothing in case the vector\
    \ is empty.\nHint: Use longest.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1b57d1v.jl:21\nin expression starting at\
    \ /tmp/tmph1b57d1v.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    longest_string <-\
    \ strings[[1]]\n    for string in strings[2:length(strings)] \n        if length(longest_string)\
    \ < length(string) \n            longest_string <- string\n    end\n    return\
    \ longest_string\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a\
    \ solution using foldl and max.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgw94a8ky.jl:19\nin expression starting at\
    \ /tmp/tmpgw94a8ky.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        max_length = length(strings) \n        longest = strings[1] \n      \
    \  for string in strings \n            if length(string) == max_length \n    \
    \            longest = string \n            end \n        end \n        return\
    \ longest \n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\",\
    \ \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of booleans indicating whether each string is\
    \ a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7e89lgc.jl:24\nin expression starting at\
    \ /tmp/tmpp7e89lgc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns the longest string in that vector.\
    \ Return nothing in case the vector is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgh0gfnj3.jl:15\nin expression\
    \ starting at /tmp/tmpgh0gfnj3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which takes a vector of strings and returns the number of times each string\
    \ appears in the vector.\nFor example, [\"a\", \"b\", \"c\", \"a\", \"b\", \"\
    c\"] should return [2 1 3 1 2 1].\nHint: Use a dictionary to store the counts\
    \ and a for loop to iterate over the vector. \nHint: Use a dictionary comprehension\
    \ to create the dictionary.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp146v7yc4.jl:15\nin expression\
    \ starting at /tmp/tmp146v7yc4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing\n            longest = s\n        elseif length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that takes a vector of strings and a vector\
    \ of integers and returns a vector of integers representing the number of times\
    \ each string appears in the vector of strings.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7wnsbw9.jl:21\nin expression starting at\
    \ /tmp/tmpr7wnsbw9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing\n    longest_length =\
    \ length(strings)\n    longest_string = strings[longest_length]\n    for string\
    \ in strings\n        if length(string) == longest_length\n            return\
    \ longest_string\n        end\n    end\n    return nothing\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest string in a vector of strings.\
    \ Use longest.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcigy529m.jl:21\nin expression starting at\
    \ /tmp/tmpcigy529m.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        nothing\n    else\n        longest\
    \ = strings[length(strings)-1]\n        for string in strings\n            if\
    \ length(longest) < length(string)\n                longest = string\n       \
    \     end\n        end\n        longest\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string is a palindrome or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpqmeksc.jl:23\nin expression starting at\
    \ /tmp/tmpkpqmeksc.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings \n            if length(str) == longest_len \n\
    \                return str \n            else \n                longest_len =\
    \ length(str) \n                longest_str = str \n        endfor \n        return\
    \ longest_str \n    endif \nendfunction \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns a vector\
    \ of strings. Each string in the output vector should contain the corresponding\
    \ integer in the input vector. For example, if the input vector is [\"a\", \"\
    bb\", \"ccc\"] and the integer vector is [1,2,3], then the output vector should\
    \ be [\"1\",\"2\",\"3\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszkq4mfn.jl:26\nin expression starting at\
    \ /tmp/tmpszkq4mfn.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if length(strings) == 0\n        return\
    \ nothing\n    longest = strings[1]\n    for string in strings\n        if length(string)\
    \ > length(longest)\n            longest = string\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0eiwvqzl.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0eiwvqzl.jl:1\n\
    in expression starting at /tmp/tmp0eiwvqzl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string = strings[1] \n        for string in strings \n      \
    \      if string.length() > longest_string.length() \n                longest_string\
    \ = string \n        return longest_string \nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of strings and returns a vector of strings\
    \ with the first letter of each string capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcra13d2.jl:20\nin expression starting at\
    \ /tmp/tmpvcra13d2.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    max_length\
    \ = maximum(strings)\n    longest_string = filter(x -> x == max_length, strings)\n\
    \    if length(longest_string) == 1\n        return longest_string\n    else\n\
    \        return longest(longest_string)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and returns a vector of the\
    \ lengths of the strings. \nFor example, longest([\"a\", \"b\", \"c\"]) should\
    \ return [3, 2]. \nWrite a function that takes a vector of strings and returns\
    \ a vector of the longest strings. \nFor example, longest([\"a\", \"bb\", \"ccc\"\
    ]) should return [\"ccc\", \"bb\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicbyabn1.jl:21\nin expression starting at\
    \ /tmp/tmpicbyabn1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest string in an array of strings. Return nothing in case the array\
    \ is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjb4kfrvd.jl:19\nin expression starting at\
    \ /tmp/tmpjb4kfrvd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the longest\
    \ string in a vector of strings. Return nothing in case the input vector is empty.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjyc_q2r.jl:16\nin expression starting at\
    \ /tmp/tmpzjyc_q2r.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which takes a vector of strings and returns the longest string in that vector.\
    \ Return nothing in case the vector is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3p4humb5.jl:19\nin expression starting at\
    \ /tmp/tmp3p4humb5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6mpvk3u.jl:19\nin expression starting at\
    \ /tmp/tmpn6mpvk3u.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings \n            if length(str) == longest_len \n\
    \                return str \n            else \n                longest_len =\
    \ length(str) \n                longest_str = str \n        return longest_str\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\",\
    \ \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and a vector of strings as inputs and returns a vector of strings\
    \ as output. The function should return nothing in case the two vectors are different\
    \ lengths. Otherwise, for each string in the first vector, find the longest string\
    \ in the second vector and return that string. Return the first string in case\
    \ there are multiple strings of the same length. Return nothing in case the input\
    \ vectors are empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk206kp5h.jl:25\nin expression starting at\
    \ /tmp/tmpk206kp5h.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if length(strings) > 0 \n        longest\
    \ = strings[length(strings)-1]\n        for s in strings[2:end]\n            if\
    \ length(longest) < length(s) \n                longest = s\n            end\n\
    \        end\n    end\n    return longest\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2n0l_zg9.jl:22\nin expression starting at\
    \ /tmp/tmp2n0l_zg9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns the longest string in that vector, followed\
    \ by the number of times that string occurred.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwz56jafx.jl:19\nin expression starting at\
    \ /tmp/tmpwz56jafx.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1rf1u6d2.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp1rf1u6d2.jl:26\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rf1u6d2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rf1u6d2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings \n            if length(str) == longest_len \n\
    \                return str \n            else \n                longest_len =\
    \ length(str) \n                longest_str = str \n        endfor \n        return\
    \ longest_str \n    endfor \nendfunction \n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of strings and a vector of integers and returns\
    \ a vector of integers containing the indices of the strings in the first vector\
    \ that correspond to the integers in the second vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5so2nws.jl:26\nin expression starting at\
    \ /tmp/tmpu5so2nws.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest := strings[length(strings)-1] \n        for s in strings \n \
    \           if length(s) == length(longest) \n                longest := s \n\
    \            end \n        end \n        return longest \n    end \nend \n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of strings and returns the longest\
    \ string in each row. For example,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6tw1cjfe.jl:1\nin expression starting at /tmp/tmp6tw1cjfe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of integers and returns a vector\
    \ of the same length with strings replaced by the corresponding integers. For\
    \ example,\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpffr21_fo.jl:15\nin expression\
    \ starting at /tmp/tmpffr21_fo.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings[2:end]\n            if length(s)\
    \ > length(longest)\n                longest = s\n        end\n    end\n    return\
    \ longest\nend\n</cell>\n<text>\nExercise 9\nWrite a function that takes a vector\
    \ of strings and returns the longest string in that vector. Return nothing in\
    \ case the vector is empty.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1ybndh3.jl:21\nin expression starting at\
    \ /tmp/tmpj1ybndh3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings[2:end]\n            if length(longest)\
    \ < length(s)\n                longest = s\n            end\n        end\n   \
    \ end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ string in a vector of strings. Return nothing in case the input vector is empty.\n\
    \    >>> longest([])\n    nothing\n    >>> longest([\"a\", \"b\", \"c\"])\n  \
    \  \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6afa0j20.jl:22\nin expression starting at\
    \ /tmp/tmp6afa0j20.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0\n        return nothing\n    longest_string\
    \ = \"\"\n    longest_string_length = 0\n    for string in strings\n        if\
    \ length(longest_string) > length(longest_string_length) \n            longest_string\
    \ = longest_string_length\n        else\n            longest_string = string\n\
    \            longest_string_length = length(longest_string)\n        end\n   \
    \ end\n    return longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and returns a vector of booleans indicating whether each\
    \ string is a palindrome or not. \nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the vector\
    \ contains only empty strings.\nThe function should return nothing in case the\
    \ vector contains only strings that are not palindromes.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains strings\
    \ that are palindromes but are of different lengths.\nThe function should return\
    \ nothing in case the vector contains strings that are palindromes but are of\
    \ different lengths.\nThe function should return nothing in case the vector contains\
    \ strings that are palindromes but are of different lengths.\nThe function should\
    \ return nothing in case the vector contains strings that are palindromes but\
    \ are of different lengths.\nThe function should return nothing in case the vector\
    \ contains strings that are palindromes but are of different lengths.\nThe function\
    \ should return nothing in case the vector contains strings that are palindromes\
    \ but are of different lengths.\nThe function should return nothing in case the\
    \ vector contains strings that are palindromes but are of different lengths.\n\
    The function should return nothing in case the vector contains strings that are\
    \ palindromes but are of different lengths.\nThe function should return nothing\
    \ in case the vector contains strings that are palindromes but are of different\
    \ lengths.\nThe function should return nothing in case the vector contains \n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzv240wu.jl:25\nin expression starting at\
    \ /tmp/tmpvzv240wu.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    In Julia 1.3, you can use the function findmax to find the maximum element in\
    \ a vector:\n<code>\njulia> findmax([\"a\", \"b\", \"c\"])\n\"c\"\n</code>\n<|/\
    \ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function findmax\
    \ to find the maximum element in a vector:\n<code>\njulia> findmax([\"a\", \"\
    b\", \"c\"])\n\"c\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nIn Julia\
    \ 1.3 you can use the function findmax to find the maximum element in a vector:\n\
    <code>\njulia> findmax([\"a\", \"b\", \"c\"])\n\"c\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function findmax to find\
    \ the maximum element in a vector:\n<code>\njulia> findmax([\"a\", \"b\", \"c\"\
    ])\n\"c\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.3, you can\
    \ use the function findmax to find the maximum element in a vector:\n<code>\n\
    julia> findmax([\"a\", \"b\", \"c\"])\n\"c\"\n</code>\n<|/ a tags=julia |>\n<|\
    \ a dscore=1 |>\nIn Julia 1.3, you can use the function findmax to find the maximum\
    \ element in a vector:\n<code>\njulia> findmax([\"a\", \"b\", \"c\"])\n\"c\"\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nIn Julia 1.3, you can use the\
    \ function findmax to find the maximum element in a vector:\n<code>\njulia> findmax([\"\
    a\", \"b\", \"c\"])\n\"c\"\n</code>\n<|/ a tags=julia |>\n<| a |>\nIn Julia 1.3,\
    \ you can use the function findmax to find the maximum element in a vector:\n\
    <code>\njulia> findmax([\"a\", \"b\", \"c\"])\n\"c\"\n</code>\n<|/ a dscore=1\
    \ tags=julia |>\n<| a tags=julia |>\nIn Julia 1.3, you can use the function findmax\
    \ to find the maximum element in a vector:\n<code>\njulia> findmax([\"a\", \"\
    b\", \"c\"])\n\"c\"\n\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8108249w.jl:19\nin expression starting at\
    \ /tmp/tmp8108249w.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) > length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of strings and a vector of integers, and returns a vector of strings\
    \ where each string is the concatenation of the integer and the string in the\
    \ input vector. For example, if the input vector is [\"a\", \"bb\", \"ccc\"] and\
    \ the integer vector is [1,2,3], the output should be [\"1a\", \"2b\", \"3c\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82ict_od.jl:19\nin expression starting at\
    \ /tmp/tmp82ict_od.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing\n            longest = s\n        elseif length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and a vector of strings\
    \ as arguments and returns a vector of strings as result. \nThe function should\
    \ return the same vector in case the two vectors have the same length and the\
    \ same strings. \nThe function should return nothing in case the two vectors have\
    \ different lengths or different strings. \nThe function should return nothing\
    \ in case the two vectors are empty.\nThe function should return nothing in case\
    \ the two vectors are of different types.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6k1n_nbw.jl:21\nin expression starting at\
    \ /tmp/tmp6k1n_nbw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_len = length(strings) \n        longest_str = strings[longest_len]\
    \ \n        for str in strings[2:] \n            if length(str) == longest_len\
    \ \n                longest_str = str \n            end \n        end \n     \
    \   return longest_str \n    end \nend \n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of strings and returns the number of unique words\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsgl_m4ip.jl:16\nin expression\
    \ starting at /tmp/tmpsgl_m4ip.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"b\", \"c\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of strings and returns the longest string in that vector. Return\
    \ nothing in case the vector is empty.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1gn5t2qf.jl:15\nin expression\
    \ starting at /tmp/tmp1gn5t2qf.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if !isempty(strings)\n        longest\
    \ = strings[end-1]\n        for s in strings[2:end]\n            if length(s)\
    \ > length(longest)\n                longest = s\n            end\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do this without looping through\
    \ the entire vector. Maybe using some sort of `find` function?\n<|/ c |>\n<| c\
    \ |>\nYes, there is. See my answer below.\n<|/ c |>\n<| a tags=julia |>\nI like\
    \ Alexandre's answer, but here's another way using find:\n<code>\njulia> function\
    \ longest(vec)\n           return vec[findfirst(vec .> maximum(vec))]\n      \
    \ end\nlongest (generic function with 1 method)\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyl90fg6.jl:22\nin expression starting at\
    \ /tmp/tmpxyl90fg6.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) > length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string is a palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsd59880j.jl:15\nin expression\
    \ starting at /tmp/tmpsd59880j.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for s in strings[2:] \n            if\
    \ length(longest) < length(s) \n                longest = s \n            end\
    \ \n        end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the longest string in an array of strings. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfypdh7hs.jl:15\nin expression\
    \ starting at /tmp/tmpfypdh7hs.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest_string <- strings[length(strings)-1] \n        for string in\
    \ strings \n            if length(longest_string) < length(string) \n        \
    \        longest_string <- string \n        return longest_string \nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the longest string in a vector\
    \ of strings. Return nothing in case the input vector is empty.\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspn56kjv.jl:20\nin expression starting at\
    \ /tmp/tmpspn56kjv.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function which takes\
    \ a vector of strings and a vector of integers and returns the sum of the integers\
    \ corresponding to each of the strings in the vector. For example, if the input\
    \ vector is [\"a\", \"bb\", \"ccc\"] and the integers vector is [10, 20, 30],\
    \ the output should be [120, 230, 30].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbkqrcaa.jl:16\nin expression starting at\
    \ /tmp/tmpjbkqrcaa.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing\n            longest = s\n        elseif length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThanks for your answer! I didn't know about\
    \ `longest` function. It's a nice solution, but I still think there should be\
    \ a more elegant solution. Maybe it's just my lack of Julia knowledge.\n<|/ c\
    \ |>\n<| c |>\nI agree, there should be a more elegant solution. Maybe someone\
    \ else will come up with something more elegant.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdgnvv1p.jl:21\nin expression starting at\
    \ /tmp/tmpvdgnvv1p.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 return nothing \n    longest_string <-\
    \ strings[[1]]\n    for string in strings[2:length(strings)] \n        if length(longest_string)\
    \ > length(string) \n            longest_string <- string \n    return longest_string\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp7k48xfbe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7k48xfbe.jl:1\n\
    in expression starting at /tmp/tmp7k48xfbe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        longest = strings[1] \n        for string in strings \n            if\
    \ string.length > longest.length \n                longest = string \n       \
    \ return longest \nend\n</cell>\n<text>\nExercise 3: Write a function that takes\
    \ a vector of strings and a vector of integers and returns a vector of strings\
    \ where each string in the input vector is replaced by the corresponding integer\
    \ in the input vector. For example, if the input vector is [\"a\", \"b\", \"c\"\
    ] and the input vector is [2, 1, 3], the output vector should be [\"a\", \"2\"\
    , \"3\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_3da3_f.jl:20\nin expression starting at\
    \ /tmp/tmpj_3da3_f.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    if length(strings) == 0 \n        return\
    \ nothing\n    longest = strings[1]\n    for string in strings\n        if string.length()\
    \ > longest.length()\n            longest = string\n        end\n    end\n   \
    \ return longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqnnqy1fq.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqnnqy1fq.jl:1\n\
    in expression starting at /tmp/tmpqnnqy1fq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    longest = nothing\n    for s in strings\n        if longest ==\
    \ nothing || length(longest) < length(s) \n            longest = s\n        end\n\
    \    end\n    return longest\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"b\", \"c\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ string in an array of strings. Return nothing in case the array is empty.\n\
    \    >>> longest([])\n    nothing\n    >>> longest([\"a\", \"b\", \"c\"])\n  \
    \  \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhmshey4.jl:19\nin expression starting at\
    \ /tmp/tmplhmshey4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return nothing in case\
    \ the input vector is empty.\n    >>> longest([])\n    nothing\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \"\"\"\nfunction longest(strings::Vector{String})::Union{String,\
    \ Nothing} \n    if length(strings) == 0 \n        return nothing \n    else \n\
    \        return maximum(strings) \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wzsko47.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wzsko47.jl:1\n\
    in expression starting at /tmp/tmp9wzsko47.jl:1\n"
  stdout: ''
