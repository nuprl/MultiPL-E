name: HumanEval_19_sort_numbers
language: jl
prompt: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to\
  \ largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n  \
  \  \"\"\"\nfunction sort_numbers(numbers::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
  \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
  \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six\
  \ five four three two one zero\") == \"zero one two three four five six\")\nend\n"
completions: ["    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n   \
    \ numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nI wrote a package for this.\
    \ It has some nice features like the ability to sort by multiple fields and it\
    \ also has some nice performance improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\nI wrote a package for this. It has some\
    \ nice features like the ability to sort by multiple fields and it also has some\
    \ nice performance improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<|/\
    \ a dscore=0 |>\n<| a tags=julia |>\nI wrote a package for this. It has some nice\
    \ features like the ability to sort by multiple fields and it also has some nice\
    \ performance improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<|/ a dscore=0\
    \ |>\n<| a tags=julia |>\nI wrote a package for this. It has some nice features\
    \ like the ability to sort by multiple fields and it also has some nice performance\
    \ improvements. \nhttps://github.com/jrwlkz/DataFrames.jl\n<code>\nusing DataFrames\n\
    using DataFramesMeta", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all the words capitalized.\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.\
    \ \nThe function should ignore any non-alphabetic characters.\nThe function should\
    \ ignore any leading or trailing whitespace.\nThe function should ignore any leading\
    \ or trailing punctuation.\nThe function should ignore any leading or trailing\
    \ numbers.\nThe function should ignore any leading or trailing periods.\nThe function\
    \ should ignore any leading or trailing commas.\nThe function should ignore any\
    \ leading or trailing semicolons.\nThe function should ignore any leading or trailing\
    \ colons.\nThe function should ignore any leading or trailing semicolons.\nThe\
    \ function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\nThe function should ignore any leading or trailing semicolons.\n\
    The function should ignore any leading or trailing colons.\nThe function should\
    \ ignore any leading or trailing periods.\nThe function should ignore any leading\
    \ or trailing commas.\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = numbers.join(\"\
    \ \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\" \"\
    )\nend\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=2 |>\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n  \
    \  numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the string with all the words capitalized.\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| c |>\nI like your solution,\
    \ however it only works with strings of length 9. Try it with `sort_numbers \"\
    one two three four five six seven eight nine\"`.\n<|/ c |>\n<| c |>\nYes, I didn't\
    \ think about that case. Thanks for pointing it out. I'll edit the answer.\n<|/\
    \ c |>\n<| a tags=sorting,string,haskell |>\nHere's a solution using Data.List.sortBy\
    \ and Data.List.tails:\n<code>\nimport Data.List", "    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a |>\n<| c |>\nI believe this answer should be accepted\
    \ as the correct one. Although it does require a little bit of code to be written.\n\
    <|/ c |>\n<| a |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers =\
    \ sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all the characters in lower case.\
    \ \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello\"\
    )\n\"Hello\"\n>>> capitalize(\"hello  world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers[2:]\n    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,haskell |>\n\
    <| a dscore=1 |>\n<code>\nimport Data.List", "    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "  \
    \  numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2: Write a function that takes a string and returns the string\
    \ with all the words capitalized.\n    >>> capitalize_words(\"the quick brown\
    \ fox jumps over the lazy dog\")\n    \"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| c |>\nThanks for your answer. Your code works, but it sorts the numbers\
    \ in lexicographical order. I would like to sort them in numerical order. For\
    \ example, if I input \"three one five\", the output should be \"one three five\"\
    .\n<|/ c |>\n<| c |>\nOh, I see. Sorry about that. I'll edit my answer.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. Your code works, but it sorts the numbers\
    \ in lexicographical order. I would like to sort them in numerical order. For\
    \ example, if I input \"three one five\", the output should be \"one three five\"\
    .\n<|/ c |>\n<| c |>\nOh, I see. Sorry about that. I'll edit my answer.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nThe other answers here are great, but I wanted to add\
    \ my own solution, which is more general (i.e. works for any type that implements\
    \ sort!).\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n \
    \   return numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\n<code>", "    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.1>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all numbers in it sorted from smallest to largest.\nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") should return \"one two three\
    \ four five six seven eight nine\".\nWrite a second function that takes a string\
    \ and returns the string with all numbers in it sorted from largest to smallest.\n\
    For example, sort_numbers(\"one two three four five six seven eight nine\") should\
    \ return \"nine eight seven six five four three two one\".", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a |>\n<code>\nimport Data.List",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all non-alphabetic characters removed.\n    Valid\
    \ characters are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', and 'space'.\n    >>> remove_non_alphabetic(\"\
    \")\n    \"\"\n    >>> remove_non_alphabetic(\"abc\")\n    \"abc\"\n    >>> remove_non_alphabetic(\"\
    a b c\")\n    \"a b c\"\n    >>> remove_non_alphabetic(\"a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O \n    P Q R S T\
    \ U V W X Y Z space\")\n    \"a b c d e f g h i j k l m n o p q r s t u v w x\
    \ y z A B C D E F G H I J K L M N O \n    P Q R S T U V W X Y Z space\"\n    \"\
    \"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,sorting,string |>\nI came up with a solution that\
    \ is pretty straightforward and doesn't require any external packages. I used\
    \ the function sort_numbers to sort the numbers and then used the function join\
    \ to concatenate the strings together. \n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a function that sorts numbers in ascending order:\n\
    <code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</code>\n<|/ a tags=julia,sorting,string |>\n<| c |>\nThis does not answer\
    \ the question. `sort_numbers(\"one three five\")` returns `\"one three five\"\
    `, not `\"one five three\"`.\n<|/ c |>\n<| c |>\nI believe this answer is correct\
    \ and should be accepted.\n<|/ c |>\n<| a tags=julia,sorting,string |>\nA more\
    \ general solution that does not require the string to be split into words and\
    \ then sorted:\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,haskell,string\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = map(int, numbers)\n    numbers.sort()\n    numbers = map(str,\
    \ numbers)\n    numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,python |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers =\
    \ map(int, numbers)\n    numbers.sort()\n    numbers = map(str, numbers)\n   \
    \ numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    numbers = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,python |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers =\
    \ map(int, numbers)\n    numbers.sort()\n    numbers = map(str, numbers)\n   \
    \ numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers = map(int, numbers)\n    numbers.sort()\n    numbers = map(str,\
    \ numbers)\n    numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/\
    \ a tags=sorting,string,python |>\n<| c |>\nPlease don't post only code as an\
    \ answer, but also provide an explanation of what your code does and how it solves\
    \ the problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ a |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \"\
    )\n    numbers = map(int, numbers)\n    numbers.sort()\n    numbers = map(str,\
    \ numbers)\n    numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/\
    \ a tags=sorting,string,python dscore=0 |>\n<|", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the string with all 'o's replaced with 'O's\n>>> replace_o(\"one two\
    \ three four five six seven eight nine\")\n\"one two three four five six seven\
    \ eight nine\"\n>>> replace_o(\"one two three four five six seven eight nine zero\"\
    )\n\"one two three four five six seven eight nine zero\"\n>>> replace_o(\"one\
    \ two three four five six seven eight nine zero one\")\n\"one two three four five\
    \ six seven eight nine zero one\"\n>>> replace_o(\"one two three four five six\
    \ seven eight nine zero one two\")\n\"one two three four five six seven eight\
    \ nine zero one two\"\n>>> replace_o(\"one two three four five six seven eight\
    \ nine zero one two three\")\n\"one two three four five six seven eight nine zero\
    \ one two three\"\n>>> replace_o(\"one two three four five six seven eight nine\
    \ zero one two three four\")\n\"one two three four five six seven eight nine zero\
    \ one two three four\"\n>>> replace_o(\"one two three four five six seven eight\
    \ nine zero one two three four five\")\n\"one two three four five six seven eight\
    \ nine zero one two three four five\"\n>>> replace_o(\"one two three four five\
    \ six seven eight nine zero one two three four five six\")\n\"one two three four\
    \ five six seven eight nine zero one two three four five six\"\n>>> replace_o(\"\
    one two three four five six seven eight nine zero one two three four five six\
    \ seven\")\n\"one two three four five six seven eight nine zero one two three\
    \ four five six seven\"\n>>> replace_o(\"one two three four five six seven eight\
    \ nine zero one two ", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    number", "    numbers\
    \ = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.3>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell\
    \ |>\n<| c |>\nThanks for the answer! I ended up doing something similar, except\
    \ I used `sortBy` instead of `sort`. I also used `sortBy` instead of `sort` because\
    \ I wanted to sort by multiple criteria, not just by one criterion.\n<|/ c |>\n\
    <| c |>\n`sortBy` also works with multiple criteria, so you can do `sortBy (comparing\
    \ snd) $ sortBy (comparing fst) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ sortBy (comparing length) $ sortBy (comparing\
    \ fst) $ sortBy (comparing snd) $ ", "    numbers = numbers.split(\" \")\n   \
    \ numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nIf the string\
    \ has less than two words, return 0.\nIf the string has two or fewer words, return\
    \ the number of words.\nIf the string has more than two words, return the number\
    \ of words in the first two words.\nFor example, if the string is \"one two three\
    \ four five\", return 4.", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.4>",
  "    numbers = numbers.split(\" \")\n    numbers.sort\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all 'a's replaced by 'o's.\n>>> replace_a(\"a b c\")\n\"o b\
    \ c\"\n>>> replace_a(\"a b c d e f g\")\n\"o b c d e f g\"\n>>> replace_a(\"a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z\")\n\"o b c d e f g h i j\
    \ k l m n o p q r s t u v w x y z\"\n>>> replace_a(\"a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 \")\n\"o b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0\"\n>>> replace_a(\"a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized. \n>>> capitalize_words(\"the quick brown fox\
    \ jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\
    \n>>> capitalize_words(\"the quick brown fox jumped over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"the quick\
    \ brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped Over The\
    \ Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumped over the lazy dog\")\n\"The Quick Brown Fox Jumped\
    \ Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumped over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumped Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick bro", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the characters\
    \ in lower case. \nFor example, \n>>> string_to_lower(\"Hello World\")\n\"hello\
    \ world\"\n>>> string_to_lower(\"Hello World!\")\n\"hello world!\"\n>>> string_to_lower(\"\
    Hello World!!\")\n\"hello world!!\"\n>>> string_to_lower(\"Hello World!!!\")\n\
    \"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!\")\n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!\")\n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!\")\n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!\"\
    )\n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\")\n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello\
    \ world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello\
    \ world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello\
    \ world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\
    \n>>> string_to_lower(\"Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"\
    Hello World!!!!!!!\") \n\"hello world!!!\"\n>>> string_to_lower(\"Hello World!!!!!!!\"\
    ) \n\"hello world!!!\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the string with all numbers in it sorted from smallest\
    \ to largest.\nFor example, sort_numbers(\"one two three four five six seven eight\
    \ nine\") returns \"one two three four five six seven eight nine\".", "    numbers\
    \ = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    number", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\n<code>", "    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "  \
    \  numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n \
    \   return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all the words capitalized.\n    For example, sort_words(\"\
    The quick brown fox jumps over the lazy dog\") should return \"The Quick Brown\
    \ Fox Jumps Over The Lazy Dog\"\n    Use a regular expression to capitalize the\
    \ first letter of each word\n    Use a regular expression to capitalize the first\
    \ letter of each word\n    Use a regular expression to capitalize the first letter\
    \ of each word\n    Use a regular expression to capitalize the first letter of\
    \ each word\n    Use a regular expression to capitalize the first letter of each\
    \ word\n    Use a regular expression to capitalize the first letter of each word\n\
    \    Use a regular expression to capitalize the first letter of each word\n  \
    \  Use a regular expression to capitalize the first letter of each word\n    Use\
    \ a regular expression to capitalize the first letter of each word\n    Use a\
    \ regular expression to capitalize the first letter of each word\n    Use a regular\
    \ expression to capitalize the first letter of each word\n    Use a regular expression\
    \ to capitalize the first letter of each word\n    Use a regular expression to\
    \ capitalize the first letter of each word\n    Use a regular expression to capitalize\
    \ the first letter of each word\n    Use a regular expression to capitalize the\
    \ first letter of each word\n    Use a regular expression to capitalize the first\
    \ letter of each word\n    Use a regular expression to capitalize the first letter\
    \ of each word\n    Use a regular expression to capitalize the first letter of\
    \ each word\n    Use a regular expression to capitalize the first letter of each\
    \ word\n    Use a regular expression to capitalize the first letter of each word\n\
    \    Use a regular expression to capitalize the first letter of each word\n  \
    \  Use a regular expression to capitalize the first letter of each word\n    Use\
    \ a regular expression to capitalize the first letter of each word\n    Use a\
    \ regular expression to capitalize the first letter of each word\n    Use a regular\
    \ expression to capitalize the first letter of each word\n    Use a regular expression\
    \ to capitalize the first letter of each word\n    Use a regular expression to\
    \ capitalize the first letter of each word\n    Use a regular expression to capitalize\
    \ the first letter of each word\n    Use a regular expression to capitalize the\
    \ first letter of each word\n    Use a regular expression to capitalize the first\
    \ letter of each word\n    Use a regular expression to capitalize the first letter\
    \ of each word\n    Use a regular expression to capitalize the first letter ",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one two three four\
    \ five six seven eight nine\")\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the string with all the words capitalized. \n   \
    \ For example, \"Hello World\" returns \"Hello World\".\n    Use a regular expression\
    \ to capitalize the first letter of each word.\n    Use a regular expression to\
    \ capitalize the first letter of each word.\n    Use a regular expression to capitalize\
    \ the first letter of each word.\n    Use a regular expression to capitalize the\
    \ first letter of each word.\n    Use a regular expression to capitalize the first\
    \ letter of each word.\n    Use a regular expression to capitalize the first letter\
    \ of each word.\n    Use a regular expression to capitalize the first letter of\
    \ each word.\n    Use a regular expression to capitalize the first letter of each\
    \ word.\n    Use a regular expression to capitalize the first letter of each word.\n\
    \    Use a regular expression to capitalize the first letter of each word.\n \
    \   Use a regular expression to capitalize the first letter of each word.\n  \
    \  Use a regular expression to capitalize the first letter of each word.\n   \
    \ Use a regular expression to capitalize the first letter of each word.\n    Use\
    \ a regular expression to capitalize the first letter of each word.\n    Use a\
    \ regular expression to capitalize the first letter of each word.\n    Use a regular\
    \ expression to capitalize the first letter of each word.\n    Use a regular expression\
    \ to capitalize the first letter of each word.\n    Use a regular expression to\
    \ capitalize the first letter of each word.\n    Use a regular expression to capitalize\
    \ the first letter of each word.\n    Use a regular expression to capitalize the\
    \ first letter of each word.\n    Use a regular expression to capitalize the first\
    \ letter of each word.\n    Use a regular expression to capitalize the first letter\
    \ of each word.\n    Use a regular expression to capitalize the first letter of\
    \ each word.\n    Use a regular expression to capitalize the first letter of each\
    \ word.\n    Use a regular expression to capitalize the first letter of each word.\n\
    \    Use a regular expression to capitalize the first letter of each word.\n \
    \   Use a regular expression to capitalize the first letter of each word.\n  \
    \  Use a regular expression to capitalize the first letter of each word.\n   \
    \ Use a regular expression to capitalize the first letter of each word.\n    Use\
    \ a regular expression to capitalize the first letter of each word.\n    Use a\
    \ regular expression to capitalize the first letter of each word.\n    Use a regular\
    \ expression to capitalize the first letter of each word.\n    Use a regular expression\
    \ to capitalize the first letter of each word.\n    ", "    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.3>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly.\
    \ I'm using Julia 0.4.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.4.0 and it works.\
    \ Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it exactly. I'm using Julia 0.4.\n<|/ c |>\n<| a tags=sorting,julia |>\nI wrote\
    \ a package for this: sorting.\n<code>\njulia> using Sorting", "    numbers =\
    \ numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"one two three\")\n\"One Two Three\"\n>>>\
    \ capitalize_words(\"one two three four\")\n\"One Two Three Four\"\n>>> capitalize_words(\"\
    one two three four five\")\n\"One Two Three Four Five\"\n>>> capitalize_words(\"\
    one two three four five six\")\n\"One Two Three Four Five Six\"\n>>> capitalize_words(\"\
    one two three four five six seven\")\n\"One Two Three Four Five Six Seven\"\n\
    >>> capitalize_words(\"one two three four five six seven eight\")\n\"One Two Three\
    \ Four Five Six Seven Eight\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n\
    >>> capitalize_words(\"one two three four five six seven eight nine ten\")\n\"\
    One Two Three Four Five Six Seven Eight Nine Ten\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten eleven\")\n\"One Two Three Four\
    \ Five Six Seven Eight Nine Ten Eleven\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n\"One Two Three Four Five\
    \ Six Seven Eight Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven T", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string with\
    \ all the words capitalized. For example, \"This Is A Test\" becomes \"This Is\
    \ A Test\".", "    numbers = numbers.split(\" \")\n    numbers.sort\n    return\
    \ join(numbers, \" \")\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's\
    \ a solution using recursion:\n<code>", "    numbers = numbers[2:]\n    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell |>\n<| c |>\n\
    Thanks for your answer! I understand that my code was a little too complicated\
    \ and that there might be a better way to do it but I'm still a beginner at Haskell\
    \ and I wanted to try and understand what was going on with my code. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer to help you understand what's\
    \ going on. Let me know if you have any questions.\n<|/ c |>\n<| c |>\nThank you\
    \ so much! I really appreciate it!\n<|/ c |>\n<| a tags=sorting,haskell |>\nThe\
    \ function sort is defined in the Data.List module and takes a list as input.\
    \ Your function sort_numbers takes as input a String and returns a String. \n\
    The function sort takes a list as input and returns a list. Your function sort_numbers\
    \ returns a String. \nThe function join takes a list as input and returns a String.\
    \ Your function sort_numbers returns a String. \nThe function join takes a String\
    \ as input and returns a String. Your function sort_numbers returns a String.\
    \ \nThe function join takes a String as input and returns a String. Your function\
    \ sort_numbers returns a String. \nThe function join takes a String as input and\
    \ returns a String. Your function sort_numbers returns a String. \nThe function\
    \ join takes a String as input and returns a String. Your function sort_numbers\
    \ returns a String. \nThe function join takes a String as input and returns a\
    \ String. Your function sort_numbers returns a String. \nThe function join takes\
    \ a String as input and returns a String. Your function sort_numbers returns a\
    \ String. \nThe function join takes a String as input and returns a String. Your\
    \ function sort_numbers returns a String. \nThe function join takes a String as\
    \ input and returns a String. Your function sort_numbers returns a String. \n\
    The function join takes a String as input and returns a String. Your function\
    \ sort_numbers returns a String. \nThe function join takes a String as input and\
    \ returns a String. Your function sort_numbers returns a String. \nThe function\
    \ join takes a String as input and returns a String. Your function sort_numbers\
    \ returns a String. \nThe function join takes a String as input and returns a\
    \ String. Your function sort_numbers returns a String. \nThe function join takes\
    \ a String as input and returns a String. Your function sort_numbers returns a\
    \ String. \nThe function join takes a String as input and returns a String. Your\
    \ function sort_numbers returns a String. \nThe function join takes a String as\
    \ input and returns a String. Your function sort_numbers returns a ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers, \" \"\
    )\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia |>\n<| a tags=sorting,string,julia\
    \ |>\n<code>", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,sorting |>\nI wrote a package called Sorting which does\
    \ this for you. \n<code>\njulia> using Sorting", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = split(numbers, \" \")\n    numbers.sort!\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string as input and returns a string with all the words capitalized.\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Do", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all the words capitalized.\n>>> capitalize_words(\"\
    one two three\")\n\"One Two Three\"\n>>> capitalize_words(\"one two three four\"\
    )\n\"One Two Three Four\"\n>>> capitalize_words(\"one two three four five\")\n\
    \"One Two Three Four Five\"\n>>> capitalize_words(\"one two three four five six\"\
    )\n\"One Two Three Four Five Six\"\n>>> capitalize_words(\"one two three four\
    \ five six seven\")\n\"One Two Three Four Five Six Seven\"\n>>> capitalize_words(\"\
    one two three four five six seven eight\")\n\"One Two Three Four Five Six Seven\
    \ Eight\"\n>>> capitalize_words(\"one two three four five six seven eight nine\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine Ten\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine ten eleven\")\n\"One Two Three Four Five Six Seven Eight Nine Ten\
    \ Eleven\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven twelve\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven twelve thirteen\")\n\"One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine ten eleven twelve thirteen fourteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven T", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the characters\
    \ in lowercase.\nFor example, sort_characters(\"Hello World\") should return \"\
    hELLO wORLD\".\nWrite a function that takes a string and returns a string with\
    \ all the characters in uppercase.\nFor example, sort_characters(\"Hello World\"\
    ) should return \"HELLO WORLD\".\nWrite a function that takes a string and returns\
    \ a string with all the characters in uppercase and lowercase.\nFor example, sort_characters(\"\
    Hello World\") should return \"hELLO wORLD\".\nWrite a function that takes a string\
    \ and returns a string with all the characters in uppercase and lowercase and\
    \ numbers in between.\nFor example, sort_characters(\"Hello World\") should return\
    \ \"hEllO w0rld\".\nWrite a function that takes a string and returns a string\
    \ with all the characters in uppercase and lowercase and numbers in between and\
    \ spaces removed.\nFor example, sort_characters(\"Hello World\") should return\
    \ \"hEllO w0rld\".\nWrite a function that takes a string and returns a string\
    \ with all the characters in uppercase and lowercase and numbers in between and\
    \ spaces removed and characters replaced by an underscore.\nFor example, sort_characters(\"\
    Hello World\") should return \"hEllO w0rld\".\nWrite a function that takes a string\
    \ and returns a string with all the characters in uppercase and lowercase and\
    \ numbers in between and spaces removed and characters replaced by an underscore\
    \ and characters replaced by a space.\nFor example, sort_characters(\"Hello World\"\
    ) should return \"hEllO w0rld\".\nWrite a function that takes a string and returns\
    \ a string with all the characters in uppercase and lowercase and numbers in between\
    \ and spaces removed and characters replaced by an underscore and characters replaced\
    \ by a space and characters replaced by a dash.\nFor example, sort_characters(\"\
    Hello World\") should return \"hEllO w0rld\".\nWrite a function that takes a string\
    \ and returns a string with all the characters in uppercase and lowercase and\
    \ numbers in between and spaces removed and characters replaced by an underscore\
    \ and characters replaced by a space and characters replaced by a dash and characters\
    \ replaced by a dot.\nFor example, sort_characters(\"Hello World\") should return\
    \ \"hEllO w0rld\".\nWrite a function that takes a string and returns a string\
    \ with all the characters in uppercase and lowercase and numbers in between and\
    \ spaces removed and characters replaced by an under", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all the words capitalized.\n    For example, sort_words(\"\
    The quick brown fox jumps over the lazy dog\") should return \"The Quick Brown\
    \ Fox Jumps Over The Lazy Dog\"\n    >>> sort_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n    \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\
    \    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    numbers = numbers.join(\" \"\
    )\n    return numbers\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer the\
    \ question. He wants to sort the numbers, not just print them.\n<|/ c |>\n<| c\
    \ |>\nThe question was \"how do I sort a string\", not \"how do I sort a number\"\
    .  I answered the question as asked.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I believe that your answer doesn't answer the question as asked.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that your answer doesn't answer the question\
    \ as asked.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that your answer\
    \ doesn't answer the question as asked.\n<|/ c |>\n<| a dscore=3 |>\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized.\n    >>> capitalize_words(\"one two three\"\
    )\n    \"One Two Three\"\n    >>> capitalize_words(\"one two three four\")\n \
    \   \"One Two Three Four\"\n    >>> capitalize_words(\"one two three four five\"\
    )\n    \"One Two Three Four Five\"\n    >>> capitalize_words(\"one two three four\
    \ five six\")\n    \"One Two Three Four Five Six\"\n    >>> capitalize_words(\"\
    one two three four five six seven\")\n    \"One Two Three Four Five Six Seven\"\
    \n    >>> capitalize_words(\"one two three four five six seven eight\")\n    \"\
    One Two Three Four Five Six Seven Eight\"\n    >>> capitalize_words(\"one two\
    \ three four five six seven eight nine\")\n    \"One Two Three Four Five Six Seven\
    \ Eight Nine\"\n    >>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten\")\n    \"One Two Three Four Five Six Seven Eight Nine Ten\"\n    >>>\
    \ capitalize_words(\"one two three four five six seven eight nine ten eleven\"\
    )\n    \"One Two Three Four Five Six Seven Eight Nine Ten Eleven\"\n    >>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve\")\n    \"One Two\
    \ Three Four Five Six Seven Eight Nine Ten Eleven Twelve\"\n    >>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen\")\n \
    \   \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\
    \n    >>> capitalize_words(\"one two three four five six seven eight nine ten\
    \ eleven twelve thirteen fourteen\")\n    \"One Two Three Four Five Six Seven\
    \ Eight Nine Ten Eleven Twel", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,haskell,string |>\n\
    <| a tags=sorting,haskell,string |>\n<code>\nimport Data.List", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all the words capitalized.\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort` returns a `Vector{String}`, not\
    \ a `String`.\n<|/ c |>\n<| c |>\nI fixed the code. Sorry for the confusion.\n\
    <|/ c |>\n<| a dscore=2 |>\nI wrote a small package that does this in Julia. \n\
    <code>\nusing Pkg\nPkg.add(\"SortNumbers\")\nusing SortNumbers", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string with\
    \ the first letter of each word capitalized.", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in reverse order.\n    >>> reverse_numbers(\"one two three four five six seven\
    \ eight nine\")\n    \"nine eight seven six five four three two one\"\n    \"\"\
    \"", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.4>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\
    \ four five six seven eight nine\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the string with all the numbers in sorted order.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    >>> sort_numbers(\"three one five\")\n    \"one three\
    \ five\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all numbers reversed.\n    >>> reverse_string(\"\
    one two three four five\")\n    \"five four three two one\"\n    \"\"\"", "  \
    \  numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nFor example,\
    \ if the input string is \"The quick brown fox jumps over the lazy dog\", the\
    \ function should return 8.\nIf the input string is \"The quick brown fox jumps\
    \ over the lazy dog.\", the function should return 0.", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = numbers.join(\" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the string with all the letters capitalized.\n\
    >>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello\
    \ World\"\n>>> capitalize_letters(\"hello world\")\n\"Hello World\"\n>>> capitalize_letters(\"\
    hello world\")\n\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = numbers.join(\" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns a string with all the characters in lower case. \n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"\
    hello  world\")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\
    \n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello \
    \ world  \")\n\"Hello World\"\n>>> capitalize(\"hello  world  \")\n\"Hello World\"\
    \n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n\
    >>> capitalize(\"hello world  \")\n", "    numbers = numbers.split(\" \")\n  \
    \  numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string with all the characters in\
    \ lower case separated by spaces.\nFor example, if the input is \"Hello World!\"\
    , the function should return \"hello world!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is \"Hello World!\"\
    , the function should return \"Hello World!\".\nIf the input is ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all numbers reversed.\nFor example, sort_numbers(\"three one five\") should\
    \ return \"five three one\".\nWrite a second function that takes a string and\
    \ returns the string with all the letters reversed.\nFor example, sort_letters(\"\
    three one five\") should return \"five three one\".", "    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers =\
    \ numbers.sort()\n    numbers = numbers.reverse()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n\
    <|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell |>\n<code>\n\
    import Data.List\nimport Data.Ord", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string and returns a string with all the words in lower case separated by spaces.\n\
    \    >>> sort_words(\"one two three four five six seven eight nine\")\n    \"\
    one two three four five six seven eight nine\"\n    >>> sort_words(\"one two three\
    \ four five six seven eight nine\")\n    \"one two three four five six seven eight\
    \ nine\"\n    >>> sort_words(\"one two three four five six seven eight nine\"\
    )\n    \"one two three four five six seven eight nine\"\n    >>> sort_words(\"\
    one two three four five six seven eight nine\")\n    \"one two three four five\
    \ six seven eight nine\"\n    >>> sort_words(\"one two three four five six seven\
    \ eight nine\")\n    \"one two three four five six seven eight nine\"\n    >>>\
    \ sort_words(\"one two three four five six seven eight nine\")\n    \"one two\
    \ three four five six seven eight nine\"\n    >>> sort_words(\"one two three four\
    \ five six seven eight nine\")\n    \"one two three four five six seven eight\
    \ nine\"\n    >>> sort_words(\"one two three four five six seven eight nine\"\
    )\n    \"one two three four five six seven eight nine\"\n    >>> sort_words(\"\
    one two three four five six seven eight nine\")\n    \"one two three four five\
    \ six seven eight nine\"\n    >>> sort_words(\"one two three four five six seven\
    \ eight nine\")\n    \"one two three four five six seven eight nine\"\n    >>>\
    \ sort_words(\"one two three four five six seven eight nine\")\n    \"one two\
    \ three four five six seven eight nine\"\n    >>> sort_words(\"one two three four\
    \ five six seven eight nine\")\n    \"one two three four five six seven eight\
    \ nine\"\n    >>> ", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with the first letter of each word capitalized.\n\
    >>> capitalize_first_letter(\"the quick brown fox jumps over the lazy dog\")\n\
    \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps O",
  "    numbers = numbers.split(\" \")\n    numbers.sort\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the string\
    \ with each word capitalized.\n    >>> capitalize_words(\"one two three\")\n \
    \   \"One Two Three\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick ", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one two three\
    \ four five six seven eight nine\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns a string with all the characters in\
    \ lower case. \nFor example, sort_characters(\"Hello World\") should return \"\
    hELLO wORLD\".\nHint: use the string method lower!", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all 'o's replaced with 'x's.\n>>>\
    \ replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\"\
    )\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o(\"\
    one two three\")\n\"xx xx xx\"\n>>> replace_o(\"one two three\")\n\"xx xx xx\"\
    \n>>> replace_o(\"one two three\")\n\"xx xx xx\"\n>>> replace_o", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\nI like using\
    \ sort! for this:\n<code>\njulia> sort!(\"one two three four\")\n\"one two three\
    \ four\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\nI like\
    \ using sort! for this:\n<code>\njulia> sort!(\"one two three four\")\n\"one two\
    \ three four\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\n\
    I like using sort! for this:\n<code>\njulia> sort!(\"one two three four\")\n\"\
    one two three four\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,string\
    \ |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two three four\"\
    )\n\"one two three four\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like\
    \ using sort! for this:\n<code>\njulia> sort!(\"one two three four\")\n\"one two\
    \ three four\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=1 |>\n\
    I like using sort! for this:\n<code>\njulia> sort!(\"one two three four\")\n\"\
    one two three four\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a tags=julia,sorting,string\
    \ |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two three four\"\
    )\n\"one two three four\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,string\
    \ |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two three four\"\
    )\n\"one two three four\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,string\
    \ |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two three four\"\
    )\n\"one two three four\"\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI like using sort!\
    \ for this:\n<code>\njulia> sort!(\"one two three four\")", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all the words capitalized.\n    For example, sort_words(\"\
    the quick brown fox jumped over the lazy dog\") should return \"The Quick Brown\
    \ Fox Jumped Over The Lazy Dog\"\n    Use a regular expression to capitalize each\
    \ word in the string.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize ", "    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with each word capitalized.\n    >>> capitalize_words(\"\
    one two three\")\n    \"One Two Three\"\n    >>> capitalize_words(\"one two three\
    \ four\")\n    \"One Two Three Four\"\n    >>> capitalize_words(\"one two three\
    \ four five\")\n    \"One Two Three Four Five\"\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ in the string sorted alphabetically.\nFor example, sort_words(\"The quick brown\
    \ fox jumps over the lazy dog\") should return the string \"quick brown fox jumps\
    \ over lazy dog\".\nWrite a second function that takes a string and returns a\
    \ string with all the words in the string sorted alphabetically ignoring case.\n\
    For example, sort_words_ignore_case(\"The quick brown fox jumps over the lazy\
    \ dog\") should return the string \"quick brown fox jumps over lazy dog\".\nWrite\
    \ a third function that takes a string and returns a string with all the words\
    \ in the string sorted alphabetically ignoring case.\nFor example, sort_words_ignore_case(\"\
    The quick brown fox jumps over the lazy dog\") should return the string \"quick\
    \ brown fox jumps over lazy dog\".\nWrite a fourth function that takes a string\
    \ and returns a string with all the words in the string sorted alphabetically\
    \ ignoring case.\nFor example, sort_words_ignore_case(\"The quick brown fox jumps\
    \ over the lazy dog\") should return the string \"quick brown fox jumps over lazy\
    \ dog\".\nWrite a fifth function that takes a string and returns a string with\
    \ all the words in the string sorted alphabetically ignoring case.\nFor example,\
    \ sort_words_ignore_case(\"The quick brown fox jumps over the lazy dog\") should\
    \ return the string \"quick brown fox jumps over lazy dog\".\nWrite a sixth function\
    \ that takes a string and returns a string with all the words in the string sorted\
    \ alphabetically ignoring case.\nFor example, sort_words_ignore_case(\"The quick\
    \ brown fox jumps over the lazy dog\") should return the string \"quick brown\
    \ fox jumps over lazy dog\".\nWrite a seventh function that takes a string and\
    \ returns a string with all the words in the string sorted alphabetically ignoring\
    \ case.\nFor example, sort_words_ignore_case(\"The quick brown fox jumps over\
    \ the lazy dog\") should return the string \"quick brown fox jumps over lazy dog\"\
    .\nWrite a eighth function that takes a string and returns a string with all the\
    \ words in the string sorted alphabetically ignoring case.\nFor example, sort_words_ignore_case(\"\
    The quick brown fox jumps over the lazy dog\") should return the string \"quick\
    \ brown fox jumps over lazy dog\".\nWrite a ninth function that takes a string\
    \ and returns a string with all the words in the string sorted ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized.\n>>> capitalize_words(\"one two three\")\n\"\
    One Two Three\"\n>>> capitalize_words(\"one two three four\")\n\"One Two Three\
    \ Four\"\n>>> capitalize_words(\"one two three four five\")\n\"One Two Three Four\
    \ Five\"\n>>> capitalize_words(\"one two three four five six\")\n\"One Two Three\
    \ Four Five Six\"\n>>> capitalize_words(\"one two three four five six seven\"\
    )\n\"One Two Three Four Five Six Seven\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight\")\n\"One Two Three Four Five Six Seven Eight\"\n\
    >>> capitalize_words(\"one two three four five six seven eight nine\")\n\"One\
    \ Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten\")\n\"One Two Three Four Five Six Seven Eight\
    \ Nine Ten\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\"\n\
    >>> capitalize_words(\"one two three four five six seven eight nine ten eleven\
    \ twelve\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve\"\
    \n>>> capitalize_words(\"one two three four five six seven eight nine ten eleven\
    \ twelve thirteen\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve Thirteen\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine ten eleven twelve thirteen fourteen\")\n\"One Two Three Four Five\
    \ Six Seven Eight Nine Ten Eleven T", "    numbers = numbers.split(\" \")\n  \
    \  numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a dscore=0 |>\nI came up with this solution:\n<code>", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nsort_numbers(\"one three five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string with\
    \ all the words capitalized.\n    For example, \"This Is A Test\" becomes \"This\
    \ Is A Test\".\n    Use your function to capitalize all the words in a string.\n\
    \    >>> capitalize_words(\"This Is A Test\")\n    \"This Is A Test\"\n    \"\"\
    \"", "    numbers = numbers.split(\" \")\n    numbers.sort\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| a dscore=2 |>\n\
    I came up with a solution that is quite similar to what was proposed in the other\
    \ answers. I wanted to share it here in case it helps someone else.\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with all the words in the string sorted alphabetically.\
    \ For example, sort_words(\"The quick brown fox jumps over the lazy dog\") should\
    \ return the string \"quick brown fox jumps over lazy dog\".", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>", " \
    \   numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell\
    \ |>\n<| c |>\nThanks for the answer! I ended up using your solution and added\
    \ some extra functionality to it (I added the ability to sort by multiple columns).\n\
    <|/ c |>\n<| a dscore=2 |>\nI ended up using the solution from and added some\
    \ extra functionality to it (I added the ability to sort by multiple columns).\n\
    <code>\nimport Data.List (sort, sort, sortOn)\nimport Data.Maybe (fromJust)",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\" \")\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.4>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the string with each word capitalized.\n>>> capitalize(\"hello world\")\n\"\
    Hello World\"\n>>> capitalize(\"hello world how are you\")\n\"Hello World How\
    \ Are You\"\n>>> capitalize(\"hello world how are you doing\")\n\"Hello World\
    \ How Are You Doing\"\n>>> capitalize(\"hello world how are you doing\")\n\"Hello\
    \ World How Are You Doing\"\n>>> capitalize(\"hello world how are you doing\"\
    )\n\"Hello World How Are You Doing\"\n>>> capitalize(\"hello world how are you\
    \ doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"hello world how\
    \ are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"hello\
    \ world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n>>> capitalize(\"\
    hello world how are you doing\")\n\"Hello World How Are You Doing\"\n", "    numbers\
    \ = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all letters capitalized.\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello world\")", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with all the characters in lower case. \n>>> sort_characters(\"\
    one two three\")\n\"one two three\"\n>>> sort_characters(\"one two three four\"\
    )\n\"one two three four\"\n>>> sort_characters(\"one two three four five\")\n\"\
    one two three four five\"\n>>> sort_characters(\"one two three four five six\"\
    )\n\"one two three four five six\"\n>>> sort_characters(\"one two three four five\
    \ six seven\")\n\"one two three four five six seven\"\n>>> sort_characters(\"\
    one two three four five six seven eight\")\n\"one two three four five six seven\
    \ eight\"\n>>> sort_characters(\"one two three four five six seven eight nine\"\
    )\n\"one two three four five six seven eight nine\"\n>>> sort_characters(\"one\
    \ two three four five six seven eight nine ten\")\n\"one two three four five six\
    \ seven eight nine ten\"\n>>> sort_characters(\"one two three four five six seven\
    \ eight nine ten eleven\")\n\"one two three four five six seven eight nine ten\
    \ eleven\"\n>>> sort_characters(\"one two three four five six seven eight nine\
    \ ten eleven twelve\")\n\"one two three four five six seven eight nine ten eleven\
    \ twelve\"\n>>> sort_characters(\"one two three four five six seven eight nine\
    \ ten eleven twelve thirteen\")\n\"one two three four five six seven eight nine\
    \ ten eleven twelve thirteen\"\n>>> sort_characters(\"one two three four five\
    \ six seven eight nine ten eleven twelve thirteen fourteen\")\n\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen fourteen\"\n>>> sort_characters(\"\
    one two three four five six seven eight nine ten eleven ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,python |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers, \" \"\
    )\n    return numbers\n</code>\n<|/ a tags=sorting,python |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n   \
    \ numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers, ",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the characters in lowercase and with spaces replaced by underscores.\n\
    >>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n\"hello_world\"\n>>> replace_space(\"hello world\")\n\"hello_world\"\
    \n>>> replace_space(\"hello world\")\n\"hello_world\"\n>>> replace_space(\"hello\
    \ world\")\n", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the words\
    \ capitalized.\n    For example, sort_words(\"one two three four five six seven\
    \ eight nine\") should return \"One Two Three Four Five Six Seven Eight Nine\"\
    .\n    >>> sort_words(\"one two three four five six seven eight nine\")\n    \"\
    One Two Three Four Five Six Seven Eight Nine\"\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in descending order.", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The La", "    numbers = split(numbers,\
    \ \" \")\n    numbers.sort()\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>", "    numbers = split(numbers, \" \")\n    numbers\
    \ = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.3>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with the first letter of each word capitalized.\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize_first_letter(\"hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_first_letter(\"hello world\")\n\
    \"Hello World\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n   \
    \ return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a function that sorts numbers from\
    \ smallest to largest.\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all numbers in descending order.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    >>> sort_numbers(\"three one five\")\n    \"five three one\"\n\
    \    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    numbers = join(numbers, \" \"\
    )\n    return numbers\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the words capitalized.\nFor example,\
    \ sort_words(\"The quick brown fox jumps over the lazy dog\") should return \"\
    The Quick Brown Fox Jumps Over The Lazy Dog\"\nHint: Use split(), capitalize(),\
    \ and join().", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\" \")\n\
    \    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\n</code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List\nimport Data.Ord", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with all the words capitalized\n    >>> capitalize_string(\"\
    The quick brown fox jumps over the lazy dog\")\n    \"The Quick Brown Fox Jumps\
    \ Over The Lazy Dog\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all lowercase letters replaced by uppercase\
    \ letters.\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD", "    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all non-alphanumeric\
    \ characters removed.\n    >>> remove_non_alphanumeric(\"hello-world\")\n    \"\
    helloworld\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ a string with all the words capitalized. \n    For example, sort_words(\"one\
    \ two three\") should return \"One Two Three\"\n    >>> sort_words(\"one two three\"\
    )\n    \"One Two Three\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n \
    \   numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\n    >>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog\")\n    7\n    >>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.\")\n    7\n    >>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  \")\n    7\n   \
    \ >>> count_words(\"The quick brown fox jumps over the lazy dog.  A\")\n    7\n\
    \    >>> count_words(\"The quick brown fox jumps over the lazy dog.  A \")\n \
    \   7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog.  A .\"\
    )\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog. \
    \ A . \")\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  A . . \")\n    7\n    >>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  A . . . \")\n    7\n    >>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  A . . . . \")\n    7\n    >>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  A . . . . . \")\n    7\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  A . . . . . . \")\n    7\n    >>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  A . . . . . . .\
    \ \")\n    7\n    >>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  A . . . . . . . . . \")\n    7\n    >>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  A . . . . . . . . . . . \")\n    7\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  A . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ", "   \
    \ numbers = numbers.split(\" \")\n    numbers.sort\n    return join(numbers, \"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\"\
    )` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me. Are you sure you copied it correctly? I tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<|\
    \ a tags=julia |>\nHere's a solution using sort!:\n<code>", "    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three\
    \ one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the string with all numbers in reverse order.\n>>> reverse_numbers(\"\
    three one five\")\n\"five three one\"\n>>> reverse_numbers(\"one two three\")\n\
    \"three two one\"\n>>> reverse_numbers(\"one two three four\")\n\"four three two\
    \ one\"\n>>> reverse_numbers(\"one two three four five\")\n\"five four three two\
    \ one\"\n>>> reverse_numbers(\"one two three four five six\")\n\"six five four\
    \ three two one\"\n>>> reverse_numbers(\"one two three four five six seven\")\n\
    \"seven six five four three two one\"\n>>> reverse_numbers(\"one two three four\
    \ five six seven eight\")\n\"eight seven six five four three two one\"\n>>> reverse_numbers(\"\
    one two three four five six seven eight nine\")\n\"nine eight seven six five four\
    \ three two one\"\n>>> reverse_numbers(\"one two three four five six seven eight\
    \ nine ten\")\n\"ten nine eight seven six five four three two one\"\n>>> reverse_numbers(\"\
    one two three four five six seven eight nine ten eleven\")\n\"eleven ten nine\
    \ eight seven six five four three two one\"\n>>> reverse_numbers(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n\"twelve eleven ten nine\
    \ eight seven six five four three two one\"\n>>> reverse_numbers(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n\"thirteen twelve\
    \ eleven ten nine eight seven six five four three two one\"\n>>> reverse_numbers(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n\"fourteen thirteen twelve eleven ten nine eight seven six five ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return join(numbers, \" \")\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ with all numbers in sorted order.", "    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "  \
    \  numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nimport Data.Ord",
  "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.3>",
  "    numbers = numbers.split(\" \")\n    numbers.sort\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one two three\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string with\
    \ all the words capitalized.\n    >>> capitalize_words(\"one two three\")\n  \
    \  \"One Two Three\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns a string with all the words capitalized.\n\
    >>> capitalize_words(\"one two three four five six seven eight nine\")\n\"One\
    \ Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten\")\n\"One Two Three Four Five Six Seven Eight\
    \ Nine Ten\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven twelve\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven twelve thirteen fourteen\")\n\"One Two Three Four Five Six Seven\
    \ Eight Nine Ten Eleven Twelve Thirteen Fourteen\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten eleven twelve thirteen fourteen\
    \ fifteen\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve\
    \ Thirteen Fourteen Fifteen\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen\")\n\
    \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen\
    \ Fifteen Sixteen\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen\")\n\
    \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen\
    \ Fifteen Sixteen Seventeen\"\n>>> capitalize_words(\"one ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python |>\n\
    <| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,python |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a tags=sorting,string,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ join(numbers, \" \")\nend\n</code>\n<|/ a tags=julia,sorting,string |>\n<| c\
    \ |>\nThis does not work for me. `sort_numbers(\"three one five\")` returns `\"\
    one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a link\
    \ to the documentation for Strings.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added a link to the documentation for Strings.\n<|/ c |>\n<| a dscore=3 |>\n\
    The answer by is correct, but I wanted to add that you can also use sort! to sort\
    \ a vector of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one two three\"\
    \n</code>\n<|/ a tags=julia,sorting,string |>\n<| a tags=julia,sorting,string\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use sort!\
    \ to sort a vector of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one\
    \ two three\"\n</code>\n<|/ a dscore=3 |>\n<| a |>\nThe answer by is correct,\
    \ but I wanted to add that you can also use sort! to sort a vector of strings:\n\
    <code>\njulia> sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=3\
    \ tags=julia,sorting,string |>\n<| a tags=julia,sorting,string |>\nThe answer\
    \ by is correct, but I wanted to add that you can also use sort! to sort a vector\
    \ of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one two three\"\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=2 |>\nThe answer by is correct, but I wanted to\
    \ add that you can also use sort! to sort a vector of strings:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nThe answer by is correct, but I wanted\
    \ to add that you can also use sort! to sort a vector of strings:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\nThe answer by is correct, but I ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nimport Data.Ord",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    number", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added a link to the documentation where you can find more\
    \ examples. I hope it helps.\n<|/ c |>\n<| c |>\nI added a link to the documentation\
    \ where you can find more examples. I hope it helps.\n<|/ c |>\n<| c |>\nI added\
    \ a link to the documentation where you can find more examples. I hope it helps.\n\
    <|/ c |>\n<| c |>\nI added a link to the documentation where you can find more\
    \ examples. I hope it helps.\n<|/ c |>\n<| a dscore=3 |>\nI wrote a package for\
    \ this:\nhttps://github.com/kamens/sort\n<code>\njulia> using sort", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all characters in lower case. For example, \"Hello World\" becomes \"hello\
    \ world\".", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all numbers in reverse order.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    >>> sort_numbers(\"three one five\")\n    \"five one three\"\n\
    \    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `\"\
    one two three\"`.\n<|/ c |>\n<| c |>\nI tested it and it works for me. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code\
    \ correctly. I'm using Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and\
    \ it works for me. Are you sure you copied the code correctly?\n<|/ c |>\n<| c\
    \ |>\nYes, I copied the code correctly. I'm using Julia 0.6.2\n<|/ c |>\n<| a\
    \ tags=julia,sorting,string |>\nThe easiest way is to use the sort function and\
    \ pass it a custom comparison function:\n<code>\njulia> sort(\"one two three\"\
    , by=(x) -> parse(Int, x))\n\"one two three\"\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nThis doesn't work for me. `sort(\"one two three\", by=(x) -> parse(Int,\
    \ x))` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ for me. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes,\
    \ I copied the code correctly. I'm using Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.2 and it works for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm using Julia 0.6.2\n<|/\
    \ c |>\n<| a dscore=3 |>\nThe easiest way is to use the sort function and pass\
    \ it a custom comparison function:\n<code>\njulia> sort(\"one two three\", by=(x)\
    \ -> parse(Int, x))\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nI believe that this is what you are looking\
    \ for:\n<code>\njulia> sort(\"one two three\", by=(x) -> parse(Int, x))\n\"one\
    \ two three\"\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI believe that this is what ",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nI came up with a solution using sort!\
    \ and join.\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\" \"\
    )\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    numbers =\
    \ numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the string with all numbers in reverse order. For example, \"one two three\"\
    \ becomes \"three two one\".", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the string with all the words capitalized.\n>>>\
    \ capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ in lowercase separated by spaces.\n    >>> sort_words(\"one two three\")\n \
    \   \"one two three\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.4>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return \" \".join(numbers)\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia |>\nHere's a solution using sort!:\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
