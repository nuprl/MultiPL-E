language: jl
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee4f84kt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee4f84kt.jl:1\n\
    in expression starting at /tmp/tmpee4f84kt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess),\
    \ 1)\n    \n    for i = 1:length(guess)\n        diff[i] = abs(guess[i] - game[i])\n\
    \    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.5>\n\
    @test compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nExercise:\
    \ Write a function that will take a vector of scores and a vector of guesses and\
    \ return the vector of differences between the guesses and the scores. \nThe function\
    \ should take two vectors of equal length and return an array of differences between\
    \ the guesses and the scores.\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbp02vw99.jl:30\nin expression starting at\
    \ /tmp/tmpbp02vw99.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        if guess[i] == game[i]\n         \
    \   diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of matches between two vectors of equal length.\
    \ \nThe function should take two vectors of equal length as arguments and return\
    \ a vector of the same length as the first argument denoting the number of matches.\n\
    The function should return 0 if the two vectors are of different lengths.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsyig5mu.jl:34\nin expression starting at\
    \ /tmp/tmpvsyig5mu.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n\
    \    \n    guesses = guesses[guesses < length(game)]\n    scores = scores[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses == length(game)]\n    scores\
    \ = scores[guesses == length(game)]\n    \n    guesses = guesses[guesses != 0]\n\
    \    scores = scores[guesses != 0]\n    \n    guesses = guesses[guesses > 0]\n\
    \    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses < length(game)]\n\
    \    scores = scores[guesses < length(game)]\n    \n    guesses = guesses[guesses\
    \ == length(game)]\n    scores = scores[guesses == length(game)]\n    \n    guesses\
    \ = guesses[guesses != 0]\n    scores = scores[guesses != 0]\n    \n    guesses\
    \ = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n    \n    guesses\
    \ = guesses[guesses < length(game)]\n    scores = scores[guesses < length(game)]\n\
    \    \n    guesses = guesses[guesses == length(game)]\n    scores = scores[guesses\
    \ == length(game)]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < length(game)]\n    scores = scores[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses == length(game)]\n    scores\
    \ = scores[guesses == length(game)]\n    \n    guesses = guesses[guesses != 0]\n\
    \    scores = scores[guesses != 0]\n    \n    guesses = guesses[guesses > 0]\n\
    \    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses < length(game)]\n\
    \    scores = scores[guesses < length(game)]\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4sx3tu01.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4sx3tu01.jl:1\n\
    in expression starting at /tmp/tmp4sx3tu01.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), length(game))\n    \n    for i =\
    \ 1:length(guess)\n        guesses[i, :] = guess[i] - game\n    end\n    \n  \
    \  guesses = guesses./sum(guesses, dims = 2)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        diff[i] = abs(guesses[i] - game[i])\n\
    \    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=juli\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9ze8o2v.jl:35\nin expression starting at\
    \ /tmp/tmpr9ze8o2v.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee4f84kt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee4f84kt.jl:1\n\
    in expression starting at /tmp/tmpee4f84kt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n\
    \    \n    guesses = guesses[guesses < length(game)]\n    scores = scores[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses == length(game)]\n    scores\
    \ = scores[guesses == length(game)]\n    \n    guesses = guesses[guesses > 0]\n\
    \    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses < length(game)]\n\
    \    scores = scores[guesses < length(game)]\n    \n    guesses = guesses[guesses\
    \ == length(game)]\n    scores = scores[guesses == length(game)]\n    \n    guesses\
    \ = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n    \n    guesses\
    \ = guesses[guesses < length(game)]\n    scores = scores[guesses < length(game)]\n\
    \    \n    guesses = guesses[guesses == length(game)]\n    scores = scores[guesses\
    \ == length(game)]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < length(game)]\n    scores = scores[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses == length(game)]\n    scores\
    \ = scores[guesses == length(game)]\n    \n    guesses = guesses[guesses > 0]\n\
    \    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses < length(game)]\n\
    \    scores = scores[guesses < length(game)]\n    \n    guesses = guesses[guesses\
    \ == length(game)]\n    scores = scores[guesses == length(game)]\n    \n    guesses\
    \ = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n    \n    guesses\
    \ = guesses[guesses < length(game)]\n    scores = scores[guesses < length(game)]\n\
    \    \n    guesses = guesses[guesses == length(game)]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpya133rz4.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpya133rz4.jl:1\n\
    in expression starting at /tmp/tmpya133rz4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2nfyerl2.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2nfyerl2.jl:1\n\
    in expression starting at /tmp/tmp2nfyerl2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdd1a232j.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdd1a232j.jl:1\n\
    in expression starting at /tmp/tmpdd1a232j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee4f84kt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee4f84kt.jl:1\n\
    in expression starting at /tmp/tmpee4f84kt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n\
    \    \n    guesses = guesses[guesses < length(scores)]\n    scores = scores[guesses\
    \ < length(scores)]\n    \n    guesses = guesses[guesses == length(scores)]\n\
    \    scores = scores[guesses == length(scores)]\n    \n    guesses = guesses[guesses\
    \ > 0]\n    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses\
    \ < length(scores)]\n    scores = scores[guesses < length(scores)]\n    \n   \
    \ guesses = guesses[guesses == length(scores)]\n    scores = scores[guesses ==\
    \ length(scores)]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < length(scores)]\n    scores = scores[guesses\
    \ < length(scores)]\n    \n    guesses = guesses[guesses == length(scores)]\n\
    \    scores = scores[guesses == length(scores)]\n    \n    guesses = guesses[guesses\
    \ > 0]\n    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses\
    \ < length(scores)]\n    scores = scores[guesses < length(scores)]\n    \n   \
    \ guesses = guesses[guesses == length(scores)]\n    scores = scores[guesses ==\
    \ length(scores)]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < length(scores)]\n    scores = scores[guesses\
    \ < length(scores)]\n    \n    guesses = guesses[guesses == length(scores)]\n\
    \    scores = scores[guesses == length(scores)]\n    \n    guesses = guesses[guesses\
    \ > 0]\n    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses\
    \ < length(scores)]\n    scores = scores[guesses < length(scores)]\n    \n   \
    \ guesses = guesses[guesses == length(scores)]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbfk4kcks.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbfk4kcks.jl:1\n\
    in expression starting at /tmp/tmpbfk4kcks.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = length(guess)\n    scores = length(game)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3p92qkz9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3p92qkz9.jl:1\n\
    in expression starting at /tmp/tmp3p92qkz9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n\
    \        guesses[i] = guess[i]\n    end\n    \n    scores = zeros(length(game),\
    \ length(guesses))\n    \n    for i = 1:length(game)\n        for j = 1:length(guesses)\n\
    \            scores[i, j] = abs(game[i] - guesses[j])\n        end\n    end\n\
    \    \n    return scores\nend\n</cell>\n<code language=julia-1.5>\n@time compare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ in a vector of scores and a vector of guesses, and return a vector of the same\
    \ length denoting how far off each guess was. If they have guessed correctly,\
    \ the value is 0, and if not, the value is the absolute difference between the\
    \ guess and the score.\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38zq_9qx.jl:35\nin expression starting at\
    \ /tmp/tmp38zq_9qx.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted\
    \ = scores[:]\n    \n    guesses_sorted.sort!()\n    scores_sorted.sort!()\n \
    \   \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted\
    \ = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted\
    \ .!= 0]\n    scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnf2b_e7.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnf2b_e7.jl:1\n\
    in expression starting at /tmp/tmpxnf2b_e7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplqni5fe_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplqni5fe_.jl:1\n\
    in expression starting at /tmp/tmplqni5fe_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n   \
    \ \n    guesses = sort(guesses)\n    scores = sort(scores)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb4vxvtq3.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb4vxvtq3.jl:1\n\
    in expression starting at /tmp/tmpb4vxvtq3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        if guess[i] == game[i]\n         \
    \   diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of scores and a vector of guesses and returns\
    \ the number of matches.\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyi2etr8.jl:34\nin expression starting at\
    \ /tmp/tmpzyi2etr8.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6lgjglh8.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6lgjglh8.jl:1\n\
    in expression starting at /tmp/tmp6lgjglh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee4f84kt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee4f84kt.jl:1\n\
    in expression starting at /tmp/tmpee4f84kt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    diff = guesses - scores\n    \n    diff = sort(diff)\n\
    \    \n    diff = diff[1:length(diff)-1]\n    \n    diff = diff .- diff[1]\n \
    \   \n    diff = diff ./ diff[1]\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @test compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n@test compare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n</cell>\n<text>\nPart 2\nNow that you have\
    \ written your function, you will want to test it against a few examples. You\
    \ will start by writing a function that will generate random numbers between 0\
    \ and 10. Then, you'll write another function that will generate random numbers\
    \ between 0 and 10 and then compare them to the first function's output. Finally,\
    \ you'll write another function that will generate random numbers between 0 and\
    \ 10 and then compare them to the second function's output. Finally, you'll write\
    \ another function that will generate random numbers between 0 and 10 and then\
    \ compare them to the third function's output. Finally, you'll write another function\
    \ that will generate random numbers between 0 and 10 and then compare them to\
    \ the fourth function's output. Finally, you'll write another function that will\
    \ generate random numbers between 0 and 10 and then compare them to the fifth\
    \ function's output. Finally, you'll write another function that will generate\
    \ random numbers between 0 and 10 and then compare them to the sixth function's\
    \ output. Finally, you'll write another function that will generate random numbers\
    \ between 0 and 10 and then compare them to the seventh function's output. Finally,\
    \ you'll write another function that will generate random numbers between 0 and\
    \ 10 and then compare them to the eighth function's output. Finally, you'll write\
    \ another function that will generate random numbers between 0 and 10 and then\
    \ compare them to the ninth function's output. Finally, you'll write another function\
    \ that will generate random numbers between 0 and 10 and then compare them to\
    \ the tenth function's output. Finally, you'll write another function that will\
    \ generate random numbers between 0 and 10 and then compare them to the eleventh\
    \ function's output. Finally, you'll write another function that will generate\
    \ random numbers between 0 and 10 and then compare them to the twelfth function's\
    \ output. Finally, you'll write another function that will generate random numbers\
    \ between 0 and 10 and then compare them to the thirteenth function's output.\
    \ Finally, you'll write another function that will \nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvf115hz.jl:42\nin expression starting at\
    \ /tmp/tmpkvf115hz.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess)) \n    scores = zeros(length(game))\n\
    \    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores = sort(scores)\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[guesses..<scores]\n    scores = scores[guesses..<scores]\n    \n \
    \   guesses = guesses[guesses..>scores]\n    scores = scores[guesses..>scores]\n\
    \    \n    guesses = guesses[guesses..<0]\n    scores = scores[guesses..<0]\n\
    \    \n    guesses = guesses[guesses..>0]\n    scores = scores[guesses..>0]\n\
    \    \n    guesses = guesses[guesses..<length(guesses)]\n    scores = scores[guesses..<length(guesses)]\n\
    \    \n    guesses = guesses[guesses..>length(guesses)]\n    scores = scores[guesses..>length(guesses)]\n\
    \    \n    guesses = guesses[guesses..<length(scores)]\n    scores = scores[guesses..<length(scores)]\n\
    \    \n    guesses = guesses[guesses..>length(scores)]\n    scores = scores[guesses..>length(scores)]\n\
    \    \n    guesses = guesses[guesses..<length(guesses)+1]\n    scores = scores[guesses..<length(guesses)+1]\n\
    \    \n    guesses = guesses[guesses..>length(guesses)+1]\n    scores = scores[guesses..>length(guesses)+1]\n\
    \    \n    guesses = guesses[guesses..<length(scores)+1]\n    scores = scores[guesses..<length(scores)+1]\n\
    \    \n    guesses = guesses[guesses..>length(scores)+1]\n    scores = scores[guesses..>length(scores)+1]\n\
    \    \n    guesses = guesses[guesses..<length(guesses)+length(scores)]\n    scores\
    \ = scores[guesses..<length(guesses)+length(scores)]\n    \n    guesses = guesses[guesses..>length(guesses)+length(scores)]\n\
    \    scores = scores[guesses..>length(guesses)\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 31\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq78mer_6.jl:33\nin expression starting at\
    \ /tmp/tmpq78mer_6.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses = guesses[guesses..end-1]\n    scores =\
    \ scores[guesses..end-1]\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = guesses[guesses..end-1]\n\
    \    scores = scores[guesses..end-1]\n    \n    guesses = gues\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr7npu8fq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr7npu8fq.jl:1\n\
    in expression starting at /tmp/tmpr7npu8fq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6lgjglh8.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6lgjglh8.jl:1\n\
    in expression starting at /tmp/tmp6lgjglh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.5>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of matches between\
    \ two vectors of equal length. \n    \n    \n    example:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgqwpovf.jl:30\nin expression starting at\
    \ /tmp/tmpwgqwpovf.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7ejtem1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy7ejtem1.jl:1\n\
    in expression starting at /tmp/tmpy7ejtem1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7ejtem1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy7ejtem1.jl:1\n\
    in expression starting at /tmp/tmpy7ejtem1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6lgjglh8.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6lgjglh8.jl:1\n\
    in expression starting at /tmp/tmp6lgjglh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee4f84kt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee4f84kt.jl:1\n\
    in expression starting at /tmp/tmpee4f84kt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7ejtem1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy7ejtem1.jl:1\n\
    in expression starting at /tmp/tmpy7ejtem1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6lgjglh8.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6lgjglh8.jl:1\n\
    in expression starting at /tmp/tmp6lgjglh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiuvt0ruv.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiuvt0ruv.jl:1\n\
    in expression starting at /tmp/tmpiuvt0ruv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses > scores]\n    scores = scores[guesses >\
    \ scores]\n    \n    guesses = guesses[guesses < scores]\n    scores = scores[guesses\
    \ < scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[gues\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap_ck5wp.jl:1\nin expression starting at /tmp/tmpap_ck5wp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses > scores]\n    scores = scores[guesses >\
    \ scores]\n    \n    guesses = guesses[guesses < scores]\n    scores = scores[guesses\
    \ < scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpja31x4h7.jl:1\nin expression starting at /tmp/tmpja31x4h7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0zx0rpt9.jl:17 expected\
    \ \"end\", got \"..\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zx0rpt9.jl:27\n\
    in expression starting at /tmp/tmp0zx0rpt9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(game))\n    \n    for i = 1:length(guess)\n\
    \        guesses[i] = guess[i]\n    end\n    \n    guesses = guesses.-game\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    guesses = guesses..guesses\n    \n    guesses = guesses..guesses\n \
    \   \n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj5784ob4.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj5784ob4.jl:1\n\
    in expression starting at /tmp/tmpj5784ob4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        if guess[i] == game[i]\n         \
    \   diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of matches between two vectors of equal\
    \ length. \n    \n    \n    example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26_n8tg1.jl:33\nin expression starting at\
    \ /tmp/tmp26_n8tg1.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = length(guess)\n    scores = length(game)\n    \n    guesses_correct\
    \ = 0\n    \n    guesses_correct = guesses_correct + guess[guesses_correct] ==\
    \ game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + guess[guesses_correct]\
    \ == game[guesses_correct]\n    \n    guesses_correct = guesses_correct + \nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3w3_hg3i.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3w3_hg3i.jl:1\n\
    in expression starting at /tmp/tmp3w3_hg3i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores = sort(scores)\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[guesses > scores]\n    scores = scores[guesses > scores]\n    \n \
    \   guesses = guesses[guesses < scores]\n    scores = scores[guesses < scores]\n\
    \    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses ==\
    \ scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < 0]\n    scores = scores[guesses\
    \ < 0]\n    \n    guesses = guesses[guesses == 0]\n    scores = scores[guesses\
    \ == 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesse\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z3w8dfc.jl:1\nin expression starting at /tmp/tmp1z3w8dfc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqyly6krw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyly6krw.jl:1\n\
    in expression starting at /tmp/tmpqyly6krw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end-1]\n    scores = scores[2:end-1]\n\
    \    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses != 0]\n\
    \    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses !=\
    \ scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[guesses\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[guesses\
    \ == scores]\n    \n    guesses = guesses[guesses != 0]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy2vhwkma.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy2vhwkma.jl:1\n\
    in expression starting at /tmp/tmpy2vhwkma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    diff = zeros(length(guess), 1)\n    \n    for i =\
    \ 1:length(guess)\n        if guesses[i] == scores[i]\n            diff[i] = 0\n\
    \        else\n            diff[i] = abs(guesses[i] - scores[i])\n        end\n\
    \    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv2p_rvc.jl:42\nin expression starting at\
    \ /tmp/tmpuv2p_rvc.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    score = sort(game)\n    \n    diff = zeros(length(guess),\
    \ length(guess))\n    \n    for i = 1:length(guess)\n        for j = 1:length(guess)\n\
    \            diff[i,j] = abs(guess[i] - score[j])\n        end\n    end\n    \n\
    \    return diff\nend\n</cell>\n<code language=julia-1.0>\n# test your code\n\
    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n@test compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ == [4,4,1,0,0,6]\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of matches between two lists of numbers. Your function should take\
    \ two vectors of numbers as arguments and return a single number.\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoiu0ccv3.jl:32\nin expression starting at\
    \ /tmp/tmpoiu0ccv3.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = length(guess)\n    scores = length(game)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3p92qkz9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3p92qkz9.jl:1\n\
    in expression starting at /tmp/tmp3p92qkz9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    guesses_sorted = sort(guesses)\n    scores_sorted = sort(scores)\n\
    \    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted\
    \ = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted\
    \ .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsje2r84c.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsje2r84c.jl:1\n\
    in expression starting at /tmp/tmpsje2r84c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ length(guess)\n    scores = length(game)\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphkxdooul.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphkxdooul.jl:1\n\
    in expression starting at /tmp/tmphkxdooul.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqyly6krw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyly6krw.jl:1\n\
    in expression starting at /tmp/tmpqyly6krw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplqni5fe_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplqni5fe_.jl:1\n\
    in expression starting at /tmp/tmplqni5fe_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[scores\
    \ > 0]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[scores\
    \ != 0]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = scores[scores\
    \ == scores]\n    \n    guesses = guesses[guesses != scores]\n    scores = scores[scores\
    \ != scores]\n    \n    guesses = guesses[guesses == scores]\n    scores = \n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplm9dq9vk.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplm9dq9vk.jl:1\n\
    in expression starting at /tmp/tmplm9dq9vk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdd1a232j.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdd1a232j.jl:1\n\
    in expression starting at /tmp/tmpdd1a232j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    guesses_sorted = sort(guesses)\n    scores_sorted = sort(scores)\n\
    \    \n    guesses_index = guesses_sorted\n    scores_index = scores_sorted\n\
    \    \n    guesses_index = guesses_index[guesses_index != 0]\n    scores_index\
    \ = scores_index[scores_index != 0]\n    \n    guesses_index = guesses_index -\
    \ 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n    \n    guesses_index = guesses_index\
    \ + 1\n    scores_index = scores_index + 1\n    \n    guesses_index = guesses_index\
    \ - 1\n    scores_index = scores_index - 1\n\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfwjrx_1z.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwjrx_1z.jl:1\n\
    in expression starting at /tmp/tmpfwjrx_1z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort()\n    scores.sort()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdvak_tix.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvak_tix.jl:1\n\
    in expression starting at /tmp/tmpdvak_tix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    guesses.sort!()\n    scores.sort!()\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4gh8qj19.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4gh8qj19.jl:1\n\
    in expression starting at /tmp/tmp4gh8qj19.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ length(guess)\n    \n    guesses_correct = 0\n    \n    for g in guess\n   \
    \     if g == game[guesses_correct]\n            guesses_correct += 1\n      \
    \  end\n    end\n    \n    guesses_correct = guesses_correct + 1\n    \n    guesses_correct\
    \ = guesses_correct - 1\n    \n    if guesses_correct == guesses\n        return\
    \ zeros(guesses)\n    else\n        return abs(guess[guesses_correct] - game[guesses_correct])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nguesses = length(guess)\nguesses_correct\
    \ = 0\nfor g in guess\n    if g == game[guesses_correct]\n        guesses_correct\
    \ += 1\n    end\nend\nguesses_correct = guesses_correct + 1\nguesses_correct =\
    \ guesses_correct - 1\nif guesses_correct == guesses\n    return zeros(guesses)\n\
    else\n    return abs(guess[guesses_correct] - game[guesses_correct])\nend\n</cell>\n\
    <code language=julia-1.5>\nguesses = length(guess)\nguesses_correct = 0\nfor g\
    \ in guess\n    if g == game[guesses_correct]\n        guesses_correct += 1\n\
    \    end\nend\nguesses_correct = guesses_correct + 1\nguesses_correct = guesses_correct\
    \ - 1\nif guesses_correct == guesses\n    return zeros(guesses)\nelse\n    return\
    \ abs(guess[guesses_correct] - game[guesses_correct])\nend\n</cell>\n<code language=julia-1.5>\n\
    guesses = length(guess)\nguesses_correct = 0\nfor g in guess\n    if g == game[guesses_correct]\n\
    \        guesses_correct += 1\n    end\nend\nguesses_correct = guesses_correct\
    \ + 1\nguesses_correct = guesses_correct - 1\nif guesses_correct == guesses\n\
    \    return zeros(guesses)\nelse\n    return abs(guess[guesses_correct] - game[guesses_correct])\n\
    end\n</cell>\n<code language=julia-1.5>\nguesses = length(guess)\nguesses_correct\
    \ = 0\nfor g in guess\n    if g == game[guesses_correct]\n        guesses_correct\
    \ += 1\n    end\nend\nguesses_correct = guesses_correct + 1\n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6e96w_3a.jl:42\nin expression starting at\
    \ /tmp/tmp6e96w_3a.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted\
    \ = scores[:]\n    \n    guesses_sorted.sort!()\n    scores_sorted.sort!()\n \
    \   \n    guesses_sorted = guesses_sorted[guesses_sorted .!= guesses_sorted]\n\
    \    scores_sorted = scores_sorted[scores_sorted .!= scores_sorted]\n    \n  \
    \  guesses_sorted = guesses_sorted[guesses_sorted .!= guesses_sorted]\n    scores_sorted\
    \ = scores_sorted[scores_sorted .!= scores_sorted]\n    \n    guesses_sorted =\
    \ guesses_sorted[guesses_sorted .!= guesses_sorted]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= scores_sorted]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted\
    \ .!= guesses_sorted]\n    scores_sorted = scores_sorted[scores_sorted .!= scores_sorted]\n\
    \    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= guesses_sorted]\n\
    \    scores_sorted = scores_sorted[scores_sorted .!= scores_sorted]\n    \n  \
    \  guesses_sorted = guesses_sorted[guesses_sorted .!= guesses_sorted]\n    scores_sorted\
    \ = scores_sorted[scores_sorted .!= scores_sorted]\n    \n    guesses_sorted =\
    \ guesses_sorted[guesses_sorted .!= guesses_sorted]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= scores_sorted]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted\
    \ .!= guesses_sorted]\n    scores_sorted = scores_sorted[scores_sorted .!= scores_sorted]\n\
    \    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= guesses_sorted]\n\
    \    scores_sorted = scores_sorted[scores_sorted .!= scores_sorted]\n    \n  \
    \  guesses_sorted = guesses_sorted[guesses_sorted .!= guesses_sorted]\n    scores_sorted\
    \ = scores_sorted[scores_sorted .!= scores_sorted]\n    \n    guesses_sorted =\
    \ guesses_sorted[guesses_sorted .!= guesses_sorted]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= scores_sorted]\n    \n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgmq3oz4t.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgmq3oz4t.jl:1\n\
    in expression starting at /tmp/tmpgmq3oz4t.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n   \
    \ \n    guesses_sorted = sort(guesses)\n    scores_sorted = sort(scores)\n   \
    \ \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted\
    \ = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted\
    \ .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[guesses_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[guesses_sorted\
    \ .!= 0]\n    \n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0w4h7ys.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0w4h7ys.jl:1\n\
    in expression starting at /tmp/tmpe0w4h7ys.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort()\n    scores.sort()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdvak_tix.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvak_tix.jl:1\n\
    in expression starting at /tmp/tmpdvak_tix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = sum(guess == game[i])\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of matches between\
    \ two vectors of equal length. \nThe function should take two vectors of equal\
    \ length as input, and return an integer denoting the number of matches.\nThe\
    \ function should return -1 if the two vectors are of different lengths.\nThe\
    \ function should return 0 if the two vectors are of equal length, and 1 otherwise.\n\
    The function should return an error if the two vectors are of different lengths.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuvd9g53.jl:30\nin expression starting at\
    \ /tmp/tmptuvd9g53.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg82qz0rm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg82qz0rm.jl:1\n\
    in expression starting at /tmp/tmpg82qz0rm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.5>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a vector of scores and a vector\
    \ of guesses and returns a vector of how far off each guess was. \nThe function\
    \ should return an array of length equal to the length of the guesses vector,\
    \ where each element is the absolute difference between the guess and the score.\n\
    The function should also return an array of the same length as the guesses vector,\
    \ where each element is the absolute difference between the guess and the score.\n\
    The function should return an array of the same length as the guesses vector,\
    \ where each element is the absolute difference between the guess and the score.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm9v1nxk.jl:30\nin expression starting at\
    \ /tmp/tmpxm9v1nxk.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    for i = 1:length(guess)\n     \
    \   guesses[i] = guess[i]\n    end\n    scores = zeros(length(game), 1) \n   \
    \ for i = 1:length(game)\n        scores[i] = game[i]\n    end\n    \n    guesses_sorted\
    \ = sort(guesses)\n    scores_sorted = sort(scores)\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwkg2vzq3.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkg2vzq3.jl:1\n\
    in expression starting at /tmp/tmpwkg2vzq3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess))\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take two vectors of integers and\
    \ return a new vector of the same length\ndenoting how far off each guess was.\
    \ If they have guessed correctly, the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakcpwoxs.jl:30\nin expression starting at\
    \ /tmp/tmpakcpwoxs.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.5>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of scores and a vector\
    \ of guesses and returns a vector of how far off each guess was. Your function\
    \ should return an array of length equal to the length of guesses, where each\
    \ element is the absolute difference between the guess and the score.\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6v9ul06t.jl:30\nin expression starting at\
    \ /tmp/tmp6v9ul06t.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2nfyerl2.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2nfyerl2.jl:1\n\
    in expression starting at /tmp/tmp2nfyerl2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        \n        if guess[i] == game[i]\n\
    \            diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare(game, guess)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of scores and a vector of guesses and returns the number of matches.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp1wsqep.jl:35\nin expression starting at\
    \ /tmp/tmppp1wsqep.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg82qz0rm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg82qz0rm.jl:1\n\
    in expression starting at /tmp/tmpg82qz0rm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[1:length(guesses)]\n    scores =\
    \ scores[1:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n \
    \   scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = scores[2:length(scores)]\n    \n    guesses = guesses[2:length(guesses)]\n\
    \    scores = \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4cu1msbj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4cu1msbj.jl:1\n\
    in expression starting at /tmp/tmp4cu1msbj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = length(guess)\n    scores = length(game)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3p92qkz9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3p92qkz9.jl:1\n\
    in expression starting at /tmp/tmp3p92qkz9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), length(game))\n    \n    for i =\
    \ 1:length(guess)\n        guesses[i, :] = guess[i]\n    end\n    \n    for i\
    \ = 1:length(game)\n        guesses[:, i] = guesses[:, i] - game[i]\n    end\n\
    \    \n    guesses = guesses - maximum(guesses)\n    \n    return guesses\nend\n\
    </cell>\n<code language=julia-1.0>\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2])\n</cell>\n<code language=julia-1.0>\ncompare([0, 5, 0, 0, 0, 4], [4, 1,\
    \ 1, 0, 0, -2])\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ in a vector of scores and a vector of guesses, and will return the number of\
    \ correct guesses.\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6zhmsmn.jl:33\nin expression starting at\
    \ /tmp/tmpo6zhmsmn.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores = sort(scores)\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesse\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(guesses .. guesses)..\"\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpr_xrwhha.jl:31\nin expression starting at /tmp/tmpr_xrwhha.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3fdtevss.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fdtevss.jl:1\n\
    in expression starting at /tmp/tmp3fdtevss.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    guesses = sort(guesses)\n    scores = sort(scores)\n    \n    guesses\
    \ = guesses[guesses..end]\n    scores = scores[scores..end]\n    \n    guesses\
    \ = guesses..guesses.end\n    scores = scores..scores.end\n    \n    guesses =\
    \ guesses..guesses.end\n    scores = scores..scores.end\n    \n    guesses = guesses..guesses.end\n\
    \    scores = scores..scores.end\n    \n    guesses = guesses..guesses.end\n \
    \   scores = scores..scores.end\n    \n    guesses = guesses..guesses.end\n  \
    \  scores = scores..scores.end\n    \n    guesses = guesses..guesses.end\n   \
    \ scores = scores..scores.end\n    \n    guesses = guesses..guesses.end\n    scores\
    \ = scores..scores.end\n    \n    guesses = guesses..guesses.end\n    scores =\
    \ scores..scores.end\n    \n    guesses = guesses..guesses.end\n    scores = scores..scores.end\n\
    \    \n    guesses = guesses..guesses.end\n    scores = scores..scores.end\n \
    \   \n    guesses = guesses..guesses.end\n    scores = scores..scores.end\n  \
    \  \n    guesses = guesses..guesses.end\n    scores = scores..scores.end\n   \
    \ \n    guesses = guesses..guesses.end\n    scores = scores..scores.end\n    \n\
    \    guesses = guesses..guesses.end\n    scores = scores..scores.end\n    \n \
    \   guesses = guesses..guesses.end\n    scores = scores..scores.end\n    \n  \
    \  guesses = guesses..guesses.end\n    scores = scores..scores.end\n    \n   \
    \ guesses = guesses..guesses.end\n    scores = scores..scores.end\n    \n    guesses\
    \ = guesses..guesses.end\n    scores = scores..scores.end\n    \n    guesses =\
    \ guesses..guesses.end\n    scores = scores..scores.end\n    \n    guesses = guesses..guesses.end\n\
    \    scores = scores..scores.end\n    \n    guesses = guesses..\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp17po0akg.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp17po0akg.jl:1\n\
    in expression starting at /tmp/tmp17po0akg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        diff[i] = abs(guess[i] - game[i])\n\
    \    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n</cell>\n<text>\nExercise: Write a function\
    \ that will take a vector of scores and a vector of guesses and return the number\
    \ of matches.\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_0cb598.jl:30\nin expression starting at\
    \ /tmp/tmp6_0cb598.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(game))\n    \n    for i = 1:length(guess)\n\
    \        guesses[i] = guess[i] - game[i]\n    end\n    \n    return guesses\n\
    end\n</cell>\n<code language=julia-1.5>\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0, 5, 0, 0, 0, 4],\
    \ [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of matches between two vectors of equal length. \n    \n    \n  \
    \  example:\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vzckxv0.jl:27\nin expression starting at\
    \ /tmp/tmp8vzckxv0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort!()\n    scores.sort!()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh3ptjbc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh3ptjbc.jl:1\n\
    in expression starting at /tmp/tmpxh3ptjbc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        diff[i] = abs(guess[i] - game[i])\n\
    \    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n# test\
    \ your code\n@test compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n@test compare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of matches between two given vectors of scores and guesses.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndi2kvhc.jl:30\nin expression starting at\
    \ /tmp/tmpndi2kvhc.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n \
    \   scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdkyw3613.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdkyw3613.jl:1\n\
    in expression starting at /tmp/tmpdkyw3613.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = guesses./sum(guesses)\n\
    \    scores = scores./sum(scores)\n    \n    diff = guesses - scores\n    \n \
    \   diff = abs.(diff)\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes as input a vector of scores and a vector of guesses, and\
    \ returns the number of matches.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpskpnmmr3.jl:36\nin expression starting at\
    \ /tmp/tmpskpnmmr3.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ length(guess)\n    scores = length(game)\n    \n    guesses_correct = 0\n  \
    \  \n    for i = 1:guesses\n        if guess[i] == game[i]\n            guesses_correct\
    \ += 1\n        end\n    end\n    \n    guesses_correct = guesses_correct / guesses\n\
    \    \n    return guesses_correct\nend\n</cell>\n<code language=julia-1.5>\nguesses\
    \ = compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    guesses\n</cell>\n<code language=julia-1.5>\n@assert guesses == [0, 0, 0, 0, 3,\
    \ 3]\n</cell>\n<text>\nExercise: Write a function that returns the number of matches\
    \ between two vectors of equal length. \n    \n    \n    example:\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g71l73v.jl:37\nin expression starting at\
    \ /tmp/tmp0g71l73v.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee4f84kt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee4f84kt.jl:1\n\
    in expression starting at /tmp/tmpee4f84kt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ length(guess)\n    scores = length(game)\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphkxdooul.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphkxdooul.jl:1\n\
    in expression starting at /tmp/tmphkxdooul.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ length(guess)\n    scores = length(game)\n    \n    guesses_correct = 0\n  \
    \  \n    for i = 1:guesses\n        if guess[i] == game[i]\n            guesses_correct\
    \ += 1\n        end\n    end\n    \n    guesses_correct = guesses_correct / guesses\n\
    \    \n    return guesses_correct\nend\n</cell>\n<code language=julia-1.5>\nguesses_correct\
    \ = compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    guesses_correct\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoeomlzc7.jl:37\nin expression starting at\
    \ /tmp/tmpoeomlzc7.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    guesses_sorted = sort(guesses)\n    scores_sorted = sort(scores)\n\
    \    \n    guesses_index = guesses_sorted.index\n    scores_index = scores_sorted.index\n\
    \    \n    guesses_index2 = guesses_index + 1\n    scores_index2 = scores_index\
    \ + 1\n    \n    guesses_index3 = guesses_index2 + 1\n    scores_index3 = scores_index2\
    \ + 1\n    \n    guesses_index4 = guesses_index3 + 1\n    scores_index4 = scores_index3\
    \ + 1\n    \n    guesses_index5 = guesses_index4 + 1\n    scores_index5 = scores_index4\
    \ + 1\n    \n    guesses_index6 = guesses_index5 + 1\n    scores_index6 = scores_index5\
    \ + 1\n    \n    guesses_index7 = guesses_index6 + 1\n    scores_index7 = scores_index6\
    \ + 1\n    \n    guesses_index8 = guesses_index7 + 1\n    scores_index8 = scores_index7\
    \ + 1\n    \n    guesses_index9 = guesses_index8 + 1\n    scores_index9 = scores_index8\
    \ + 1\n    \n    guesses_index10 = guesses_index9 + 1\n    scores_index10 = scores_index9\
    \ + 1\n    \n    guesses_index11 = guesses_index10 + 1\n    scores_index11 = scores_index10\
    \ + 1\n    \n    guesses_index12 = guesses_index11 + 1\n    scores_index12 = scores_index11\
    \ + 1\n    \n    guesses_index13 = guesses_index12 + 1\n    scores_index13 = scores_index12\
    \ + 1\n    \n    guesses_index14 = guesses_index13 + 1\n    scores_index14 = scores_index13\
    \ + 1\n    \n    guesses_index15 = guesses_index14 + 1\n    scores_index15 = scores_index14\
    \ + 1\n    \n    guesses_index16 = guesses_index15 + 1\n    scores_index16 = scores_index15\
    \ + 1\n    \n    guesses_index17 = guesses_index16 + 1\n    scores_index17 = scores_index16\
    \ + 1\n    \n    guesses_index18 = guesses_index17 + 1\n    scores_index18 = scores_index17\
    \ + 1\n    \n    guesses_index19 = guesses_index18 + 1\n    scores_index19 = scores_index18\
    \ + 1\n    \n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuw3zweri.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuw3zweri.jl:1\n\
    in expression starting at /tmp/tmpuw3zweri.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses\n\
    \    scores = scores..scores..scores..scores..scores..scores\n    \n    guesses\
    \ = sort(guesses)\n    scores = sort(scores)\n    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses\n\
    \    scores = scores..scores..scores..scores..scores..scores\n    \n    guesses\
    \ = guesses..guesses..guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses\n  \
    \  scores = scores..scores..scores..scores..scores..scores\n    \n    guesses\
    \ = guesses..guesses..guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses\n  \
    \  scores = scores..scores..scores..scores..scores..scores\n    \n    guesses\
    \ = guesses..guesses..guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses\n  \
    \  scores = scores..scores..scores..scores..scores..scores\n    \n    guesses\
    \ = guesses..guesses..guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses\n  \
    \  scores = scores..scores..scores..scores..scores..scores\n    \n    guesses\
    \ = guesses..guesses..guesses..guesses..guesses..gues\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpj9hr5mu8.jl:17 expected\
    \ \"end\", got \"..\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj9hr5mu8.jl:25\n\
    in expression starting at /tmp/tmpj9hr5mu8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2nfyerl2.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2nfyerl2.jl:1\n\
    in expression starting at /tmp/tmp2nfyerl2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess),\
    \ length(game))\n    for i = 1:length(guess)\n        for j = 1:length(game)\n\
    \            if guess[i] == game[j]\n                diff[i,j] = 0\n         \
    \   else\n                diff[i,j] = abs(guess[i] - game[j])\n            end\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a vector of scores and a vector of guesses, and returns\
    \ a vector of how far off each guess was. \nThe function should return an array\
    \ of length equal to the length of the guesses vector, where each element is the\
    \ absolute difference between the guess and the score.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupghpml1.jl:34\nin expression starting at\
    \ /tmp/tmpupghpml1.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ length(guess)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8v35a6y7.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8v35a6y7.jl:1\n\
    in expression starting at /tmp/tmp8v35a6y7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort!()\n    scores.sort!()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh3ptjbc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh3ptjbc.jl:1\n\
    in expression starting at /tmp/tmpxh3ptjbc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess)) \n    \n    for i = 1:length(guess)\n\
    \        guesses[i] = guess[i] - game[i]\n    end\n    \n    guesses = guesses[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < length(game)]\n    \n    guesses\
    \ = guesses[guesses != 0]\n    \n    return guesses\nend\n</cell>\n<code language=julia-1.5>\n\
    compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\ncompare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.5>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,4,2,-2])\n\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t\
    @test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\
    \t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\
    \t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucyt0q5e.jl:33\nin expression starting at\
    \ /tmp/tmpucyt0q5e.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-2]\n    scores = scores[guesses..end-2]\n\
    \    \n    guesses = guesses[guesses..end-3]\n    scores = scores[guesses..end-3]\n\
    \    \n    guesses = guesses[guesses..end-4]\n    scores = scores[guesses..end-4]\n\
    \    \n    guesses = guesses[guesses..end-5]\n    scores = scores[guesses..end-5]\n\
    \    \n    guesses = guesses[guesses..end-6]\n    scores = scores[guesses..end-6]\n\
    \    \n    guesses = guesses[guesses..end-7]\n    scores = scores[guesses..end-7]\n\
    \    \n    guesses = guesses[guesses..end-8]\n    scores = scores[guesses..end-8]\n\
    \    \n    guesses = guesses[guesses..end-9]\n    scores = scores[guesses..end-9]\n\
    \    \n    guesses = guesses[guesses..end-10]\n    scores = scores[guesses..end-10]\n\
    \    \n    guesses = guesses[guesses..end-11]\n    scores = scores[guesses..end-11]\n\
    \    \n    guesses = guesses[guesses..end-12]\n    scores = scores[guesses..end-12]\n\
    \    \n    guesses = guesses[guesses..end-13]\n    scores = scores[guesses..end-13]\n\
    \    \n    guesses = guesses[guesses..end-14]\n    scores = scores[guesses..end-14]\n\
    \    \n    guesses = guesses[guesses..end-15]\n    scores = scores[guesses..end-15]\n\
    \    \n    guesses = guesses[guesses..end-16]\n    scores = scores[guesses..end-16]\n\
    \    \n    guesses = guesses[guesses..end-17]\n    scores = scores[guesses..\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10q1t8qv.jl:1\nin expression starting at /tmp/tmp10q1t8qv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    guess = guess[guess[2]\
    \ .== 0]\n    game = game[game[2] .== 0]\n    guess = guess[guess[1] .== 0]\n\
    \    game = game[game[1] .== 0]\n    guess = guess[guess[1] .!= 0]\n    game =\
    \ game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game = game[game[1]\
    \ .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n\
    \    guess = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n    guess\
    \ = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n    guess = guess[guess[1]\
    \ .!= 0]\n    game = game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n\
    \    game = game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game =\
    \ game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game = game[game[1]\
    \ .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n\
    \    guess = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n    guess\
    \ = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n    guess = guess[guess[1]\
    \ .!= 0]\n    game = game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n\
    \    game = game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game =\
    \ game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game = game[game[1]\
    \ .!= 0]\n    guess = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n\
    \    guess = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n    guess\
    \ = guess[guess[1] .!= 0]\n    game = game[game[1] .!= 0]\n    guess = guess[guess[1]\
    \ .!= 0]\n    game = game[game[1] .!= 0]\n    guess = guess[guess[1] .!= 0]\n\
    \    game\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpieohjf_r.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpieohjf_r.jl:1\n\
    in expression starting at /tmp/tmpieohjf_r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n\
    \        guesses[i] = guess[i]\n    end\n    \n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(game)\n        scores[i] = game[i]\n    end\n\
    \    \n    guesses = guesses./sum(guesses)\n    scores = scores./sum(scores)\n\
    \    \n    diff = guesses - scores\n    \n    diff = abs.(diff)\n    \n    return\
    \ diff\nend\n</cell>\n<code language=julia-1.5>\n@time compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    </cell>\n<code language=julia-1.5>\n@time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of matches\
    \ between two vectors of equal length. \n    \n    \n    example:\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x4tgh_i.jl:40\nin expression starting at\
    \ /tmp/tmp_x4tgh_i.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort!()\n    scores.sort!()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh3ptjbc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh3ptjbc.jl:1\n\
    in expression starting at /tmp/tmpxh3ptjbc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        guesses[i] = guess[i] - game[i]\n\
    \    end\n    \n    return guesses\nend\n</cell>\n<code language=julia-1.0>\n\
    @time compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of scores and a vector of guesses, and returns\
    \ the number of correct guesses.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdeku1iwc.jl:29\nin expression starting at\
    \ /tmp/tmpdeku1iwc.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game), 1)\n\
    \    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n        scores[i]\
    \ = game[i]\n    end\n    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..gues\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpi6er1hmi.jl:17 expected\
    \ \"end\", got \"..\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6er1hmi.jl:26\n\
    in expression starting at /tmp/tmpi6er1hmi.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@test compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    </cell>\n<code language=julia-1.0>\n@test compare([0, 5, 0, 0, 0, 4], [4, 1, 1,\
    \ 0, 0, -2])\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of matches between two vectors of equal length. \n    \n    \n    example:\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfm1sbs5.jl:30\nin expression starting at\
    \ /tmp/tmphfm1sbs5.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.5>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of scores and a vector\
    \ of guesses, and returns a vector of how far off each guess was. \nThe function\
    \ should return an array of length length(guesses), where each element is the\
    \ absolute difference between the guess and the score.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwglm3072.jl:30\nin expression starting at\
    \ /tmp/tmpwglm3072.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7ejtem1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy7ejtem1.jl:1\n\
    in expression starting at /tmp/tmpy7ejtem1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort!()\n    scores.sort!()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh3ptjbc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh3ptjbc.jl:1\n\
    in expression starting at /tmp/tmpxh3ptjbc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = sort(guesses)\n    scores\
    \ = sort(scores)\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n\
    \    \n    guesses = guesses[guesses < length(game)]\n    scores = scores[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses == length(game)]\n    scores\
    \ = scores[guesses == length(game)]\n    \n    guesses = guesses[guesses != 0]\n\
    \    scores = scores[guesses != 0]\n    \n    guesses = guesses[guesses > 0]\n\
    \    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses < length(game)]\n\
    \    scores = scores[guesses < length(game)]\n    \n    guesses = guesses[guesses\
    \ == length(game)]\n    scores = scores[guesses == length(game)]\n    \n    guesses\
    \ = guesses[guesses != 0]\n    scores = scores[guesses != 0]\n    \n    guesses\
    \ = guesses[guesses > 0]\n    scores = scores[guesses > 0]\n    \n    guesses\
    \ = guesses[guesses < length(game)]\n    scores = scores[guesses < length(game)]\n\
    \    \n    guesses = guesses[guesses == length(game)]\n    scores = scores[guesses\
    \ == length(game)]\n    \n    guesses = guesses[guesses != 0]\n    scores = scores[guesses\
    \ != 0]\n    \n    guesses = guesses[guesses > 0]\n    scores = scores[guesses\
    \ > 0]\n    \n    guesses = guesses[guesses < length(game)]\n    scores = scores[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses == length(game)]\n    scores\
    \ = scores[guesses == length(game)]\n    \n    guesses = guesses[guesses != 0]\n\
    \    scores = scores[guesses != 0]\n    \n    guesses = guesses[guesses > 0]\n\
    \    scores = scores[guesses > 0]\n    \n    guesses = guesses[guesses < length(game)]\n\
    \    scores = scores[guesses < length(game)]\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4sx3tu01.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4sx3tu01.jl:1\n\
    in expression starting at /tmp/tmp4sx3tu01.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        \n        if guess[i] == game[i]\n\
    \            diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @test compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.5>\n\
    @test compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nExercise:\
    \ Write a function that will return the number of matches between two vectors\
    \ of equal length. \n    \n    \n    example:\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12_jvlt3.jl:35\nin expression starting at\
    \ /tmp/tmp12_jvlt3.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdd1a232j.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdd1a232j.jl:1\n\
    in expression starting at /tmp/tmpdd1a232j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses = guesses[:]\n    scores = scores[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnp5kk05l.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnp5kk05l.jl:1\n\
    in expression starting at /tmp/tmpnp5kk05l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = guesses./sum(guesses)\n\
    \    scores = scores./sum(scores)\n    \n    guesses = guesses.*length(game)\n\
    \    scores = scores.*length(game)\n    \n    guesses = sum(guesses, 2)\n    scores\
    \ = sum(scores, 2)\n    \n    guesses = guesses./length(guesses)\n    scores =\
    \ scores./length(scores)\n    \n    guesses = guesses.*length(game)\n    scores\
    \ = scores.*length(game)\n    \n    guesses = sum(guesses, 1)\n    scores = sum(scores,\
    \ 1)\n    \n    guesses = guesses./length(guesses)\n    scores = scores./length(scores)\n\
    \    \n    guesses = guesses.*length(game)\n    scores = scores.*length(game)\n\
    \    \n    guesses = sum(guesses, 1)\n    scores = sum(scores, 1)\n    \n    guesses\
    \ = guesses./length(guesses)\n    scores = scores./length(scores)\n    \n    guesses\
    \ = guesses.*length(game)\n    scores = scores.*length(game)\n    \n    guesses\
    \ = sum(guesses, 1)\n    scores = sum(scores, 1)\n    \n    guesses = guesses./length(guesses)\n\
    \    scores = scores./length(scores)\n    \n    guesses = guesses.*length(game)\n\
    \    scores = scores.*length(game)\n    \n    guesses = sum(guesses, 1)\n    scores\
    \ = sum(scores, 1)\n    \n    guesses = guesses./length(guesses)\n    scores =\
    \ scores./length(scores)\n    \n    guesses = guesses.*length(game)\n    scores\
    \ = scores.*length(game)\n    \n    guesses = sum(guesses, 1)\n    scores = sum(scores,\
    \ 1)\n    \n    guesses = guesses./length(guesses)\n    scores = scores./length(scores)\n\
    \    \n    guesses = guesses.*length(game)\n    scores = scores.*length(game)\n\
    \    \n    guesses = sum(guesses, 1)\n    scores = sum(scores, 1)\n    \n    guesses\
    \ = guesses./length(guesses)\n    scores = scores./length(scores)\n    \n    guesses\
    \ = guesses.*length(game)\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzbxl0rvw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzbxl0rvw.jl:1\n\
    in expression starting at /tmp/tmpzbxl0rvw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = guesses[guesses > 0]\n \
    \   scores = scores[scores > 0]\n    \n    guesses = guesses[guesses != 0]\n \
    \   scores = scores[scores != 0]\n    \n    guesses = guesses./length(guesses)\n\
    \    scores = scores./length(scores)\n    \n    guesses = guesses.*scores\n  \
    \  \n    guesses = guesses.+scores\n    \n    guesses = guesses./length(guesses)\n\
    \    \n    return guesses\nend\n</cell>\n<code language=julia-1.5>\ncompare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0,\
    \ 5, 0, 0, 0, 4\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp072jqdx2.jl:44\nin expression starting at\
    \ /tmp/tmp072jqdx2.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    guesses = sort(guesses)\n    scores = sort(scores)\n    \n    guesses\
    \ = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = guesses..guesses..guesses..guesses\n    scores = scores..scores..scores..scores\n\
    \    \n    guesses = gues\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpxbigovdw.jl:17 expected\
    \ \"end\", got \"..\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxbigovdw.jl:25\n\
    in expression starting at /tmp/tmpxbigovdw.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppd430n94.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppd430n94.jl:1\n\
    in expression starting at /tmp/tmppd430n94.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0zx0rpt9.jl:17 expected\
    \ \"end\", got \"..\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zx0rpt9.jl:27\n\
    in expression starting at /tmp/tmp0zx0rpt9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqyly6krw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyly6krw.jl:1\n\
    in expression starting at /tmp/tmpqyly6krw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqyly6krw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyly6krw.jl:1\n\
    in expression starting at /tmp/tmpqyly6krw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted =\
    \ scores[:]\n    \n    guesses_sorted.reverse()\n    scores_sorted.reverse()\n\
    \    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted\
    \ = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted\
    \ .!= 0]\n    scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_sorted = guesses_sorted[guesses_sorted .!= 0]\n  \
    \  scores_sorted = scores_sorted[scores_sorted .!= 0]\n    \n    guesses_sorted\
    \ = guesses_sorted[guesses_sorted .!= 0]\n    scores_sorted = scores_sorted[scores_sorted\
    \ .!= 0]\n    \n    guesses_\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfwobwqrs.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwobwqrs.jl:1\n\
    in expression starting at /tmp/tmpfwobwqrs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg82qz0rm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg82qz0rm.jl:1\n\
    in expression starting at /tmp/tmpg82qz0rm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort()\n    scores.sort()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdvak_tix.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvak_tix.jl:1\n\
    in expression starting at /tmp/tmpdvak_tix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(game))\n    \n    for i = 1:length(guess)\n\
    \        guesses[i] = guess[i]\n    end\n    \n    guesses = sort(guesses)\n \
    \   \n    guesses = guesses[guesses > 0]\n    \n    guesses = guesses[guesses\
    \ < length(game)]\n    \n    guesses = guesses[guesses != 0]\n    \n    guesses\
    \ = guesses[guesses != length(game)]\n    \n    guesses = guesses[guesses != length(guesses)]\n\
    \    \n    guesses = guesses[guesses != length(guesses)]\n    \n    guesses =\
    \ guesses[guesses != length(guesses)]\n    \n    guesses = guesses[guesses !=\
    \ length(guesses)]\n    \n    guesses = guesses[guesses != length(guesses)]\n\
    \    \n    guesses = guesses[guesses != length(guesses)]\n    \n    guesses =\
    \ guesses[guesses != length(guesses)]\n    \n    guesses = guesses[guesses !=\
    \ length(guesses)]\n    \n    guesses = guesses[guesses != length(guesses)]\n\
    \    \n    guesses = guesses[guesses != length(guesses)]\n    \n    guesses =\
    \ guesses[guesses != length(guesses)]\n    \n    guesses = guesses[guesses !=\
    \ length(guesses)]\n    \n    guesses = guesses[guesses != length(guesses)]\n\
    \    \n    guesses = guesses[guesses != length(guesses)]\n    \n    guesses =\
    \ guesses[guesses != length(guesses)]\n    \n    guesses = guesses[guesses !=\
    \ length(guesses)]\n    \n    guesses = guesses[guesses != length(guesses)]\n\
    \    \n    guesses = guesses[guesses != length(guesses)]\n    \n    guesses =\
    \ guesses[guesses != length(guesses)]\n    \n    guesses = guesses[guesses !=\
    \ length(guesses)]\n    \n    guesses = guesses[guesses != length(guesses)]\n\
    \    \n    guesses = guesses[guesses != length(guesses)]\n    \n    guesses =\
    \ guesses[guesses != length(guesses)]\n    \n    guesses = guesses[guesses !=\
    \ length(guesses)]\n    \n    gues\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyivxz10r.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyivxz10r.jl:1\n\
    in expression starting at /tmp/tmpyivxz10r.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code\
    \ language=julia-1.5>\ncompare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<text>\n\
    Exercise: Write a function that takes in two vectors of scores and guesses of\
    \ equal length and returns the number of correct guesses.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_6rok0v.jl:30\nin expression starting at\
    \ /tmp/tmps_6rok0v.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7ejtem1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy7ejtem1.jl:1\n\
    in expression starting at /tmp/tmpy7ejtem1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = zeros(length(guess), 1)\n    scores = zeros(length(game),\
    \ 1)\n    \n    for i = 1:length(guess)\n        guesses[i] = guess[i]\n     \
    \   scores[i] = game[i]\n    end\n    \n    guesses = guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses..guesses.\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0zx0rpt9.jl:17 expected\
    \ \"end\", got \"..\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0zx0rpt9.jl:27\n\
    in expression starting at /tmp/tmp0zx0rpt9.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guess = sort(guess)\n    game = sort(game)\n    guess = guess[guess[2:end]\
    \ .== game[2:end]]\n    game = game[guess[2:end] .== guess[2:end]]\n    guess\
    \ = guess[guess[2:end] .== game[2:end]]\n    game = game[guess[2:end] .== guess[2:end]]\n\
    \    guess = guess[guess[2:end] .== game[2:end]]\n    game = game[guess[2:end]\
    \ .== guess[2:end]]\n    guess = guess[guess[2:end] .== game[2:end]]\n    game\
    \ = game[guess[2:end] .== guess[2:end]]\n    guess = guess[guess[2:end] .== game[2:end]]\n\
    \    game = game[guess[2:end] .== guess[2:end]]\n    guess = guess[guess[2:end]\
    \ .== game[2:end]]\n    game = game[guess[2:end] .== guess[2:end]]\n    guess\
    \ = guess[guess[2:end] .== game[2:end]]\n    game = game[guess[2:end] .== guess[2:end]]\n\
    \    guess = guess[guess[2:end] .== game[2:end]]\n    game = game[guess[2:end]\
    \ .== guess[2:end]]\n    guess = guess[guess[2:end] .== game[2:end]]\n    game\
    \ = game[guess[2:end] .== guess[2:end]]\n    guess = guess[guess[2:end] .== game[2:end]]\n\
    \    game = game[guess[2:end] .== guess[2:end]]\n    guess = guess[guess[2:end]\
    \ .== game[2:end]]\n    game = game[guess[2:end] .== guess[2:end]]\n    guess\
    \ = guess[guess[2:end] .== game[2:end]]\n    game = game[guess[2:end] .== guess[2:end]]\n\
    \    guess = guess[guess[2:end] .== game[2:end]]\n    game = game[guess[2:end]\
    \ .== guess[2:end]]\n    guess = guess[guess[2:end] .== game[2:end]]\n    game\
    \ = game[guess[2:end] .== guess[2:end]]\n    guess = guess[guess[2:\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7w_r06z5.jl:49\nin expression starting at\
    \ /tmp/tmp7w_r06z5.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        diff[i] = abs(guess[i] - game[i])\n\
    \    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of scores and a vector of guesses and returns a vector of\
    \ how far off each guess was. \n    \n    \n    example:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4_gllp9.jl:30\nin expression starting at\
    \ /tmp/tmpr4_gllp9.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted\
    \ = scores[:]\n    \n    guesses_sorted.sort!()\n    scores_sorted.sort!()\n \
    \   \n    guesses_sorted = guesses[:]\n    scores_sorted = scores[:]\n    \n \
    \   guesses_sorted.sort!()\n    scores_sorted.sort!()\n    \n    guesses_sorted\
    \ = guesses[:]\n    scores_sorted = scores[:]\n    \n    guesses_sorted.sort!()\n\
    \    scores_sorted.sort!()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted\
    \ = scores[:]\n    \n    guesses_sorted.sort!()\n    scores_sorted.sort!()\n \
    \   \n    guesses_sorted = guesses[:]\n    scores_sorted = scores[:]\n    \n \
    \   guesses_sorted.sort!()\n    scores_sorted.sort!()\n    \n    guesses_sorted\
    \ = guesses[:]\n    scores_sorted = scores[:]\n    \n    guesses_sorted.sort!()\n\
    \    scores_sorted.sort!()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted\
    \ = scores[:]\n    \n    guesses_sorted.sort!()\n    scores_sorted.sort!()\n \
    \   \n    guesses_sorted = guesses[:]\n    scores_sorted = scores[:]\n    \n \
    \   guesses_sorted.sort!()\n    scores_sorted.sort!()\n    \n    guesses_sorted\
    \ = guesses[:]\n    scores_sorted = scores[:]\n    \n    guesses_sorted.sort!()\n\
    \    scores_sorted.sort!()\n    \n    guesses_sorted = guesses[:]\n    scores_sorted\
    \ = scores[:]\n    \n    guesses_sorted.sort!()\n    scores_sorted.sort!()\n \
    \   \n    guesses_sorted = guesses[:]\n    scores_sorted = scores[:]\n    \n \
    \   guesses_sorted.sort!()\n    scores_sorted.sort!()\n    \n    guesses_sorted\
    \ = guesses[:]\n    scores_sorted = scores[:]\n    \n    guesses_sorted.sort!()\n\
    \    scores_sorted.sort!()\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsals9wnc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsals9wnc.jl:1\n\
    in expression starting at /tmp/tmpsals9wnc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        \n        if guess[i] == game[i]\n\
    \            diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of scores and a vector of guesses and returns\
    \ the number of matches.\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gk00eq7.jl:35\nin expression starting at\
    \ /tmp/tmp1gk00eq7.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses.sort!()\n    scores.sort!()\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n\
    \    scores = scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores =\
    \ scores[2:end]\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n    \n    guesses\
    \ = guesses[2:end]\n    scores = scores\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxvw6ko9a.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxvw6ko9a.jl:1\n\
    in expression starting at /tmp/tmpxvw6ko9a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    guesses =\
    \ zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        guesses[i]\
    \ = guess[i] - game[i]\n    end\n    \n    return guesses\nend\n</cell>\n<code\
    \ language=julia-1.5>\nguesses = compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.5>\nguesses\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s_4a94m.jl:30\nin expression starting at\
    \ /tmp/tmp9s_4a94m.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort()\n\
    \    scores.sort()\n    \n    guesses = guesses[2:end]\n    scores = scores[2:end]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \    \n    guesses = guesses[guesses..end-1]\n    scores = scores[guesses..end-1]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdd1a232j.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdd1a232j.jl:1\n\
    in expression starting at /tmp/tmpdd1a232j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7pve766.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7pve766.jl:1\n\
    in expression starting at /tmp/tmpu7pve766.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort!()\n    scores.sort!()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh3ptjbc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh3ptjbc.jl:1\n\
    in expression starting at /tmp/tmpxh3ptjbc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n   \
    \ \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    guesses.reverse!()\n    scores.reverse!()\n\
    \    \n    guesses.reverse!()\n    scores.reverse!()\n    \n    guesses.reverse!()\n\
    \    scores.reverse!()\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmlmrqqu8.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmlmrqqu8.jl:1\n\
    in expression starting at /tmp/tmpmlmrqqu8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqyly6krw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyly6krw.jl:1\n\
    in expression starting at /tmp/tmpqyly6krw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = zeros(length(guess), length(game))\n    for i = 1:length(guess)\n\
    \        guesses[i, :] = guess[i] - game\n    end\n    return guesses\nend\n</cell>\n\
    <code language=julia-1.0>\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    </cell>\n<code language=julia-1.0>\ncompare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0,\
    \ -2])\n</cell>\n<text>\nExercise: Write a function that calculates the number\
    \ of matches between two vectors of equal length. \n    Your function should take\
    \ two vectors of equal length and return an integer denoting the number of matches.\n\
    \    \n    \n    example:\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj3wggd4.jl:24\nin expression starting at\
    \ /tmp/tmpmj3wggd4.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    \n    guess = sort(guess)\n    game = sort(game)\n    \n    diff = zeros(length(guess))\n\
    \    \n    for i = 1:length(guess)\n        if guess[i] == game[i]\n         \
    \   diff[i] = 0\n        else\n            diff[i] = abs(guess[i] - game[i])\n\
    \        end\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.5>\n\
    @time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.5>\n\
    @time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes in two vectors of scores and guesses of equal length,\
    \ and returns the number of matches.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpff_jpz.jl:34\nin expression starting at\
    \ /tmp/tmpfpff_jpz.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    \    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n\
    \    [4, 4, 1, 0, 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
    \ \n    guesses = guess[:]\n    scores = game[:]\n    \n    guesses.sort!()\n\
    \    scores.sort!()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg82qz0rm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg82qz0rm.jl:1\n\
    in expression starting at /tmp/tmpg82qz0rm.jl:1\n"
  stdout: ''
